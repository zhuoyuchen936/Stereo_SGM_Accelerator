//---------------------------------------------------------------------
//               Copyright(c) Synopsys, Inc.                           
//     All Rights reserved - Unpublished -rights reserved under        
//     the Copyright laws of the United States of America.             
//                                                                     
//  U.S. Patents: 7,093,156 B1 and 7,406,620 B2 (and more pending).    
//                                                                     
//  This file includes the Confidential information of Synopsys, Inc.  
//  and Huali.                                                         
//  The receiver of this Confidential Information shall not disclose   
//  it to any third party and shall protect its confidentiality by     
//  using the same degree of care, but not less than a reasonable      
//  degree of care, as the receiver uses to protect receiver's own     
//  Confidential Information.                                          
//  Licensee acknowledges and agrees that all output generated for     
//  Licensee by Synopsys, Inc. as described in the pertinent Program   
//  Schedule(s), or generated by Licensee through use of any Compiler  
//  licensed hereunder contains information that complies with the     
//  Virtual Component Identification Physical Tagging Standard (VCID)  
//  as maintained by the Virtual Socket Interface Alliance (VSIA).     
//  Such information may be expressed in GDSII Layer 63 or other such  
//  layer designated by the VSIA, hardware definition languages, or    
//  other formats.  Licensee is not authorized to alter or change any  
//  such information.                                                  
//---------------------------------------------------------------------
//                                                                     
//  Built for linux64 and running on linux64.                          
//                                                                     
//  Software           : Rev: T-2022.09                                
//  Library Format     : Rev: 1.05.00                                  
//  Compiler Name      : hu40npk42p22sadsl01msa02                      
//  Platform           : Linux3.10.0-957.el7.x86_64                    
//                     : #1 SMP Thu Nov 8 23:39:32 UTC 2018x86_64      
//  Date of Generation : Fri Jan 26 19:14:08 PST 2024                  
//                                                                     
//---------------------------------------------------------------------
//   --------------------------------------------------------------     
//                       Template Revision : 4.3.2                      
//   --------------------------------------------------------------     
//                      * Synchronous, 2-Port SRAM *                  
//                    * Verilog Behavioral/RTL Model *                
//                THIS IS A SYNCHRONOUS 2-PORT MEMORY MODEL           
//                                                                    
//   Memory Name:SRAMDP_1920x32                                       
//   Memory Size:1920 words x 32 bits                                 
//                                                                    
//                               PORT NAME                            
//                               ---------                            
//               Output Ports                                         
//                                   QA[31:0]                         
//                                   QPA[31:0]                        
//                                   SO_QA                            
//                                   SO_DA                            
//                                   SO_CNTRA                         
//                                   QB[31:0]                         
//                                   QPB[31:0]                        
//                                   SO_QB                            
//                                   SO_DB                            
//                                   SO_CNTRB                         
//               Input Ports:                                         
//                                   ADRA[10:0]                       
//                                   DA[31:0]                         
//                                   WEA                              
//                                   MEA                              
//                                   CLKA                             
//                                   TADRA[10:0]                      
//                                   TDA[3:0]                         
//                                   TWEA                             
//                                   TMEA                             
//                                   TCLKA                            
//                                   BISTEA                           
//                                   TEST1A                           
//                                   RMEA                             
//                                   RMA[3:0]                         
//                                   CDA[3:0]                         
//                                   CAPTA                            
//                                   PIPEMEA                          
//                                   TPIPEMEA                         
//                                   TCLKEA                           
//                                   STICKYA                          
//                                   SI_QA                            
//                                   SI_DA                            
//                                   SE_QA                            
//                                   SE_INA                           
//                                   SI_CNTRA                         
//                                   DFTCLKEN                         
//                                   DFTMASK                          
//                                   LS                               
//                                   ADRB[10:0]                       
//                                   DB[31:0]                         
//                                   WEB                              
//                                   MEB                              
//                                   CLKB                             
//                                   TADRB[10:0]                      
//                                   TDB[3:0]                         
//                                   TWEB                             
//                                   TMEB                             
//                                   TCLKB                            
//                                   BISTEB                           
//                                   TEST1B                           
//                                   RMEB                             
//                                   RMB[3:0]                         
//                                   CDB[3:0]                         
//                                   CAPTB                            
//                                   PIPEMEB                          
//                                   TPIPEMEB                         
//                                   TCLKEB                           
//                                   STICKYB                          
//                                   SI_QB                            
//                                   SI_DB                            
//                                   SE_QB                            
//                                   SE_INB                           
//                                   SI_CNTRB                         
// -------------------------------------------------------------------- 
// -------------------------------------------------------------------- 
// This instance is generated with Periphery_Vt = STANDARD option.    
// -------------------------------------------------------------------- 

`resetall 
`timescale 1 ns / 1 ps 
`celldefine 
`ifdef verifault // for fault simulation purpose 
`suppress_faults 
`enable_portfaults 
`endif 

`define True    1'b1
`define False   1'b0

module SRAMDP_1920x32 ( QA, QPA, SO_QA, SO_DA, SO_CNTRA, QB, QPB, SO_QB, SO_DB, SO_CNTRB, ADRA, DA, WEA, MEA, CLKA, TADRA, TDA, TWEA, TMEA, TCLKA, BISTEA, TEST1A, RMEA, RMA, CDA, CAPTA, PIPEMEA, TPIPEMEA, TCLKEA, STICKYA, SI_QA, SI_DA, SE_QA, SE_INA, SI_CNTRA, DFTCLKEN, DFTMASK, LS, ADRB, DB, WEB, MEB, CLKB, TADRB, TDB, TWEB, TMEB, TCLKB, BISTEB, TEST1B, RMEB, RMB, CDB, CAPTB, PIPEMEB, TPIPEMEB, TCLKEB, STICKYB, SI_QB, SI_DB, SE_QB, SE_INB, SI_CNTRB);

// Input/Output Ports Declaration
output  [31:0] QA;
output  [31:0] QPA;
output SO_QA;
output SO_DA;
output SO_CNTRA;
output  [31:0] QB;
output  [31:0] QPB;
output SO_QB;
output SO_DB;
output SO_CNTRB;
input  [10:0] ADRA;
input  [31:0] DA;
input WEA;
input MEA;
input CLKA;
input  [10:0] TADRA;
input  [3:0] TDA;
input TWEA;
input TMEA;
input TCLKA;
input BISTEA;
input TEST1A;
input RMEA;
input  [3:0] RMA;
input  [3:0] CDA;
input CAPTA;
input PIPEMEA;
input TPIPEMEA;
input TCLKEA;
input STICKYA;
input SI_QA;
input SI_DA;
input SE_QA;
input SE_INA;
input SI_CNTRA;
input DFTCLKEN;
input DFTMASK;
input LS;
input  [10:0] ADRB;
input  [31:0] DB;
input WEB;
input MEB;
input CLKB;
input  [10:0] TADRB;
input  [3:0] TDB;
input TWEB;
input TMEB;
input TCLKB;
input BISTEB;
input TEST1B;
input RMEB;
input  [3:0] RMB;
input  [3:0] CDB;
input CAPTB;
input PIPEMEB;
input TPIPEMEB;
input TCLKEB;
input STICKYB;
input SI_QB;
input SI_DB;
input SE_QB;
input SE_INB;
input SI_CNTRB;

// Local registers, wires, etc
`ifdef MEM_CHECK_OFF
parameter MES_CNTRL = "OFF";
`else
parameter MES_CNTRL = "ON";
`endif
parameter MemFault_Inj = 0;

`ifndef MES_CNTRL_DEL_BEGIN
  `define MES_CNTRL_DEL_BEGIN 0
`endif

`ifndef MES_CNTRL_DEL_END
  `define MES_CNTRL_DEL_END 0
`endif
parameter MesCntrl_Begin = `MES_CNTRL_DEL_BEGIN;
parameter MesCntrl_End = `MES_CNTRL_DEL_END;


`ifdef VIRAGE_FAST_VERILOG
reg sim_check_A ;
reg sim_check_B ;
`else
// Notifiers Declaration
wire [10:0] notif_adra;
reg notif_adra_10, notif_adra_9, notif_adra_8, notif_adra_7, notif_adra_6, notif_adra_5, notif_adra_4, notif_adra_3, notif_adra_2, notif_adra_1, notif_adra_0;
wire [31:0] notif_da;
reg notif_da_31, notif_da_30, notif_da_29, notif_da_28, notif_da_27, notif_da_26, notif_da_25, notif_da_24, notif_da_23, notif_da_22, notif_da_21, notif_da_20, notif_da_19, notif_da_18, notif_da_17, notif_da_16, notif_da_15, notif_da_14, notif_da_13, notif_da_12, notif_da_11, notif_da_10, notif_da_9, notif_da_8, notif_da_7, notif_da_6, notif_da_5, notif_da_4, notif_da_3, notif_da_2, notif_da_1, notif_da_0;
reg notif_wea;
reg notif_mea;
reg notif_clka;
reg notif_clka_CLKB_rise_rise_rec;
reg notif_tda_3, notif_tda_2, notif_tda_1, notif_tda_0;
initial begin
{notif_da_31, notif_da_30, notif_da_29, notif_da_28, notif_da_27, notif_da_26, notif_da_25, notif_da_24, notif_da_23, notif_da_22, notif_da_21, notif_da_20, notif_da_19, notif_da_18, notif_da_17, notif_da_16, notif_da_15, notif_da_14, notif_da_13, notif_da_12, notif_da_11, notif_da_10, notif_da_9, notif_da_8, notif_da_7, notif_da_6, notif_da_5, notif_da_4, notif_da_3, notif_da_2, notif_da_1, notif_da_0} = 32'b0;
end
reg notif_clka_TCLKB_rise_rise_rec;
reg notif_bistea;
reg notif_test1a;
reg notif_rmea;
reg notif_rma;
wire [3:0] notif_cda;
reg notif_cda_3, notif_cda_2, notif_cda_1, notif_cda_0;
reg notif_capta;
reg notif_pipemea;
reg notif_tclkea;
reg notif_stickya;
reg notif_si_qa;
reg notif_si_da;
reg notif_se_qa;
reg notif_se_ina;
reg notif_si_cntra;
reg notif_dftclken;
reg notif_dftclken_b;
reg notif_dftmask;
reg notif_dftmask_b;
reg notif_ls;
reg notif_ls_b;
wire [10:0] notif_adrb;
reg notif_adrb_10, notif_adrb_9, notif_adrb_8, notif_adrb_7, notif_adrb_6, notif_adrb_5, notif_adrb_4, notif_adrb_3, notif_adrb_2, notif_adrb_1, notif_adrb_0;
wire [31:0] notif_db;
reg notif_db_31, notif_db_30, notif_db_29, notif_db_28, notif_db_27, notif_db_26, notif_db_25, notif_db_24, notif_db_23, notif_db_22, notif_db_21, notif_db_20, notif_db_19, notif_db_18, notif_db_17, notif_db_16, notif_db_15, notif_db_14, notif_db_13, notif_db_12, notif_db_11, notif_db_10, notif_db_9, notif_db_8, notif_db_7, notif_db_6, notif_db_5, notif_db_4, notif_db_3, notif_db_2, notif_db_1, notif_db_0;
reg notif_web;
reg notif_meb;
reg notif_clkb;
reg notif_clkb_CLKA_rise_rise_rec;
reg notif_tdb_3, notif_tdb_2, notif_tdb_1, notif_tdb_0;
initial begin
{notif_db_31, notif_db_30, notif_db_29, notif_db_28, notif_db_27, notif_db_26, notif_db_25, notif_db_24, notif_db_23, notif_db_22, notif_db_21, notif_db_20, notif_db_19, notif_db_18, notif_db_17, notif_db_16, notif_db_15, notif_db_14, notif_db_13, notif_db_12, notif_db_11, notif_db_10, notif_db_9, notif_db_8, notif_db_7, notif_db_6, notif_db_5, notif_db_4, notif_db_3, notif_db_2, notif_db_1, notif_db_0} = 32'b0;
end
reg notif_clkb_TCLKA_rise_rise_rec;
reg notif_bisteb;
reg notif_test1b;
reg notif_rmeb;
reg notif_rmb;
wire [3:0] notif_cdb;
reg notif_cdb_3, notif_cdb_2, notif_cdb_1, notif_cdb_0;
reg notif_captb;
reg notif_pipemeb;
reg notif_tclkeb;
reg notif_stickyb;
reg notif_si_qb;
reg notif_si_db;
reg notif_se_qb;
reg notif_se_inb;
reg notif_si_cntrb;
`endif
`ifdef VIRAGE_FAST_VERILOG
`else
reg  EVENT_TCQ_A;
`endif
real  CLK_T_A;
reg  [10 : 0 ] ADRA_buf_L;
reg ADRFLAGA;
reg TADRFLAGA;
reg  [10 : 0 ] ADRA_old;
reg  MEA_old;
reg  WEA_old;
`ifdef VIRAGE_FAST_VERILOG
`else
reg  EVENT_TCQ_B;
`endif
real  CLK_T_B;
reg  [10 : 0 ] ADRB_buf_L;
reg ADRFLAGB;
reg TADRFLAGB;
reg  [10 : 0 ] ADRB_old;
reg  MEB_old;
reg  WEB_old;
wire WEA_mout;
wire [10:0] ADRA_mout;
wire [31:0] DA_mout;
wire MEA_mout;
wire PIPEMEA_mout;
wire CLKA_tmp;
wire mclkA;
wire [31:0] QA_mem;
wire CAPTA_int;
wire [3:0]  CDA_int;
wire [31:0] CDA_exp;
wire [31:0] ErrA;
wire WEB_mout;
wire [10:0] ADRB_mout;
wire [31:0] DB_mout;
wire MEB_mout;
wire PIPEMEB_mout;
wire CLKB_tmp;
wire mclkB;
wire [31:0] QB_mem;
wire CAPTB_int;
wire [3:0]  CDB_int;
wire [31:0] CDB_exp;
wire [31:0] ErrB;
wire [31:0] QA_final;
wire [31:0] QB_final;
`ifdef VIRAGE_FAST_VERILOG
wire [31:0] QA_buf;
assign QA[0] = QA_buf[0];
assign QA[1] = QA_buf[1];
assign QA[2] = QA_buf[2];
assign QA[3] = QA_buf[3];
assign QA[4] = QA_buf[4];
assign QA[5] = QA_buf[5];
assign QA[6] = QA_buf[6];
assign QA[7] = QA_buf[7];
assign QA[8] = QA_buf[8];
assign QA[9] = QA_buf[9];
assign QA[10] = QA_buf[10];
assign QA[11] = QA_buf[11];
assign QA[12] = QA_buf[12];
assign QA[13] = QA_buf[13];
assign QA[14] = QA_buf[14];
assign QA[15] = QA_buf[15];
assign QA[16] = QA_buf[16];
assign QA[17] = QA_buf[17];
assign QA[18] = QA_buf[18];
assign QA[19] = QA_buf[19];
assign QA[20] = QA_buf[20];
assign QA[21] = QA_buf[21];
assign QA[22] = QA_buf[22];
assign QA[23] = QA_buf[23];
assign QA[24] = QA_buf[24];
assign QA[25] = QA_buf[25];
assign QA[26] = QA_buf[26];
assign QA[27] = QA_buf[27];
assign QA[28] = QA_buf[28];
assign QA[29] = QA_buf[29];
assign QA[30] = QA_buf[30];
assign QA[31] = QA_buf[31];
wire [31:0] QPA_buf;
assign QPA[0] = QPA_buf[0];
assign QPA[1] = QPA_buf[1];
assign QPA[2] = QPA_buf[2];
assign QPA[3] = QPA_buf[3];
assign QPA[4] = QPA_buf[4];
assign QPA[5] = QPA_buf[5];
assign QPA[6] = QPA_buf[6];
assign QPA[7] = QPA_buf[7];
assign QPA[8] = QPA_buf[8];
assign QPA[9] = QPA_buf[9];
assign QPA[10] = QPA_buf[10];
assign QPA[11] = QPA_buf[11];
assign QPA[12] = QPA_buf[12];
assign QPA[13] = QPA_buf[13];
assign QPA[14] = QPA_buf[14];
assign QPA[15] = QPA_buf[15];
assign QPA[16] = QPA_buf[16];
assign QPA[17] = QPA_buf[17];
assign QPA[18] = QPA_buf[18];
assign QPA[19] = QPA_buf[19];
assign QPA[20] = QPA_buf[20];
assign QPA[21] = QPA_buf[21];
assign QPA[22] = QPA_buf[22];
assign QPA[23] = QPA_buf[23];
assign QPA[24] = QPA_buf[24];
assign QPA[25] = QPA_buf[25];
assign QPA[26] = QPA_buf[26];
assign QPA[27] = QPA_buf[27];
assign QPA[28] = QPA_buf[28];
assign QPA[29] = QPA_buf[29];
assign QPA[30] = QPA_buf[30];
assign QPA[31] = QPA_buf[31];
wire SO_QA_buf;
assign  SO_QA = SO_QA_buf;
wire SO_DA_buf;
assign  SO_DA = SO_DA_buf;
wire SO_CNTRA_buf;
assign  SO_CNTRA = SO_CNTRA_buf;
wire [31:0] QB_buf;
assign QB[0] = QB_buf[0];
assign QB[1] = QB_buf[1];
assign QB[2] = QB_buf[2];
assign QB[3] = QB_buf[3];
assign QB[4] = QB_buf[4];
assign QB[5] = QB_buf[5];
assign QB[6] = QB_buf[6];
assign QB[7] = QB_buf[7];
assign QB[8] = QB_buf[8];
assign QB[9] = QB_buf[9];
assign QB[10] = QB_buf[10];
assign QB[11] = QB_buf[11];
assign QB[12] = QB_buf[12];
assign QB[13] = QB_buf[13];
assign QB[14] = QB_buf[14];
assign QB[15] = QB_buf[15];
assign QB[16] = QB_buf[16];
assign QB[17] = QB_buf[17];
assign QB[18] = QB_buf[18];
assign QB[19] = QB_buf[19];
assign QB[20] = QB_buf[20];
assign QB[21] = QB_buf[21];
assign QB[22] = QB_buf[22];
assign QB[23] = QB_buf[23];
assign QB[24] = QB_buf[24];
assign QB[25] = QB_buf[25];
assign QB[26] = QB_buf[26];
assign QB[27] = QB_buf[27];
assign QB[28] = QB_buf[28];
assign QB[29] = QB_buf[29];
assign QB[30] = QB_buf[30];
assign QB[31] = QB_buf[31];
wire [31:0] QPB_buf;
assign QPB[0] = QPB_buf[0];
assign QPB[1] = QPB_buf[1];
assign QPB[2] = QPB_buf[2];
assign QPB[3] = QPB_buf[3];
assign QPB[4] = QPB_buf[4];
assign QPB[5] = QPB_buf[5];
assign QPB[6] = QPB_buf[6];
assign QPB[7] = QPB_buf[7];
assign QPB[8] = QPB_buf[8];
assign QPB[9] = QPB_buf[9];
assign QPB[10] = QPB_buf[10];
assign QPB[11] = QPB_buf[11];
assign QPB[12] = QPB_buf[12];
assign QPB[13] = QPB_buf[13];
assign QPB[14] = QPB_buf[14];
assign QPB[15] = QPB_buf[15];
assign QPB[16] = QPB_buf[16];
assign QPB[17] = QPB_buf[17];
assign QPB[18] = QPB_buf[18];
assign QPB[19] = QPB_buf[19];
assign QPB[20] = QPB_buf[20];
assign QPB[21] = QPB_buf[21];
assign QPB[22] = QPB_buf[22];
assign QPB[23] = QPB_buf[23];
assign QPB[24] = QPB_buf[24];
assign QPB[25] = QPB_buf[25];
assign QPB[26] = QPB_buf[26];
assign QPB[27] = QPB_buf[27];
assign QPB[28] = QPB_buf[28];
assign QPB[29] = QPB_buf[29];
assign QPB[30] = QPB_buf[30];
assign QPB[31] = QPB_buf[31];
wire SO_QB_buf;
assign  SO_QB = SO_QB_buf;
wire SO_DB_buf;
assign  SO_DB = SO_DB_buf;
wire SO_CNTRB_buf;
assign  SO_CNTRB = SO_CNTRB_buf;
wire [10:0] ADRA_buf;
assign  ADRA_buf[0] =  ADRA[0];
assign  ADRA_buf[1] =  ADRA[1];
assign  ADRA_buf[2] =  ADRA[2];
assign  ADRA_buf[3] =  ADRA[3];
assign  ADRA_buf[4] =  ADRA[4];
assign  ADRA_buf[5] =  ADRA[5];
assign  ADRA_buf[6] =  ADRA[6];
assign  ADRA_buf[7] =  ADRA[7];
assign  ADRA_buf[8] =  ADRA[8];
assign  ADRA_buf[9] =  ADRA[9];
assign  ADRA_buf[10] =  ADRA[10];
wire [31:0] DA_buf;
assign  DA_buf[0] =  DA[0];
assign  DA_buf[1] =  DA[1];
assign  DA_buf[2] =  DA[2];
assign  DA_buf[3] =  DA[3];
assign  DA_buf[4] =  DA[4];
assign  DA_buf[5] =  DA[5];
assign  DA_buf[6] =  DA[6];
assign  DA_buf[7] =  DA[7];
assign  DA_buf[8] =  DA[8];
assign  DA_buf[9] =  DA[9];
assign  DA_buf[10] =  DA[10];
assign  DA_buf[11] =  DA[11];
assign  DA_buf[12] =  DA[12];
assign  DA_buf[13] =  DA[13];
assign  DA_buf[14] =  DA[14];
assign  DA_buf[15] =  DA[15];
assign  DA_buf[16] =  DA[16];
assign  DA_buf[17] =  DA[17];
assign  DA_buf[18] =  DA[18];
assign  DA_buf[19] =  DA[19];
assign  DA_buf[20] =  DA[20];
assign  DA_buf[21] =  DA[21];
assign  DA_buf[22] =  DA[22];
assign  DA_buf[23] =  DA[23];
assign  DA_buf[24] =  DA[24];
assign  DA_buf[25] =  DA[25];
assign  DA_buf[26] =  DA[26];
assign  DA_buf[27] =  DA[27];
assign  DA_buf[28] =  DA[28];
assign  DA_buf[29] =  DA[29];
assign  DA_buf[30] =  DA[30];
assign  DA_buf[31] =  DA[31];
wire WEA_buf;
assign  WEA_buf =  WEA;
wire MEA_buf;
assign  MEA_buf =  MEA;
wire CLKA_buf;
assign  CLKA_buf =  CLKA;
wire [10:0] TADRA_buf;
assign  TADRA_buf[0] =  TADRA[0];
assign  TADRA_buf[1] =  TADRA[1];
assign  TADRA_buf[2] =  TADRA[2];
assign  TADRA_buf[3] =  TADRA[3];
assign  TADRA_buf[4] =  TADRA[4];
assign  TADRA_buf[5] =  TADRA[5];
assign  TADRA_buf[6] =  TADRA[6];
assign  TADRA_buf[7] =  TADRA[7];
assign  TADRA_buf[8] =  TADRA[8];
assign  TADRA_buf[9] =  TADRA[9];
assign  TADRA_buf[10] =  TADRA[10];
wire [31:0] TDA_buf;
assign  TDA_buf[0] =  TDA[0];
assign  TDA_buf[1] =  TDA[1];
assign  TDA_buf[2] =  TDA[2];
assign  TDA_buf[3] =  TDA[3];
assign  TDA_buf[4] =  TDA[0];
assign  TDA_buf[5] =  TDA[1];
assign  TDA_buf[6] =  TDA[2];
assign  TDA_buf[7] =  TDA[3];
assign  TDA_buf[8] =  TDA[0];
assign  TDA_buf[9] =  TDA[1];
assign  TDA_buf[10] =  TDA[2];
assign  TDA_buf[11] =  TDA[3];
assign  TDA_buf[12] =  TDA[0];
assign  TDA_buf[13] =  TDA[1];
assign  TDA_buf[14] =  TDA[2];
assign  TDA_buf[15] =  TDA[3];
assign  TDA_buf[16] =  TDA[0];
assign  TDA_buf[17] =  TDA[1];
assign  TDA_buf[18] =  TDA[2];
assign  TDA_buf[19] =  TDA[3];
assign  TDA_buf[20] =  TDA[0];
assign  TDA_buf[21] =  TDA[1];
assign  TDA_buf[22] =  TDA[2];
assign  TDA_buf[23] =  TDA[3];
assign  TDA_buf[24] =  TDA[0];
assign  TDA_buf[25] =  TDA[1];
assign  TDA_buf[26] =  TDA[2];
assign  TDA_buf[27] =  TDA[3];
assign  TDA_buf[28] =  TDA[0];
assign  TDA_buf[29] =  TDA[1];
assign  TDA_buf[30] =  TDA[2];
assign  TDA_buf[31] =  TDA[3];
wire TWEA_buf;
assign  TWEA_buf =  TWEA;
wire TMEA_buf;
assign  TMEA_buf =  TMEA;
wire TCLKA_buf;
assign  TCLKA_buf =  TCLKA;
wire BISTEA_buf;
assign  BISTEA_buf =  BISTEA;
wire TEST1A_buf;
assign  TEST1A_buf =  TEST1A;
wire RMEA_buf;
assign  RMEA_buf =  RMEA;
wire [2:0] RMA_int;
wire [3:0] RMA_buf;
assign  RMA_buf[0] =  RMA[0];
assign  RMA_buf[1] =  RMA[1];
assign  RMA_buf[2] =  RMA[2];
assign  RMA_buf[3] =  RMA[3];
wire [3:0] CDA_buf;
assign  CDA_buf[0] =  CDA[0];
assign  CDA_buf[1] =  CDA[1];
assign  CDA_buf[2] =  CDA[2];
assign  CDA_buf[3] =  CDA[3];
wire CAPTA_buf;
assign  CAPTA_buf =  CAPTA;
wire PIPEMEA_buf;
assign  PIPEMEA_buf =  PIPEMEA;
wire TPIPEMEA_buf;
assign  TPIPEMEA_buf =  TPIPEMEA;
wire TCLKEA_buf;
assign  TCLKEA_buf =  TCLKEA;
wire STICKYA_buf;
assign  STICKYA_buf =  STICKYA;
wire SI_QA_buf;
assign  SI_QA_buf =  SI_QA;
wire SI_DA_buf;
assign  SI_DA_buf =  SI_DA;
wire SE_QA_buf;
assign  SE_QA_buf =  SE_QA;
wire SE_INA_buf;
assign  SE_INA_buf =  SE_INA;
wire SI_CNTRA_buf;
assign  SI_CNTRA_buf =  SI_CNTRA;
wire DFTCLKEN_buf;
assign  DFTCLKEN_buf =  DFTCLKEN;
wire DFTMASK_buf;
assign  DFTMASK_buf =  DFTMASK;
wire LS_buf;
assign  LS_buf =  LS;
wire [10:0] ADRB_buf;
assign  ADRB_buf[0] =  ADRB[0];
assign  ADRB_buf[1] =  ADRB[1];
assign  ADRB_buf[2] =  ADRB[2];
assign  ADRB_buf[3] =  ADRB[3];
assign  ADRB_buf[4] =  ADRB[4];
assign  ADRB_buf[5] =  ADRB[5];
assign  ADRB_buf[6] =  ADRB[6];
assign  ADRB_buf[7] =  ADRB[7];
assign  ADRB_buf[8] =  ADRB[8];
assign  ADRB_buf[9] =  ADRB[9];
assign  ADRB_buf[10] =  ADRB[10];
wire [31:0] DB_buf;
assign  DB_buf[0] =  DB[0];
assign  DB_buf[1] =  DB[1];
assign  DB_buf[2] =  DB[2];
assign  DB_buf[3] =  DB[3];
assign  DB_buf[4] =  DB[4];
assign  DB_buf[5] =  DB[5];
assign  DB_buf[6] =  DB[6];
assign  DB_buf[7] =  DB[7];
assign  DB_buf[8] =  DB[8];
assign  DB_buf[9] =  DB[9];
assign  DB_buf[10] =  DB[10];
assign  DB_buf[11] =  DB[11];
assign  DB_buf[12] =  DB[12];
assign  DB_buf[13] =  DB[13];
assign  DB_buf[14] =  DB[14];
assign  DB_buf[15] =  DB[15];
assign  DB_buf[16] =  DB[16];
assign  DB_buf[17] =  DB[17];
assign  DB_buf[18] =  DB[18];
assign  DB_buf[19] =  DB[19];
assign  DB_buf[20] =  DB[20];
assign  DB_buf[21] =  DB[21];
assign  DB_buf[22] =  DB[22];
assign  DB_buf[23] =  DB[23];
assign  DB_buf[24] =  DB[24];
assign  DB_buf[25] =  DB[25];
assign  DB_buf[26] =  DB[26];
assign  DB_buf[27] =  DB[27];
assign  DB_buf[28] =  DB[28];
assign  DB_buf[29] =  DB[29];
assign  DB_buf[30] =  DB[30];
assign  DB_buf[31] =  DB[31];
wire WEB_buf;
assign  WEB_buf =  WEB;
wire MEB_buf;
assign  MEB_buf =  MEB;
wire CLKB_buf;
assign  CLKB_buf =  CLKB;
wire [10:0] TADRB_buf;
assign  TADRB_buf[0] =  TADRB[0];
assign  TADRB_buf[1] =  TADRB[1];
assign  TADRB_buf[2] =  TADRB[2];
assign  TADRB_buf[3] =  TADRB[3];
assign  TADRB_buf[4] =  TADRB[4];
assign  TADRB_buf[5] =  TADRB[5];
assign  TADRB_buf[6] =  TADRB[6];
assign  TADRB_buf[7] =  TADRB[7];
assign  TADRB_buf[8] =  TADRB[8];
assign  TADRB_buf[9] =  TADRB[9];
assign  TADRB_buf[10] =  TADRB[10];
wire [31:0] TDB_buf;
assign  TDB_buf[0] =  TDB[0];
assign  TDB_buf[1] =  TDB[1];
assign  TDB_buf[2] =  TDB[2];
assign  TDB_buf[3] =  TDB[3];
assign  TDB_buf[4] =  TDB[0];
assign  TDB_buf[5] =  TDB[1];
assign  TDB_buf[6] =  TDB[2];
assign  TDB_buf[7] =  TDB[3];
assign  TDB_buf[8] =  TDB[0];
assign  TDB_buf[9] =  TDB[1];
assign  TDB_buf[10] =  TDB[2];
assign  TDB_buf[11] =  TDB[3];
assign  TDB_buf[12] =  TDB[0];
assign  TDB_buf[13] =  TDB[1];
assign  TDB_buf[14] =  TDB[2];
assign  TDB_buf[15] =  TDB[3];
assign  TDB_buf[16] =  TDB[0];
assign  TDB_buf[17] =  TDB[1];
assign  TDB_buf[18] =  TDB[2];
assign  TDB_buf[19] =  TDB[3];
assign  TDB_buf[20] =  TDB[0];
assign  TDB_buf[21] =  TDB[1];
assign  TDB_buf[22] =  TDB[2];
assign  TDB_buf[23] =  TDB[3];
assign  TDB_buf[24] =  TDB[0];
assign  TDB_buf[25] =  TDB[1];
assign  TDB_buf[26] =  TDB[2];
assign  TDB_buf[27] =  TDB[3];
assign  TDB_buf[28] =  TDB[0];
assign  TDB_buf[29] =  TDB[1];
assign  TDB_buf[30] =  TDB[2];
assign  TDB_buf[31] =  TDB[3];
wire TWEB_buf;
assign  TWEB_buf =  TWEB;
wire TMEB_buf;
assign  TMEB_buf =  TMEB;
wire TCLKB_buf;
assign  TCLKB_buf =  TCLKB;
wire BISTEB_buf;
assign  BISTEB_buf =  BISTEB;
wire TEST1B_buf;
assign  TEST1B_buf =  TEST1B;
wire RMEB_buf;
assign  RMEB_buf =  RMEB;
wire [2:0] RMB_int;
wire [3:0] RMB_buf;
assign  RMB_buf[0] =  RMB[0];
assign  RMB_buf[1] =  RMB[1];
assign  RMB_buf[2] =  RMB[2];
assign  RMB_buf[3] =  RMB[3];
wire [3:0] CDB_buf;
assign  CDB_buf[0] =  CDB[0];
assign  CDB_buf[1] =  CDB[1];
assign  CDB_buf[2] =  CDB[2];
assign  CDB_buf[3] =  CDB[3];
wire CAPTB_buf;
assign  CAPTB_buf =  CAPTB;
wire PIPEMEB_buf;
assign  PIPEMEB_buf =  PIPEMEB;
wire TPIPEMEB_buf;
assign  TPIPEMEB_buf =  TPIPEMEB;
wire TCLKEB_buf;
assign  TCLKEB_buf =  TCLKEB;
wire STICKYB_buf;
assign  STICKYB_buf =  STICKYB;
wire SI_QB_buf;
assign  SI_QB_buf =  SI_QB;
wire SI_DB_buf;
assign  SI_DB_buf =  SI_DB;
wire SE_QB_buf;
assign  SE_QB_buf =  SE_QB;
wire SE_INB_buf;
assign  SE_INB_buf =  SE_INB;
wire SI_CNTRB_buf;
assign  SI_CNTRB_buf =  SI_CNTRB;
`else
wire [31:0] QA_buf;
buf (QA[0], QA_buf[0]);
buf (QA_final[0],QA[0]);
buf (QA[1], QA_buf[1]);
buf (QA_final[1],QA[1]);
buf (QA[2], QA_buf[2]);
buf (QA_final[2],QA[2]);
buf (QA[3], QA_buf[3]);
buf (QA_final[3],QA[3]);
buf (QA[4], QA_buf[4]);
buf (QA_final[4],QA[4]);
buf (QA[5], QA_buf[5]);
buf (QA_final[5],QA[5]);
buf (QA[6], QA_buf[6]);
buf (QA_final[6],QA[6]);
buf (QA[7], QA_buf[7]);
buf (QA_final[7],QA[7]);
buf (QA[8], QA_buf[8]);
buf (QA_final[8],QA[8]);
buf (QA[9], QA_buf[9]);
buf (QA_final[9],QA[9]);
buf (QA[10], QA_buf[10]);
buf (QA_final[10],QA[10]);
buf (QA[11], QA_buf[11]);
buf (QA_final[11],QA[11]);
buf (QA[12], QA_buf[12]);
buf (QA_final[12],QA[12]);
buf (QA[13], QA_buf[13]);
buf (QA_final[13],QA[13]);
buf (QA[14], QA_buf[14]);
buf (QA_final[14],QA[14]);
buf (QA[15], QA_buf[15]);
buf (QA_final[15],QA[15]);
buf (QA[16], QA_buf[16]);
buf (QA_final[16],QA[16]);
buf (QA[17], QA_buf[17]);
buf (QA_final[17],QA[17]);
buf (QA[18], QA_buf[18]);
buf (QA_final[18],QA[18]);
buf (QA[19], QA_buf[19]);
buf (QA_final[19],QA[19]);
buf (QA[20], QA_buf[20]);
buf (QA_final[20],QA[20]);
buf (QA[21], QA_buf[21]);
buf (QA_final[21],QA[21]);
buf (QA[22], QA_buf[22]);
buf (QA_final[22],QA[22]);
buf (QA[23], QA_buf[23]);
buf (QA_final[23],QA[23]);
buf (QA[24], QA_buf[24]);
buf (QA_final[24],QA[24]);
buf (QA[25], QA_buf[25]);
buf (QA_final[25],QA[25]);
buf (QA[26], QA_buf[26]);
buf (QA_final[26],QA[26]);
buf (QA[27], QA_buf[27]);
buf (QA_final[27],QA[27]);
buf (QA[28], QA_buf[28]);
buf (QA_final[28],QA[28]);
buf (QA[29], QA_buf[29]);
buf (QA_final[29],QA[29]);
buf (QA[30], QA_buf[30]);
buf (QA_final[30],QA[30]);
buf (QA[31], QA_buf[31]);
buf (QA_final[31],QA[31]);
wire [31:0] QPA_buf;
buf (QPA[0], QPA_buf[0]);
buf (QPA[1], QPA_buf[1]);
buf (QPA[2], QPA_buf[2]);
buf (QPA[3], QPA_buf[3]);
buf (QPA[4], QPA_buf[4]);
buf (QPA[5], QPA_buf[5]);
buf (QPA[6], QPA_buf[6]);
buf (QPA[7], QPA_buf[7]);
buf (QPA[8], QPA_buf[8]);
buf (QPA[9], QPA_buf[9]);
buf (QPA[10], QPA_buf[10]);
buf (QPA[11], QPA_buf[11]);
buf (QPA[12], QPA_buf[12]);
buf (QPA[13], QPA_buf[13]);
buf (QPA[14], QPA_buf[14]);
buf (QPA[15], QPA_buf[15]);
buf (QPA[16], QPA_buf[16]);
buf (QPA[17], QPA_buf[17]);
buf (QPA[18], QPA_buf[18]);
buf (QPA[19], QPA_buf[19]);
buf (QPA[20], QPA_buf[20]);
buf (QPA[21], QPA_buf[21]);
buf (QPA[22], QPA_buf[22]);
buf (QPA[23], QPA_buf[23]);
buf (QPA[24], QPA_buf[24]);
buf (QPA[25], QPA_buf[25]);
buf (QPA[26], QPA_buf[26]);
buf (QPA[27], QPA_buf[27]);
buf (QPA[28], QPA_buf[28]);
buf (QPA[29], QPA_buf[29]);
buf (QPA[30], QPA_buf[30]);
buf (QPA[31], QPA_buf[31]);
wire SO_QA_buf;
buf (SO_QA, SO_QA_buf);
wire SO_DA_buf;
buf (SO_DA, SO_DA_buf);
wire SO_CNTRA_buf;
buf (SO_CNTRA, SO_CNTRA_buf);
wire [31:0] QB_buf;
buf (QB[0], QB_buf[0]);
buf (QB_final[0],QB[0]);
buf (QB[1], QB_buf[1]);
buf (QB_final[1],QB[1]);
buf (QB[2], QB_buf[2]);
buf (QB_final[2],QB[2]);
buf (QB[3], QB_buf[3]);
buf (QB_final[3],QB[3]);
buf (QB[4], QB_buf[4]);
buf (QB_final[4],QB[4]);
buf (QB[5], QB_buf[5]);
buf (QB_final[5],QB[5]);
buf (QB[6], QB_buf[6]);
buf (QB_final[6],QB[6]);
buf (QB[7], QB_buf[7]);
buf (QB_final[7],QB[7]);
buf (QB[8], QB_buf[8]);
buf (QB_final[8],QB[8]);
buf (QB[9], QB_buf[9]);
buf (QB_final[9],QB[9]);
buf (QB[10], QB_buf[10]);
buf (QB_final[10],QB[10]);
buf (QB[11], QB_buf[11]);
buf (QB_final[11],QB[11]);
buf (QB[12], QB_buf[12]);
buf (QB_final[12],QB[12]);
buf (QB[13], QB_buf[13]);
buf (QB_final[13],QB[13]);
buf (QB[14], QB_buf[14]);
buf (QB_final[14],QB[14]);
buf (QB[15], QB_buf[15]);
buf (QB_final[15],QB[15]);
buf (QB[16], QB_buf[16]);
buf (QB_final[16],QB[16]);
buf (QB[17], QB_buf[17]);
buf (QB_final[17],QB[17]);
buf (QB[18], QB_buf[18]);
buf (QB_final[18],QB[18]);
buf (QB[19], QB_buf[19]);
buf (QB_final[19],QB[19]);
buf (QB[20], QB_buf[20]);
buf (QB_final[20],QB[20]);
buf (QB[21], QB_buf[21]);
buf (QB_final[21],QB[21]);
buf (QB[22], QB_buf[22]);
buf (QB_final[22],QB[22]);
buf (QB[23], QB_buf[23]);
buf (QB_final[23],QB[23]);
buf (QB[24], QB_buf[24]);
buf (QB_final[24],QB[24]);
buf (QB[25], QB_buf[25]);
buf (QB_final[25],QB[25]);
buf (QB[26], QB_buf[26]);
buf (QB_final[26],QB[26]);
buf (QB[27], QB_buf[27]);
buf (QB_final[27],QB[27]);
buf (QB[28], QB_buf[28]);
buf (QB_final[28],QB[28]);
buf (QB[29], QB_buf[29]);
buf (QB_final[29],QB[29]);
buf (QB[30], QB_buf[30]);
buf (QB_final[30],QB[30]);
buf (QB[31], QB_buf[31]);
buf (QB_final[31],QB[31]);
wire [31:0] QPB_buf;
buf (QPB[0], QPB_buf[0]);
buf (QPB[1], QPB_buf[1]);
buf (QPB[2], QPB_buf[2]);
buf (QPB[3], QPB_buf[3]);
buf (QPB[4], QPB_buf[4]);
buf (QPB[5], QPB_buf[5]);
buf (QPB[6], QPB_buf[6]);
buf (QPB[7], QPB_buf[7]);
buf (QPB[8], QPB_buf[8]);
buf (QPB[9], QPB_buf[9]);
buf (QPB[10], QPB_buf[10]);
buf (QPB[11], QPB_buf[11]);
buf (QPB[12], QPB_buf[12]);
buf (QPB[13], QPB_buf[13]);
buf (QPB[14], QPB_buf[14]);
buf (QPB[15], QPB_buf[15]);
buf (QPB[16], QPB_buf[16]);
buf (QPB[17], QPB_buf[17]);
buf (QPB[18], QPB_buf[18]);
buf (QPB[19], QPB_buf[19]);
buf (QPB[20], QPB_buf[20]);
buf (QPB[21], QPB_buf[21]);
buf (QPB[22], QPB_buf[22]);
buf (QPB[23], QPB_buf[23]);
buf (QPB[24], QPB_buf[24]);
buf (QPB[25], QPB_buf[25]);
buf (QPB[26], QPB_buf[26]);
buf (QPB[27], QPB_buf[27]);
buf (QPB[28], QPB_buf[28]);
buf (QPB[29], QPB_buf[29]);
buf (QPB[30], QPB_buf[30]);
buf (QPB[31], QPB_buf[31]);
wire SO_QB_buf;
buf (SO_QB, SO_QB_buf);
wire SO_DB_buf;
buf (SO_DB, SO_DB_buf);
wire SO_CNTRB_buf;
buf (SO_CNTRB, SO_CNTRB_buf);
wire [10:0] ADRA_buf;
wire [10:0] delayed_ADRA;
buf (ADRA_buf[0], delayed_ADRA[0]);
buf (ADRA_buf[1], delayed_ADRA[1]);
buf (ADRA_buf[2], delayed_ADRA[2]);
buf (ADRA_buf[3], delayed_ADRA[3]);
buf (ADRA_buf[4], delayed_ADRA[4]);
buf (ADRA_buf[5], delayed_ADRA[5]);
buf (ADRA_buf[6], delayed_ADRA[6]);
buf (ADRA_buf[7], delayed_ADRA[7]);
buf (ADRA_buf[8], delayed_ADRA[8]);
buf (ADRA_buf[9], delayed_ADRA[9]);
buf (ADRA_buf[10], delayed_ADRA[10]);
wire [31:0] DA_buf;
wire [31:0] delayed_DA;
buf (DA_buf[0], delayed_DA[0]);
buf (DA_buf[1], delayed_DA[1]);
buf (DA_buf[2], delayed_DA[2]);
buf (DA_buf[3], delayed_DA[3]);
buf (DA_buf[4], delayed_DA[4]);
buf (DA_buf[5], delayed_DA[5]);
buf (DA_buf[6], delayed_DA[6]);
buf (DA_buf[7], delayed_DA[7]);
buf (DA_buf[8], delayed_DA[8]);
buf (DA_buf[9], delayed_DA[9]);
buf (DA_buf[10], delayed_DA[10]);
buf (DA_buf[11], delayed_DA[11]);
buf (DA_buf[12], delayed_DA[12]);
buf (DA_buf[13], delayed_DA[13]);
buf (DA_buf[14], delayed_DA[14]);
buf (DA_buf[15], delayed_DA[15]);
buf (DA_buf[16], delayed_DA[16]);
buf (DA_buf[17], delayed_DA[17]);
buf (DA_buf[18], delayed_DA[18]);
buf (DA_buf[19], delayed_DA[19]);
buf (DA_buf[20], delayed_DA[20]);
buf (DA_buf[21], delayed_DA[21]);
buf (DA_buf[22], delayed_DA[22]);
buf (DA_buf[23], delayed_DA[23]);
buf (DA_buf[24], delayed_DA[24]);
buf (DA_buf[25], delayed_DA[25]);
buf (DA_buf[26], delayed_DA[26]);
buf (DA_buf[27], delayed_DA[27]);
buf (DA_buf[28], delayed_DA[28]);
buf (DA_buf[29], delayed_DA[29]);
buf (DA_buf[30], delayed_DA[30]);
buf (DA_buf[31], delayed_DA[31]);
wire delayed_WEA;
buf (WEA_buf, delayed_WEA);
wire delayed_MEA;
buf (MEA_buf, delayed_MEA);
wire delayed_CLKA;
buf (CLKA_buf, delayed_CLKA);
wire [10:0] TADRA_buf;
wire [10:0] delayed_TADRA;
buf (TADRA_buf[0], delayed_TADRA[0]);
buf (TADRA_buf[1], delayed_TADRA[1]);
buf (TADRA_buf[2], delayed_TADRA[2]);
buf (TADRA_buf[3], delayed_TADRA[3]);
buf (TADRA_buf[4], delayed_TADRA[4]);
buf (TADRA_buf[5], delayed_TADRA[5]);
buf (TADRA_buf[6], delayed_TADRA[6]);
buf (TADRA_buf[7], delayed_TADRA[7]);
buf (TADRA_buf[8], delayed_TADRA[8]);
buf (TADRA_buf[9], delayed_TADRA[9]);
buf (TADRA_buf[10], delayed_TADRA[10]);
wire [31:0] TDA_buf;
wire [3:0] delayed_TDA;
buf (TDA_buf[0], delayed_TDA[0]);
buf (TDA_buf[1], delayed_TDA[1]);
buf (TDA_buf[2], delayed_TDA[2]);
buf (TDA_buf[3], delayed_TDA[3]);
buf (TDA_buf[4], delayed_TDA[0]);
buf (TDA_buf[5], delayed_TDA[1]);
buf (TDA_buf[6], delayed_TDA[2]);
buf (TDA_buf[7], delayed_TDA[3]);
buf (TDA_buf[8], delayed_TDA[0]);
buf (TDA_buf[9], delayed_TDA[1]);
buf (TDA_buf[10], delayed_TDA[2]);
buf (TDA_buf[11], delayed_TDA[3]);
buf (TDA_buf[12], delayed_TDA[0]);
buf (TDA_buf[13], delayed_TDA[1]);
buf (TDA_buf[14], delayed_TDA[2]);
buf (TDA_buf[15], delayed_TDA[3]);
buf (TDA_buf[16], delayed_TDA[0]);
buf (TDA_buf[17], delayed_TDA[1]);
buf (TDA_buf[18], delayed_TDA[2]);
buf (TDA_buf[19], delayed_TDA[3]);
buf (TDA_buf[20], delayed_TDA[0]);
buf (TDA_buf[21], delayed_TDA[1]);
buf (TDA_buf[22], delayed_TDA[2]);
buf (TDA_buf[23], delayed_TDA[3]);
buf (TDA_buf[24], delayed_TDA[0]);
buf (TDA_buf[25], delayed_TDA[1]);
buf (TDA_buf[26], delayed_TDA[2]);
buf (TDA_buf[27], delayed_TDA[3]);
buf (TDA_buf[28], delayed_TDA[0]);
buf (TDA_buf[29], delayed_TDA[1]);
buf (TDA_buf[30], delayed_TDA[2]);
buf (TDA_buf[31], delayed_TDA[3]);
wire delayed_TWEA;
buf (TWEA_buf, delayed_TWEA);
wire delayed_TMEA;
buf (TMEA_buf, delayed_TMEA);
wire delayed_TCLKA;
buf (TCLKA_buf, delayed_TCLKA);
wire delayed_BISTEA;
buf (BISTEA_buf, delayed_BISTEA);
wire delayed_TEST1A;
buf (TEST1A_buf, delayed_TEST1A);
wire delayed_RMEA;
buf (RMEA_buf, delayed_RMEA);
wire [2:0] RMA_int;
wire [3:0] RMA_buf;
wire [3:0] delayed_RMA;
buf (RMA_buf[0], delayed_RMA[0]);
buf (RMA_buf[1], delayed_RMA[1]);
buf (RMA_buf[2], delayed_RMA[2]);
buf (RMA_buf[3], delayed_RMA[3]);
wire [3:0] CDA_buf;
wire [3:0] delayed_CDA;
buf (CDA_buf[0], delayed_CDA[0]);
buf (CDA_buf[1], delayed_CDA[1]);
buf (CDA_buf[2], delayed_CDA[2]);
buf (CDA_buf[3], delayed_CDA[3]);
wire delayed_CAPTA;
buf (CAPTA_buf, delayed_CAPTA);
wire delayed_PIPEMEA;
buf (PIPEMEA_buf, delayed_PIPEMEA);
wire delayed_TPIPEMEA;
buf (TPIPEMEA_buf, delayed_TPIPEMEA);
wire delayed_TCLKEA;
buf (TCLKEA_buf, delayed_TCLKEA);
wire delayed_STICKYA;
buf (STICKYA_buf, delayed_STICKYA);
wire delayed_SI_QA;
buf (SI_QA_buf, delayed_SI_QA);
wire delayed_SI_DA;
buf (SI_DA_buf, delayed_SI_DA);
wire delayed_SE_QA;
buf (SE_QA_buf, delayed_SE_QA);
wire delayed_SE_INA;
buf (SE_INA_buf, delayed_SE_INA);
wire delayed_SI_CNTRA;
buf (SI_CNTRA_buf, delayed_SI_CNTRA);
wire delayed_DFTCLKEN;
buf (DFTCLKEN_buf, delayed_DFTCLKEN);
wire delayed_DFTMASK;
buf (DFTMASK_buf, delayed_DFTMASK);
wire delayed_LS;
buf (LS_buf, delayed_LS);
wire [10:0] ADRB_buf;
wire [10:0] delayed_ADRB;
buf (ADRB_buf[0], delayed_ADRB[0]);
buf (ADRB_buf[1], delayed_ADRB[1]);
buf (ADRB_buf[2], delayed_ADRB[2]);
buf (ADRB_buf[3], delayed_ADRB[3]);
buf (ADRB_buf[4], delayed_ADRB[4]);
buf (ADRB_buf[5], delayed_ADRB[5]);
buf (ADRB_buf[6], delayed_ADRB[6]);
buf (ADRB_buf[7], delayed_ADRB[7]);
buf (ADRB_buf[8], delayed_ADRB[8]);
buf (ADRB_buf[9], delayed_ADRB[9]);
buf (ADRB_buf[10], delayed_ADRB[10]);
wire [31:0] DB_buf;
wire [31:0] delayed_DB;
buf (DB_buf[0], delayed_DB[0]);
buf (DB_buf[1], delayed_DB[1]);
buf (DB_buf[2], delayed_DB[2]);
buf (DB_buf[3], delayed_DB[3]);
buf (DB_buf[4], delayed_DB[4]);
buf (DB_buf[5], delayed_DB[5]);
buf (DB_buf[6], delayed_DB[6]);
buf (DB_buf[7], delayed_DB[7]);
buf (DB_buf[8], delayed_DB[8]);
buf (DB_buf[9], delayed_DB[9]);
buf (DB_buf[10], delayed_DB[10]);
buf (DB_buf[11], delayed_DB[11]);
buf (DB_buf[12], delayed_DB[12]);
buf (DB_buf[13], delayed_DB[13]);
buf (DB_buf[14], delayed_DB[14]);
buf (DB_buf[15], delayed_DB[15]);
buf (DB_buf[16], delayed_DB[16]);
buf (DB_buf[17], delayed_DB[17]);
buf (DB_buf[18], delayed_DB[18]);
buf (DB_buf[19], delayed_DB[19]);
buf (DB_buf[20], delayed_DB[20]);
buf (DB_buf[21], delayed_DB[21]);
buf (DB_buf[22], delayed_DB[22]);
buf (DB_buf[23], delayed_DB[23]);
buf (DB_buf[24], delayed_DB[24]);
buf (DB_buf[25], delayed_DB[25]);
buf (DB_buf[26], delayed_DB[26]);
buf (DB_buf[27], delayed_DB[27]);
buf (DB_buf[28], delayed_DB[28]);
buf (DB_buf[29], delayed_DB[29]);
buf (DB_buf[30], delayed_DB[30]);
buf (DB_buf[31], delayed_DB[31]);
wire delayed_WEB;
buf (WEB_buf, delayed_WEB);
wire delayed_MEB;
buf (MEB_buf, delayed_MEB);
wire delayed_CLKB;
buf (CLKB_buf, delayed_CLKB);
wire [10:0] TADRB_buf;
wire [10:0] delayed_TADRB;
buf (TADRB_buf[0], delayed_TADRB[0]);
buf (TADRB_buf[1], delayed_TADRB[1]);
buf (TADRB_buf[2], delayed_TADRB[2]);
buf (TADRB_buf[3], delayed_TADRB[3]);
buf (TADRB_buf[4], delayed_TADRB[4]);
buf (TADRB_buf[5], delayed_TADRB[5]);
buf (TADRB_buf[6], delayed_TADRB[6]);
buf (TADRB_buf[7], delayed_TADRB[7]);
buf (TADRB_buf[8], delayed_TADRB[8]);
buf (TADRB_buf[9], delayed_TADRB[9]);
buf (TADRB_buf[10], delayed_TADRB[10]);
wire [31:0] TDB_buf;
wire [3:0] delayed_TDB;
buf (TDB_buf[0], delayed_TDB[0]);
buf (TDB_buf[1], delayed_TDB[1]);
buf (TDB_buf[2], delayed_TDB[2]);
buf (TDB_buf[3], delayed_TDB[3]);
buf (TDB_buf[4], delayed_TDB[0]);
buf (TDB_buf[5], delayed_TDB[1]);
buf (TDB_buf[6], delayed_TDB[2]);
buf (TDB_buf[7], delayed_TDB[3]);
buf (TDB_buf[8], delayed_TDB[0]);
buf (TDB_buf[9], delayed_TDB[1]);
buf (TDB_buf[10], delayed_TDB[2]);
buf (TDB_buf[11], delayed_TDB[3]);
buf (TDB_buf[12], delayed_TDB[0]);
buf (TDB_buf[13], delayed_TDB[1]);
buf (TDB_buf[14], delayed_TDB[2]);
buf (TDB_buf[15], delayed_TDB[3]);
buf (TDB_buf[16], delayed_TDB[0]);
buf (TDB_buf[17], delayed_TDB[1]);
buf (TDB_buf[18], delayed_TDB[2]);
buf (TDB_buf[19], delayed_TDB[3]);
buf (TDB_buf[20], delayed_TDB[0]);
buf (TDB_buf[21], delayed_TDB[1]);
buf (TDB_buf[22], delayed_TDB[2]);
buf (TDB_buf[23], delayed_TDB[3]);
buf (TDB_buf[24], delayed_TDB[0]);
buf (TDB_buf[25], delayed_TDB[1]);
buf (TDB_buf[26], delayed_TDB[2]);
buf (TDB_buf[27], delayed_TDB[3]);
buf (TDB_buf[28], delayed_TDB[0]);
buf (TDB_buf[29], delayed_TDB[1]);
buf (TDB_buf[30], delayed_TDB[2]);
buf (TDB_buf[31], delayed_TDB[3]);
wire delayed_TWEB;
buf (TWEB_buf, delayed_TWEB);
wire delayed_TMEB;
buf (TMEB_buf, delayed_TMEB);
wire delayed_TCLKB;
buf (TCLKB_buf, delayed_TCLKB);
wire delayed_BISTEB;
buf (BISTEB_buf, delayed_BISTEB);
wire delayed_TEST1B;
buf (TEST1B_buf, delayed_TEST1B);
wire delayed_RMEB;
buf (RMEB_buf, delayed_RMEB);
wire [2:0] RMB_int;
wire [3:0] RMB_buf;
wire [3:0] delayed_RMB;
buf (RMB_buf[0], delayed_RMB[0]);
buf (RMB_buf[1], delayed_RMB[1]);
buf (RMB_buf[2], delayed_RMB[2]);
buf (RMB_buf[3], delayed_RMB[3]);
wire [3:0] CDB_buf;
wire [3:0] delayed_CDB;
buf (CDB_buf[0], delayed_CDB[0]);
buf (CDB_buf[1], delayed_CDB[1]);
buf (CDB_buf[2], delayed_CDB[2]);
buf (CDB_buf[3], delayed_CDB[3]);
wire delayed_CAPTB;
buf (CAPTB_buf, delayed_CAPTB);
wire delayed_PIPEMEB;
buf (PIPEMEB_buf, delayed_PIPEMEB);
wire delayed_TPIPEMEB;
buf (TPIPEMEB_buf, delayed_TPIPEMEB);
wire delayed_TCLKEB;
buf (TCLKEB_buf, delayed_TCLKEB);
wire delayed_STICKYB;
buf (STICKYB_buf, delayed_STICKYB);
wire delayed_SI_QB;
buf (SI_QB_buf, delayed_SI_QB);
wire delayed_SI_DB;
buf (SI_DB_buf, delayed_SI_DB);
wire delayed_SE_QB;
buf (SE_QB_buf, delayed_SE_QB);
wire delayed_SE_INB;
buf (SE_INB_buf, delayed_SE_INB);
wire delayed_SI_CNTRB;
buf (SI_CNTRB_buf, delayed_SI_CNTRB);
 
always @ (QA_final)
begin : blk_dofinal_0  
  if (QA_final !== 32'bx )
  begin
    EVENT_TCQ_A = 1'b0;
  end // if of QA_final != X
end // end of always block blk_dofinal_0
 
always @ (QB_final)
begin : blk_dofinal_1  
  if (QB_final !== 32'bx )
  begin
    EVENT_TCQ_B = 1'b0;
  end // if of QB_final != X
end // end of always block blk_dofinal_1
`endif
// -------------------------------------------------------------------
// Tasks
// -------------------------------------------------------------------

`ifndef MEMFAULTINJ
task fault_inject;
input [10 : 0] address;
input [4:0] bit_pos;
input flt_type;
begin
  if (uut.faultinj_en == 0)
  begin
    if (flt_type == 1)
    begin
      uut.mem_fault_array_sa1[address][bit_pos] = 1'b1 ;
      uut.mem_fault_array_sa0[address][bit_pos] = 1'b1 ;
    end
    else
    begin
      uut.mem_fault_array_sa0[address][bit_pos] = 1'b0 ;
      uut.mem_fault_array_sa1[address][bit_pos] = 1'b0 ;
    end
  end
end
endtask
`endif

reg disp_LS_msgA;
reg disp_LS_msgB;

reg en_msg_cntrl, mes_all_valid_old;
real msg_start_lmt, msg_end_lmt;
reg disp_LS_msgA_old;
reg disp_LS_msgB_old;
initial
begin
  en_msg_cntrl = 1'b0;
  mes_all_valid_old = 1'b0;
  disp_LS_msgA_old = 1'b1;
  disp_LS_msgB_old = 1'b1;
  if (MesCntrl_Begin < 0)
    msg_start_lmt = 0;
  else
    msg_start_lmt = MesCntrl_Begin;
  if (MesCntrl_End < 0)
    msg_end_lmt = 0;
  else
    msg_end_lmt = MesCntrl_End;
  
  if (msg_end_lmt > msg_start_lmt)
  begin
    en_msg_cntrl <= #(msg_start_lmt) 1'b1;
    en_msg_cntrl <= #(msg_end_lmt) 1'b0;
  end
end

`ifdef MES_CNTRL_PIN
always @(`MES_CNTRL_PIN)
begin
  if (msg_start_lmt == 0 && msg_end_lmt == 0)
  begin
    if (`MES_CNTRL_PIN  === `MES_CNTRL_PIN_VAL)
    begin
      en_msg_cntrl = 1;
    end
    else
    begin
      en_msg_cntrl = 0;
    end
  end
end
`endif

always @( en_msg_cntrl )
begin
  if (en_msg_cntrl == 1'b1 )
  begin
    mes_all_valid_old = uut.mes_all_valid;
    assign uut.mes_all_valid = 0;
    disp_LS_msgA_old = disp_LS_msgA;
    assign disp_LS_msgA = 0;
    disp_LS_msgB_old = disp_LS_msgB;
    assign disp_LS_msgB = 0;
  end
  else
  begin
    deassign uut.mes_all_valid ;
    uut.mes_all_valid = mes_all_valid_old;
    deassign disp_LS_msgA;
    disp_LS_msgA = disp_LS_msgA_old;
    deassign disp_LS_msgB;
    disp_LS_msgB = disp_LS_msgB_old;
  end
end


wire ADRA_valid;
assign ADRA_valid =  (ADRA_buf <= 11'b11101111111 )?1'b1:1'b0;
wire TADRA_valid;
assign TADRA_valid =  ( TADRA_buf <= 11'b11101111111 )?1'b1:1'b0;
wire ADRB_valid;
assign ADRB_valid =  (ADRB_buf <= 11'b11101111111 )?1'b1:1'b0;
wire TADRB_valid;
assign TADRB_valid =  ( TADRB_buf <= 11'b11101111111 )?1'b1:1'b0;
// Setup/hold conditions for syncronous signals
reg  MEA_pre,TMEA_pre;
reg  WEA_pre,TWEA_pre;
reg  [10:0] ADRA_pre;
reg  [31:0] DA_pre;
reg flag_ADRA_x;
assign CLKA_tmp = mclkA;

always @(MEA_mout or negedge CLKA_tmp) 
begin : blk_mebuf_0
  #0;
  if ( CLKA_tmp == 1'b0)
  begin
    MEA_pre = MEA_mout;
  end // if of CLKA_tmp = 0
end // end of always block blk_mebuf_0

always @(WEA_mout or negedge CLKA_tmp) 
begin : blk_webuf_0
  #0;
  if ( CLKA_tmp == 1'b0)
  begin
    WEA_pre = WEA_mout;
  end // if of CLKA_tmp = 0
end // end of always block blk_webuf_0

always @(ADRA_mout or negedge CLKA_tmp) 
begin : blk_addrbuf_0
  #0;
  if ( CLKA_tmp == 1'b0)
  begin
    ADRA_pre = ADRA_mout;
  end // if of CLKA_tmp = 0
  if ( (^ADRA_mout) === 1'bx)
  begin
    flag_ADRA_x = 1'b1;
  end 
  else
  begin
    flag_ADRA_x = 1'b0;
  end 
end // end of always block blk_addrbuf_0

always @(DA_mout or negedge CLKA_tmp) 
begin : blk_dibuf_0
  #0;
  if ( CLKA_tmp == 1'b0)
  begin
    DA_pre = DA_mout;
  end // if of CLKA_tmp = 0
end // end of always block blk_dibuf_0


always @(TWEA_buf or negedge TCLKA_buf) 
begin : blk_twebuf_0
  if ( TCLKA_buf == 1'b0)
  begin
    TWEA_pre = TWEA_buf;
  end // if of TCLKA_buf = 0
end // end of always block blk_twebuf_0

always @(TMEA_buf or negedge TCLKA_buf)
begin : blk_tmebuf_0
  if ( TCLKA_buf == 1'b0)
  begin
    TMEA_pre = TMEA_buf;
  end // if of TCLKA_buf = 0
end // end of always block blk_tmebuf_0


// Setup/hold condition for BISTEA: BISTEA is : ENBISTEA
real ENBISTEA_timeA,ENTBISTEA_timeA;
reg  ENBISTEAIA,ENTBISTEAIA;
reg  ENBISTEA_regA,ENTBISTEA_regA;
wire ENBISTEA,ENTBISTEA;

always @( MEA_buf or TMEA_buf )
begin : blk_me_tmebuf_0
  if ( MEA_buf === 1'b0 && TMEA_buf === 1'b0 && ($realtime == ENBISTEA_timeA) )
     ENBISTEAIA = 1'b0;
  else if ((ENBISTEA_regA === 1'b0) & (CLKA_buf === 1'b0))
    ENBISTEA_regA = 1'b1;
  else
     ENBISTEAIA = 1'b1;
end // end of always block blk_me_tmebuf_0

always @(negedge CLKA_buf)
begin : blk_negclkbuf_0
  if ( ENBISTEAIA === 1'b0)
    ENBISTEA_regA = MEA_buf || TMEA_buf;
  else
    ENBISTEA_regA = 1'b1;
end // end of always block blk_clkbuf_0

always @(posedge CLKA_buf)
begin : blk_posclkbuf_0
  ENBISTEA_timeA = $realtime;
  ENBISTEAIA = MEA_buf || TMEA_buf;
end // end of always block blk_posclkbuf_0

always @( MEA_buf or TMEA_buf )
begin
  if ( MEA_buf === 1'b0 && TMEA_buf === 1'b0 && ($realtime == ENTBISTEA_timeA) )
    ENTBISTEAIA = 1'b0;
  else if ((ENTBISTEA_regA === 1'b0) & (TCLKA_buf === 1'b0))
    ENTBISTEA_regA = 1'b1;
  else
    ENTBISTEAIA = 1'b1;
end

always @(negedge TCLKA_buf)
begin
  if ( ENTBISTEAIA === 1'b0)
    ENTBISTEA_regA = MEA_buf || TMEA_buf;
  else
    ENTBISTEA_regA = 1'b1;
end

always @(posedge TCLKA_buf)
begin
  ENTBISTEA_timeA = $realtime;
  ENTBISTEAIA = MEA_buf || TMEA_buf;
end

assign ENTBISTEA = (((ENTBISTEA_regA && !DFTMASK_buf) || (DFTMASK_buf === 1'b1 && SE_INA_buf === 1'b0)) && (TCLKEA_buf === 1'b1) && (LS_buf === 1'b0)) ;
assign ENBISTEA = (((ENBISTEA_regA && !DFTMASK_buf) || (DFTMASK_buf === 1'b1 && SE_INA_buf === 1'b0)) && (TCLKEA_buf === 1'b0) && (LS_buf === 1'b0));
`ifdef VIRAGE_FAST_VERILOG
`else
// Setup/hold condition for Address: ADRA is : ENADRACLKA
wire ENADRACLKA;
assign ENADRACLKA = ((((MEA_pre !== 1'b0 && DFTMASK_buf === 1'b0) || (DFTMASK_buf === 1'b1 && SE_INA_buf === 1'b0)) && BISTEA_buf === 1'b0 && (LS_buf === 1'b0) && (TCLKEA_buf === 1'b0)) ?1'b1:1'b0);
wire ENADRATCLKA;
assign ENADRATCLKA = ((((MEA_pre !== 1'b0 && DFTMASK_buf === 1'b0) || (DFTMASK_buf === 1'b1 && SE_INA_buf === 1'b0)) && BISTEA_buf === 1'b0 && (LS_buf === 1'b0) && (TCLKEA_buf === 1'b1)) ?1'b1:1'b0);

// Setup/hold condition for Memory Enable: MEA is : ENMEACLKA
wire ENMEACLKA;
assign ENMEACLKA = ((((DFTMASK_buf === 1'b0 && (ADRA_valid || flag_ADRA_x)) || (DFTMASK_buf === 1'b1 && SE_INA_buf === 1'b0)) && BISTEA_buf === 1'b0  && (TCLKEA_buf === 1'b0)) ?1'b1:1'b0);
wire ENMEATCLKA;
assign ENMEATCLKA = ((((DFTMASK_buf === 1'b0 && (ADRA_valid || flag_ADRA_x)) || (DFTMASK_buf === 1'b1 && SE_INA_buf === 1'b0)) && BISTEA_buf === 1'b0  && (TCLKEA_buf === 1'b1)) ?1'b1:1'b0);
 
// Setup/hold condition for Write Enable: WEA is : ENWEACLKA
wire ENWEACLKA;
assign ENWEACLKA = ((((MEA_pre !== 1'b0 && DFTMASK_buf === 1'b0 ) || (DFTMASK_buf === 1'b1 && SE_INA_buf === 1'b0)) && BISTEA_buf === 1'b0  && (LS_buf === 1'b0) && (TCLKEA_buf === 1'b0)) ?1'b1:1'b0);
wire ENWEATCLKA;
assign ENWEATCLKA = ((((MEA_pre !== 1'b0 && DFTMASK_buf === 1'b0 ) || (DFTMASK_buf === 1'b1 && SE_INA_buf === 1'b0)) && BISTEA_buf === 1'b0  && (LS_buf === 1'b0) && (TCLKEA_buf === 1'b1)) ?1'b1:1'b0);
 

// Setup/hold condition for Data In: DA is : ENDACLKA
wire ENDACLKA;
wire ENDATCLKA;
assign ENDACLKA = ((((MEA_pre !== 1'b0 && WEA_pre !== 1'b0 && DFTMASK_buf === 1'b0 && ADRA_valid) || (DFTMASK_buf === 1'b1 && SE_INA_buf === 1'b0)) && BISTEA_buf === 1'b0 && (LS_buf === 1'b0) && (TCLKEA_buf === 1'b0))?1'b1:1'b0);
assign ENDATCLKA = ((((MEA_pre !== 1'b0 && WEA_pre !== 1'b0 && DFTMASK_buf === 1'b0 && ADRA_valid) || (DFTMASK_buf === 1'b1 && SE_INA_buf === 1'b0)) && BISTEA_buf === 1'b0 && (LS_buf === 1'b0) && (TCLKEA_buf === 1'b1))?1'b1:1'b0);

// Setup/hold condition for test1 Vector: TEST1A is : ENTEST1A
wire ENTEST1A;
assign ENTEST1A = ((((ADRA_valid && BISTEA_buf == 1'b0) || (TADRA_valid && BISTEA_buf == 1'b1)) && MEA_pre !== 1'b0 && DFTMASK_buf === 1'b0 && (LS_buf === 1'b0) && (TCLKEA_buf === 1'b0))?1'b1:1'b0);
wire ENTTEST1A;
assign ENTTEST1A = ((((ADRA_valid && BISTEA_buf == 1'b0) || (TADRA_valid && BISTEA_buf == 1'b1)) && MEA_pre !== 1'b0 && DFTMASK_buf === 1'b0 && (LS_buf === 1'b0) && (TCLKEA_buf === 1'b1))?1'b1:1'b0);
// Setup/hold condition for Read Margin Vector: RMA is : ENRMA
wire ENRMA;
assign ENRMA = ((((ADRA_valid && BISTEA_buf == 1'b0) || (TADRA_valid && BISTEA_buf == 1'b1)) && RMEA_buf === 1'b1 && MEA_pre !== 1'b0  && DFTMASK_buf === 1'b0 && (LS_buf === 1'b0) && (TCLKEA_buf === 1'b0))?1'b1:1'b0);
wire ENTRMA;
assign ENTRMA = ((((ADRA_valid && BISTEA_buf == 1'b0) || (TADRA_valid && BISTEA_buf == 1'b1)) && RMEA_buf === 1'b1 && MEA_pre !== 1'b0 && DFTMASK_buf === 1'b0 && (LS_buf === 1'b0) && (TCLKEA_buf === 1'b1))?1'b1:1'b0);
wire ENRMEA;
assign ENRMEA = ((((ADRA_valid && BISTEA_buf == 1'b0) || (TADRA_valid && BISTEA_buf == 1'b1)) && MEA_pre !== 1'b0 && DFTMASK_buf === 1'b0 && (LS_buf === 1'b0) && (TCLKEA_buf === 1'b0))?1'b1:1'b0);
wire ENTRMEA;
assign ENTRMEA = ((((ADRA_valid && BISTEA_buf == 1'b0) || (TADRA_valid && BISTEA_buf == 1'b1)) && MEA_pre !== 1'b0 && DFTMASK_buf === 1'b0 && (LS_buf === 1'b0) && (TCLKEA_buf === 1'b1))?1'b1:1'b0);
// Setup/hold condition for Address: TADRA is : ENTADRATCLKA
wire ENTADRATCLKA;
assign ENTADRATCLKA = ((((MEA_pre !== 1'b0 && DFTMASK_buf === 1'b0) || (DFTMASK_buf === 1'b1 && SE_INA_buf === 1'b0)) && BISTEA_buf !== 1'b0 && (LS_buf === 1'b0) && (TCLKEA_buf === 1'b1)) ?1'b1:1'b0);
wire ENTADRACLKA;
assign ENTADRACLKA = ((((MEA_pre !== 1'b0 && DFTMASK_buf === 1'b0) || (DFTMASK_buf === 1'b1 && SE_INA_buf === 1'b0)) && BISTEA_buf !== 1'b0 && (LS_buf === 1'b0) && (TCLKEA_buf === 1'b0)) ?1'b1:1'b0);
 
// Setup/hold condition for Memory Enable: TMEA is : ENTMEATCLKA
wire ENTMEATCLKA;
assign ENTMEATCLKA =  ((((DFTMASK_buf === 1'b0 && (TADRA_valid || flag_ADRA_x)) || (DFTMASK_buf === 1'b1 && SE_INA_buf === 1'b0)) && BISTEA_buf !== 1'b0 && (TCLKEA_buf === 1'b1))?1'b1:1'b0);
wire ENTMEACLKA;
assign ENTMEACLKA =  ((((DFTMASK_buf === 1'b0 && (TADRA_valid || flag_ADRA_x)) || (DFTMASK_buf === 1'b1 && SE_INA_buf === 1'b0)) && BISTEA_buf !== 1'b0 && (TCLKEA_buf === 1'b0))?1'b1:1'b0);
 
// Setup/hold condition for Write Enable: TWEA is : ENTWEATCLKA
wire ENTWEATCLKA;
assign ENTWEATCLKA = ((((MEA_pre !== 1'b0 && DFTMASK_buf === 1'b0) || (DFTMASK_buf === 1'b1 && SE_INA_buf === 1'b0)) && BISTEA_buf !== 1'b0 && (LS_buf === 1'b0) && (TCLKEA_buf === 1'b1)) ?1'b1:1'b0);
wire ENTWEACLKA;
assign ENTWEACLKA = ((((MEA_pre !== 1'b0 && DFTMASK_buf === 1'b0) || (DFTMASK_buf === 1'b1 && SE_INA_buf === 1'b0)) && BISTEA_buf !== 1'b0 && (LS_buf === 1'b0) && (TCLKEA_buf === 1'b0)) ?1'b1:1'b0);
// Setup/hold condition for Data In: TDA is : ENTDATCLKA
wire ENTDATCLKA;
wire ENTDACLKA;
assign ENTDATCLKA = ((((MEA_pre !== 1'b0 && DFTMASK_buf === 1'b0 && TWEA_pre !== 1'b0 && TADRA_valid) || (DFTMASK_buf === 1'b1 && SE_INA_buf === 1'b0)) && BISTEA_buf !== 1'b0 && (LS_buf === 1'b0) && (TCLKEA_buf === 1'b1))?1'b1:1'b0) ;
assign ENTDACLKA = ((((MEA_pre !== 1'b0 && DFTMASK_buf === 1'b0 && TWEA_pre !== 1'b0 && TADRA_valid) || (DFTMASK_buf === 1'b1 && SE_INA_buf === 1'b0)) && BISTEA_buf !== 1'b0 && (LS_buf === 1'b0) && (TCLKEA_buf === 1'b0))?1'b1:1'b0) ;

// Setup/hold condition for Light Sleep: LS is : ENLS_A
wire ENLS_A;
assign ENLS_A = ((MEA_pre !== 1'b0 && (TCLKEA_buf === 1'b0))?1'b1:1'b0);

// Setup/hold condition for Light Sleep: LS is : ENTLS_A
wire ENTLS_A;
assign ENTLS_A = ((MEA_pre !== 1'b0 && (TCLKEA_buf === 1'b1))?1'b1:1'b0);

wire ENCLKA;
wire ENCLKA_test1;
wire ENTCLKA;
wire ENTCLKA_test1;
assign ENTCLKA = (((TCLKEA_buf === 1'b1) && (TEST1A_buf === 1'b0))?1'b1:1'b0);
assign ENTCLKA_test1 = (((TCLKEA_buf === 1'b1) && (TEST1A_buf === 1'b1) && DFTMASK_buf === 1'b0)?1'b1:1'b0);
wire ENTCLKA_rmezo,ENTCLKA_vdm,ENTCLKA_slw,ENTCLKA_def,ENTCLKA_fst;
assign ENTCLKA_rmezo = ((RMEA_buf !== 1'b1 && (TCLKEA_buf === 1'b1))?1'b1:1'b0) ;
assign ENTCLKA_vdm = ((RMEA_buf === 1'b1  && ( (RMA_buf[0] !== 1'b1) && (RMA_buf[1] !== 1'b1) && (RMA_buf[2] !== 1'b1) && (RMA_buf[3] !== 1'b1) ) && (TCLKEA_buf === 1'b1) )?1'b1:1'b0) ;
assign ENTCLKA_slw = ((RMEA_buf === 1'b1  && ( (RMA_buf[0] !== 1'b0) && (RMA_buf[1] !== 1'b1) && (RMA_buf[2] !== 1'b1) && (RMA_buf[3] !== 1'b1) ) && (TCLKEA_buf === 1'b1) )?1'b1:1'b0) ;
assign ENTCLKA_def = ((RMEA_buf === 1'b1  && ( (RMA_buf[0] !== 1'b1) && (RMA_buf[1] !== 1'b0) && (RMA_buf[2] !== 1'b1) && (RMA_buf[3] !== 1'b1) ) && (TCLKEA_buf === 1'b1) )?1'b1:1'b0) ;
assign ENTCLKA_fst = ((RMEA_buf === 1'b1  && ( (RMA_buf[0] !== 1'b0) && (RMA_buf[1] !== 1'b0) && (RMA_buf[2] !== 1'b1) && (RMA_buf[3] !== 1'b1) ) && (TCLKEA_buf === 1'b1) )?1'b1:1'b0) ;
assign ENCLKA = (((TCLKEA_buf === 1'b0) && (TEST1A_buf === 1'b0))?1'b1:1'b0) ;
assign ENCLKA_test1 = (((TCLKEA_buf === 1'b0) && (TEST1A_buf === 1'b1) && DFTMASK_buf === 1'b0)?1'b1:1'b0);
wire ENCLKA_rmezo,ENCLKA_vdm,ENCLKA_slw,ENCLKA_def,ENCLKA_fst;
assign ENCLKA_rmezo = ((RMEA_buf !== 1'b1 && (TCLKEA_buf === 1'b0))?1'b1:1'b0) ;
assign ENCLKA_vdm = ((RMEA_buf === 1'b1  && ( (RMA_buf[0] !== 1'b1) && (RMA_buf[1] !== 1'b1) && (RMA_buf[2] !== 1'b1) && (RMA_buf[3] !== 1'b1) ) && (TCLKEA_buf === 1'b0))?1'b1:1'b0) ;
assign ENCLKA_slw = ((RMEA_buf === 1'b1  && ( (RMA_buf[0] !== 1'b0) && (RMA_buf[1] !== 1'b1) && (RMA_buf[2] !== 1'b1) && (RMA_buf[3] !== 1'b1) ) && (TCLKEA_buf === 1'b0))?1'b1:1'b0) ;
assign ENCLKA_def = ((RMEA_buf === 1'b1  && ( (RMA_buf[0] !== 1'b1) && (RMA_buf[1] !== 1'b0) && (RMA_buf[2] !== 1'b1) && (RMA_buf[3] !== 1'b1) ) && (TCLKEA_buf === 1'b0))?1'b1:1'b0) ;
assign ENCLKA_fst = ((RMEA_buf === 1'b1  && ( (RMA_buf[0] !== 1'b0) && (RMA_buf[1] !== 1'b0) && (RMA_buf[2] !== 1'b1) && (RMA_buf[3] !== 1'b1) ) && (TCLKEA_buf === 1'b0))?1'b1:1'b0) ;

// Setup/hold condition for Pipeline Memory enable pin: PIPEMEA is : ENPIPEMEACLKA
wire ENPIPEMEACLKA, ENPIPEMEATCLKA, ENTPIPEMEATCLKA, ENTPIPEMEACLKA;
assign ENPIPEMEACLKA = ((BISTEA_buf == 1'b0 && SE_INA_buf === 1'b0 && ADRA_valid && (TCLKEA_buf === 1'b0))?1'b1:1'b0);
assign ENTPIPEMEATCLKA = ((BISTEA_buf == 1'b1 && SE_INA_buf === 1'b0 && TADRA_valid && (TCLKEA_buf === 1'b1))?1'b1:1'b0);
assign ENPIPEMEATCLKA = ((BISTEA_buf == 1'b0 && SE_INA_buf === 1'b0 && ADRA_valid && (TCLKEA_buf === 1'b1))?1'b1:1'b0);
assign ENTPIPEMEACLKA = ((BISTEA_buf == 1'b1 && SE_INA_buf === 1'b0 && TADRA_valid && (TCLKEA_buf === 1'b0))?1'b1:1'b0);

// Setup/hold condition for Synchronous Write enable pin: DFTCLKEN is : ENDFTCLKEN_A
wire ENDFTCLKEN_A, ENTDFTCLKEN_A;
assign ENDFTCLKEN_A = (( (LS_buf === 1'b0) && (TCLKEA_buf === 1'b0))?1'b1:1'b0);
assign ENTDFTCLKEN_A = (( (LS_buf === 1'b0) && (TCLKEA_buf === 1'b1))?1'b1:1'b0);

// Setup/hold condition for : DFTMASK is : ENDFTMASK_A
wire ENDFTMASK_A, ENTDFTMASK_A;
assign ENDFTMASK_A = (( (LS_buf === 1'b0) && (TCLKEA_buf === 1'b0) && ((MEA_pre !== 1'b0) || (SE_INA_buf === 1'b0)))?1'b1:1'b0);
assign ENTDFTMASK_A = (( (LS_buf === 1'b0) && (TCLKEA_buf === 1'b1) && ((MEA_pre !== 1'b0) || (SE_INA_buf === 1'b0)))?1'b1:1'b0);

// Setup/hold condition for : CAPTA is : ENCAPTA
wire ENCAPTA, ENTCAPTA;
assign ENCAPTA = (((TCLKEA_buf === 1'b0) && SE_INA_buf === 1'b0)?1'b1:1'b0);
assign ENTCAPTA = (((TCLKEA_buf === 1'b1) && SE_INA_buf === 1'b0)?1'b1:1'b0);

// Setup/hold condition for : CDA is : ENCDA
wire ENCDA, ENTCDA;
assign ENCDA = (((TCLKEA_buf === 1'b0) && SE_INA_buf === 1'b0)?1'b1:1'b0);
assign ENTCDA = (((TCLKEA_buf === 1'b1) && SE_INA_buf === 1'b0)?1'b1:1'b0);

// Setup/hold condition for : STICKYA is : ENSTICKYA
wire ENSTICKYA, ENTSTICKYA;
assign ENSTICKYA = (((TCLKEA_buf === 1'b0) && SE_INA_buf === 1'b0)?1'b1:1'b0);
assign ENTSTICKYA = (((TCLKEA_buf === 1'b1) && SE_INA_buf === 1'b0)?1'b1:1'b0);

// Setup/hold condition for : SI_QA is : ENSI_QA
wire ENSI_QA, ENTSI_QA;
assign ENSI_QA = (((TCLKEA_buf === 1'b0) && SE_QA_buf === 1'b1 && (((PIPEMEA_buf === 1'b1 && BISTEA_buf === 1'b0) || (TPIPEMEA_buf === 1'b1 && BISTEA_buf === 1'b1)) || DFTCLKEN_buf === 1'b1))?1'b1:1'b0);
assign ENTSI_QA = (((TCLKEA_buf === 1'b1) && SE_QA_buf === 1'b1 && (((PIPEMEA_buf === 1'b1 && BISTEA_buf === 1'b0) || (TPIPEMEA_buf === 1'b1 && BISTEA_buf === 1'b1)) || DFTCLKEN_buf === 1'b1))?1'b1:1'b0);

// Setup/hold condition for : SI_DA is : ENSI_DA
wire ENSI_DA, ENTSI_DA;
assign ENSI_DA = (( (LS_buf === 1'b0) && (TCLKEA_buf === 1'b0) && SE_INA_buf === 1'b1 && (MEA_pre !== 1'b0 || DFTCLKEN_buf === 1'b1))?1'b1:1'b0);
assign ENTSI_DA = (( (LS_buf === 1'b0) && (TCLKEA_buf === 1'b1) && SE_INA_buf === 1'b1 && (MEA_pre !== 1'b0 || DFTCLKEN_buf === 1'b1))?1'b1:1'b0);

// Setup/hold condition for : SI_CNTRA is : ENSI_CNTRA
wire ENSI_CNTRA, ENTSI_CNTRA;
assign ENSI_CNTRA = (( (LS_buf === 1'b0) && (TCLKEA_buf === 1'b0) && SE_INA_buf === 1'b1 && (MEA_pre !== 1'b0 || DFTCLKEN_buf === 1'b1))?1'b1:1'b0);
assign ENTSI_CNTRA = (( (LS_buf === 1'b0) && (TCLKEA_buf === 1'b1) && SE_INA_buf === 1'b1 && (MEA_pre !== 1'b0 || DFTCLKEN_buf === 1'b1))?1'b1:1'b0);

// Setup/hold condition for : SE_INA is : ENSE_INA
wire ENSE_INA, ENTSE_INA;
assign ENSE_INA = (( (LS_buf === 1'b0) && (TCLKEA_buf === 1'b0))?1'b1:1'b0);
assign ENTSE_INA = (( (LS_buf === 1'b0) && (TCLKEA_buf === 1'b1))?1'b1:1'b0);

// Setup/hold condition for : SE_QA, ENSE_QA
wire ENSE_QA, ENTSE_QA;
assign ENSE_QA = (((TCLKEA_buf === 1'b0) && (((PIPEMEA_buf === 1'b1 && BISTEA_buf === 1'b0) || (TPIPEMEA_buf === 1'b1 && BISTEA_buf === 1'b1)) || DFTCLKEN_buf === 1'b1))?1'b1:1'b0);
assign ENTSE_QA = (((TCLKEA_buf === 1'b1) && (((PIPEMEA_buf === 1'b1 && BISTEA_buf === 1'b0) || (TPIPEMEA_buf === 1'b1 && BISTEA_buf === 1'b1)) || DFTCLKEN_buf === 1'b1))?1'b1:1'b0);

`endif // endif of VIRAGE_FAST_VERILOG
// Setup/hold condition for Clock Select pin: TCLKEA is : ENTCLKEA
wire ENTCLKEA, ENTTCLKEA;
assign ENTCLKEA = ((((ENBISTEA_regA === 1'b1 && DFTMASK_buf === 1'b0 && ADRA_valid) || (DFTMASK_buf === 1'b1 && SE_INA_buf === 1'b0))  && (LS_buf === 1'b0))?1'b1:1'b0);
assign ENTTCLKEA = ((((ENTBISTEA_regA === 1'b1 && DFTMASK_buf === 1'b0 && TADRA_valid) || (DFTMASK_buf === 1'b1 && SE_INA_buf === 1'b0))  && (LS_buf === 1'b0))?1'b1:1'b0);


reg  MEB_pre,TMEB_pre;
reg  WEB_pre,TWEB_pre;
reg  [10:0] ADRB_pre;
reg  [31:0] DB_pre;
reg flag_ADRB_x;
assign CLKB_tmp = mclkB;

always @(MEB_mout or negedge CLKB_tmp) 
begin : blk_mebuf_1
  #0;
  if ( CLKB_tmp == 1'b0)
  begin
    MEB_pre = MEB_mout;
  end // if of CLKB_tmp = 0
end // end of always block blk_mebuf_1

always @(WEB_mout or negedge CLKB_tmp) 
begin : blk_webuf_1
  #0;
  if ( CLKB_tmp == 1'b0)
  begin
    WEB_pre = WEB_mout;
  end // if of CLKB_tmp = 0
end // end of always block blk_webuf_1

always @(ADRB_mout or negedge CLKB_tmp) 
begin : blk_addrbuf_1
  #0;
  if ( CLKB_tmp == 1'b0)
  begin
    ADRB_pre = ADRB_mout;
  end // if of CLKB_tmp = 0
  if ( (^ADRB_mout) === 1'bx)
  begin
    flag_ADRB_x = 1'b1;
  end 
  else
  begin
    flag_ADRB_x = 1'b0;
  end 
end // end of always block blk_addrbuf_1

always @(DB_mout or negedge CLKB_tmp) 
begin : blk_dibuf_1
  #0;
  if ( CLKB_tmp == 1'b0)
  begin
    DB_pre = DB_mout;
  end // if of CLKB_tmp = 0
end // end of always block blk_dibuf_1


always @(TWEB_buf or negedge TCLKB_buf) 
begin : blk_twebuf_1
  if ( TCLKB_buf == 1'b0)
  begin
    TWEB_pre = TWEB_buf;
  end // if of TCLKB_buf = 0
end // end of always block blk_twebuf_1

always @(TMEB_buf or negedge TCLKB_buf)
begin : blk_tmebuf_1
  if ( TCLKB_buf == 1'b0)
  begin
    TMEB_pre = TMEB_buf;
  end // if of TCLKB_buf = 0
end // end of always block blk_tmebuf_1


// Setup/hold condition for BISTEB: BISTEB is : ENBISTEB
real ENBISTEB_timeB,ENTBISTEB_timeB;
reg  ENBISTEBIB,ENTBISTEBIB;
reg  ENBISTEB_regB,ENTBISTEB_regB;
wire ENBISTEB,ENTBISTEB;

always @( MEB_buf or TMEB_buf )
begin : blk_me_tmebuf_1
  if ( MEB_buf === 1'b0 && TMEB_buf === 1'b0 && ($realtime == ENBISTEB_timeB) )
     ENBISTEBIB = 1'b0;
  else if ((ENBISTEB_regB === 1'b0) & (CLKB_buf === 1'b0))
    ENBISTEB_regB = 1'b1;
  else
     ENBISTEBIB = 1'b1;
end // end of always block blk_me_tmebuf_1

always @(negedge CLKB_buf)
begin : blk_negclkbuf_1
  if ( ENBISTEBIB === 1'b0)
    ENBISTEB_regB = MEB_buf || TMEB_buf;
  else
    ENBISTEB_regB = 1'b1;
end // end of always block blk_clkbuf_1

always @(posedge CLKB_buf)
begin : blk_posclkbuf_1
  ENBISTEB_timeB = $realtime;
  ENBISTEBIB = MEB_buf || TMEB_buf;
end // end of always block blk_posclkbuf_1

always @( MEB_buf or TMEB_buf )
begin
  if ( MEB_buf === 1'b0 && TMEB_buf === 1'b0 && ($realtime == ENTBISTEB_timeB) )
    ENTBISTEBIB = 1'b0;
  else if ((ENTBISTEB_regB === 1'b0) & (TCLKB_buf === 1'b0))
    ENTBISTEB_regB = 1'b1;
  else
    ENTBISTEBIB = 1'b1;
end

always @(negedge TCLKB_buf)
begin
  if ( ENTBISTEBIB === 1'b0)
    ENTBISTEB_regB = MEB_buf || TMEB_buf;
  else
    ENTBISTEB_regB = 1'b1;
end

always @(posedge TCLKB_buf)
begin
  ENTBISTEB_timeB = $realtime;
  ENTBISTEBIB = MEB_buf || TMEB_buf;
end

assign ENTBISTEB = (((ENTBISTEB_regB && !DFTMASK_buf) || (DFTMASK_buf === 1'b1 && SE_INB_buf === 1'b0)) && (TCLKEB_buf === 1'b1) && (LS_buf === 1'b0)) ;
assign ENBISTEB = (((ENBISTEB_regB && !DFTMASK_buf) || (DFTMASK_buf === 1'b1 && SE_INB_buf === 1'b0)) && (TCLKEB_buf === 1'b0) && (LS_buf === 1'b0));
`ifdef VIRAGE_FAST_VERILOG
`else
// Setup/hold condition for Address: ADRB is : ENADRBCLKB
wire ENADRBCLKB;
assign ENADRBCLKB = ((((MEB_pre !== 1'b0 && DFTMASK_buf === 1'b0) || (DFTMASK_buf === 1'b1 && SE_INB_buf === 1'b0)) && BISTEB_buf === 1'b0 && (LS_buf === 1'b0) && (TCLKEB_buf === 1'b0)) ?1'b1:1'b0);
wire ENADRBTCLKB;
assign ENADRBTCLKB = ((((MEB_pre !== 1'b0 && DFTMASK_buf === 1'b0) || (DFTMASK_buf === 1'b1 && SE_INB_buf === 1'b0)) && BISTEB_buf === 1'b0 && (LS_buf === 1'b0) && (TCLKEB_buf === 1'b1)) ?1'b1:1'b0);

// Setup/hold condition for Memory Enable: MEB is : ENMEBCLKB
wire ENMEBCLKB;
assign ENMEBCLKB = ((((DFTMASK_buf === 1'b0 && (ADRB_valid || flag_ADRB_x)) || (DFTMASK_buf === 1'b1 && SE_INB_buf === 1'b0)) && BISTEB_buf === 1'b0  && (TCLKEB_buf === 1'b0)) ?1'b1:1'b0);
wire ENMEBTCLKB;
assign ENMEBTCLKB = ((((DFTMASK_buf === 1'b0 && (ADRB_valid || flag_ADRB_x)) || (DFTMASK_buf === 1'b1 && SE_INB_buf === 1'b0)) && BISTEB_buf === 1'b0  && (TCLKEB_buf === 1'b1)) ?1'b1:1'b0);
 
// Setup/hold condition for Write Enable: WEB is : ENWEBCLKB
wire ENWEBCLKB;
assign ENWEBCLKB = ((((MEB_pre !== 1'b0 && DFTMASK_buf === 1'b0 ) || (DFTMASK_buf === 1'b1 && SE_INB_buf === 1'b0)) && BISTEB_buf === 1'b0  && (LS_buf === 1'b0) && (TCLKEB_buf === 1'b0)) ?1'b1:1'b0);
wire ENWEBTCLKB;
assign ENWEBTCLKB = ((((MEB_pre !== 1'b0 && DFTMASK_buf === 1'b0 ) || (DFTMASK_buf === 1'b1 && SE_INB_buf === 1'b0)) && BISTEB_buf === 1'b0  && (LS_buf === 1'b0) && (TCLKEB_buf === 1'b1)) ?1'b1:1'b0);
 

// Setup/hold condition for Data In: DB is : ENDBCLKB
wire ENDBCLKB;
wire ENDBTCLKB;
assign ENDBCLKB = ((((MEB_pre !== 1'b0 && WEB_pre !== 1'b0 && DFTMASK_buf === 1'b0 && ADRB_valid) || (DFTMASK_buf === 1'b1 && SE_INB_buf === 1'b0)) && BISTEB_buf === 1'b0 && (LS_buf === 1'b0) && (TCLKEB_buf === 1'b0))?1'b1:1'b0);
assign ENDBTCLKB = ((((MEB_pre !== 1'b0 && WEB_pre !== 1'b0 && DFTMASK_buf === 1'b0 && ADRB_valid) || (DFTMASK_buf === 1'b1 && SE_INB_buf === 1'b0)) && BISTEB_buf === 1'b0 && (LS_buf === 1'b0) && (TCLKEB_buf === 1'b1))?1'b1:1'b0);

// Setup/hold condition for test1 Vector: TEST1B is : ENTEST1B
wire ENTEST1B;
assign ENTEST1B = ((((ADRB_valid && BISTEB_buf == 1'b0) || (TADRB_valid && BISTEB_buf == 1'b1)) && MEB_pre !== 1'b0 && DFTMASK_buf === 1'b0 && (LS_buf === 1'b0) && (TCLKEB_buf === 1'b0))?1'b1:1'b0);
wire ENTTEST1B;
assign ENTTEST1B = ((((ADRB_valid && BISTEB_buf == 1'b0) || (TADRB_valid && BISTEB_buf == 1'b1)) && MEB_pre !== 1'b0 && DFTMASK_buf === 1'b0 && (LS_buf === 1'b0) && (TCLKEB_buf === 1'b1))?1'b1:1'b0);
// Setup/hold condition for Read Margin Vector: RMB is : ENRMB
wire ENRMB;
assign ENRMB = ((((ADRB_valid && BISTEB_buf == 1'b0) || (TADRB_valid && BISTEB_buf == 1'b1)) && RMEB_buf === 1'b1 && MEB_pre !== 1'b0  && DFTMASK_buf === 1'b0 && (LS_buf === 1'b0) && (TCLKEB_buf === 1'b0))?1'b1:1'b0);
wire ENTRMB;
assign ENTRMB = ((((ADRB_valid && BISTEB_buf == 1'b0) || (TADRB_valid && BISTEB_buf == 1'b1)) && RMEB_buf === 1'b1 && MEB_pre !== 1'b0 && DFTMASK_buf === 1'b0 && (LS_buf === 1'b0) && (TCLKEB_buf === 1'b1))?1'b1:1'b0);
wire ENRMEB;
assign ENRMEB = ((((ADRB_valid && BISTEB_buf == 1'b0) || (TADRB_valid && BISTEB_buf == 1'b1)) && MEB_pre !== 1'b0 && DFTMASK_buf === 1'b0 && (LS_buf === 1'b0) && (TCLKEB_buf === 1'b0))?1'b1:1'b0);
wire ENTRMEB;
assign ENTRMEB = ((((ADRB_valid && BISTEB_buf == 1'b0) || (TADRB_valid && BISTEB_buf == 1'b1)) && MEB_pre !== 1'b0 && DFTMASK_buf === 1'b0 && (LS_buf === 1'b0) && (TCLKEB_buf === 1'b1))?1'b1:1'b0);
// Setup/hold condition for Address: TADRB is : ENTADRBTCLKB
wire ENTADRBTCLKB;
assign ENTADRBTCLKB = ((((MEB_pre !== 1'b0 && DFTMASK_buf === 1'b0) || (DFTMASK_buf === 1'b1 && SE_INB_buf === 1'b0)) && BISTEB_buf !== 1'b0 && (LS_buf === 1'b0) && (TCLKEB_buf === 1'b1)) ?1'b1:1'b0);
wire ENTADRBCLKB;
assign ENTADRBCLKB = ((((MEB_pre !== 1'b0 && DFTMASK_buf === 1'b0) || (DFTMASK_buf === 1'b1 && SE_INB_buf === 1'b0)) && BISTEB_buf !== 1'b0 && (LS_buf === 1'b0) && (TCLKEB_buf === 1'b0)) ?1'b1:1'b0);
 
// Setup/hold condition for Memory Enable: TMEB is : ENTMEBTCLKB
wire ENTMEBTCLKB;
assign ENTMEBTCLKB =  ((((DFTMASK_buf === 1'b0 && (TADRB_valid || flag_ADRB_x)) || (DFTMASK_buf === 1'b1 && SE_INB_buf === 1'b0)) && BISTEB_buf !== 1'b0 && (TCLKEB_buf === 1'b1))?1'b1:1'b0);
wire ENTMEBCLKB;
assign ENTMEBCLKB =  ((((DFTMASK_buf === 1'b0 && (TADRB_valid || flag_ADRB_x)) || (DFTMASK_buf === 1'b1 && SE_INB_buf === 1'b0)) && BISTEB_buf !== 1'b0 && (TCLKEB_buf === 1'b0))?1'b1:1'b0);
 
// Setup/hold condition for Write Enable: TWEB is : ENTWEBTCLKB
wire ENTWEBTCLKB;
assign ENTWEBTCLKB = ((((MEB_pre !== 1'b0 && DFTMASK_buf === 1'b0) || (DFTMASK_buf === 1'b1 && SE_INB_buf === 1'b0)) && BISTEB_buf !== 1'b0 && (LS_buf === 1'b0) && (TCLKEB_buf === 1'b1)) ?1'b1:1'b0);
wire ENTWEBCLKB;
assign ENTWEBCLKB = ((((MEB_pre !== 1'b0 && DFTMASK_buf === 1'b0) || (DFTMASK_buf === 1'b1 && SE_INB_buf === 1'b0)) && BISTEB_buf !== 1'b0 && (LS_buf === 1'b0) && (TCLKEB_buf === 1'b0)) ?1'b1:1'b0);
// Setup/hold condition for Data In: TDB is : ENTDBTCLKB
wire ENTDBTCLKB;
wire ENTDBCLKB;
assign ENTDBTCLKB = ((((MEB_pre !== 1'b0 && DFTMASK_buf === 1'b0 && TWEB_pre !== 1'b0 && TADRB_valid) || (DFTMASK_buf === 1'b1 && SE_INB_buf === 1'b0)) && BISTEB_buf !== 1'b0 && (LS_buf === 1'b0) && (TCLKEB_buf === 1'b1))?1'b1:1'b0) ;
assign ENTDBCLKB = ((((MEB_pre !== 1'b0 && DFTMASK_buf === 1'b0 && TWEB_pre !== 1'b0 && TADRB_valid) || (DFTMASK_buf === 1'b1 && SE_INB_buf === 1'b0)) && BISTEB_buf !== 1'b0 && (LS_buf === 1'b0) && (TCLKEB_buf === 1'b0))?1'b1:1'b0) ;

// Setup/hold condition for Light Sleep: LS is : ENLS_B
wire ENLS_B;
assign ENLS_B = ((MEB_pre !== 1'b0 && (TCLKEB_buf === 1'b0))?1'b1:1'b0);

// Setup/hold condition for Light Sleep: LS is : ENTLS_B
wire ENTLS_B;
assign ENTLS_B = ((MEB_pre !== 1'b0 && (TCLKEB_buf === 1'b1))?1'b1:1'b0);

wire ENCLKB;
wire ENCLKB_test1;
wire ENTCLKB;
wire ENTCLKB_test1;
assign ENTCLKB = (((TCLKEB_buf === 1'b1) && (TEST1B_buf === 1'b0))?1'b1:1'b0);
assign ENTCLKB_test1 = (((TCLKEB_buf === 1'b1) && (TEST1B_buf === 1'b1) && DFTMASK_buf === 1'b0)?1'b1:1'b0);
wire ENTCLKB_rmezo,ENTCLKB_vdm,ENTCLKB_slw,ENTCLKB_def,ENTCLKB_fst;
assign ENTCLKB_rmezo = ((RMEB_buf !== 1'b1 && (TCLKEB_buf === 1'b1))?1'b1:1'b0) ;
assign ENTCLKB_vdm = ((RMEB_buf === 1'b1  && ( (RMB_buf[0] !== 1'b1) && (RMB_buf[1] !== 1'b1) && (RMB_buf[2] !== 1'b1) && (RMB_buf[3] !== 1'b1) ) && (TCLKEB_buf === 1'b1) )?1'b1:1'b0) ;
assign ENTCLKB_slw = ((RMEB_buf === 1'b1  && ( (RMB_buf[0] !== 1'b0) && (RMB_buf[1] !== 1'b1) && (RMB_buf[2] !== 1'b1) && (RMB_buf[3] !== 1'b1) ) && (TCLKEB_buf === 1'b1) )?1'b1:1'b0) ;
assign ENTCLKB_def = ((RMEB_buf === 1'b1  && ( (RMB_buf[0] !== 1'b1) && (RMB_buf[1] !== 1'b0) && (RMB_buf[2] !== 1'b1) && (RMB_buf[3] !== 1'b1) ) && (TCLKEB_buf === 1'b1) )?1'b1:1'b0) ;
assign ENTCLKB_fst = ((RMEB_buf === 1'b1  && ( (RMB_buf[0] !== 1'b0) && (RMB_buf[1] !== 1'b0) && (RMB_buf[2] !== 1'b1) && (RMB_buf[3] !== 1'b1) ) && (TCLKEB_buf === 1'b1) )?1'b1:1'b0) ;
assign ENCLKB = (((TCLKEB_buf === 1'b0) && (TEST1B_buf === 1'b0))?1'b1:1'b0) ;
assign ENCLKB_test1 = (((TCLKEB_buf === 1'b0) && (TEST1B_buf === 1'b1) && DFTMASK_buf === 1'b0)?1'b1:1'b0);
wire ENCLKB_rmezo,ENCLKB_vdm,ENCLKB_slw,ENCLKB_def,ENCLKB_fst;
assign ENCLKB_rmezo = ((RMEB_buf !== 1'b1 && (TCLKEB_buf === 1'b0))?1'b1:1'b0) ;
assign ENCLKB_vdm = ((RMEB_buf === 1'b1  && ( (RMB_buf[0] !== 1'b1) && (RMB_buf[1] !== 1'b1) && (RMB_buf[2] !== 1'b1) && (RMB_buf[3] !== 1'b1) ) && (TCLKEB_buf === 1'b0))?1'b1:1'b0) ;
assign ENCLKB_slw = ((RMEB_buf === 1'b1  && ( (RMB_buf[0] !== 1'b0) && (RMB_buf[1] !== 1'b1) && (RMB_buf[2] !== 1'b1) && (RMB_buf[3] !== 1'b1) ) && (TCLKEB_buf === 1'b0))?1'b1:1'b0) ;
assign ENCLKB_def = ((RMEB_buf === 1'b1  && ( (RMB_buf[0] !== 1'b1) && (RMB_buf[1] !== 1'b0) && (RMB_buf[2] !== 1'b1) && (RMB_buf[3] !== 1'b1) ) && (TCLKEB_buf === 1'b0))?1'b1:1'b0) ;
assign ENCLKB_fst = ((RMEB_buf === 1'b1  && ( (RMB_buf[0] !== 1'b0) && (RMB_buf[1] !== 1'b0) && (RMB_buf[2] !== 1'b1) && (RMB_buf[3] !== 1'b1) ) && (TCLKEB_buf === 1'b0))?1'b1:1'b0) ;

// Setup/hold condition for Pipeline Memory enable pin: PIPEMEB is : ENPIPEMEBCLKB
wire ENPIPEMEBCLKB, ENPIPEMEBTCLKB, ENTPIPEMEBTCLKB, ENTPIPEMEBCLKB;
assign ENPIPEMEBCLKB = ((BISTEB_buf == 1'b0 && SE_INB_buf === 1'b0 && ADRB_valid && (TCLKEB_buf === 1'b0))?1'b1:1'b0);
assign ENTPIPEMEBTCLKB = ((BISTEB_buf == 1'b1 && SE_INB_buf === 1'b0 && TADRB_valid && (TCLKEB_buf === 1'b1))?1'b1:1'b0);
assign ENPIPEMEBTCLKB = ((BISTEB_buf == 1'b0 && SE_INB_buf === 1'b0 && ADRB_valid && (TCLKEB_buf === 1'b1))?1'b1:1'b0);
assign ENTPIPEMEBCLKB = ((BISTEB_buf == 1'b1 && SE_INB_buf === 1'b0 && TADRB_valid && (TCLKEB_buf === 1'b0))?1'b1:1'b0);

// Setup/hold condition for Synchronous Write enable pin: DFTCLKEN is : ENDFTCLKEN_B
wire ENDFTCLKEN_B, ENTDFTCLKEN_B;
assign ENDFTCLKEN_B = (( (LS_buf === 1'b0) && (TCLKEB_buf === 1'b0))?1'b1:1'b0);
assign ENTDFTCLKEN_B = (( (LS_buf === 1'b0) && (TCLKEB_buf === 1'b1))?1'b1:1'b0);

// Setup/hold condition for : DFTMASK is : ENDFTMASK_B
wire ENDFTMASK_B, ENTDFTMASK_B;
assign ENDFTMASK_B = (( (LS_buf === 1'b0) && (TCLKEB_buf === 1'b0) && ((MEB_pre !== 1'b0) || (SE_INB_buf === 1'b0)))?1'b1:1'b0);
assign ENTDFTMASK_B = (( (LS_buf === 1'b0) && (TCLKEB_buf === 1'b1) && ((MEB_pre !== 1'b0) || (SE_INB_buf === 1'b0)))?1'b1:1'b0);

// Setup/hold condition for : CAPTB is : ENCAPTB
wire ENCAPTB, ENTCAPTB;
assign ENCAPTB = (((TCLKEB_buf === 1'b0) && SE_INB_buf === 1'b0)?1'b1:1'b0);
assign ENTCAPTB = (((TCLKEB_buf === 1'b1) && SE_INB_buf === 1'b0)?1'b1:1'b0);

// Setup/hold condition for : CDB is : ENCDB
wire ENCDB, ENTCDB;
assign ENCDB = (((TCLKEB_buf === 1'b0) && SE_INB_buf === 1'b0)?1'b1:1'b0);
assign ENTCDB = (((TCLKEB_buf === 1'b1) && SE_INB_buf === 1'b0)?1'b1:1'b0);

// Setup/hold condition for : STICKYB is : ENSTICKYB
wire ENSTICKYB, ENTSTICKYB;
assign ENSTICKYB = (((TCLKEB_buf === 1'b0) && SE_INB_buf === 1'b0)?1'b1:1'b0);
assign ENTSTICKYB = (((TCLKEB_buf === 1'b1) && SE_INB_buf === 1'b0)?1'b1:1'b0);

// Setup/hold condition for : SI_QB is : ENSI_QB
wire ENSI_QB, ENTSI_QB;
assign ENSI_QB = (((TCLKEB_buf === 1'b0) && SE_QB_buf === 1'b1 && (((PIPEMEB_buf === 1'b1 && BISTEB_buf === 1'b0) || (TPIPEMEB_buf === 1'b1 && BISTEB_buf === 1'b1)) || DFTCLKEN_buf === 1'b1))?1'b1:1'b0);
assign ENTSI_QB = (((TCLKEB_buf === 1'b1) && SE_QB_buf === 1'b1 && (((PIPEMEB_buf === 1'b1 && BISTEB_buf === 1'b0) || (TPIPEMEB_buf === 1'b1 && BISTEB_buf === 1'b1)) || DFTCLKEN_buf === 1'b1))?1'b1:1'b0);

// Setup/hold condition for : SI_DB is : ENSI_DB
wire ENSI_DB, ENTSI_DB;
assign ENSI_DB = (( (LS_buf === 1'b0) && (TCLKEB_buf === 1'b0) && SE_INB_buf === 1'b1 && (MEB_pre !== 1'b0 || DFTCLKEN_buf === 1'b1))?1'b1:1'b0);
assign ENTSI_DB = (( (LS_buf === 1'b0) && (TCLKEB_buf === 1'b1) && SE_INB_buf === 1'b1 && (MEB_pre !== 1'b0 || DFTCLKEN_buf === 1'b1))?1'b1:1'b0);

// Setup/hold condition for : SI_CNTRB is : ENSI_CNTRB
wire ENSI_CNTRB, ENTSI_CNTRB;
assign ENSI_CNTRB = (( (LS_buf === 1'b0) && (TCLKEB_buf === 1'b0) && SE_INB_buf === 1'b1 && (MEB_pre !== 1'b0 || DFTCLKEN_buf === 1'b1))?1'b1:1'b0);
assign ENTSI_CNTRB = (( (LS_buf === 1'b0) && (TCLKEB_buf === 1'b1) && SE_INB_buf === 1'b1 && (MEB_pre !== 1'b0 || DFTCLKEN_buf === 1'b1))?1'b1:1'b0);

// Setup/hold condition for : SE_INB is : ENSE_INB
wire ENSE_INB, ENTSE_INB;
assign ENSE_INB = (( (LS_buf === 1'b0) && (TCLKEB_buf === 1'b0))?1'b1:1'b0);
assign ENTSE_INB = (( (LS_buf === 1'b0) && (TCLKEB_buf === 1'b1))?1'b1:1'b0);

// Setup/hold condition for : SE_QB, ENSE_QB
wire ENSE_QB, ENTSE_QB;
assign ENSE_QB = (((TCLKEB_buf === 1'b0) && (((PIPEMEB_buf === 1'b1 && BISTEB_buf === 1'b0) || (TPIPEMEB_buf === 1'b1 && BISTEB_buf === 1'b1)) || DFTCLKEN_buf === 1'b1))?1'b1:1'b0);
assign ENTSE_QB = (((TCLKEB_buf === 1'b1) && (((PIPEMEB_buf === 1'b1 && BISTEB_buf === 1'b0) || (TPIPEMEB_buf === 1'b1 && BISTEB_buf === 1'b1)) || DFTCLKEN_buf === 1'b1))?1'b1:1'b0);

`endif // endif of VIRAGE_FAST_VERILOG
// Setup/hold condition for Clock Select pin: TCLKEB is : ENTCLKEB
wire ENTCLKEB, ENTTCLKEB;
assign ENTCLKEB = ((((ENBISTEB_regB === 1'b1 && DFTMASK_buf === 1'b0 && ADRB_valid) || (DFTMASK_buf === 1'b1 && SE_INB_buf === 1'b0))  && (LS_buf === 1'b0))?1'b1:1'b0);
assign ENTTCLKEB = ((((ENTBISTEB_regB === 1'b1 && DFTMASK_buf === 1'b0 && TADRB_valid) || (DFTMASK_buf === 1'b1 && SE_INB_buf === 1'b0))  && (LS_buf === 1'b0))?1'b1:1'b0);


reg MEA_buf_L;
reg WEA_buf_L;
`ifdef VIRAGE_FAST_VERILOG
`else
`endif // endif of VIRAGE_FAST_VERILOG
reg MEB_buf_L;
reg WEB_buf_L;
`ifdef VIRAGE_FAST_VERILOG
`else
`endif // endif of VIRAGE_FAST_VERILOG
wire adr_same_a;
wire adr_valid_a;
`ifdef VIRAGE_FAST_VERILOG
`else
wire we_activeA;
wire me_activeA;
wire both_tclke_active; 
wire both_tclke_dactive;
wire tclkeA_active_tclkeB_dactive;
wire tclkeB_active_tclkeA_dactive;
wire ENCLKACLKBrec;
wire ENTCLKATCLKBrec;
wire ENCLKBCLKArec;
wire ENTCLKBTCLKArec;
wire ENCLKATCLKBrec;
wire ENTCLKBCLKArec;
wire ENCLKBTCLKArec;
wire ENTCLKACLKBrec;
assign adr_same_a = (((ADRA_old == ADRB_buf_L) && adr_valid_a) || (CLKA_tmp === 1'bx || CLKB_tmp === 1'bx) || ((ADRA_old^ADRA_old) !== 0) || ((ADRB_buf_L^ADRB_buf_L) !== 0)) ? 1'b1:1'b0;
`endif // endif of VIRAGE_FAST_VERILOG
assign adr_valid_a = ( ADRFLAGA && !BISTEA_buf ) || ( TADRFLAGA && BISTEA_buf );
`ifdef VIRAGE_FAST_VERILOG
`else
assign both_tclke_active = ( (TCLKEA_buf === 1'b1) && (TCLKEB_buf === 1'b1 ) && (DFTMASK_buf === 1'b0)) ?1'b1:1'b0;
assign both_tclke_dactive = ( (TCLKEA_buf === 1'b0) && (TCLKEB_buf === 1'b0 ) && (DFTMASK_buf === 1'b0)) ?1'b1:1'b0;
assign tclkeA_active_tclkeB_dactive = ( (TCLKEA_buf === 1'b1) && (TCLKEB_buf === 1'b0 ) && (DFTMASK_buf === 1'b0)) ?1'b1:1'b0;
assign tclkeB_active_tclkeA_dactive = ( (TCLKEA_buf === 1'b0) && (TCLKEB_buf === 1'b1 ) && (DFTMASK_buf === 1'b0)) ?1'b1:1'b0;
`endif // endif of VIRAGE_FAST_VERILOG
`ifdef VIRAGE_FAST_VERILOG
`else
assign we_activeA = ( ( WEA_old === 1'b0 ) && ( WEB_buf_L === 1'b0 ))?1'b0:1'b1;
assign me_activeA = ( ( MEA_old !== 1'b0 ) && ( MEB_buf_L !== 1'b0 ) && (LS_buf === 1'b0))?1'b1:1'b0;
and u_rec_0 ( ENCLKBCLKArec, rise_time_same, adr_same_a, me_activeA, we_activeA, both_tclke_dactive);
and u1_rec_0 ( ENTCLKBTCLKArec, rise_time_same, adr_same_a, me_activeA, we_activeA, both_tclke_active);
and u2_rec_0 ( ENTCLKBCLKArec, rise_time_same, adr_same_a, me_activeA, we_activeA, tclkeB_active_tclkeA_dactive);
and u3_rec_0 ( ENCLKBTCLKArec, rise_time_same, adr_same_a, me_activeA, we_activeA, tclkeA_active_tclkeB_dactive);
`endif // endif of VIRAGE_FAST_VERILOG
wire adr_same_b;
wire adr_valid_b;
`ifdef VIRAGE_FAST_VERILOG
`else
wire we_activeB;
wire me_activeB;
assign adr_same_b = (((ADRB_old == ADRA_buf_L) && adr_valid_b) || (CLKB_tmp === 1'bx || CLKA_tmp === 1'bx) || ((ADRB_old^ADRB_old) !== 0) || ((ADRA_buf_L^ADRA_buf_L) !== 0)) ? 1'b1:1'b0;
`endif // endif of VIRAGE_FAST_VERILOG
assign adr_valid_b = ( ADRFLAGB && !BISTEB_buf ) || ( TADRFLAGB && BISTEB_buf );
`ifdef VIRAGE_FAST_VERILOG
`else
assign we_activeB = ( ( WEB_old === 1'b0 ) && ( WEA_buf_L === 1'b0 ))?1'b0:1'b1;
assign me_activeB = ( ( MEB_old !== 1'b0 ) && ( MEA_buf_L !== 1'b0 ) && (LS_buf === 1'b0))?1'b1:1'b0;
and u_rec_1 ( ENCLKACLKBrec, rise_time_same, adr_same_b, me_activeB, we_activeB, both_tclke_dactive);
and u1_rec_1 ( ENTCLKATCLKBrec, rise_time_same, adr_same_b, me_activeB, we_activeB, both_tclke_active);
and u2_rec_1 ( ENTCLKACLKBrec, rise_time_same, adr_same_b, me_activeB, we_activeB, tclkeA_active_tclkeB_dactive);
and u3_rec_1 ( ENCLKATCLKBrec, rise_time_same, adr_same_b, me_activeB, we_activeB, tclkeB_active_tclkeA_dactive);
`endif // endif of VIRAGE_FAST_VERILOG
wire LS_old;
reg flag_tclke_clkA;
wire DFTMASK_old;
wire DFTCLKEN_old;
reg DFTMASK_latchedA;
reg DFTMASK_latchedB;
reg flag_tclke_clkB;

`ifdef VIRAGE_FAST_VERILOG
`else
specify
 
  specparam
    Tac = 0.358,
    Tcax = 0.195,
    Tdc = 0.350,
    Tcdx = 0.632,
    Twc = 0.572,
    Tcwx = 0.195,
    Tmc = 0.350,
    Tcmx = 0.254,
    Tcsep = 1.927,
    Tcl = 0.828,
    Tcltest1 = 1.112,
    Tch = 0.339,
    Tchtest1 = 1.860,
    Tcc = 1.929,
    Tccvddmin = 2.531,
    Tccslow = 2.343,
    Tccdef = 1.929,
    Tccfast = 1.910,
    Tbdc = 0.937,
    Tbcdx = 0.121,
    Tbc = 1.318,
    Tcbx = 0.632,
    TT1C = 0.572,
    TCT1X = 1.101,
    Trmec = 0.572,
    Tcrmex = 1.341,
    Trmc = 0.866,
    Tcrmx = 1.341,
    Tdatc = 0.104,
    Tcdatx = 0.204,
    Tcaptc = 0.104,
    Tcaptx = 0.204,
    Tpmec = 0.379,
    Tpmex = 0.158,
    Ttclkec = 0.304,
    Ttclkex = 0.339,
    Tstc = 0.104,
    Tstx = 0.204,
    Tsiqc = 0.328,
    Tsiqx = 0.283,
    Tsidc = 0.393,
    Tsidx = 0.271,
    Tseqc = 0.954,
    Tseqx = 0.283,
    Tseinc = 1.318,
    Tseinx = 0.204,
    Tsicc = 0.156,
    Tsicx = 0.195,
    Tswtc = 0.424,
    Tswtx = 0.339,
    Tdftc = 0.990,
    Tdftx = 1.929,
    Trlsc = 0.236,
    Tflsc = 1.837,
    Tlsx = 0.354,
    Tcq = 1.682,
    Tcqx = 1.316,
    Tcqvddmin = 2.286,
    Tcqvddminx = 1.890,
    Tcqslow = 1.860,
    Tcqslowx = 1.486,
    Tcqdef = 1.682,
    Tcqdefx = 1.316,
    Tcqfast = 1.617,
    Tcqfastx = 1.255,
    Tcqtest1x = 1.486,
    Tcqswt = 1.532,
    Tcqswtx = 1.188,
    Tcqtest1 = 1.112,
    Tswtq = 1.187,
    Tcqp = 0.675,
    Tcqpx = 0.403,
    Tcsq = 1.292,
    Tcsd = 1.430,
    Tcsc = 0.832;
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[31]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[30]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[29]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[28]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[27]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[26]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[25]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[24]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[23]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[22]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[21]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[20]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[19]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[18]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[17]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[16]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[15]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[14]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[13]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[12]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[11]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[10]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[9]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[8]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[7]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[6]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[5]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[4]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[3]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[2]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[1]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[0]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[31]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[30]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[29]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[28]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[27]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[26]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[25]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[24]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[23]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[22]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[21]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[20]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[19]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[18]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[17]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[16]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[15]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[14]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[13]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[12]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[11]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[10]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[9]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[8]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[7]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[6]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[5]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[4]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[3]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[2]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[1]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[0]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[31]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[30]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[29]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[28]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[27]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[26]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[25]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[24]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[23]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[22]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[21]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[20]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[19]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[18]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[17]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[16]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[15]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[14]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[13]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[12]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[11]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[10]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[9]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[8]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[7]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[6]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[5]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[4]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[3]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[2]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[1]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[0]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[31]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[30]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[29]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[28]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[27]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[26]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[25]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[24]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[23]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[22]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[21]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[20]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[19]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[18]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[17]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[16]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[15]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[14]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[13]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[12]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[11]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[10]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[9]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[8]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[7]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[6]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[5]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[4]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[3]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[2]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[1]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[0]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[31]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[30]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[29]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[28]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[27]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[26]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[25]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[24]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[23]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[22]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[21]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[20]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[19]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[18]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[17]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[16]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[15]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[14]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[13]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[12]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[11]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[10]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[9]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[8]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[7]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[6]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[5]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[4]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[3]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[2]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[1]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[0]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[31]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[30]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[29]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[28]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[27]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[26]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[25]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[24]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[23]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[22]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[21]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[20]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[19]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[18]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[17]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[16]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[15]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[14]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[13]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[12]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[11]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[10]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[9]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[8]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[7]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[6]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[5]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[4]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[3]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[2]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[1]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[0]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[31]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[30]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[29]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[28]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[27]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[26]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[25]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[24]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[23]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[22]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[21]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[20]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[19]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[18]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[17]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[16]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[15]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[14]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[13]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[12]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[11]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[10]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[9]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[8]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[7]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[6]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[5]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[4]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[3]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[2]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[1]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[0]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[31]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[30]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[29]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[28]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[27]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[26]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[25]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[24]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[23]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[22]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[21]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[20]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[19]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[18]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[17]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[16]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[15]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[14]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[13]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[12]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[11]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[10]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[9]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[8]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[7]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[6]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[5]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[4]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[3]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[2]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[1]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[0]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[31]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[30]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[29]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[28]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[27]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[26]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[25]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[24]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[23]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[22]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[21]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[20]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[19]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[18]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[17]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[16]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[15]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[14]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[13]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[12]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[11]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[10]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[9]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[8]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[7]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[6]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[5]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[4]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[3]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[2]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[1]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[0]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[31]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[30]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[29]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[28]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[27]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[26]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[25]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[24]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[23]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[22]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[21]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[20]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[19]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[18]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[17]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[16]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[15]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[14]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[13]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[12]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[11]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[10]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[9]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[8]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[7]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[6]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[5]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[4]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[3]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[2]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[1]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[0]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[31]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[30]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[29]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[28]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[27]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[26]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[25]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[24]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[23]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[22]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[21]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[20]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[19]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[18]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[17]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[16]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[15]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[14]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[13]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[12]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[11]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[10]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[9]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[8]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[7]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[6]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[5]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[4]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[3]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[2]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[1]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[0]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[31]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[30]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[29]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[28]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[27]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[26]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[25]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[24]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[23]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[22]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[21]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[20]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[19]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[18]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[17]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[16]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[15]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[14]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[13]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[12]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[11]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[10]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[9]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[8]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[7]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[6]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[5]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[4]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[3]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[2]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[1]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[0]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[31]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[30]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[29]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[28]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[27]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[26]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[25]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[24]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[23]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[22]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[21]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[20]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[19]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[18]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[17]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[16]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[15]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[14]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[13]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[12]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[11]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[10]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[9]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[8]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[7]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[6]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[5]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[4]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[3]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[2]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[1]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[0]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[31]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[30]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[29]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[28]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[27]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[26]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[25]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[24]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[23]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[22]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[21]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[20]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[19]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[18]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[17]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[16]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[15]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[14]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[13]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[12]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[11]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[10]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[9]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[8]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[7]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[6]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[5]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[4]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[3]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[2]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[1]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[0]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[31]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[30]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[29]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[28]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[27]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[26]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[25]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[24]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[23]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[22]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[21]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[20]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[19]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[18]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[17]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[16]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[15]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[14]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[13]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[12]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[11]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[10]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[9]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[8]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[7]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[6]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[5]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[4]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[3]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[2]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[1]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[0]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[31]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[30]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[29]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[28]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[27]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[26]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[25]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[24]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[23]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[22]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[21]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[20]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[19]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[18]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[17]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[16]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[15]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[14]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[13]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[12]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[11]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[10]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[9]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[8]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[7]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[6]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[5]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[4]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[3]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[2]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[1]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[0]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS )
       ( posedge DFTMASK => (  QA[31]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[30]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[29]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[28]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[27]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[26]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[25]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[24]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[23]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[22]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[21]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[20]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[19]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[18]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[17]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[16]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[15]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[14]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[13]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[12]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[11]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[10]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[9]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[8]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[7]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[6]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[5]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[4]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[3]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[2]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[1]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[0]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[31]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[30]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[29]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[28]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[27]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[26]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[25]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[24]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[23]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[22]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[21]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[20]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[19]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[18]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[17]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[16]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[15]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[14]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[13]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[12]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[11]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[10]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[9]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[8]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[7]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[6]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[5]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[4]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[3]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[2]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[1]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[0]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[31]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[30]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[29]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[28]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[27]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[26]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[25]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[24]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[23]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[22]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[21]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[20]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[19]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[18]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[17]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[16]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[15]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[14]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[13]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[12]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[11]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[10]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[9]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[8]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[7]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[6]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[5]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[4]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[3]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[2]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[1]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[0]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !LS & !TCLKEA )
       ( posedge CLKA => (  SO_QA  : 1'bx )) = (  Tcsq, Tcsq );
     if ( !LS & TCLKEA )
       ( posedge TCLKA => (  SO_QA  : 1'bx )) = (  Tcsq, Tcsq );
     if ( !LS & !TCLKEA )
       ( posedge CLKA => (  SO_DA  : 1'bx )) = (  Tcsd, Tcsd );
     if ( !LS & TCLKEA )
       ( posedge TCLKA => (  SO_DA  : 1'bx )) = (  Tcsd, Tcsd );
     if ( !LS & !TCLKEA )
       ( posedge CLKA => (  SO_CNTRA  : 1'bx )) = (  Tcsc, Tcsc );
     if ( !LS & TCLKEA )
       ( posedge TCLKA => (  SO_CNTRA  : 1'bx )) = (  Tcsc, Tcsc );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[31]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[30]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[29]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[28]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[27]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[26]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[25]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[24]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[23]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[22]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[21]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[20]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[19]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[18]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[17]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[16]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[15]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[14]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[13]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[12]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[11]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[10]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[9]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[8]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[7]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[6]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[5]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[4]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[3]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[2]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[1]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[0]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[31]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[30]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[29]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[28]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[27]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[26]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[25]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[24]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[23]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[22]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[21]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[20]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[19]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[18]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[17]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[16]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[15]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[14]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[13]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[12]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[11]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[10]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[9]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[8]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[7]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[6]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[5]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[4]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[3]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[2]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[1]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[0]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[31]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[30]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[29]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[28]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[27]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[26]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[25]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[24]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[23]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[22]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[21]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[20]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[19]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[18]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[17]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[16]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[15]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[14]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[13]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[12]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[11]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[10]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[9]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[8]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[7]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[6]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[5]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[4]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[3]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[2]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[1]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[0]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[31]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[30]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[29]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[28]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[27]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[26]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[25]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[24]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[23]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[22]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[21]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[20]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[19]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[18]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[17]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[16]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[15]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[14]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[13]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[12]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[11]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[10]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[9]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[8]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[7]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[6]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[5]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[4]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[3]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[2]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[1]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[0]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[31]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[30]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[29]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[28]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[27]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[26]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[25]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[24]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[23]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[22]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[21]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[20]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[19]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[18]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[17]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[16]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[15]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[14]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[13]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[12]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[11]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[10]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[9]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[8]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[7]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[6]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[5]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[4]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[3]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[2]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[1]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[0]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[31]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[30]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[29]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[28]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[27]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[26]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[25]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[24]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[23]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[22]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[21]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[20]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[19]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[18]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[17]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[16]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[15]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[14]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[13]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[12]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[11]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[10]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[9]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[8]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[7]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[6]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[5]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[4]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[3]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[2]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[1]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[0]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[31]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[30]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[29]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[28]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[27]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[26]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[25]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[24]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[23]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[22]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[21]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[20]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[19]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[18]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[17]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[16]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[15]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[14]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[13]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[12]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[11]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[10]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[9]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[8]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[7]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[6]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[5]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[4]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[3]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[2]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[1]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[0]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[31]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[30]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[29]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[28]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[27]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[26]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[25]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[24]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[23]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[22]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[21]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[20]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[19]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[18]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[17]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[16]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[15]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[14]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[13]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[12]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[11]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[10]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[9]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[8]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[7]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[6]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[5]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[4]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[3]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[2]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[1]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[0]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[31]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[30]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[29]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[28]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[27]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[26]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[25]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[24]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[23]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[22]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[21]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[20]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[19]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[18]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[17]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[16]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[15]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[14]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[13]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[12]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[11]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[10]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[9]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[8]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[7]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[6]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[5]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[4]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[3]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[2]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[1]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[0]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[31]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[30]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[29]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[28]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[27]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[26]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[25]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[24]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[23]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[22]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[21]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[20]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[19]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[18]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[17]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[16]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[15]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[14]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[13]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[12]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[11]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[10]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[9]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[8]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[7]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[6]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[5]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[4]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[3]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[2]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[1]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[0]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[31]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[30]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[29]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[28]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[27]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[26]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[25]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[24]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[23]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[22]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[21]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[20]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[19]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[18]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[17]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[16]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[15]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[14]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[13]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[12]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[11]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[10]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[9]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[8]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[7]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[6]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[5]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[4]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[3]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[2]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[1]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[0]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[31]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[30]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[29]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[28]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[27]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[26]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[25]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[24]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[23]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[22]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[21]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[20]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[19]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[18]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[17]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[16]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[15]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[14]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[13]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[12]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[11]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[10]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[9]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[8]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[7]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[6]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[5]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[4]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[3]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[2]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[1]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[0]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[31]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[30]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[29]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[28]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[27]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[26]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[25]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[24]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[23]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[22]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[21]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[20]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[19]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[18]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[17]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[16]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[15]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[14]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[13]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[12]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[11]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[10]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[9]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[8]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[7]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[6]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[5]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[4]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[3]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[2]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[1]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[0]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[31]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[30]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[29]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[28]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[27]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[26]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[25]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[24]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[23]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[22]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[21]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[20]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[19]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[18]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[17]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[16]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[15]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[14]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[13]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[12]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[11]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[10]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[9]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[8]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[7]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[6]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[5]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[4]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[3]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[2]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[1]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[0]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[31]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[30]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[29]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[28]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[27]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[26]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[25]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[24]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[23]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[22]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[21]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[20]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[19]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[18]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[17]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[16]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[15]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[14]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[13]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[12]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[11]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[10]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[9]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[8]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[7]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[6]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[5]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[4]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[3]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[2]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[1]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[0]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[31]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[30]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[29]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[28]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[27]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[26]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[25]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[24]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[23]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[22]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[21]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[20]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[19]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[18]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[17]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[16]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[15]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[14]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[13]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[12]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[11]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[10]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[9]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[8]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[7]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[6]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[5]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[4]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[3]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[2]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[1]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[0]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS )
       ( posedge DFTMASK => (  QB[31]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[30]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[29]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[28]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[27]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[26]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[25]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[24]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[23]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[22]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[21]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[20]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[19]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[18]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[17]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[16]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[15]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[14]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[13]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[12]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[11]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[10]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[9]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[8]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[7]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[6]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[5]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[4]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[3]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[2]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[1]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[0]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[31]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[30]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[29]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[28]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[27]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[26]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[25]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[24]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[23]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[22]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[21]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[20]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[19]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[18]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[17]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[16]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[15]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[14]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[13]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[12]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[11]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[10]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[9]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[8]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[7]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[6]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[5]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[4]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[3]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[2]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[1]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[0]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[31]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[30]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[29]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[28]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[27]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[26]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[25]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[24]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[23]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[22]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[21]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[20]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[19]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[18]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[17]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[16]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[15]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[14]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[13]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[12]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[11]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[10]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[9]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[8]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[7]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[6]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[5]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[4]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[3]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[2]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[1]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[0]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !LS & !TCLKEB )
       ( posedge CLKB => (  SO_QB  : 1'bx )) = (  Tcsq, Tcsq );
     if ( !LS & TCLKEB )
       ( posedge TCLKB => (  SO_QB  : 1'bx )) = (  Tcsq, Tcsq );
     if ( !LS & !TCLKEB )
       ( posedge CLKB => (  SO_DB  : 1'bx )) = (  Tcsd, Tcsd );
     if ( !LS & TCLKEB )
       ( posedge TCLKB => (  SO_DB  : 1'bx )) = (  Tcsd, Tcsd );
     if ( !LS & !TCLKEB )
       ( posedge CLKB => (  SO_CNTRB  : 1'bx )) = (  Tcsc, Tcsc );
     if ( !LS & TCLKEB )
       ( posedge TCLKB => (  SO_CNTRB  : 1'bx )) = (  Tcsc, Tcsc );

// Timing Checks

  $width (negedge CLKA &&& ENCLKA, Tcl, 0, notif_clka);
  $width (negedge CLKA &&& ENCLKA_test1, Tcltest1, 0, notif_clka);
  $width (posedge CLKA &&& ENCLKA, Tch, 0, notif_clka);
  $width (posedge CLKA &&& ENCLKA_test1, Tchtest1, 0, notif_clka);
  $period (posedge CLKA &&& ENCLKA_rmezo, Tcc, notif_clka);
  $period (negedge CLKA &&& ENCLKA_rmezo, Tcc, notif_clka);
  $period (posedge CLKA &&& ENCLKA_vdm, Tccvddmin, notif_clka);
  $period (negedge CLKA &&& ENCLKA_vdm, Tccvddmin, notif_clka);
  $period (posedge CLKA &&& ENCLKA_slw, Tccslow, notif_clka);
  $period (negedge CLKA &&& ENCLKA_slw, Tccslow, notif_clka);
  $period (posedge CLKA &&& ENCLKA_def, Tccdef, notif_clka);
  $period (negedge CLKA &&& ENCLKA_def, Tccdef, notif_clka);
  $period (posedge CLKA &&& ENCLKA_fst, Tccfast, notif_clka);
  $period (negedge CLKA &&& ENCLKA_fst, Tccfast, notif_clka);
  $width (negedge TCLKA &&& ENTCLKA, Tcl, 0, notif_clka);
  $width (negedge TCLKA &&& ENTCLKA_test1, Tcltest1, 0, notif_clka);
  $width (posedge TCLKA &&& ENTCLKA, Tch, 0, notif_clka);
  $width (posedge TCLKA &&& ENTCLKA_test1, Tchtest1, 0, notif_clka);
  $period (posedge TCLKA &&& ENTCLKA_rmezo, Tcc, notif_clka);
  $period (negedge TCLKA &&& ENTCLKA_rmezo, Tcc, notif_clka);
  $period (posedge TCLKA &&& ENTCLKA_vdm, Tccvddmin, notif_clka);
  $period (negedge TCLKA &&& ENTCLKA_vdm, Tccvddmin, notif_clka);
  $period (posedge TCLKA &&& ENTCLKA_slw, Tccslow, notif_clka);
  $period (negedge TCLKA &&& ENTCLKA_slw, Tccslow, notif_clka);
  $period (posedge TCLKA &&& ENTCLKA_def, Tccdef, notif_clka);
  $period (negedge TCLKA &&& ENTCLKA_def, Tccdef, notif_clka);
  $period (posedge TCLKA &&& ENTCLKA_fst, Tccfast, notif_clka);
  $period (negedge TCLKA &&& ENTCLKA_fst, Tccfast, notif_clka);
  $width (negedge CLKB &&& ENCLKB, Tcl, 0, notif_clkb);
  $width (negedge CLKB &&& ENCLKB_test1, Tcltest1, 0, notif_clkb);
  $width (posedge CLKB &&& ENCLKB, Tch, 0, notif_clkb);
  $width (posedge CLKB &&& ENCLKB_test1, Tchtest1, 0, notif_clkb);
  $period (posedge CLKB &&& ENCLKB_rmezo, Tcc, notif_clkb);
  $period (negedge CLKB &&& ENCLKB_rmezo, Tcc, notif_clkb);
  $period (posedge CLKB &&& ENCLKB_vdm, Tccvddmin, notif_clkb);
  $period (negedge CLKB &&& ENCLKB_vdm, Tccvddmin, notif_clkb);
  $period (posedge CLKB &&& ENCLKB_slw, Tccslow, notif_clkb);
  $period (negedge CLKB &&& ENCLKB_slw, Tccslow, notif_clkb);
  $period (posedge CLKB &&& ENCLKB_def, Tccdef, notif_clkb);
  $period (negedge CLKB &&& ENCLKB_def, Tccdef, notif_clkb);
  $period (posedge CLKB &&& ENCLKB_fst, Tccfast, notif_clkb);
  $period (negedge CLKB &&& ENCLKB_fst, Tccfast, notif_clkb);
  $width (negedge TCLKB &&& ENTCLKB, Tcl, 0, notif_clkb);
  $width (negedge TCLKB &&& ENTCLKB_test1, Tcltest1, 0, notif_clkb);
  $width (posedge TCLKB &&& ENTCLKB, Tch, 0, notif_clkb);
  $width (posedge TCLKB &&& ENTCLKB_test1, Tchtest1, 0, notif_clkb);
  $period (posedge TCLKB &&& ENTCLKB_rmezo, Tcc, notif_clkb);
  $period (negedge TCLKB &&& ENTCLKB_rmezo, Tcc, notif_clkb);
  $period (posedge TCLKB &&& ENTCLKB_vdm, Tccvddmin, notif_clkb);
  $period (negedge TCLKB &&& ENTCLKB_vdm, Tccvddmin, notif_clkb);
  $period (posedge TCLKB &&& ENTCLKB_slw, Tccslow, notif_clkb);
  $period (negedge TCLKB &&& ENTCLKB_slw, Tccslow, notif_clkb);
  $period (posedge TCLKB &&& ENTCLKB_def, Tccdef, notif_clkb);
  $period (negedge TCLKB &&& ENTCLKB_def, Tccdef, notif_clkb);
  $period (posedge TCLKB &&& ENTCLKB_fst, Tccfast, notif_clkb);
  $period (negedge TCLKB &&& ENTCLKB_fst, Tccfast, notif_clkb);
  $setuphold (posedge CLKA  &&& ENADRACLKA, posedge ADRA[0], Tac, Tcax, notif_adra_0,,, delayed_CLKA, delayed_ADRA[0] );
  $setuphold (posedge CLKA  &&& ENADRACLKA, negedge ADRA[0], Tac, Tcax, notif_adra_0,,, delayed_CLKA, delayed_ADRA[0] );
  $setuphold (posedge CLKA  &&& ENADRACLKA, posedge ADRA[1], Tac, Tcax, notif_adra_1,,, delayed_CLKA, delayed_ADRA[1] );
  $setuphold (posedge CLKA  &&& ENADRACLKA, negedge ADRA[1], Tac, Tcax, notif_adra_1,,, delayed_CLKA, delayed_ADRA[1] );
  $setuphold (posedge CLKA  &&& ENADRACLKA, posedge ADRA[2], Tac, Tcax, notif_adra_2,,, delayed_CLKA, delayed_ADRA[2] );
  $setuphold (posedge CLKA  &&& ENADRACLKA, negedge ADRA[2], Tac, Tcax, notif_adra_2,,, delayed_CLKA, delayed_ADRA[2] );
  $setuphold (posedge CLKA  &&& ENADRACLKA, posedge ADRA[3], Tac, Tcax, notif_adra_3,,, delayed_CLKA, delayed_ADRA[3] );
  $setuphold (posedge CLKA  &&& ENADRACLKA, negedge ADRA[3], Tac, Tcax, notif_adra_3,,, delayed_CLKA, delayed_ADRA[3] );
  $setuphold (posedge CLKA  &&& ENADRACLKA, posedge ADRA[4], Tac, Tcax, notif_adra_4,,, delayed_CLKA, delayed_ADRA[4] );
  $setuphold (posedge CLKA  &&& ENADRACLKA, negedge ADRA[4], Tac, Tcax, notif_adra_4,,, delayed_CLKA, delayed_ADRA[4] );
  $setuphold (posedge CLKA  &&& ENADRACLKA, posedge ADRA[5], Tac, Tcax, notif_adra_5,,, delayed_CLKA, delayed_ADRA[5] );
  $setuphold (posedge CLKA  &&& ENADRACLKA, negedge ADRA[5], Tac, Tcax, notif_adra_5,,, delayed_CLKA, delayed_ADRA[5] );
  $setuphold (posedge CLKA  &&& ENADRACLKA, posedge ADRA[6], Tac, Tcax, notif_adra_6,,, delayed_CLKA, delayed_ADRA[6] );
  $setuphold (posedge CLKA  &&& ENADRACLKA, negedge ADRA[6], Tac, Tcax, notif_adra_6,,, delayed_CLKA, delayed_ADRA[6] );
  $setuphold (posedge CLKA  &&& ENADRACLKA, posedge ADRA[7], Tac, Tcax, notif_adra_7,,, delayed_CLKA, delayed_ADRA[7] );
  $setuphold (posedge CLKA  &&& ENADRACLKA, negedge ADRA[7], Tac, Tcax, notif_adra_7,,, delayed_CLKA, delayed_ADRA[7] );
  $setuphold (posedge CLKA  &&& ENADRACLKA, posedge ADRA[8], Tac, Tcax, notif_adra_8,,, delayed_CLKA, delayed_ADRA[8] );
  $setuphold (posedge CLKA  &&& ENADRACLKA, negedge ADRA[8], Tac, Tcax, notif_adra_8,,, delayed_CLKA, delayed_ADRA[8] );
  $setuphold (posedge CLKA  &&& ENADRACLKA, posedge ADRA[9], Tac, Tcax, notif_adra_9,,, delayed_CLKA, delayed_ADRA[9] );
  $setuphold (posedge CLKA  &&& ENADRACLKA, negedge ADRA[9], Tac, Tcax, notif_adra_9,,, delayed_CLKA, delayed_ADRA[9] );
  $setuphold (posedge CLKA  &&& ENADRACLKA, posedge ADRA[10], Tac, Tcax, notif_adra_10,,, delayed_CLKA, delayed_ADRA[10] );
  $setuphold (posedge CLKA  &&& ENADRACLKA, negedge ADRA[10], Tac, Tcax, notif_adra_10,,, delayed_CLKA, delayed_ADRA[10] );
  $setuphold (posedge TCLKA  &&& ENADRATCLKA, posedge ADRA[0], Tac, Tcax, notif_adra_0,,, delayed_TCLKA, delayed_ADRA[0] );
  $setuphold (posedge TCLKA  &&& ENADRATCLKA, negedge ADRA[0], Tac, Tcax, notif_adra_0,,, delayed_TCLKA, delayed_ADRA[0] );
  $setuphold (posedge TCLKA  &&& ENADRATCLKA, posedge ADRA[1], Tac, Tcax, notif_adra_1,,, delayed_TCLKA, delayed_ADRA[1] );
  $setuphold (posedge TCLKA  &&& ENADRATCLKA, negedge ADRA[1], Tac, Tcax, notif_adra_1,,, delayed_TCLKA, delayed_ADRA[1] );
  $setuphold (posedge TCLKA  &&& ENADRATCLKA, posedge ADRA[2], Tac, Tcax, notif_adra_2,,, delayed_TCLKA, delayed_ADRA[2] );
  $setuphold (posedge TCLKA  &&& ENADRATCLKA, negedge ADRA[2], Tac, Tcax, notif_adra_2,,, delayed_TCLKA, delayed_ADRA[2] );
  $setuphold (posedge TCLKA  &&& ENADRATCLKA, posedge ADRA[3], Tac, Tcax, notif_adra_3,,, delayed_TCLKA, delayed_ADRA[3] );
  $setuphold (posedge TCLKA  &&& ENADRATCLKA, negedge ADRA[3], Tac, Tcax, notif_adra_3,,, delayed_TCLKA, delayed_ADRA[3] );
  $setuphold (posedge TCLKA  &&& ENADRATCLKA, posedge ADRA[4], Tac, Tcax, notif_adra_4,,, delayed_TCLKA, delayed_ADRA[4] );
  $setuphold (posedge TCLKA  &&& ENADRATCLKA, negedge ADRA[4], Tac, Tcax, notif_adra_4,,, delayed_TCLKA, delayed_ADRA[4] );
  $setuphold (posedge TCLKA  &&& ENADRATCLKA, posedge ADRA[5], Tac, Tcax, notif_adra_5,,, delayed_TCLKA, delayed_ADRA[5] );
  $setuphold (posedge TCLKA  &&& ENADRATCLKA, negedge ADRA[5], Tac, Tcax, notif_adra_5,,, delayed_TCLKA, delayed_ADRA[5] );
  $setuphold (posedge TCLKA  &&& ENADRATCLKA, posedge ADRA[6], Tac, Tcax, notif_adra_6,,, delayed_TCLKA, delayed_ADRA[6] );
  $setuphold (posedge TCLKA  &&& ENADRATCLKA, negedge ADRA[6], Tac, Tcax, notif_adra_6,,, delayed_TCLKA, delayed_ADRA[6] );
  $setuphold (posedge TCLKA  &&& ENADRATCLKA, posedge ADRA[7], Tac, Tcax, notif_adra_7,,, delayed_TCLKA, delayed_ADRA[7] );
  $setuphold (posedge TCLKA  &&& ENADRATCLKA, negedge ADRA[7], Tac, Tcax, notif_adra_7,,, delayed_TCLKA, delayed_ADRA[7] );
  $setuphold (posedge TCLKA  &&& ENADRATCLKA, posedge ADRA[8], Tac, Tcax, notif_adra_8,,, delayed_TCLKA, delayed_ADRA[8] );
  $setuphold (posedge TCLKA  &&& ENADRATCLKA, negedge ADRA[8], Tac, Tcax, notif_adra_8,,, delayed_TCLKA, delayed_ADRA[8] );
  $setuphold (posedge TCLKA  &&& ENADRATCLKA, posedge ADRA[9], Tac, Tcax, notif_adra_9,,, delayed_TCLKA, delayed_ADRA[9] );
  $setuphold (posedge TCLKA  &&& ENADRATCLKA, negedge ADRA[9], Tac, Tcax, notif_adra_9,,, delayed_TCLKA, delayed_ADRA[9] );
  $setuphold (posedge TCLKA  &&& ENADRATCLKA, posedge ADRA[10], Tac, Tcax, notif_adra_10,,, delayed_TCLKA, delayed_ADRA[10] );
  $setuphold (posedge TCLKA  &&& ENADRATCLKA, negedge ADRA[10], Tac, Tcax, notif_adra_10,,, delayed_TCLKA, delayed_ADRA[10] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[0], Tdc, Tcdx, notif_da_0,,, delayed_CLKA, delayed_DA[0] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[0], Tdc, Tcdx, notif_da_0,,, delayed_CLKA, delayed_DA[0] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[1], Tdc, Tcdx, notif_da_1,,, delayed_CLKA, delayed_DA[1] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[1], Tdc, Tcdx, notif_da_1,,, delayed_CLKA, delayed_DA[1] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[2], Tdc, Tcdx, notif_da_2,,, delayed_CLKA, delayed_DA[2] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[2], Tdc, Tcdx, notif_da_2,,, delayed_CLKA, delayed_DA[2] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[3], Tdc, Tcdx, notif_da_3,,, delayed_CLKA, delayed_DA[3] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[3], Tdc, Tcdx, notif_da_3,,, delayed_CLKA, delayed_DA[3] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[4], Tdc, Tcdx, notif_da_4,,, delayed_CLKA, delayed_DA[4] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[4], Tdc, Tcdx, notif_da_4,,, delayed_CLKA, delayed_DA[4] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[5], Tdc, Tcdx, notif_da_5,,, delayed_CLKA, delayed_DA[5] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[5], Tdc, Tcdx, notif_da_5,,, delayed_CLKA, delayed_DA[5] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[6], Tdc, Tcdx, notif_da_6,,, delayed_CLKA, delayed_DA[6] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[6], Tdc, Tcdx, notif_da_6,,, delayed_CLKA, delayed_DA[6] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[7], Tdc, Tcdx, notif_da_7,,, delayed_CLKA, delayed_DA[7] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[7], Tdc, Tcdx, notif_da_7,,, delayed_CLKA, delayed_DA[7] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[8], Tdc, Tcdx, notif_da_8,,, delayed_CLKA, delayed_DA[8] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[8], Tdc, Tcdx, notif_da_8,,, delayed_CLKA, delayed_DA[8] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[9], Tdc, Tcdx, notif_da_9,,, delayed_CLKA, delayed_DA[9] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[9], Tdc, Tcdx, notif_da_9,,, delayed_CLKA, delayed_DA[9] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[10], Tdc, Tcdx, notif_da_10,,, delayed_CLKA, delayed_DA[10] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[10], Tdc, Tcdx, notif_da_10,,, delayed_CLKA, delayed_DA[10] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[11], Tdc, Tcdx, notif_da_11,,, delayed_CLKA, delayed_DA[11] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[11], Tdc, Tcdx, notif_da_11,,, delayed_CLKA, delayed_DA[11] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[12], Tdc, Tcdx, notif_da_12,,, delayed_CLKA, delayed_DA[12] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[12], Tdc, Tcdx, notif_da_12,,, delayed_CLKA, delayed_DA[12] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[13], Tdc, Tcdx, notif_da_13,,, delayed_CLKA, delayed_DA[13] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[13], Tdc, Tcdx, notif_da_13,,, delayed_CLKA, delayed_DA[13] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[14], Tdc, Tcdx, notif_da_14,,, delayed_CLKA, delayed_DA[14] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[14], Tdc, Tcdx, notif_da_14,,, delayed_CLKA, delayed_DA[14] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[15], Tdc, Tcdx, notif_da_15,,, delayed_CLKA, delayed_DA[15] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[15], Tdc, Tcdx, notif_da_15,,, delayed_CLKA, delayed_DA[15] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[16], Tdc, Tcdx, notif_da_16,,, delayed_CLKA, delayed_DA[16] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[16], Tdc, Tcdx, notif_da_16,,, delayed_CLKA, delayed_DA[16] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[17], Tdc, Tcdx, notif_da_17,,, delayed_CLKA, delayed_DA[17] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[17], Tdc, Tcdx, notif_da_17,,, delayed_CLKA, delayed_DA[17] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[18], Tdc, Tcdx, notif_da_18,,, delayed_CLKA, delayed_DA[18] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[18], Tdc, Tcdx, notif_da_18,,, delayed_CLKA, delayed_DA[18] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[19], Tdc, Tcdx, notif_da_19,,, delayed_CLKA, delayed_DA[19] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[19], Tdc, Tcdx, notif_da_19,,, delayed_CLKA, delayed_DA[19] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[20], Tdc, Tcdx, notif_da_20,,, delayed_CLKA, delayed_DA[20] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[20], Tdc, Tcdx, notif_da_20,,, delayed_CLKA, delayed_DA[20] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[21], Tdc, Tcdx, notif_da_21,,, delayed_CLKA, delayed_DA[21] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[21], Tdc, Tcdx, notif_da_21,,, delayed_CLKA, delayed_DA[21] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[22], Tdc, Tcdx, notif_da_22,,, delayed_CLKA, delayed_DA[22] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[22], Tdc, Tcdx, notif_da_22,,, delayed_CLKA, delayed_DA[22] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[23], Tdc, Tcdx, notif_da_23,,, delayed_CLKA, delayed_DA[23] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[23], Tdc, Tcdx, notif_da_23,,, delayed_CLKA, delayed_DA[23] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[24], Tdc, Tcdx, notif_da_24,,, delayed_CLKA, delayed_DA[24] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[24], Tdc, Tcdx, notif_da_24,,, delayed_CLKA, delayed_DA[24] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[25], Tdc, Tcdx, notif_da_25,,, delayed_CLKA, delayed_DA[25] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[25], Tdc, Tcdx, notif_da_25,,, delayed_CLKA, delayed_DA[25] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[26], Tdc, Tcdx, notif_da_26,,, delayed_CLKA, delayed_DA[26] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[26], Tdc, Tcdx, notif_da_26,,, delayed_CLKA, delayed_DA[26] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[27], Tdc, Tcdx, notif_da_27,,, delayed_CLKA, delayed_DA[27] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[27], Tdc, Tcdx, notif_da_27,,, delayed_CLKA, delayed_DA[27] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[28], Tdc, Tcdx, notif_da_28,,, delayed_CLKA, delayed_DA[28] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[28], Tdc, Tcdx, notif_da_28,,, delayed_CLKA, delayed_DA[28] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[29], Tdc, Tcdx, notif_da_29,,, delayed_CLKA, delayed_DA[29] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[29], Tdc, Tcdx, notif_da_29,,, delayed_CLKA, delayed_DA[29] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[30], Tdc, Tcdx, notif_da_30,,, delayed_CLKA, delayed_DA[30] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[30], Tdc, Tcdx, notif_da_30,,, delayed_CLKA, delayed_DA[30] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[31], Tdc, Tcdx, notif_da_31,,, delayed_CLKA, delayed_DA[31] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[31], Tdc, Tcdx, notif_da_31,,, delayed_CLKA, delayed_DA[31] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[0], Tdc, Tcdx, notif_da_0,,, delayed_TCLKA, delayed_DA[0] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[0], Tdc, Tcdx, notif_da_0,,, delayed_TCLKA, delayed_DA[0] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[1], Tdc, Tcdx, notif_da_1,,, delayed_TCLKA, delayed_DA[1] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[1], Tdc, Tcdx, notif_da_1,,, delayed_TCLKA, delayed_DA[1] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[2], Tdc, Tcdx, notif_da_2,,, delayed_TCLKA, delayed_DA[2] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[2], Tdc, Tcdx, notif_da_2,,, delayed_TCLKA, delayed_DA[2] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[3], Tdc, Tcdx, notif_da_3,,, delayed_TCLKA, delayed_DA[3] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[3], Tdc, Tcdx, notif_da_3,,, delayed_TCLKA, delayed_DA[3] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[4], Tdc, Tcdx, notif_da_4,,, delayed_TCLKA, delayed_DA[4] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[4], Tdc, Tcdx, notif_da_4,,, delayed_TCLKA, delayed_DA[4] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[5], Tdc, Tcdx, notif_da_5,,, delayed_TCLKA, delayed_DA[5] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[5], Tdc, Tcdx, notif_da_5,,, delayed_TCLKA, delayed_DA[5] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[6], Tdc, Tcdx, notif_da_6,,, delayed_TCLKA, delayed_DA[6] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[6], Tdc, Tcdx, notif_da_6,,, delayed_TCLKA, delayed_DA[6] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[7], Tdc, Tcdx, notif_da_7,,, delayed_TCLKA, delayed_DA[7] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[7], Tdc, Tcdx, notif_da_7,,, delayed_TCLKA, delayed_DA[7] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[8], Tdc, Tcdx, notif_da_8,,, delayed_TCLKA, delayed_DA[8] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[8], Tdc, Tcdx, notif_da_8,,, delayed_TCLKA, delayed_DA[8] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[9], Tdc, Tcdx, notif_da_9,,, delayed_TCLKA, delayed_DA[9] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[9], Tdc, Tcdx, notif_da_9,,, delayed_TCLKA, delayed_DA[9] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[10], Tdc, Tcdx, notif_da_10,,, delayed_TCLKA, delayed_DA[10] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[10], Tdc, Tcdx, notif_da_10,,, delayed_TCLKA, delayed_DA[10] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[11], Tdc, Tcdx, notif_da_11,,, delayed_TCLKA, delayed_DA[11] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[11], Tdc, Tcdx, notif_da_11,,, delayed_TCLKA, delayed_DA[11] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[12], Tdc, Tcdx, notif_da_12,,, delayed_TCLKA, delayed_DA[12] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[12], Tdc, Tcdx, notif_da_12,,, delayed_TCLKA, delayed_DA[12] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[13], Tdc, Tcdx, notif_da_13,,, delayed_TCLKA, delayed_DA[13] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[13], Tdc, Tcdx, notif_da_13,,, delayed_TCLKA, delayed_DA[13] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[14], Tdc, Tcdx, notif_da_14,,, delayed_TCLKA, delayed_DA[14] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[14], Tdc, Tcdx, notif_da_14,,, delayed_TCLKA, delayed_DA[14] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[15], Tdc, Tcdx, notif_da_15,,, delayed_TCLKA, delayed_DA[15] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[15], Tdc, Tcdx, notif_da_15,,, delayed_TCLKA, delayed_DA[15] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[16], Tdc, Tcdx, notif_da_16,,, delayed_TCLKA, delayed_DA[16] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[16], Tdc, Tcdx, notif_da_16,,, delayed_TCLKA, delayed_DA[16] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[17], Tdc, Tcdx, notif_da_17,,, delayed_TCLKA, delayed_DA[17] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[17], Tdc, Tcdx, notif_da_17,,, delayed_TCLKA, delayed_DA[17] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[18], Tdc, Tcdx, notif_da_18,,, delayed_TCLKA, delayed_DA[18] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[18], Tdc, Tcdx, notif_da_18,,, delayed_TCLKA, delayed_DA[18] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[19], Tdc, Tcdx, notif_da_19,,, delayed_TCLKA, delayed_DA[19] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[19], Tdc, Tcdx, notif_da_19,,, delayed_TCLKA, delayed_DA[19] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[20], Tdc, Tcdx, notif_da_20,,, delayed_TCLKA, delayed_DA[20] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[20], Tdc, Tcdx, notif_da_20,,, delayed_TCLKA, delayed_DA[20] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[21], Tdc, Tcdx, notif_da_21,,, delayed_TCLKA, delayed_DA[21] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[21], Tdc, Tcdx, notif_da_21,,, delayed_TCLKA, delayed_DA[21] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[22], Tdc, Tcdx, notif_da_22,,, delayed_TCLKA, delayed_DA[22] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[22], Tdc, Tcdx, notif_da_22,,, delayed_TCLKA, delayed_DA[22] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[23], Tdc, Tcdx, notif_da_23,,, delayed_TCLKA, delayed_DA[23] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[23], Tdc, Tcdx, notif_da_23,,, delayed_TCLKA, delayed_DA[23] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[24], Tdc, Tcdx, notif_da_24,,, delayed_TCLKA, delayed_DA[24] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[24], Tdc, Tcdx, notif_da_24,,, delayed_TCLKA, delayed_DA[24] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[25], Tdc, Tcdx, notif_da_25,,, delayed_TCLKA, delayed_DA[25] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[25], Tdc, Tcdx, notif_da_25,,, delayed_TCLKA, delayed_DA[25] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[26], Tdc, Tcdx, notif_da_26,,, delayed_TCLKA, delayed_DA[26] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[26], Tdc, Tcdx, notif_da_26,,, delayed_TCLKA, delayed_DA[26] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[27], Tdc, Tcdx, notif_da_27,,, delayed_TCLKA, delayed_DA[27] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[27], Tdc, Tcdx, notif_da_27,,, delayed_TCLKA, delayed_DA[27] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[28], Tdc, Tcdx, notif_da_28,,, delayed_TCLKA, delayed_DA[28] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[28], Tdc, Tcdx, notif_da_28,,, delayed_TCLKA, delayed_DA[28] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[29], Tdc, Tcdx, notif_da_29,,, delayed_TCLKA, delayed_DA[29] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[29], Tdc, Tcdx, notif_da_29,,, delayed_TCLKA, delayed_DA[29] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[30], Tdc, Tcdx, notif_da_30,,, delayed_TCLKA, delayed_DA[30] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[30], Tdc, Tcdx, notif_da_30,,, delayed_TCLKA, delayed_DA[30] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[31], Tdc, Tcdx, notif_da_31,,, delayed_TCLKA, delayed_DA[31] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[31], Tdc, Tcdx, notif_da_31,,, delayed_TCLKA, delayed_DA[31] );
  $setuphold (posedge CLKA  &&& ENWEACLKA, posedge WEA,Twc, Tcwx, notif_wea,,, delayed_CLKA, delayed_WEA );
  $setuphold (posedge CLKA  &&& ENWEACLKA, negedge WEA,Twc, Tcwx, notif_wea,,, delayed_CLKA, delayed_WEA );
  $setuphold (posedge TCLKA  &&& ENWEATCLKA, posedge WEA,Twc, Tcwx, notif_wea,,, delayed_TCLKA, delayed_WEA );
  $setuphold (posedge TCLKA  &&& ENWEATCLKA, negedge WEA,Twc, Tcwx, notif_wea,,, delayed_TCLKA, delayed_WEA );
  $setuphold (posedge CLKA  &&& ENMEACLKA, posedge MEA,Tmc, Tcmx, notif_mea,,, delayed_CLKA, delayed_MEA );
  $setuphold (posedge CLKA  &&& ENMEACLKA, negedge MEA,Tmc, Tcmx, notif_mea,,, delayed_CLKA, delayed_MEA );
  $setuphold (posedge TCLKA  &&& ENMEATCLKA, posedge MEA,Tmc, Tcmx, notif_mea,,, delayed_TCLKA, delayed_MEA );
  $setuphold (posedge TCLKA  &&& ENMEATCLKA, negedge MEA,Tmc, Tcmx, notif_mea,,, delayed_TCLKA, delayed_MEA );
  $setuphold (posedge TCLKA  &&& ENTADRATCLKA, posedge TADRA[0], Tac, Tcax, notif_adra_0,,, delayed_TCLKA, delayed_TADRA[0] );
  $setuphold (posedge TCLKA  &&& ENTADRATCLKA, negedge TADRA[0], Tac, Tcax, notif_adra_0,,, delayed_TCLKA, delayed_TADRA[0] );
  $setuphold (posedge TCLKA  &&& ENTADRATCLKA, posedge TADRA[1], Tac, Tcax, notif_adra_1,,, delayed_TCLKA, delayed_TADRA[1] );
  $setuphold (posedge TCLKA  &&& ENTADRATCLKA, negedge TADRA[1], Tac, Tcax, notif_adra_1,,, delayed_TCLKA, delayed_TADRA[1] );
  $setuphold (posedge TCLKA  &&& ENTADRATCLKA, posedge TADRA[2], Tac, Tcax, notif_adra_2,,, delayed_TCLKA, delayed_TADRA[2] );
  $setuphold (posedge TCLKA  &&& ENTADRATCLKA, negedge TADRA[2], Tac, Tcax, notif_adra_2,,, delayed_TCLKA, delayed_TADRA[2] );
  $setuphold (posedge TCLKA  &&& ENTADRATCLKA, posedge TADRA[3], Tac, Tcax, notif_adra_3,,, delayed_TCLKA, delayed_TADRA[3] );
  $setuphold (posedge TCLKA  &&& ENTADRATCLKA, negedge TADRA[3], Tac, Tcax, notif_adra_3,,, delayed_TCLKA, delayed_TADRA[3] );
  $setuphold (posedge TCLKA  &&& ENTADRATCLKA, posedge TADRA[4], Tac, Tcax, notif_adra_4,,, delayed_TCLKA, delayed_TADRA[4] );
  $setuphold (posedge TCLKA  &&& ENTADRATCLKA, negedge TADRA[4], Tac, Tcax, notif_adra_4,,, delayed_TCLKA, delayed_TADRA[4] );
  $setuphold (posedge TCLKA  &&& ENTADRATCLKA, posedge TADRA[5], Tac, Tcax, notif_adra_5,,, delayed_TCLKA, delayed_TADRA[5] );
  $setuphold (posedge TCLKA  &&& ENTADRATCLKA, negedge TADRA[5], Tac, Tcax, notif_adra_5,,, delayed_TCLKA, delayed_TADRA[5] );
  $setuphold (posedge TCLKA  &&& ENTADRATCLKA, posedge TADRA[6], Tac, Tcax, notif_adra_6,,, delayed_TCLKA, delayed_TADRA[6] );
  $setuphold (posedge TCLKA  &&& ENTADRATCLKA, negedge TADRA[6], Tac, Tcax, notif_adra_6,,, delayed_TCLKA, delayed_TADRA[6] );
  $setuphold (posedge TCLKA  &&& ENTADRATCLKA, posedge TADRA[7], Tac, Tcax, notif_adra_7,,, delayed_TCLKA, delayed_TADRA[7] );
  $setuphold (posedge TCLKA  &&& ENTADRATCLKA, negedge TADRA[7], Tac, Tcax, notif_adra_7,,, delayed_TCLKA, delayed_TADRA[7] );
  $setuphold (posedge TCLKA  &&& ENTADRATCLKA, posedge TADRA[8], Tac, Tcax, notif_adra_8,,, delayed_TCLKA, delayed_TADRA[8] );
  $setuphold (posedge TCLKA  &&& ENTADRATCLKA, negedge TADRA[8], Tac, Tcax, notif_adra_8,,, delayed_TCLKA, delayed_TADRA[8] );
  $setuphold (posedge TCLKA  &&& ENTADRATCLKA, posedge TADRA[9], Tac, Tcax, notif_adra_9,,, delayed_TCLKA, delayed_TADRA[9] );
  $setuphold (posedge TCLKA  &&& ENTADRATCLKA, negedge TADRA[9], Tac, Tcax, notif_adra_9,,, delayed_TCLKA, delayed_TADRA[9] );
  $setuphold (posedge TCLKA  &&& ENTADRATCLKA, posedge TADRA[10], Tac, Tcax, notif_adra_10,,, delayed_TCLKA, delayed_TADRA[10] );
  $setuphold (posedge TCLKA  &&& ENTADRATCLKA, negedge TADRA[10], Tac, Tcax, notif_adra_10,,, delayed_TCLKA, delayed_TADRA[10] );
  $setuphold (posedge CLKA  &&& ENTADRACLKA, posedge TADRA[0], Tac, Tcax, notif_adra_0,,, delayed_CLKA, delayed_TADRA[0] );
  $setuphold (posedge CLKA  &&& ENTADRACLKA, negedge TADRA[0], Tac, Tcax, notif_adra_0,,, delayed_CLKA, delayed_TADRA[0] );
  $setuphold (posedge CLKA  &&& ENTADRACLKA, posedge TADRA[1], Tac, Tcax, notif_adra_1,,, delayed_CLKA, delayed_TADRA[1] );
  $setuphold (posedge CLKA  &&& ENTADRACLKA, negedge TADRA[1], Tac, Tcax, notif_adra_1,,, delayed_CLKA, delayed_TADRA[1] );
  $setuphold (posedge CLKA  &&& ENTADRACLKA, posedge TADRA[2], Tac, Tcax, notif_adra_2,,, delayed_CLKA, delayed_TADRA[2] );
  $setuphold (posedge CLKA  &&& ENTADRACLKA, negedge TADRA[2], Tac, Tcax, notif_adra_2,,, delayed_CLKA, delayed_TADRA[2] );
  $setuphold (posedge CLKA  &&& ENTADRACLKA, posedge TADRA[3], Tac, Tcax, notif_adra_3,,, delayed_CLKA, delayed_TADRA[3] );
  $setuphold (posedge CLKA  &&& ENTADRACLKA, negedge TADRA[3], Tac, Tcax, notif_adra_3,,, delayed_CLKA, delayed_TADRA[3] );
  $setuphold (posedge CLKA  &&& ENTADRACLKA, posedge TADRA[4], Tac, Tcax, notif_adra_4,,, delayed_CLKA, delayed_TADRA[4] );
  $setuphold (posedge CLKA  &&& ENTADRACLKA, negedge TADRA[4], Tac, Tcax, notif_adra_4,,, delayed_CLKA, delayed_TADRA[4] );
  $setuphold (posedge CLKA  &&& ENTADRACLKA, posedge TADRA[5], Tac, Tcax, notif_adra_5,,, delayed_CLKA, delayed_TADRA[5] );
  $setuphold (posedge CLKA  &&& ENTADRACLKA, negedge TADRA[5], Tac, Tcax, notif_adra_5,,, delayed_CLKA, delayed_TADRA[5] );
  $setuphold (posedge CLKA  &&& ENTADRACLKA, posedge TADRA[6], Tac, Tcax, notif_adra_6,,, delayed_CLKA, delayed_TADRA[6] );
  $setuphold (posedge CLKA  &&& ENTADRACLKA, negedge TADRA[6], Tac, Tcax, notif_adra_6,,, delayed_CLKA, delayed_TADRA[6] );
  $setuphold (posedge CLKA  &&& ENTADRACLKA, posedge TADRA[7], Tac, Tcax, notif_adra_7,,, delayed_CLKA, delayed_TADRA[7] );
  $setuphold (posedge CLKA  &&& ENTADRACLKA, negedge TADRA[7], Tac, Tcax, notif_adra_7,,, delayed_CLKA, delayed_TADRA[7] );
  $setuphold (posedge CLKA  &&& ENTADRACLKA, posedge TADRA[8], Tac, Tcax, notif_adra_8,,, delayed_CLKA, delayed_TADRA[8] );
  $setuphold (posedge CLKA  &&& ENTADRACLKA, negedge TADRA[8], Tac, Tcax, notif_adra_8,,, delayed_CLKA, delayed_TADRA[8] );
  $setuphold (posedge CLKA  &&& ENTADRACLKA, posedge TADRA[9], Tac, Tcax, notif_adra_9,,, delayed_CLKA, delayed_TADRA[9] );
  $setuphold (posedge CLKA  &&& ENTADRACLKA, negedge TADRA[9], Tac, Tcax, notif_adra_9,,, delayed_CLKA, delayed_TADRA[9] );
  $setuphold (posedge CLKA  &&& ENTADRACLKA, posedge TADRA[10], Tac, Tcax, notif_adra_10,,, delayed_CLKA, delayed_TADRA[10] );
  $setuphold (posedge CLKA  &&& ENTADRACLKA, negedge TADRA[10], Tac, Tcax, notif_adra_10,,, delayed_CLKA, delayed_TADRA[10] );
  $setuphold (posedge TCLKA  &&& ENTDATCLKA, posedge TDA[0], Tbdc, Tbcdx, notif_tda_0,,, delayed_TCLKA, delayed_TDA[0] );
  $setuphold (posedge TCLKA  &&& ENTDATCLKA, negedge TDA[0], Tbdc, Tbcdx, notif_tda_0,,, delayed_TCLKA, delayed_TDA[0] );
  $setuphold (posedge TCLKA  &&& ENTDATCLKA, posedge TDA[1], Tbdc, Tbcdx, notif_tda_1,,, delayed_TCLKA, delayed_TDA[1] );
  $setuphold (posedge TCLKA  &&& ENTDATCLKA, negedge TDA[1], Tbdc, Tbcdx, notif_tda_1,,, delayed_TCLKA, delayed_TDA[1] );
  $setuphold (posedge TCLKA  &&& ENTDATCLKA, posedge TDA[2], Tbdc, Tbcdx, notif_tda_2,,, delayed_TCLKA, delayed_TDA[2] );
  $setuphold (posedge TCLKA  &&& ENTDATCLKA, negedge TDA[2], Tbdc, Tbcdx, notif_tda_2,,, delayed_TCLKA, delayed_TDA[2] );
  $setuphold (posedge TCLKA  &&& ENTDATCLKA, posedge TDA[3], Tbdc, Tbcdx, notif_tda_3,,, delayed_TCLKA, delayed_TDA[3] );
  $setuphold (posedge TCLKA  &&& ENTDATCLKA, negedge TDA[3], Tbdc, Tbcdx, notif_tda_3,,, delayed_TCLKA, delayed_TDA[3] );
  $setuphold (posedge CLKA  &&& ENTDACLKA, posedge TDA[0], Tbdc, Tbcdx, notif_tda_0,,, delayed_CLKA, delayed_TDA[0] );
  $setuphold (posedge CLKA  &&& ENTDACLKA, negedge TDA[0], Tbdc, Tbcdx, notif_tda_0,,, delayed_CLKA, delayed_TDA[0] );
  $setuphold (posedge CLKA  &&& ENTDACLKA, posedge TDA[1], Tbdc, Tbcdx, notif_tda_1,,, delayed_CLKA, delayed_TDA[1] );
  $setuphold (posedge CLKA  &&& ENTDACLKA, negedge TDA[1], Tbdc, Tbcdx, notif_tda_1,,, delayed_CLKA, delayed_TDA[1] );
  $setuphold (posedge CLKA  &&& ENTDACLKA, posedge TDA[2], Tbdc, Tbcdx, notif_tda_2,,, delayed_CLKA, delayed_TDA[2] );
  $setuphold (posedge CLKA  &&& ENTDACLKA, negedge TDA[2], Tbdc, Tbcdx, notif_tda_2,,, delayed_CLKA, delayed_TDA[2] );
  $setuphold (posedge CLKA  &&& ENTDACLKA, posedge TDA[3], Tbdc, Tbcdx, notif_tda_3,,, delayed_CLKA, delayed_TDA[3] );
  $setuphold (posedge CLKA  &&& ENTDACLKA, negedge TDA[3], Tbdc, Tbcdx, notif_tda_3,,, delayed_CLKA, delayed_TDA[3] );
  $setuphold (posedge TCLKA  &&& ENTWEATCLKA, posedge TWEA,Twc, Tcwx, notif_wea,,, delayed_TCLKA, delayed_TWEA );
  $setuphold (posedge TCLKA  &&& ENTWEATCLKA, negedge TWEA,Twc, Tcwx, notif_wea,,, delayed_TCLKA, delayed_TWEA );
  $setuphold (posedge CLKA  &&& ENTWEACLKA, posedge TWEA,Twc, Tcwx, notif_wea,,, delayed_CLKA, delayed_TWEA );
  $setuphold (posedge CLKA  &&& ENTWEACLKA, negedge TWEA,Twc, Tcwx, notif_wea,,, delayed_CLKA, delayed_TWEA );
  $setuphold (posedge TCLKA  &&& ENTMEATCLKA, posedge TMEA,Tmc, Tcmx, notif_mea,,, delayed_TCLKA, delayed_TMEA );
  $setuphold (posedge TCLKA  &&& ENTMEATCLKA, negedge TMEA,Tmc, Tcmx, notif_mea,,, delayed_TCLKA, delayed_TMEA );
  $setuphold (posedge CLKA  &&& ENTMEACLKA, posedge TMEA,Tmc, Tcmx, notif_mea,,, delayed_CLKA, delayed_TMEA );
  $setuphold (posedge CLKA  &&& ENTMEACLKA, negedge TMEA,Tmc, Tcmx, notif_mea,,, delayed_CLKA, delayed_TMEA );
  $setuphold (posedge CLKA  &&& ENBISTEA, posedge BISTEA,Tbc, Tcbx, notif_bistea,,, delayed_CLKA, delayed_BISTEA );
  $setuphold (posedge CLKA  &&& ENBISTEA, negedge BISTEA,Tbc, Tcbx, notif_bistea,,, delayed_CLKA, delayed_BISTEA );
  $setuphold (posedge TCLKA  &&& ENTBISTEA, posedge BISTEA,Tbc, Tcbx, notif_bistea,,, delayed_TCLKA, delayed_BISTEA );
  $setuphold (posedge TCLKA  &&& ENTBISTEA, negedge BISTEA,Tbc, Tcbx, notif_bistea,,, delayed_TCLKA, delayed_BISTEA );
  $setuphold (posedge CLKA  &&& ENTEST1A, posedge TEST1A,TT1C, 0, notif_test1a,,, delayed_CLKA, delayed_TEST1A );
  $setuphold (posedge CLKA  &&& ENTEST1A, negedge TEST1A,TT1C, 0, notif_test1a,,, delayed_CLKA, delayed_TEST1A );
  $setuphold (negedge CLKA  &&& ENTEST1A, posedge TEST1A,0, TCT1X, notif_test1a,,, delayed_CLKA, delayed_TEST1A );
  $setuphold (negedge CLKA  &&& ENTEST1A, negedge TEST1A,0, TCT1X, notif_test1a,,, delayed_CLKA, delayed_TEST1A );
  $setuphold (posedge TCLKA  &&& ENTTEST1A, posedge TEST1A,TT1C, 0, notif_test1a,,, delayed_TCLKA, delayed_TEST1A );
  $setuphold (posedge TCLKA  &&& ENTTEST1A, negedge TEST1A,TT1C, 0, notif_test1a,,, delayed_TCLKA, delayed_TEST1A );
  $setuphold (negedge TCLKA  &&& ENTTEST1A, posedge TEST1A,0, TCT1X, notif_test1a,,, delayed_TCLKA, delayed_TEST1A );
  $setuphold (negedge TCLKA  &&& ENTTEST1A, negedge TEST1A,0, TCT1X, notif_test1a,,, delayed_TCLKA, delayed_TEST1A );
  $setuphold (posedge CLKA  &&& ENRMEA, posedge RMEA,Trmec, Tcrmex, notif_rmea,,, delayed_CLKA, delayed_RMEA );
  $setuphold (posedge CLKA  &&& ENRMEA, negedge RMEA,Trmec, Tcrmex, notif_rmea,,, delayed_CLKA, delayed_RMEA );
  $setuphold (posedge TCLKA  &&& ENTRMEA, posedge RMEA,Trmec, Tcrmex, notif_rmea,,, delayed_TCLKA, delayed_RMEA );
  $setuphold (posedge TCLKA  &&& ENTRMEA, negedge RMEA,Trmec, Tcrmex, notif_rmea,,, delayed_TCLKA, delayed_RMEA );
  $setuphold (posedge CLKA  &&& ENRMA, posedge RMA[0], Trmc, Tcrmx, notif_rma,,, delayed_CLKA, delayed_RMA[0] );
  $setuphold (posedge CLKA  &&& ENRMA, negedge RMA[0], Trmc, Tcrmx, notif_rma,,, delayed_CLKA, delayed_RMA[0] );
  $setuphold (posedge CLKA  &&& ENRMA, posedge RMA[1], Trmc, Tcrmx, notif_rma,,, delayed_CLKA, delayed_RMA[1] );
  $setuphold (posedge CLKA  &&& ENRMA, negedge RMA[1], Trmc, Tcrmx, notif_rma,,, delayed_CLKA, delayed_RMA[1] );
  $setuphold (posedge CLKA  &&& ENRMA, posedge RMA[2], Trmc, Tcrmx, notif_rma,,, delayed_CLKA, delayed_RMA[2] );
  $setuphold (posedge CLKA  &&& ENRMA, negedge RMA[2], Trmc, Tcrmx, notif_rma,,, delayed_CLKA, delayed_RMA[2] );
  $setuphold (posedge CLKA  &&& ENRMA, posedge RMA[3], Trmc, Tcrmx, notif_rma,,, delayed_CLKA, delayed_RMA[3] );
  $setuphold (posedge CLKA  &&& ENRMA, negedge RMA[3], Trmc, Tcrmx, notif_rma,,, delayed_CLKA, delayed_RMA[3] );
  $setuphold (posedge TCLKA  &&& ENTRMA, posedge RMA[0], Trmc, Tcrmx, notif_rma,,, delayed_TCLKA, delayed_RMA[0] );
  $setuphold (posedge TCLKA  &&& ENTRMA, negedge RMA[0], Trmc, Tcrmx, notif_rma,,, delayed_TCLKA, delayed_RMA[0] );
  $setuphold (posedge TCLKA  &&& ENTRMA, posedge RMA[1], Trmc, Tcrmx, notif_rma,,, delayed_TCLKA, delayed_RMA[1] );
  $setuphold (posedge TCLKA  &&& ENTRMA, negedge RMA[1], Trmc, Tcrmx, notif_rma,,, delayed_TCLKA, delayed_RMA[1] );
  $setuphold (posedge TCLKA  &&& ENTRMA, posedge RMA[2], Trmc, Tcrmx, notif_rma,,, delayed_TCLKA, delayed_RMA[2] );
  $setuphold (posedge TCLKA  &&& ENTRMA, negedge RMA[2], Trmc, Tcrmx, notif_rma,,, delayed_TCLKA, delayed_RMA[2] );
  $setuphold (posedge TCLKA  &&& ENTRMA, posedge RMA[3], Trmc, Tcrmx, notif_rma,,, delayed_TCLKA, delayed_RMA[3] );
  $setuphold (posedge TCLKA  &&& ENTRMA, negedge RMA[3], Trmc, Tcrmx, notif_rma,,, delayed_TCLKA, delayed_RMA[3] );
  $setuphold (posedge CLKA  &&& ENCDA, posedge CDA[0], Tdatc, Tcdatx, notif_cda_0,,, delayed_CLKA, delayed_CDA[0] );
  $setuphold (posedge CLKA  &&& ENCDA, negedge CDA[0], Tdatc, Tcdatx, notif_cda_0,,, delayed_CLKA, delayed_CDA[0] );
  $setuphold (posedge CLKA  &&& ENCDA, posedge CDA[1], Tdatc, Tcdatx, notif_cda_1,,, delayed_CLKA, delayed_CDA[1] );
  $setuphold (posedge CLKA  &&& ENCDA, negedge CDA[1], Tdatc, Tcdatx, notif_cda_1,,, delayed_CLKA, delayed_CDA[1] );
  $setuphold (posedge CLKA  &&& ENCDA, posedge CDA[2], Tdatc, Tcdatx, notif_cda_2,,, delayed_CLKA, delayed_CDA[2] );
  $setuphold (posedge CLKA  &&& ENCDA, negedge CDA[2], Tdatc, Tcdatx, notif_cda_2,,, delayed_CLKA, delayed_CDA[2] );
  $setuphold (posedge CLKA  &&& ENCDA, posedge CDA[3], Tdatc, Tcdatx, notif_cda_3,,, delayed_CLKA, delayed_CDA[3] );
  $setuphold (posedge CLKA  &&& ENCDA, negedge CDA[3], Tdatc, Tcdatx, notif_cda_3,,, delayed_CLKA, delayed_CDA[3] );
  $setuphold (posedge TCLKA  &&& ENTCDA, posedge CDA[0], Tdatc, Tcdatx, notif_cda_0,,, delayed_TCLKA, delayed_CDA[0] );
  $setuphold (posedge TCLKA  &&& ENTCDA, negedge CDA[0], Tdatc, Tcdatx, notif_cda_0,,, delayed_TCLKA, delayed_CDA[0] );
  $setuphold (posedge TCLKA  &&& ENTCDA, posedge CDA[1], Tdatc, Tcdatx, notif_cda_1,,, delayed_TCLKA, delayed_CDA[1] );
  $setuphold (posedge TCLKA  &&& ENTCDA, negedge CDA[1], Tdatc, Tcdatx, notif_cda_1,,, delayed_TCLKA, delayed_CDA[1] );
  $setuphold (posedge TCLKA  &&& ENTCDA, posedge CDA[2], Tdatc, Tcdatx, notif_cda_2,,, delayed_TCLKA, delayed_CDA[2] );
  $setuphold (posedge TCLKA  &&& ENTCDA, negedge CDA[2], Tdatc, Tcdatx, notif_cda_2,,, delayed_TCLKA, delayed_CDA[2] );
  $setuphold (posedge TCLKA  &&& ENTCDA, posedge CDA[3], Tdatc, Tcdatx, notif_cda_3,,, delayed_TCLKA, delayed_CDA[3] );
  $setuphold (posedge TCLKA  &&& ENTCDA, negedge CDA[3], Tdatc, Tcdatx, notif_cda_3,,, delayed_TCLKA, delayed_CDA[3] );
  $setuphold (posedge CLKA  &&& ENCAPTA, posedge CAPTA,Tcaptc, Tcaptx, notif_capta,,, delayed_CLKA, delayed_CAPTA );
  $setuphold (posedge CLKA  &&& ENCAPTA, negedge CAPTA,Tcaptc, Tcaptx, notif_capta,,, delayed_CLKA, delayed_CAPTA );
  $setuphold (posedge TCLKA  &&& ENTCAPTA, posedge CAPTA,Tcaptc, Tcaptx, notif_capta,,, delayed_TCLKA, delayed_CAPTA );
  $setuphold (posedge TCLKA  &&& ENTCAPTA, negedge CAPTA,Tcaptc, Tcaptx, notif_capta,,, delayed_TCLKA, delayed_CAPTA );
  $setuphold (posedge CLKA  &&& ENPIPEMEACLKA, posedge PIPEMEA,Tpmec, Tpmex, notif_pipemea,,, delayed_CLKA, delayed_PIPEMEA );
  $setuphold (posedge CLKA  &&& ENPIPEMEACLKA, negedge PIPEMEA,Tpmec, Tpmex, notif_pipemea,,, delayed_CLKA, delayed_PIPEMEA );
  $setuphold (posedge TCLKA  &&& ENPIPEMEATCLKA, posedge PIPEMEA,Tpmec, Tpmex, notif_pipemea,,, delayed_TCLKA, delayed_PIPEMEA );
  $setuphold (posedge TCLKA  &&& ENPIPEMEATCLKA, negedge PIPEMEA,Tpmec, Tpmex, notif_pipemea,,, delayed_TCLKA, delayed_PIPEMEA );
  $setuphold (posedge TCLKA  &&& ENTPIPEMEATCLKA, posedge TPIPEMEA,Tpmec, Tpmex, notif_pipemea,,, delayed_TCLKA, delayed_TPIPEMEA );
  $setuphold (posedge TCLKA  &&& ENTPIPEMEATCLKA, negedge TPIPEMEA,Tpmec, Tpmex, notif_pipemea,,, delayed_TCLKA, delayed_TPIPEMEA );
  $setuphold (posedge CLKA  &&& ENTPIPEMEACLKA, posedge TPIPEMEA,Tpmec, Tpmex, notif_pipemea,,, delayed_CLKA, delayed_TPIPEMEA );
  $setuphold (posedge CLKA  &&& ENTPIPEMEACLKA, negedge TPIPEMEA,Tpmec, Tpmex, notif_pipemea,,, delayed_CLKA, delayed_TPIPEMEA );
  $setuphold (posedge CLKA  &&& ENTCLKEA, posedge TCLKEA,Ttclkec, 0, notif_tclkea,,, delayed_CLKA, delayed_TCLKEA );
  $setuphold (posedge CLKA  &&& ENTCLKEA, negedge TCLKEA,Ttclkec, 0, notif_tclkea,,, delayed_CLKA, delayed_TCLKEA );
  $setuphold (negedge CLKA  &&& ENTCLKEA, posedge TCLKEA,0, Ttclkex, notif_tclkea,,, delayed_CLKA, delayed_TCLKEA );
  $setuphold (negedge CLKA  &&& ENTCLKEA, negedge TCLKEA,0, Ttclkex, notif_tclkea,,, delayed_CLKA, delayed_TCLKEA );
  $setuphold (posedge TCLKA  &&& ENTTCLKEA, posedge TCLKEA,Ttclkec, 0, notif_tclkea,,, delayed_TCLKA, delayed_TCLKEA );
  $setuphold (posedge TCLKA  &&& ENTTCLKEA, negedge TCLKEA,Ttclkec, 0, notif_tclkea,,, delayed_TCLKA, delayed_TCLKEA );
  $setuphold (negedge TCLKA  &&& ENTTCLKEA, posedge TCLKEA,0, Ttclkex, notif_tclkea,,, delayed_TCLKA, delayed_TCLKEA );
  $setuphold (negedge TCLKA  &&& ENTTCLKEA, negedge TCLKEA,0, Ttclkex, notif_tclkea,,, delayed_TCLKA, delayed_TCLKEA );
  $setuphold (posedge CLKA  &&& ENSTICKYA, posedge STICKYA,Tstc, Tstx, notif_stickya,,, delayed_CLKA, delayed_STICKYA );
  $setuphold (posedge CLKA  &&& ENSTICKYA, negedge STICKYA,Tstc, Tstx, notif_stickya,,, delayed_CLKA, delayed_STICKYA );
  $setuphold (posedge TCLKA  &&& ENTSTICKYA, posedge STICKYA,Tstc, Tstx, notif_stickya,,, delayed_TCLKA, delayed_STICKYA );
  $setuphold (posedge TCLKA  &&& ENTSTICKYA, negedge STICKYA,Tstc, Tstx, notif_stickya,,, delayed_TCLKA, delayed_STICKYA );
  $setuphold (posedge CLKA  &&& ENSI_QA, posedge SI_QA,Tsiqc, Tsiqx, notif_si_qa,,, delayed_CLKA, delayed_SI_QA );
  $setuphold (posedge CLKA  &&& ENSI_QA, negedge SI_QA,Tsiqc, Tsiqx, notif_si_qa,,, delayed_CLKA, delayed_SI_QA );
  $setuphold (posedge TCLKA  &&& ENTSI_QA, posedge SI_QA,Tsiqc, Tsiqx, notif_si_qa,,, delayed_TCLKA, delayed_SI_QA );
  $setuphold (posedge TCLKA  &&& ENTSI_QA, negedge SI_QA,Tsiqc, Tsiqx, notif_si_qa,,, delayed_TCLKA, delayed_SI_QA );
  $setuphold (posedge CLKA  &&& ENSI_DA, posedge SI_DA,Tsidc, Tsidx, notif_si_da,,, delayed_CLKA, delayed_SI_DA );
  $setuphold (posedge CLKA  &&& ENSI_DA, negedge SI_DA,Tsidc, Tsidx, notif_si_da,,, delayed_CLKA, delayed_SI_DA );
  $setuphold (posedge TCLKA  &&& ENTSI_DA, posedge SI_DA,Tsidc, Tsidx, notif_si_da,,, delayed_TCLKA, delayed_SI_DA );
  $setuphold (posedge TCLKA  &&& ENTSI_DA, negedge SI_DA,Tsidc, Tsidx, notif_si_da,,, delayed_TCLKA, delayed_SI_DA );
  $setuphold (posedge CLKA  &&& ENSE_QA, posedge SE_QA,Tseqc, Tseqx, notif_se_qa,,, delayed_CLKA, delayed_SE_QA );
  $setuphold (posedge CLKA  &&& ENSE_QA, negedge SE_QA,Tseqc, Tseqx, notif_se_qa,,, delayed_CLKA, delayed_SE_QA );
  $setuphold (posedge TCLKA  &&& ENTSE_QA, posedge SE_QA,Tseqc, Tseqx, notif_se_qa,,, delayed_TCLKA, delayed_SE_QA );
  $setuphold (posedge TCLKA  &&& ENTSE_QA, negedge SE_QA,Tseqc, Tseqx, notif_se_qa,,, delayed_TCLKA, delayed_SE_QA );
  $setuphold (posedge CLKA  &&& ENSE_INA, posedge SE_INA,Tseinc, Tseinx, notif_se_ina,,, delayed_CLKA, delayed_SE_INA );
  $setuphold (posedge CLKA  &&& ENSE_INA, negedge SE_INA,Tseinc, Tseinx, notif_se_ina,,, delayed_CLKA, delayed_SE_INA );
  $setuphold (posedge TCLKA  &&& ENTSE_INA, posedge SE_INA,Tseinc, Tseinx, notif_se_ina,,, delayed_TCLKA, delayed_SE_INA );
  $setuphold (posedge TCLKA  &&& ENTSE_INA, negedge SE_INA,Tseinc, Tseinx, notif_se_ina,,, delayed_TCLKA, delayed_SE_INA );
  $setuphold (posedge CLKA  &&& ENSI_CNTRA, posedge SI_CNTRA,Tsicc, Tsicx, notif_si_cntra,,, delayed_CLKA, delayed_SI_CNTRA );
  $setuphold (posedge CLKA  &&& ENSI_CNTRA, negedge SI_CNTRA,Tsicc, Tsicx, notif_si_cntra,,, delayed_CLKA, delayed_SI_CNTRA );
  $setuphold (posedge TCLKA  &&& ENTSI_CNTRA, posedge SI_CNTRA,Tsicc, Tsicx, notif_si_cntra,,, delayed_TCLKA, delayed_SI_CNTRA );
  $setuphold (posedge TCLKA  &&& ENTSI_CNTRA, negedge SI_CNTRA,Tsicc, Tsicx, notif_si_cntra,,, delayed_TCLKA, delayed_SI_CNTRA );
  $setuphold (posedge CLKA  &&& ENDFTCLKEN_A, posedge DFTCLKEN,Tswtc, Tswtx, notif_dftclken,,, delayed_CLKA, delayed_DFTCLKEN );
  $setuphold (posedge CLKA  &&& ENDFTCLKEN_A, negedge DFTCLKEN,Tswtc, Tswtx, notif_dftclken,,, delayed_CLKA, delayed_DFTCLKEN );
  $setuphold (posedge TCLKA  &&& ENTDFTCLKEN_A, posedge DFTCLKEN,Tswtc, Tswtx, notif_dftclken,,, delayed_TCLKA, delayed_DFTCLKEN );
  $setuphold (posedge TCLKA  &&& ENTDFTCLKEN_A, negedge DFTCLKEN,Tswtc, Tswtx, notif_dftclken,,, delayed_TCLKA, delayed_DFTCLKEN );
  $setuphold (posedge CLKB  &&& ENDFTCLKEN_B, posedge DFTCLKEN,Tswtc, Tswtx, notif_dftclken_b,,, delayed_CLKB, delayed_DFTCLKEN );
  $setuphold (posedge CLKB  &&& ENDFTCLKEN_B, negedge DFTCLKEN,Tswtc, Tswtx, notif_dftclken_b,,, delayed_CLKB, delayed_DFTCLKEN );
  $setuphold (posedge TCLKB  &&& ENTDFTCLKEN_B, posedge DFTCLKEN,Tswtc, Tswtx, notif_dftclken_b,,, delayed_TCLKB, delayed_DFTCLKEN );
  $setuphold (posedge TCLKB  &&& ENTDFTCLKEN_B, negedge DFTCLKEN,Tswtc, Tswtx, notif_dftclken_b,,, delayed_TCLKB, delayed_DFTCLKEN );
  $setuphold (posedge CLKA  &&& ENDFTMASK_A, posedge DFTMASK,Tdftc, Tdftx, notif_dftmask,,, delayed_CLKA, delayed_DFTMASK );
  $setuphold (posedge CLKA  &&& ENDFTMASK_A, negedge DFTMASK,Tdftc, Tdftx, notif_dftmask,,, delayed_CLKA, delayed_DFTMASK );
  $setuphold (posedge TCLKA  &&& ENTDFTMASK_A, posedge DFTMASK,Tdftc, Tdftx, notif_dftmask,,, delayed_TCLKA, delayed_DFTMASK );
  $setuphold (posedge TCLKA  &&& ENTDFTMASK_A, negedge DFTMASK,Tdftc, Tdftx, notif_dftmask,,, delayed_TCLKA, delayed_DFTMASK );
  $setuphold (posedge CLKB  &&& ENDFTMASK_B, posedge DFTMASK,Tdftc, Tdftx, notif_dftmask_b,,, delayed_CLKB, delayed_DFTMASK );
  $setuphold (posedge CLKB  &&& ENDFTMASK_B, negedge DFTMASK,Tdftc, Tdftx, notif_dftmask_b,,, delayed_CLKB, delayed_DFTMASK );
  $setuphold (posedge TCLKB  &&& ENTDFTMASK_B, posedge DFTMASK,Tdftc, Tdftx, notif_dftmask_b,,, delayed_TCLKB, delayed_DFTMASK );
  $setuphold (posedge TCLKB  &&& ENTDFTMASK_B, negedge DFTMASK,Tdftc, Tdftx, notif_dftmask_b,,, delayed_TCLKB, delayed_DFTMASK );
  $setuphold (posedge CLKA  &&& ENLS_A, posedge LS,Trlsc, Tlsx, notif_ls,,, delayed_CLKA, delayed_LS );
  $setuphold (posedge CLKA  &&& ENLS_A, negedge LS,Tflsc, Tlsx, notif_ls,,, delayed_CLKA, delayed_LS );
  $setuphold (posedge TCLKA  &&& ENTLS_A, posedge LS,Trlsc, Tlsx, notif_ls,,, delayed_TCLKA, delayed_LS );
  $setuphold (posedge TCLKA  &&& ENTLS_A, negedge LS,Tflsc, Tlsx, notif_ls,,, delayed_TCLKA, delayed_LS );
  $setuphold (posedge CLKB  &&& ENLS_B, posedge LS,Trlsc, Tlsx, notif_ls_b,,, delayed_CLKB, delayed_LS );
  $setuphold (posedge CLKB  &&& ENLS_B, negedge LS,Tflsc, Tlsx, notif_ls_b,,, delayed_CLKB, delayed_LS );
  $setuphold (posedge TCLKB  &&& ENTLS_B, posedge LS,Trlsc, Tlsx, notif_ls_b,,, delayed_TCLKB, delayed_LS );
  $setuphold (posedge TCLKB  &&& ENTLS_B, negedge LS,Tflsc, Tlsx, notif_ls_b,,, delayed_TCLKB, delayed_LS );
  $setuphold (posedge CLKB  &&& ENADRBCLKB, posedge ADRB[0], Tac, Tcax, notif_adrb_0,,, delayed_CLKB, delayed_ADRB[0] );
  $setuphold (posedge CLKB  &&& ENADRBCLKB, negedge ADRB[0], Tac, Tcax, notif_adrb_0,,, delayed_CLKB, delayed_ADRB[0] );
  $setuphold (posedge CLKB  &&& ENADRBCLKB, posedge ADRB[1], Tac, Tcax, notif_adrb_1,,, delayed_CLKB, delayed_ADRB[1] );
  $setuphold (posedge CLKB  &&& ENADRBCLKB, negedge ADRB[1], Tac, Tcax, notif_adrb_1,,, delayed_CLKB, delayed_ADRB[1] );
  $setuphold (posedge CLKB  &&& ENADRBCLKB, posedge ADRB[2], Tac, Tcax, notif_adrb_2,,, delayed_CLKB, delayed_ADRB[2] );
  $setuphold (posedge CLKB  &&& ENADRBCLKB, negedge ADRB[2], Tac, Tcax, notif_adrb_2,,, delayed_CLKB, delayed_ADRB[2] );
  $setuphold (posedge CLKB  &&& ENADRBCLKB, posedge ADRB[3], Tac, Tcax, notif_adrb_3,,, delayed_CLKB, delayed_ADRB[3] );
  $setuphold (posedge CLKB  &&& ENADRBCLKB, negedge ADRB[3], Tac, Tcax, notif_adrb_3,,, delayed_CLKB, delayed_ADRB[3] );
  $setuphold (posedge CLKB  &&& ENADRBCLKB, posedge ADRB[4], Tac, Tcax, notif_adrb_4,,, delayed_CLKB, delayed_ADRB[4] );
  $setuphold (posedge CLKB  &&& ENADRBCLKB, negedge ADRB[4], Tac, Tcax, notif_adrb_4,,, delayed_CLKB, delayed_ADRB[4] );
  $setuphold (posedge CLKB  &&& ENADRBCLKB, posedge ADRB[5], Tac, Tcax, notif_adrb_5,,, delayed_CLKB, delayed_ADRB[5] );
  $setuphold (posedge CLKB  &&& ENADRBCLKB, negedge ADRB[5], Tac, Tcax, notif_adrb_5,,, delayed_CLKB, delayed_ADRB[5] );
  $setuphold (posedge CLKB  &&& ENADRBCLKB, posedge ADRB[6], Tac, Tcax, notif_adrb_6,,, delayed_CLKB, delayed_ADRB[6] );
  $setuphold (posedge CLKB  &&& ENADRBCLKB, negedge ADRB[6], Tac, Tcax, notif_adrb_6,,, delayed_CLKB, delayed_ADRB[6] );
  $setuphold (posedge CLKB  &&& ENADRBCLKB, posedge ADRB[7], Tac, Tcax, notif_adrb_7,,, delayed_CLKB, delayed_ADRB[7] );
  $setuphold (posedge CLKB  &&& ENADRBCLKB, negedge ADRB[7], Tac, Tcax, notif_adrb_7,,, delayed_CLKB, delayed_ADRB[7] );
  $setuphold (posedge CLKB  &&& ENADRBCLKB, posedge ADRB[8], Tac, Tcax, notif_adrb_8,,, delayed_CLKB, delayed_ADRB[8] );
  $setuphold (posedge CLKB  &&& ENADRBCLKB, negedge ADRB[8], Tac, Tcax, notif_adrb_8,,, delayed_CLKB, delayed_ADRB[8] );
  $setuphold (posedge CLKB  &&& ENADRBCLKB, posedge ADRB[9], Tac, Tcax, notif_adrb_9,,, delayed_CLKB, delayed_ADRB[9] );
  $setuphold (posedge CLKB  &&& ENADRBCLKB, negedge ADRB[9], Tac, Tcax, notif_adrb_9,,, delayed_CLKB, delayed_ADRB[9] );
  $setuphold (posedge CLKB  &&& ENADRBCLKB, posedge ADRB[10], Tac, Tcax, notif_adrb_10,,, delayed_CLKB, delayed_ADRB[10] );
  $setuphold (posedge CLKB  &&& ENADRBCLKB, negedge ADRB[10], Tac, Tcax, notif_adrb_10,,, delayed_CLKB, delayed_ADRB[10] );
  $setuphold (posedge TCLKB  &&& ENADRBTCLKB, posedge ADRB[0], Tac, Tcax, notif_adrb_0,,, delayed_TCLKB, delayed_ADRB[0] );
  $setuphold (posedge TCLKB  &&& ENADRBTCLKB, negedge ADRB[0], Tac, Tcax, notif_adrb_0,,, delayed_TCLKB, delayed_ADRB[0] );
  $setuphold (posedge TCLKB  &&& ENADRBTCLKB, posedge ADRB[1], Tac, Tcax, notif_adrb_1,,, delayed_TCLKB, delayed_ADRB[1] );
  $setuphold (posedge TCLKB  &&& ENADRBTCLKB, negedge ADRB[1], Tac, Tcax, notif_adrb_1,,, delayed_TCLKB, delayed_ADRB[1] );
  $setuphold (posedge TCLKB  &&& ENADRBTCLKB, posedge ADRB[2], Tac, Tcax, notif_adrb_2,,, delayed_TCLKB, delayed_ADRB[2] );
  $setuphold (posedge TCLKB  &&& ENADRBTCLKB, negedge ADRB[2], Tac, Tcax, notif_adrb_2,,, delayed_TCLKB, delayed_ADRB[2] );
  $setuphold (posedge TCLKB  &&& ENADRBTCLKB, posedge ADRB[3], Tac, Tcax, notif_adrb_3,,, delayed_TCLKB, delayed_ADRB[3] );
  $setuphold (posedge TCLKB  &&& ENADRBTCLKB, negedge ADRB[3], Tac, Tcax, notif_adrb_3,,, delayed_TCLKB, delayed_ADRB[3] );
  $setuphold (posedge TCLKB  &&& ENADRBTCLKB, posedge ADRB[4], Tac, Tcax, notif_adrb_4,,, delayed_TCLKB, delayed_ADRB[4] );
  $setuphold (posedge TCLKB  &&& ENADRBTCLKB, negedge ADRB[4], Tac, Tcax, notif_adrb_4,,, delayed_TCLKB, delayed_ADRB[4] );
  $setuphold (posedge TCLKB  &&& ENADRBTCLKB, posedge ADRB[5], Tac, Tcax, notif_adrb_5,,, delayed_TCLKB, delayed_ADRB[5] );
  $setuphold (posedge TCLKB  &&& ENADRBTCLKB, negedge ADRB[5], Tac, Tcax, notif_adrb_5,,, delayed_TCLKB, delayed_ADRB[5] );
  $setuphold (posedge TCLKB  &&& ENADRBTCLKB, posedge ADRB[6], Tac, Tcax, notif_adrb_6,,, delayed_TCLKB, delayed_ADRB[6] );
  $setuphold (posedge TCLKB  &&& ENADRBTCLKB, negedge ADRB[6], Tac, Tcax, notif_adrb_6,,, delayed_TCLKB, delayed_ADRB[6] );
  $setuphold (posedge TCLKB  &&& ENADRBTCLKB, posedge ADRB[7], Tac, Tcax, notif_adrb_7,,, delayed_TCLKB, delayed_ADRB[7] );
  $setuphold (posedge TCLKB  &&& ENADRBTCLKB, negedge ADRB[7], Tac, Tcax, notif_adrb_7,,, delayed_TCLKB, delayed_ADRB[7] );
  $setuphold (posedge TCLKB  &&& ENADRBTCLKB, posedge ADRB[8], Tac, Tcax, notif_adrb_8,,, delayed_TCLKB, delayed_ADRB[8] );
  $setuphold (posedge TCLKB  &&& ENADRBTCLKB, negedge ADRB[8], Tac, Tcax, notif_adrb_8,,, delayed_TCLKB, delayed_ADRB[8] );
  $setuphold (posedge TCLKB  &&& ENADRBTCLKB, posedge ADRB[9], Tac, Tcax, notif_adrb_9,,, delayed_TCLKB, delayed_ADRB[9] );
  $setuphold (posedge TCLKB  &&& ENADRBTCLKB, negedge ADRB[9], Tac, Tcax, notif_adrb_9,,, delayed_TCLKB, delayed_ADRB[9] );
  $setuphold (posedge TCLKB  &&& ENADRBTCLKB, posedge ADRB[10], Tac, Tcax, notif_adrb_10,,, delayed_TCLKB, delayed_ADRB[10] );
  $setuphold (posedge TCLKB  &&& ENADRBTCLKB, negedge ADRB[10], Tac, Tcax, notif_adrb_10,,, delayed_TCLKB, delayed_ADRB[10] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[0], Tdc, Tcdx, notif_db_0,,, delayed_CLKB, delayed_DB[0] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[0], Tdc, Tcdx, notif_db_0,,, delayed_CLKB, delayed_DB[0] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[1], Tdc, Tcdx, notif_db_1,,, delayed_CLKB, delayed_DB[1] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[1], Tdc, Tcdx, notif_db_1,,, delayed_CLKB, delayed_DB[1] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[2], Tdc, Tcdx, notif_db_2,,, delayed_CLKB, delayed_DB[2] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[2], Tdc, Tcdx, notif_db_2,,, delayed_CLKB, delayed_DB[2] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[3], Tdc, Tcdx, notif_db_3,,, delayed_CLKB, delayed_DB[3] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[3], Tdc, Tcdx, notif_db_3,,, delayed_CLKB, delayed_DB[3] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[4], Tdc, Tcdx, notif_db_4,,, delayed_CLKB, delayed_DB[4] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[4], Tdc, Tcdx, notif_db_4,,, delayed_CLKB, delayed_DB[4] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[5], Tdc, Tcdx, notif_db_5,,, delayed_CLKB, delayed_DB[5] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[5], Tdc, Tcdx, notif_db_5,,, delayed_CLKB, delayed_DB[5] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[6], Tdc, Tcdx, notif_db_6,,, delayed_CLKB, delayed_DB[6] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[6], Tdc, Tcdx, notif_db_6,,, delayed_CLKB, delayed_DB[6] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[7], Tdc, Tcdx, notif_db_7,,, delayed_CLKB, delayed_DB[7] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[7], Tdc, Tcdx, notif_db_7,,, delayed_CLKB, delayed_DB[7] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[8], Tdc, Tcdx, notif_db_8,,, delayed_CLKB, delayed_DB[8] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[8], Tdc, Tcdx, notif_db_8,,, delayed_CLKB, delayed_DB[8] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[9], Tdc, Tcdx, notif_db_9,,, delayed_CLKB, delayed_DB[9] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[9], Tdc, Tcdx, notif_db_9,,, delayed_CLKB, delayed_DB[9] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[10], Tdc, Tcdx, notif_db_10,,, delayed_CLKB, delayed_DB[10] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[10], Tdc, Tcdx, notif_db_10,,, delayed_CLKB, delayed_DB[10] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[11], Tdc, Tcdx, notif_db_11,,, delayed_CLKB, delayed_DB[11] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[11], Tdc, Tcdx, notif_db_11,,, delayed_CLKB, delayed_DB[11] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[12], Tdc, Tcdx, notif_db_12,,, delayed_CLKB, delayed_DB[12] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[12], Tdc, Tcdx, notif_db_12,,, delayed_CLKB, delayed_DB[12] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[13], Tdc, Tcdx, notif_db_13,,, delayed_CLKB, delayed_DB[13] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[13], Tdc, Tcdx, notif_db_13,,, delayed_CLKB, delayed_DB[13] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[14], Tdc, Tcdx, notif_db_14,,, delayed_CLKB, delayed_DB[14] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[14], Tdc, Tcdx, notif_db_14,,, delayed_CLKB, delayed_DB[14] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[15], Tdc, Tcdx, notif_db_15,,, delayed_CLKB, delayed_DB[15] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[15], Tdc, Tcdx, notif_db_15,,, delayed_CLKB, delayed_DB[15] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[16], Tdc, Tcdx, notif_db_16,,, delayed_CLKB, delayed_DB[16] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[16], Tdc, Tcdx, notif_db_16,,, delayed_CLKB, delayed_DB[16] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[17], Tdc, Tcdx, notif_db_17,,, delayed_CLKB, delayed_DB[17] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[17], Tdc, Tcdx, notif_db_17,,, delayed_CLKB, delayed_DB[17] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[18], Tdc, Tcdx, notif_db_18,,, delayed_CLKB, delayed_DB[18] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[18], Tdc, Tcdx, notif_db_18,,, delayed_CLKB, delayed_DB[18] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[19], Tdc, Tcdx, notif_db_19,,, delayed_CLKB, delayed_DB[19] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[19], Tdc, Tcdx, notif_db_19,,, delayed_CLKB, delayed_DB[19] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[20], Tdc, Tcdx, notif_db_20,,, delayed_CLKB, delayed_DB[20] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[20], Tdc, Tcdx, notif_db_20,,, delayed_CLKB, delayed_DB[20] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[21], Tdc, Tcdx, notif_db_21,,, delayed_CLKB, delayed_DB[21] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[21], Tdc, Tcdx, notif_db_21,,, delayed_CLKB, delayed_DB[21] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[22], Tdc, Tcdx, notif_db_22,,, delayed_CLKB, delayed_DB[22] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[22], Tdc, Tcdx, notif_db_22,,, delayed_CLKB, delayed_DB[22] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[23], Tdc, Tcdx, notif_db_23,,, delayed_CLKB, delayed_DB[23] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[23], Tdc, Tcdx, notif_db_23,,, delayed_CLKB, delayed_DB[23] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[24], Tdc, Tcdx, notif_db_24,,, delayed_CLKB, delayed_DB[24] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[24], Tdc, Tcdx, notif_db_24,,, delayed_CLKB, delayed_DB[24] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[25], Tdc, Tcdx, notif_db_25,,, delayed_CLKB, delayed_DB[25] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[25], Tdc, Tcdx, notif_db_25,,, delayed_CLKB, delayed_DB[25] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[26], Tdc, Tcdx, notif_db_26,,, delayed_CLKB, delayed_DB[26] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[26], Tdc, Tcdx, notif_db_26,,, delayed_CLKB, delayed_DB[26] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[27], Tdc, Tcdx, notif_db_27,,, delayed_CLKB, delayed_DB[27] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[27], Tdc, Tcdx, notif_db_27,,, delayed_CLKB, delayed_DB[27] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[28], Tdc, Tcdx, notif_db_28,,, delayed_CLKB, delayed_DB[28] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[28], Tdc, Tcdx, notif_db_28,,, delayed_CLKB, delayed_DB[28] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[29], Tdc, Tcdx, notif_db_29,,, delayed_CLKB, delayed_DB[29] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[29], Tdc, Tcdx, notif_db_29,,, delayed_CLKB, delayed_DB[29] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[30], Tdc, Tcdx, notif_db_30,,, delayed_CLKB, delayed_DB[30] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[30], Tdc, Tcdx, notif_db_30,,, delayed_CLKB, delayed_DB[30] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[31], Tdc, Tcdx, notif_db_31,,, delayed_CLKB, delayed_DB[31] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[31], Tdc, Tcdx, notif_db_31,,, delayed_CLKB, delayed_DB[31] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[0], Tdc, Tcdx, notif_db_0,,, delayed_TCLKB, delayed_DB[0] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[0], Tdc, Tcdx, notif_db_0,,, delayed_TCLKB, delayed_DB[0] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[1], Tdc, Tcdx, notif_db_1,,, delayed_TCLKB, delayed_DB[1] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[1], Tdc, Tcdx, notif_db_1,,, delayed_TCLKB, delayed_DB[1] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[2], Tdc, Tcdx, notif_db_2,,, delayed_TCLKB, delayed_DB[2] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[2], Tdc, Tcdx, notif_db_2,,, delayed_TCLKB, delayed_DB[2] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[3], Tdc, Tcdx, notif_db_3,,, delayed_TCLKB, delayed_DB[3] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[3], Tdc, Tcdx, notif_db_3,,, delayed_TCLKB, delayed_DB[3] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[4], Tdc, Tcdx, notif_db_4,,, delayed_TCLKB, delayed_DB[4] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[4], Tdc, Tcdx, notif_db_4,,, delayed_TCLKB, delayed_DB[4] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[5], Tdc, Tcdx, notif_db_5,,, delayed_TCLKB, delayed_DB[5] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[5], Tdc, Tcdx, notif_db_5,,, delayed_TCLKB, delayed_DB[5] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[6], Tdc, Tcdx, notif_db_6,,, delayed_TCLKB, delayed_DB[6] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[6], Tdc, Tcdx, notif_db_6,,, delayed_TCLKB, delayed_DB[6] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[7], Tdc, Tcdx, notif_db_7,,, delayed_TCLKB, delayed_DB[7] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[7], Tdc, Tcdx, notif_db_7,,, delayed_TCLKB, delayed_DB[7] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[8], Tdc, Tcdx, notif_db_8,,, delayed_TCLKB, delayed_DB[8] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[8], Tdc, Tcdx, notif_db_8,,, delayed_TCLKB, delayed_DB[8] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[9], Tdc, Tcdx, notif_db_9,,, delayed_TCLKB, delayed_DB[9] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[9], Tdc, Tcdx, notif_db_9,,, delayed_TCLKB, delayed_DB[9] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[10], Tdc, Tcdx, notif_db_10,,, delayed_TCLKB, delayed_DB[10] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[10], Tdc, Tcdx, notif_db_10,,, delayed_TCLKB, delayed_DB[10] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[11], Tdc, Tcdx, notif_db_11,,, delayed_TCLKB, delayed_DB[11] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[11], Tdc, Tcdx, notif_db_11,,, delayed_TCLKB, delayed_DB[11] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[12], Tdc, Tcdx, notif_db_12,,, delayed_TCLKB, delayed_DB[12] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[12], Tdc, Tcdx, notif_db_12,,, delayed_TCLKB, delayed_DB[12] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[13], Tdc, Tcdx, notif_db_13,,, delayed_TCLKB, delayed_DB[13] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[13], Tdc, Tcdx, notif_db_13,,, delayed_TCLKB, delayed_DB[13] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[14], Tdc, Tcdx, notif_db_14,,, delayed_TCLKB, delayed_DB[14] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[14], Tdc, Tcdx, notif_db_14,,, delayed_TCLKB, delayed_DB[14] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[15], Tdc, Tcdx, notif_db_15,,, delayed_TCLKB, delayed_DB[15] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[15], Tdc, Tcdx, notif_db_15,,, delayed_TCLKB, delayed_DB[15] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[16], Tdc, Tcdx, notif_db_16,,, delayed_TCLKB, delayed_DB[16] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[16], Tdc, Tcdx, notif_db_16,,, delayed_TCLKB, delayed_DB[16] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[17], Tdc, Tcdx, notif_db_17,,, delayed_TCLKB, delayed_DB[17] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[17], Tdc, Tcdx, notif_db_17,,, delayed_TCLKB, delayed_DB[17] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[18], Tdc, Tcdx, notif_db_18,,, delayed_TCLKB, delayed_DB[18] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[18], Tdc, Tcdx, notif_db_18,,, delayed_TCLKB, delayed_DB[18] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[19], Tdc, Tcdx, notif_db_19,,, delayed_TCLKB, delayed_DB[19] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[19], Tdc, Tcdx, notif_db_19,,, delayed_TCLKB, delayed_DB[19] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[20], Tdc, Tcdx, notif_db_20,,, delayed_TCLKB, delayed_DB[20] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[20], Tdc, Tcdx, notif_db_20,,, delayed_TCLKB, delayed_DB[20] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[21], Tdc, Tcdx, notif_db_21,,, delayed_TCLKB, delayed_DB[21] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[21], Tdc, Tcdx, notif_db_21,,, delayed_TCLKB, delayed_DB[21] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[22], Tdc, Tcdx, notif_db_22,,, delayed_TCLKB, delayed_DB[22] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[22], Tdc, Tcdx, notif_db_22,,, delayed_TCLKB, delayed_DB[22] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[23], Tdc, Tcdx, notif_db_23,,, delayed_TCLKB, delayed_DB[23] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[23], Tdc, Tcdx, notif_db_23,,, delayed_TCLKB, delayed_DB[23] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[24], Tdc, Tcdx, notif_db_24,,, delayed_TCLKB, delayed_DB[24] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[24], Tdc, Tcdx, notif_db_24,,, delayed_TCLKB, delayed_DB[24] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[25], Tdc, Tcdx, notif_db_25,,, delayed_TCLKB, delayed_DB[25] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[25], Tdc, Tcdx, notif_db_25,,, delayed_TCLKB, delayed_DB[25] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[26], Tdc, Tcdx, notif_db_26,,, delayed_TCLKB, delayed_DB[26] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[26], Tdc, Tcdx, notif_db_26,,, delayed_TCLKB, delayed_DB[26] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[27], Tdc, Tcdx, notif_db_27,,, delayed_TCLKB, delayed_DB[27] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[27], Tdc, Tcdx, notif_db_27,,, delayed_TCLKB, delayed_DB[27] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[28], Tdc, Tcdx, notif_db_28,,, delayed_TCLKB, delayed_DB[28] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[28], Tdc, Tcdx, notif_db_28,,, delayed_TCLKB, delayed_DB[28] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[29], Tdc, Tcdx, notif_db_29,,, delayed_TCLKB, delayed_DB[29] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[29], Tdc, Tcdx, notif_db_29,,, delayed_TCLKB, delayed_DB[29] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[30], Tdc, Tcdx, notif_db_30,,, delayed_TCLKB, delayed_DB[30] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[30], Tdc, Tcdx, notif_db_30,,, delayed_TCLKB, delayed_DB[30] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[31], Tdc, Tcdx, notif_db_31,,, delayed_TCLKB, delayed_DB[31] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[31], Tdc, Tcdx, notif_db_31,,, delayed_TCLKB, delayed_DB[31] );
  $setuphold (posedge CLKB  &&& ENWEBCLKB, posedge WEB,Twc, Tcwx, notif_web,,, delayed_CLKB, delayed_WEB );
  $setuphold (posedge CLKB  &&& ENWEBCLKB, negedge WEB,Twc, Tcwx, notif_web,,, delayed_CLKB, delayed_WEB );
  $setuphold (posedge TCLKB  &&& ENWEBTCLKB, posedge WEB,Twc, Tcwx, notif_web,,, delayed_TCLKB, delayed_WEB );
  $setuphold (posedge TCLKB  &&& ENWEBTCLKB, negedge WEB,Twc, Tcwx, notif_web,,, delayed_TCLKB, delayed_WEB );
  $setuphold (posedge CLKB  &&& ENMEBCLKB, posedge MEB,Tmc, Tcmx, notif_meb,,, delayed_CLKB, delayed_MEB );
  $setuphold (posedge CLKB  &&& ENMEBCLKB, negedge MEB,Tmc, Tcmx, notif_meb,,, delayed_CLKB, delayed_MEB );
  $setuphold (posedge TCLKB  &&& ENMEBTCLKB, posedge MEB,Tmc, Tcmx, notif_meb,,, delayed_TCLKB, delayed_MEB );
  $setuphold (posedge TCLKB  &&& ENMEBTCLKB, negedge MEB,Tmc, Tcmx, notif_meb,,, delayed_TCLKB, delayed_MEB );
  $setuphold (posedge TCLKB  &&& ENTADRBTCLKB, posedge TADRB[0], Tac, Tcax, notif_adrb_0,,, delayed_TCLKB, delayed_TADRB[0] );
  $setuphold (posedge TCLKB  &&& ENTADRBTCLKB, negedge TADRB[0], Tac, Tcax, notif_adrb_0,,, delayed_TCLKB, delayed_TADRB[0] );
  $setuphold (posedge TCLKB  &&& ENTADRBTCLKB, posedge TADRB[1], Tac, Tcax, notif_adrb_1,,, delayed_TCLKB, delayed_TADRB[1] );
  $setuphold (posedge TCLKB  &&& ENTADRBTCLKB, negedge TADRB[1], Tac, Tcax, notif_adrb_1,,, delayed_TCLKB, delayed_TADRB[1] );
  $setuphold (posedge TCLKB  &&& ENTADRBTCLKB, posedge TADRB[2], Tac, Tcax, notif_adrb_2,,, delayed_TCLKB, delayed_TADRB[2] );
  $setuphold (posedge TCLKB  &&& ENTADRBTCLKB, negedge TADRB[2], Tac, Tcax, notif_adrb_2,,, delayed_TCLKB, delayed_TADRB[2] );
  $setuphold (posedge TCLKB  &&& ENTADRBTCLKB, posedge TADRB[3], Tac, Tcax, notif_adrb_3,,, delayed_TCLKB, delayed_TADRB[3] );
  $setuphold (posedge TCLKB  &&& ENTADRBTCLKB, negedge TADRB[3], Tac, Tcax, notif_adrb_3,,, delayed_TCLKB, delayed_TADRB[3] );
  $setuphold (posedge TCLKB  &&& ENTADRBTCLKB, posedge TADRB[4], Tac, Tcax, notif_adrb_4,,, delayed_TCLKB, delayed_TADRB[4] );
  $setuphold (posedge TCLKB  &&& ENTADRBTCLKB, negedge TADRB[4], Tac, Tcax, notif_adrb_4,,, delayed_TCLKB, delayed_TADRB[4] );
  $setuphold (posedge TCLKB  &&& ENTADRBTCLKB, posedge TADRB[5], Tac, Tcax, notif_adrb_5,,, delayed_TCLKB, delayed_TADRB[5] );
  $setuphold (posedge TCLKB  &&& ENTADRBTCLKB, negedge TADRB[5], Tac, Tcax, notif_adrb_5,,, delayed_TCLKB, delayed_TADRB[5] );
  $setuphold (posedge TCLKB  &&& ENTADRBTCLKB, posedge TADRB[6], Tac, Tcax, notif_adrb_6,,, delayed_TCLKB, delayed_TADRB[6] );
  $setuphold (posedge TCLKB  &&& ENTADRBTCLKB, negedge TADRB[6], Tac, Tcax, notif_adrb_6,,, delayed_TCLKB, delayed_TADRB[6] );
  $setuphold (posedge TCLKB  &&& ENTADRBTCLKB, posedge TADRB[7], Tac, Tcax, notif_adrb_7,,, delayed_TCLKB, delayed_TADRB[7] );
  $setuphold (posedge TCLKB  &&& ENTADRBTCLKB, negedge TADRB[7], Tac, Tcax, notif_adrb_7,,, delayed_TCLKB, delayed_TADRB[7] );
  $setuphold (posedge TCLKB  &&& ENTADRBTCLKB, posedge TADRB[8], Tac, Tcax, notif_adrb_8,,, delayed_TCLKB, delayed_TADRB[8] );
  $setuphold (posedge TCLKB  &&& ENTADRBTCLKB, negedge TADRB[8], Tac, Tcax, notif_adrb_8,,, delayed_TCLKB, delayed_TADRB[8] );
  $setuphold (posedge TCLKB  &&& ENTADRBTCLKB, posedge TADRB[9], Tac, Tcax, notif_adrb_9,,, delayed_TCLKB, delayed_TADRB[9] );
  $setuphold (posedge TCLKB  &&& ENTADRBTCLKB, negedge TADRB[9], Tac, Tcax, notif_adrb_9,,, delayed_TCLKB, delayed_TADRB[9] );
  $setuphold (posedge TCLKB  &&& ENTADRBTCLKB, posedge TADRB[10], Tac, Tcax, notif_adrb_10,,, delayed_TCLKB, delayed_TADRB[10] );
  $setuphold (posedge TCLKB  &&& ENTADRBTCLKB, negedge TADRB[10], Tac, Tcax, notif_adrb_10,,, delayed_TCLKB, delayed_TADRB[10] );
  $setuphold (posedge CLKB  &&& ENTADRBCLKB, posedge TADRB[0], Tac, Tcax, notif_adrb_0,,, delayed_CLKB, delayed_TADRB[0] );
  $setuphold (posedge CLKB  &&& ENTADRBCLKB, negedge TADRB[0], Tac, Tcax, notif_adrb_0,,, delayed_CLKB, delayed_TADRB[0] );
  $setuphold (posedge CLKB  &&& ENTADRBCLKB, posedge TADRB[1], Tac, Tcax, notif_adrb_1,,, delayed_CLKB, delayed_TADRB[1] );
  $setuphold (posedge CLKB  &&& ENTADRBCLKB, negedge TADRB[1], Tac, Tcax, notif_adrb_1,,, delayed_CLKB, delayed_TADRB[1] );
  $setuphold (posedge CLKB  &&& ENTADRBCLKB, posedge TADRB[2], Tac, Tcax, notif_adrb_2,,, delayed_CLKB, delayed_TADRB[2] );
  $setuphold (posedge CLKB  &&& ENTADRBCLKB, negedge TADRB[2], Tac, Tcax, notif_adrb_2,,, delayed_CLKB, delayed_TADRB[2] );
  $setuphold (posedge CLKB  &&& ENTADRBCLKB, posedge TADRB[3], Tac, Tcax, notif_adrb_3,,, delayed_CLKB, delayed_TADRB[3] );
  $setuphold (posedge CLKB  &&& ENTADRBCLKB, negedge TADRB[3], Tac, Tcax, notif_adrb_3,,, delayed_CLKB, delayed_TADRB[3] );
  $setuphold (posedge CLKB  &&& ENTADRBCLKB, posedge TADRB[4], Tac, Tcax, notif_adrb_4,,, delayed_CLKB, delayed_TADRB[4] );
  $setuphold (posedge CLKB  &&& ENTADRBCLKB, negedge TADRB[4], Tac, Tcax, notif_adrb_4,,, delayed_CLKB, delayed_TADRB[4] );
  $setuphold (posedge CLKB  &&& ENTADRBCLKB, posedge TADRB[5], Tac, Tcax, notif_adrb_5,,, delayed_CLKB, delayed_TADRB[5] );
  $setuphold (posedge CLKB  &&& ENTADRBCLKB, negedge TADRB[5], Tac, Tcax, notif_adrb_5,,, delayed_CLKB, delayed_TADRB[5] );
  $setuphold (posedge CLKB  &&& ENTADRBCLKB, posedge TADRB[6], Tac, Tcax, notif_adrb_6,,, delayed_CLKB, delayed_TADRB[6] );
  $setuphold (posedge CLKB  &&& ENTADRBCLKB, negedge TADRB[6], Tac, Tcax, notif_adrb_6,,, delayed_CLKB, delayed_TADRB[6] );
  $setuphold (posedge CLKB  &&& ENTADRBCLKB, posedge TADRB[7], Tac, Tcax, notif_adrb_7,,, delayed_CLKB, delayed_TADRB[7] );
  $setuphold (posedge CLKB  &&& ENTADRBCLKB, negedge TADRB[7], Tac, Tcax, notif_adrb_7,,, delayed_CLKB, delayed_TADRB[7] );
  $setuphold (posedge CLKB  &&& ENTADRBCLKB, posedge TADRB[8], Tac, Tcax, notif_adrb_8,,, delayed_CLKB, delayed_TADRB[8] );
  $setuphold (posedge CLKB  &&& ENTADRBCLKB, negedge TADRB[8], Tac, Tcax, notif_adrb_8,,, delayed_CLKB, delayed_TADRB[8] );
  $setuphold (posedge CLKB  &&& ENTADRBCLKB, posedge TADRB[9], Tac, Tcax, notif_adrb_9,,, delayed_CLKB, delayed_TADRB[9] );
  $setuphold (posedge CLKB  &&& ENTADRBCLKB, negedge TADRB[9], Tac, Tcax, notif_adrb_9,,, delayed_CLKB, delayed_TADRB[9] );
  $setuphold (posedge CLKB  &&& ENTADRBCLKB, posedge TADRB[10], Tac, Tcax, notif_adrb_10,,, delayed_CLKB, delayed_TADRB[10] );
  $setuphold (posedge CLKB  &&& ENTADRBCLKB, negedge TADRB[10], Tac, Tcax, notif_adrb_10,,, delayed_CLKB, delayed_TADRB[10] );
  $setuphold (posedge TCLKB  &&& ENTDBTCLKB, posedge TDB[0], Tbdc, Tbcdx, notif_tdb_0,,, delayed_TCLKB, delayed_TDB[0] );
  $setuphold (posedge TCLKB  &&& ENTDBTCLKB, negedge TDB[0], Tbdc, Tbcdx, notif_tdb_0,,, delayed_TCLKB, delayed_TDB[0] );
  $setuphold (posedge TCLKB  &&& ENTDBTCLKB, posedge TDB[1], Tbdc, Tbcdx, notif_tdb_1,,, delayed_TCLKB, delayed_TDB[1] );
  $setuphold (posedge TCLKB  &&& ENTDBTCLKB, negedge TDB[1], Tbdc, Tbcdx, notif_tdb_1,,, delayed_TCLKB, delayed_TDB[1] );
  $setuphold (posedge TCLKB  &&& ENTDBTCLKB, posedge TDB[2], Tbdc, Tbcdx, notif_tdb_2,,, delayed_TCLKB, delayed_TDB[2] );
  $setuphold (posedge TCLKB  &&& ENTDBTCLKB, negedge TDB[2], Tbdc, Tbcdx, notif_tdb_2,,, delayed_TCLKB, delayed_TDB[2] );
  $setuphold (posedge TCLKB  &&& ENTDBTCLKB, posedge TDB[3], Tbdc, Tbcdx, notif_tdb_3,,, delayed_TCLKB, delayed_TDB[3] );
  $setuphold (posedge TCLKB  &&& ENTDBTCLKB, negedge TDB[3], Tbdc, Tbcdx, notif_tdb_3,,, delayed_TCLKB, delayed_TDB[3] );
  $setuphold (posedge CLKB  &&& ENTDBCLKB, posedge TDB[0], Tbdc, Tbcdx, notif_tdb_0,,, delayed_CLKB, delayed_TDB[0] );
  $setuphold (posedge CLKB  &&& ENTDBCLKB, negedge TDB[0], Tbdc, Tbcdx, notif_tdb_0,,, delayed_CLKB, delayed_TDB[0] );
  $setuphold (posedge CLKB  &&& ENTDBCLKB, posedge TDB[1], Tbdc, Tbcdx, notif_tdb_1,,, delayed_CLKB, delayed_TDB[1] );
  $setuphold (posedge CLKB  &&& ENTDBCLKB, negedge TDB[1], Tbdc, Tbcdx, notif_tdb_1,,, delayed_CLKB, delayed_TDB[1] );
  $setuphold (posedge CLKB  &&& ENTDBCLKB, posedge TDB[2], Tbdc, Tbcdx, notif_tdb_2,,, delayed_CLKB, delayed_TDB[2] );
  $setuphold (posedge CLKB  &&& ENTDBCLKB, negedge TDB[2], Tbdc, Tbcdx, notif_tdb_2,,, delayed_CLKB, delayed_TDB[2] );
  $setuphold (posedge CLKB  &&& ENTDBCLKB, posedge TDB[3], Tbdc, Tbcdx, notif_tdb_3,,, delayed_CLKB, delayed_TDB[3] );
  $setuphold (posedge CLKB  &&& ENTDBCLKB, negedge TDB[3], Tbdc, Tbcdx, notif_tdb_3,,, delayed_CLKB, delayed_TDB[3] );
  $setuphold (posedge TCLKB  &&& ENTWEBTCLKB, posedge TWEB,Twc, Tcwx, notif_web,,, delayed_TCLKB, delayed_TWEB );
  $setuphold (posedge TCLKB  &&& ENTWEBTCLKB, negedge TWEB,Twc, Tcwx, notif_web,,, delayed_TCLKB, delayed_TWEB );
  $setuphold (posedge CLKB  &&& ENTWEBCLKB, posedge TWEB,Twc, Tcwx, notif_web,,, delayed_CLKB, delayed_TWEB );
  $setuphold (posedge CLKB  &&& ENTWEBCLKB, negedge TWEB,Twc, Tcwx, notif_web,,, delayed_CLKB, delayed_TWEB );
  $setuphold (posedge TCLKB  &&& ENTMEBTCLKB, posedge TMEB,Tmc, Tcmx, notif_meb,,, delayed_TCLKB, delayed_TMEB );
  $setuphold (posedge TCLKB  &&& ENTMEBTCLKB, negedge TMEB,Tmc, Tcmx, notif_meb,,, delayed_TCLKB, delayed_TMEB );
  $setuphold (posedge CLKB  &&& ENTMEBCLKB, posedge TMEB,Tmc, Tcmx, notif_meb,,, delayed_CLKB, delayed_TMEB );
  $setuphold (posedge CLKB  &&& ENTMEBCLKB, negedge TMEB,Tmc, Tcmx, notif_meb,,, delayed_CLKB, delayed_TMEB );
  $setuphold (posedge CLKB  &&& ENBISTEB, posedge BISTEB,Tbc, Tcbx, notif_bisteb,,, delayed_CLKB, delayed_BISTEB );
  $setuphold (posedge CLKB  &&& ENBISTEB, negedge BISTEB,Tbc, Tcbx, notif_bisteb,,, delayed_CLKB, delayed_BISTEB );
  $setuphold (posedge TCLKB  &&& ENTBISTEB, posedge BISTEB,Tbc, Tcbx, notif_bisteb,,, delayed_TCLKB, delayed_BISTEB );
  $setuphold (posedge TCLKB  &&& ENTBISTEB, negedge BISTEB,Tbc, Tcbx, notif_bisteb,,, delayed_TCLKB, delayed_BISTEB );
  $setuphold (posedge CLKB  &&& ENTEST1B, posedge TEST1B,TT1C, 0, notif_test1b,,, delayed_CLKB, delayed_TEST1B );
  $setuphold (posedge CLKB  &&& ENTEST1B, negedge TEST1B,TT1C, 0, notif_test1b,,, delayed_CLKB, delayed_TEST1B );
  $setuphold (negedge CLKB  &&& ENTEST1B, posedge TEST1B,0, TCT1X, notif_test1b,,, delayed_CLKB, delayed_TEST1B );
  $setuphold (negedge CLKB  &&& ENTEST1B, negedge TEST1B,0, TCT1X, notif_test1b,,, delayed_CLKB, delayed_TEST1B );
  $setuphold (posedge TCLKB  &&& ENTTEST1B, posedge TEST1B,TT1C, 0, notif_test1b,,, delayed_TCLKB, delayed_TEST1B );
  $setuphold (posedge TCLKB  &&& ENTTEST1B, negedge TEST1B,TT1C, 0, notif_test1b,,, delayed_TCLKB, delayed_TEST1B );
  $setuphold (negedge TCLKB  &&& ENTTEST1B, posedge TEST1B,0, TCT1X, notif_test1b,,, delayed_TCLKB, delayed_TEST1B );
  $setuphold (negedge TCLKB  &&& ENTTEST1B, negedge TEST1B,0, TCT1X, notif_test1b,,, delayed_TCLKB, delayed_TEST1B );
  $setuphold (posedge CLKB  &&& ENRMEB, posedge RMEB,Trmec, Tcrmex, notif_rmeb,,, delayed_CLKB, delayed_RMEB );
  $setuphold (posedge CLKB  &&& ENRMEB, negedge RMEB,Trmec, Tcrmex, notif_rmeb,,, delayed_CLKB, delayed_RMEB );
  $setuphold (posedge TCLKB  &&& ENTRMEB, posedge RMEB,Trmec, Tcrmex, notif_rmeb,,, delayed_TCLKB, delayed_RMEB );
  $setuphold (posedge TCLKB  &&& ENTRMEB, negedge RMEB,Trmec, Tcrmex, notif_rmeb,,, delayed_TCLKB, delayed_RMEB );
  $setuphold (posedge CLKB  &&& ENRMB, posedge RMB[0], Trmc, Tcrmx, notif_rmb,,, delayed_CLKB, delayed_RMB[0] );
  $setuphold (posedge CLKB  &&& ENRMB, negedge RMB[0], Trmc, Tcrmx, notif_rmb,,, delayed_CLKB, delayed_RMB[0] );
  $setuphold (posedge CLKB  &&& ENRMB, posedge RMB[1], Trmc, Tcrmx, notif_rmb,,, delayed_CLKB, delayed_RMB[1] );
  $setuphold (posedge CLKB  &&& ENRMB, negedge RMB[1], Trmc, Tcrmx, notif_rmb,,, delayed_CLKB, delayed_RMB[1] );
  $setuphold (posedge CLKB  &&& ENRMB, posedge RMB[2], Trmc, Tcrmx, notif_rmb,,, delayed_CLKB, delayed_RMB[2] );
  $setuphold (posedge CLKB  &&& ENRMB, negedge RMB[2], Trmc, Tcrmx, notif_rmb,,, delayed_CLKB, delayed_RMB[2] );
  $setuphold (posedge CLKB  &&& ENRMB, posedge RMB[3], Trmc, Tcrmx, notif_rmb,,, delayed_CLKB, delayed_RMB[3] );
  $setuphold (posedge CLKB  &&& ENRMB, negedge RMB[3], Trmc, Tcrmx, notif_rmb,,, delayed_CLKB, delayed_RMB[3] );
  $setuphold (posedge TCLKB  &&& ENTRMB, posedge RMB[0], Trmc, Tcrmx, notif_rmb,,, delayed_TCLKB, delayed_RMB[0] );
  $setuphold (posedge TCLKB  &&& ENTRMB, negedge RMB[0], Trmc, Tcrmx, notif_rmb,,, delayed_TCLKB, delayed_RMB[0] );
  $setuphold (posedge TCLKB  &&& ENTRMB, posedge RMB[1], Trmc, Tcrmx, notif_rmb,,, delayed_TCLKB, delayed_RMB[1] );
  $setuphold (posedge TCLKB  &&& ENTRMB, negedge RMB[1], Trmc, Tcrmx, notif_rmb,,, delayed_TCLKB, delayed_RMB[1] );
  $setuphold (posedge TCLKB  &&& ENTRMB, posedge RMB[2], Trmc, Tcrmx, notif_rmb,,, delayed_TCLKB, delayed_RMB[2] );
  $setuphold (posedge TCLKB  &&& ENTRMB, negedge RMB[2], Trmc, Tcrmx, notif_rmb,,, delayed_TCLKB, delayed_RMB[2] );
  $setuphold (posedge TCLKB  &&& ENTRMB, posedge RMB[3], Trmc, Tcrmx, notif_rmb,,, delayed_TCLKB, delayed_RMB[3] );
  $setuphold (posedge TCLKB  &&& ENTRMB, negedge RMB[3], Trmc, Tcrmx, notif_rmb,,, delayed_TCLKB, delayed_RMB[3] );
  $setuphold (posedge CLKB  &&& ENCDB, posedge CDB[0], Tdatc, Tcdatx, notif_cdb_0,,, delayed_CLKB, delayed_CDB[0] );
  $setuphold (posedge CLKB  &&& ENCDB, negedge CDB[0], Tdatc, Tcdatx, notif_cdb_0,,, delayed_CLKB, delayed_CDB[0] );
  $setuphold (posedge CLKB  &&& ENCDB, posedge CDB[1], Tdatc, Tcdatx, notif_cdb_1,,, delayed_CLKB, delayed_CDB[1] );
  $setuphold (posedge CLKB  &&& ENCDB, negedge CDB[1], Tdatc, Tcdatx, notif_cdb_1,,, delayed_CLKB, delayed_CDB[1] );
  $setuphold (posedge CLKB  &&& ENCDB, posedge CDB[2], Tdatc, Tcdatx, notif_cdb_2,,, delayed_CLKB, delayed_CDB[2] );
  $setuphold (posedge CLKB  &&& ENCDB, negedge CDB[2], Tdatc, Tcdatx, notif_cdb_2,,, delayed_CLKB, delayed_CDB[2] );
  $setuphold (posedge CLKB  &&& ENCDB, posedge CDB[3], Tdatc, Tcdatx, notif_cdb_3,,, delayed_CLKB, delayed_CDB[3] );
  $setuphold (posedge CLKB  &&& ENCDB, negedge CDB[3], Tdatc, Tcdatx, notif_cdb_3,,, delayed_CLKB, delayed_CDB[3] );
  $setuphold (posedge TCLKB  &&& ENTCDB, posedge CDB[0], Tdatc, Tcdatx, notif_cdb_0,,, delayed_TCLKB, delayed_CDB[0] );
  $setuphold (posedge TCLKB  &&& ENTCDB, negedge CDB[0], Tdatc, Tcdatx, notif_cdb_0,,, delayed_TCLKB, delayed_CDB[0] );
  $setuphold (posedge TCLKB  &&& ENTCDB, posedge CDB[1], Tdatc, Tcdatx, notif_cdb_1,,, delayed_TCLKB, delayed_CDB[1] );
  $setuphold (posedge TCLKB  &&& ENTCDB, negedge CDB[1], Tdatc, Tcdatx, notif_cdb_1,,, delayed_TCLKB, delayed_CDB[1] );
  $setuphold (posedge TCLKB  &&& ENTCDB, posedge CDB[2], Tdatc, Tcdatx, notif_cdb_2,,, delayed_TCLKB, delayed_CDB[2] );
  $setuphold (posedge TCLKB  &&& ENTCDB, negedge CDB[2], Tdatc, Tcdatx, notif_cdb_2,,, delayed_TCLKB, delayed_CDB[2] );
  $setuphold (posedge TCLKB  &&& ENTCDB, posedge CDB[3], Tdatc, Tcdatx, notif_cdb_3,,, delayed_TCLKB, delayed_CDB[3] );
  $setuphold (posedge TCLKB  &&& ENTCDB, negedge CDB[3], Tdatc, Tcdatx, notif_cdb_3,,, delayed_TCLKB, delayed_CDB[3] );
  $setuphold (posedge CLKB  &&& ENCAPTB, posedge CAPTB,Tcaptc, Tcaptx, notif_captb,,, delayed_CLKB, delayed_CAPTB );
  $setuphold (posedge CLKB  &&& ENCAPTB, negedge CAPTB,Tcaptc, Tcaptx, notif_captb,,, delayed_CLKB, delayed_CAPTB );
  $setuphold (posedge TCLKB  &&& ENTCAPTB, posedge CAPTB,Tcaptc, Tcaptx, notif_captb,,, delayed_TCLKB, delayed_CAPTB );
  $setuphold (posedge TCLKB  &&& ENTCAPTB, negedge CAPTB,Tcaptc, Tcaptx, notif_captb,,, delayed_TCLKB, delayed_CAPTB );
  $setuphold (posedge CLKB  &&& ENPIPEMEBCLKB, posedge PIPEMEB,Tpmec, Tpmex, notif_pipemeb,,, delayed_CLKB, delayed_PIPEMEB );
  $setuphold (posedge CLKB  &&& ENPIPEMEBCLKB, negedge PIPEMEB,Tpmec, Tpmex, notif_pipemeb,,, delayed_CLKB, delayed_PIPEMEB );
  $setuphold (posedge TCLKB  &&& ENPIPEMEBTCLKB, posedge PIPEMEB,Tpmec, Tpmex, notif_pipemeb,,, delayed_TCLKB, delayed_PIPEMEB );
  $setuphold (posedge TCLKB  &&& ENPIPEMEBTCLKB, negedge PIPEMEB,Tpmec, Tpmex, notif_pipemeb,,, delayed_TCLKB, delayed_PIPEMEB );
  $setuphold (posedge TCLKB  &&& ENTPIPEMEBTCLKB, posedge TPIPEMEB,Tpmec, Tpmex, notif_pipemeb,,, delayed_TCLKB, delayed_TPIPEMEB );
  $setuphold (posedge TCLKB  &&& ENTPIPEMEBTCLKB, negedge TPIPEMEB,Tpmec, Tpmex, notif_pipemeb,,, delayed_TCLKB, delayed_TPIPEMEB );
  $setuphold (posedge CLKB  &&& ENTPIPEMEBCLKB, posedge TPIPEMEB,Tpmec, Tpmex, notif_pipemeb,,, delayed_CLKB, delayed_TPIPEMEB );
  $setuphold (posedge CLKB  &&& ENTPIPEMEBCLKB, negedge TPIPEMEB,Tpmec, Tpmex, notif_pipemeb,,, delayed_CLKB, delayed_TPIPEMEB );
  $setuphold (posedge CLKB  &&& ENTCLKEB, posedge TCLKEB,Ttclkec, 0, notif_tclkeb,,, delayed_CLKB, delayed_TCLKEB );
  $setuphold (posedge CLKB  &&& ENTCLKEB, negedge TCLKEB,Ttclkec, 0, notif_tclkeb,,, delayed_CLKB, delayed_TCLKEB );
  $setuphold (negedge CLKB  &&& ENTCLKEB, posedge TCLKEB,0, Ttclkex, notif_tclkeb,,, delayed_CLKB, delayed_TCLKEB );
  $setuphold (negedge CLKB  &&& ENTCLKEB, negedge TCLKEB,0, Ttclkex, notif_tclkeb,,, delayed_CLKB, delayed_TCLKEB );
  $setuphold (posedge TCLKB  &&& ENTTCLKEB, posedge TCLKEB,Ttclkec, 0, notif_tclkeb,,, delayed_TCLKB, delayed_TCLKEB );
  $setuphold (posedge TCLKB  &&& ENTTCLKEB, negedge TCLKEB,Ttclkec, 0, notif_tclkeb,,, delayed_TCLKB, delayed_TCLKEB );
  $setuphold (negedge TCLKB  &&& ENTTCLKEB, posedge TCLKEB,0, Ttclkex, notif_tclkeb,,, delayed_TCLKB, delayed_TCLKEB );
  $setuphold (negedge TCLKB  &&& ENTTCLKEB, negedge TCLKEB,0, Ttclkex, notif_tclkeb,,, delayed_TCLKB, delayed_TCLKEB );
  $setuphold (posedge CLKB  &&& ENSTICKYB, posedge STICKYB,Tstc, Tstx, notif_stickyb,,, delayed_CLKB, delayed_STICKYB );
  $setuphold (posedge CLKB  &&& ENSTICKYB, negedge STICKYB,Tstc, Tstx, notif_stickyb,,, delayed_CLKB, delayed_STICKYB );
  $setuphold (posedge TCLKB  &&& ENTSTICKYB, posedge STICKYB,Tstc, Tstx, notif_stickyb,,, delayed_TCLKB, delayed_STICKYB );
  $setuphold (posedge TCLKB  &&& ENTSTICKYB, negedge STICKYB,Tstc, Tstx, notif_stickyb,,, delayed_TCLKB, delayed_STICKYB );
  $setuphold (posedge CLKB  &&& ENSI_QB, posedge SI_QB,Tsiqc, Tsiqx, notif_si_qb,,, delayed_CLKB, delayed_SI_QB );
  $setuphold (posedge CLKB  &&& ENSI_QB, negedge SI_QB,Tsiqc, Tsiqx, notif_si_qb,,, delayed_CLKB, delayed_SI_QB );
  $setuphold (posedge TCLKB  &&& ENTSI_QB, posedge SI_QB,Tsiqc, Tsiqx, notif_si_qb,,, delayed_TCLKB, delayed_SI_QB );
  $setuphold (posedge TCLKB  &&& ENTSI_QB, negedge SI_QB,Tsiqc, Tsiqx, notif_si_qb,,, delayed_TCLKB, delayed_SI_QB );
  $setuphold (posedge CLKB  &&& ENSI_DB, posedge SI_DB,Tsidc, Tsidx, notif_si_db,,, delayed_CLKB, delayed_SI_DB );
  $setuphold (posedge CLKB  &&& ENSI_DB, negedge SI_DB,Tsidc, Tsidx, notif_si_db,,, delayed_CLKB, delayed_SI_DB );
  $setuphold (posedge TCLKB  &&& ENTSI_DB, posedge SI_DB,Tsidc, Tsidx, notif_si_db,,, delayed_TCLKB, delayed_SI_DB );
  $setuphold (posedge TCLKB  &&& ENTSI_DB, negedge SI_DB,Tsidc, Tsidx, notif_si_db,,, delayed_TCLKB, delayed_SI_DB );
  $setuphold (posedge CLKB  &&& ENSE_QB, posedge SE_QB,Tseqc, Tseqx, notif_se_qb,,, delayed_CLKB, delayed_SE_QB );
  $setuphold (posedge CLKB  &&& ENSE_QB, negedge SE_QB,Tseqc, Tseqx, notif_se_qb,,, delayed_CLKB, delayed_SE_QB );
  $setuphold (posedge TCLKB  &&& ENTSE_QB, posedge SE_QB,Tseqc, Tseqx, notif_se_qb,,, delayed_TCLKB, delayed_SE_QB );
  $setuphold (posedge TCLKB  &&& ENTSE_QB, negedge SE_QB,Tseqc, Tseqx, notif_se_qb,,, delayed_TCLKB, delayed_SE_QB );
  $setuphold (posedge CLKB  &&& ENSE_INB, posedge SE_INB,Tseinc, Tseinx, notif_se_inb,,, delayed_CLKB, delayed_SE_INB );
  $setuphold (posedge CLKB  &&& ENSE_INB, negedge SE_INB,Tseinc, Tseinx, notif_se_inb,,, delayed_CLKB, delayed_SE_INB );
  $setuphold (posedge TCLKB  &&& ENTSE_INB, posedge SE_INB,Tseinc, Tseinx, notif_se_inb,,, delayed_TCLKB, delayed_SE_INB );
  $setuphold (posedge TCLKB  &&& ENTSE_INB, negedge SE_INB,Tseinc, Tseinx, notif_se_inb,,, delayed_TCLKB, delayed_SE_INB );
  $setuphold (posedge CLKB  &&& ENSI_CNTRB, posedge SI_CNTRB,Tsicc, Tsicx, notif_si_cntrb,,, delayed_CLKB, delayed_SI_CNTRB );
  $setuphold (posedge CLKB  &&& ENSI_CNTRB, negedge SI_CNTRB,Tsicc, Tsicx, notif_si_cntrb,,, delayed_CLKB, delayed_SI_CNTRB );
  $setuphold (posedge TCLKB  &&& ENTSI_CNTRB, posedge SI_CNTRB,Tsicc, Tsicx, notif_si_cntrb,,, delayed_TCLKB, delayed_SI_CNTRB );
  $setuphold (posedge TCLKB  &&& ENTSI_CNTRB, negedge SI_CNTRB,Tsicc, Tsicx, notif_si_cntrb,,, delayed_TCLKB, delayed_SI_CNTRB );
  $recrem ( posedge CLKA ,posedge CLKB  &&& ENCLKACLKBrec, Tcsep, 0, notif_clka_CLKB_rise_rise_rec,,, delayed_CLKA, delayed_CLKB);
  $recrem ( posedge CLKA ,posedge TCLKB  &&& ENCLKATCLKBrec, Tcsep, 0, notif_clka_TCLKB_rise_rise_rec,,, delayed_CLKA, delayed_TCLKB);
  $recrem ( posedge TCLKA ,posedge TCLKB  &&& ENTCLKATCLKBrec, Tcsep, 0, notif_clka_TCLKB_rise_rise_rec,,, delayed_TCLKA, delayed_TCLKB);
  $recrem ( posedge TCLKA ,posedge CLKB  &&& ENTCLKACLKBrec, Tcsep, 0, notif_clka_CLKB_rise_rise_rec,,, delayed_TCLKA, delayed_CLKB);
  $recrem ( posedge CLKB ,posedge CLKA  &&& ENCLKBCLKArec, Tcsep, 0, notif_clkb_CLKA_rise_rise_rec,,, delayed_CLKB, delayed_CLKA);
  $recrem ( posedge CLKB ,posedge TCLKA  &&& ENCLKBTCLKArec, Tcsep, 0, notif_clkb_TCLKA_rise_rise_rec,,, delayed_CLKB, delayed_TCLKA);
  $recrem ( posedge TCLKB ,posedge TCLKA  &&& ENTCLKBTCLKArec, Tcsep, 0, notif_clkb_TCLKA_rise_rise_rec,,, delayed_TCLKB, delayed_TCLKA);
  $recrem ( posedge TCLKB ,posedge CLKA  &&& ENTCLKBCLKArec, Tcsep, 0, notif_clkb_CLKA_rise_rise_rec,,, delayed_TCLKB, delayed_CLKA);

endspecify
`endif // endif of VIRAGE_FAST_VERILOG




wire CLKA_mem;
wire CLKB_mem;

`ifdef VIRAGE_FAST_VERILOG
generic_behav_SRAMDP_1920x32 #( MES_CNTRL, MemFault_Inj) uut (  .QA (QA_mem), .QB (QB_mem), .ADRA (ADRA_pre), .DA (DA_pre), .WEA(WEA_pre), .MEA(MEA_pre), .CLKA(CLKA_mem), .TCLKA(TCLKA_buf), .BISTEA(BISTEA_buf), .TEST1A(TEST1A_buf), .RMEA(RMEA_buf), .RMA (RMA_int), .TCLKEA(TCLKEA_buf), .DFTMASK(DFTMASK_buf), .LS(LS_buf), .ADRB (ADRB_pre), .DB (DB_pre), .WEB(WEB_pre), .MEB(MEB_pre), .CLKB(CLKB_mem), .TCLKB(TCLKB_buf), .BISTEB(BISTEB_buf), .TEST1B(TEST1B_buf), .RMEB(RMEB_buf), .RMB (RMB_int), .TCLKEB(TCLKEB_buf), .sim_check_A (sim_check_A), .sim_check_B (sim_check_B) );
`else
generic_behav_SRAMDP_1920x32 #( MES_CNTRL, MemFault_Inj) uut (  .QA (QA_mem), .QB (QB_mem), .ADRA (ADRA_pre), .DA (DA_pre), .WEA(WEA_pre), .MEA(MEA_pre), .CLKA(CLKA_mem), .TCLKA(TCLKA_buf), .BISTEA(BISTEA_buf), .TEST1A(TEST1A_buf), .RMEA(RMEA_buf), .RMA (RMA_int), .TCLKEA(TCLKEA_buf), .DFTMASK(DFTMASK_buf), .LS(LS_buf), .ADRB (ADRB_pre), .DB (DB_pre), .WEB(WEB_pre), .MEB(MEB_pre), .CLKB(CLKB_mem), .TCLKB(TCLKB_buf), .BISTEB(BISTEB_buf), .TEST1B(TEST1B_buf), .RMEB(RMEB_buf), .RMB (RMB_int), .TCLKEB(TCLKEB_buf), .EVENT_TCQ_A (EVENT_TCQ_A), .EVENT_TCQ_B (EVENT_TCQ_B),.notif_adra(notif_adra), .notif_da(notif_da), .notif_wea(notif_wea), .notif_mea(notif_mea), .notif_clka(notif_clka), .notif_clka_CLKB_rise_rise_rec(notif_clka_CLKB_rise_rise_rec), .notif_clka_TCLKB_rise_rise_rec(notif_clka_TCLKB_rise_rise_rec), .notif_bistea(notif_bistea), .notif_test1a(notif_test1a), .notif_rmea(notif_rmea), .notif_rma(notif_rma), .notif_tclkea(notif_tclkea), .notif_dftmask(notif_dftmask), .notif_dftmask_b(notif_dftmask_b), 
.notif_ls(notif_ls), .notif_ls_b(notif_ls_b), .notif_adrb(notif_adrb), .notif_db(notif_db), .notif_web(notif_web), .notif_meb(notif_meb), .notif_clkb(notif_clkb), .notif_clkb_CLKA_rise_rise_rec(notif_clkb_CLKA_rise_rise_rec), .notif_clkb_TCLKA_rise_rise_rec(notif_clkb_TCLKA_rise_rise_rec), .notif_bisteb(notif_bisteb), .notif_test1b(notif_test1b), .notif_rmeb(notif_rmeb), .notif_rmb(notif_rmb), .notif_tclkeb(notif_tclkeb) );
`endif // endif of VIRAGE_FAST_VERILOG

initial
begin
    flag_tclke_clkA = 1'b0;
    flag_tclke_clkB = 1'b0;
  ADRFLAGA = 1;
  TADRFLAGA = 1;
  ADRFLAGB = 1;
  TADRFLAGB = 1;
end // end of initial block
wire ls_mclkA;
always @( negedge ls_mclkA or ADRA_mout )
begin : blk_addrhold_0
  if ( ls_mclkA === 1'b0 )
  begin
    ADRA_old <= ADRA_mout;
  end // if of ls_mclkA = 0
end // if of always block blk_addrhold_0

always @( negedge ls_mclkA or MEA_mout )
begin : blk_mehold_0
  if ( ls_mclkA === 1'b0 )
  begin
    MEA_old <= MEA_mout;
  end // if of ls_mclkA = 0
end // if of always block blk_mehold_0

always @( negedge ls_mclkA or WEA_mout )
begin : blk_wehold_0
  if ( ls_mclkA === 1'b0 )
  begin
    WEA_old <= WEA_mout;
  end // if of ls_mclkA = 0
end // if of always block blk_wehold_0


always @( posedge mclkA)
begin : blk_posclock_0
  MEA_buf_L = MEA_old;
  WEA_buf_L = WEA_old;
  CLK_T_A = $realtime;
  if (DFTMASK_buf ===  1'b1 || LS_buf ===  1'b1 || SE_INA_buf ===  1'b1 || SE_INB_buf ===  1'b1)
  begin
   MEA_buf_L = 1'b0;
  end
`ifdef VIRAGE_FAST_VERILOG
`else
  EVENT_TCQ_A = 1'b1;
`endif
  ADRA_buf_L = ADRA_old;
  #0;
  if (CLK_T_A == CLK_T_B)
  begin
     if (DFTMASK_buf ===  1'b0 && (SE_INA_buf ===  1'b1 || SE_INB_buf))
     begin
      uut.QA_local_tmp <= 32'bx;
      uut.flaga_read_ok = `False;
      ->uut.ev_read_out_a_port;
      uut.QB_local_tmp <= 32'bx;
      uut.flagb_read_ok = `False;
      ->uut.ev_read_out_b_port;
     end
    if ( ((ADRA_buf_L === ADRB_buf_L) && adr_valid_a) || (CLKA_tmp === 1'bx || CLKB_tmp === 1'bx) || (( ADRA_buf_L^ADRA_buf_L) !== 0) || (( ADRB_buf_L^ADRB_buf_L) !== 0))
    begin
      if ( (MEA_buf_L !== 1'b0 && MEB_buf_L !== 1'b0 ) && ((WEA_buf_L !== 1'b0) || (WEB_buf_L !== 1'b0) || ((WEA_buf_L !== 1'b0) && ( WEB_buf_L !== 1'b0 ))))
      begin
        `ifdef VIRAGE_FAST_VERILOG
        `else
        if( (MES_CNTRL=="ON" || MES_CNTRL=="ERR")&& $realtime != 0 && uut.mes_all_valid)
        begin
          $display("\n<<VIRL_MEM_ERR: Recovery Timing Violation on posedge CLKA wrt posedge CLKB>> at time=%t; instance=%m (RAMS1H)",$realtime);
        end // if of message display is enabled
        `endif // endif of VIRAGE_FAST_VERILOG
        `ifdef VIRAGE_FAST_VERILOG
        if( sim_check_A === 1'bx)
          #0 sim_check_A = 1'b0;
        else
          #0 sim_check_A = !sim_check_A;
        `else
        if(notif_clka_CLKB_rise_rise_rec === 1'bx)
          #0 notif_clka_CLKB_rise_rise_rec = 1'b0;
        else
         #0 notif_clka_CLKB_rise_rise_rec = !notif_clka_CLKB_rise_rise_rec;
        `endif // endif of VIRAGE_FAST_VERILOG
      end
    end
  end
end
wire ls_mclkB;
always @( negedge ls_mclkB or ADRB_mout )
begin : blk_addrhold_1
  if ( ls_mclkB === 1'b0 )
  begin
    ADRB_old <= ADRB_mout;
  end // if of ls_mclkB = 0
end // if of always block blk_addrhold_1

always @( negedge ls_mclkB or MEB_mout )
begin : blk_mehold_1
  if ( ls_mclkB === 1'b0 )
  begin
    MEB_old <= MEB_mout;
  end // if of ls_mclkB = 0
end // if of always block blk_mehold_1

always @( negedge ls_mclkB or WEB_mout )
begin : blk_wehold_1
  if ( ls_mclkB === 1'b0 )
  begin
    WEB_old <= WEB_mout;
  end // if of ls_mclkB = 0
end // if of always block blk_wehold_1


always @( posedge mclkB)
begin : blk_posclock_1
  MEB_buf_L = MEB_old;
  WEB_buf_L = WEB_old;
  CLK_T_B = $realtime;
  if (DFTMASK_buf ===  1'b1 || LS_buf ===  1'b1 || SE_INB_buf ===  1'b1 || SE_INA_buf ===  1'b1)
  begin
   MEB_buf_L = 1'b0;
  end
`ifdef VIRAGE_FAST_VERILOG
`else
  EVENT_TCQ_B = 1'b1;
`endif
  ADRB_buf_L = ADRB_old;
  #0;
  if (CLK_T_B == CLK_T_A)
  begin
     if (DFTMASK_buf ===  1'b0 && (SE_INB_buf ===  1'b1 || SE_INA_buf))
     begin
      uut.QB_local_tmp <= 32'bx;
      uut.flagb_read_ok = `False;
      ->uut.ev_read_out_b_port;
      uut.QA_local_tmp <= 32'bx;
      uut.flaga_read_ok = `False;
      ->uut.ev_read_out_a_port;
     end
    if ( ((ADRB_buf_L === ADRA_buf_L) && adr_valid_b) || (CLKB_tmp === 1'bx || CLKA_tmp === 1'bx) || (( ADRB_buf_L^ADRB_buf_L) !== 0) || (( ADRA_buf_L^ADRA_buf_L) !== 0))
    begin
      if ( (MEB_buf_L !== 1'b0 && MEA_buf_L !== 1'b0 ) && ((WEA_buf_L !== 1'b0) || (WEB_buf_L !== 1'b0) || ((WEA_buf_L !== 1'b0) && ( WEB_buf_L !== 1'b0 ))))
      begin
        `ifdef VIRAGE_FAST_VERILOG
        `else
        if( (MES_CNTRL=="ON" || MES_CNTRL=="ERR")&& $realtime != 0 && uut.mes_all_valid)
        begin
          $display("\n<<VIRL_MEM_ERR: Recovery Timing Violation on posedge CLKB wrt posedge CLKA>> at time=%t; instance=%m (RAMS1H)",$realtime);
        end // if of message display is enabled
        `endif // endif of VIRAGE_FAST_VERILOG
        `ifdef VIRAGE_FAST_VERILOG
        if( sim_check_B === 1'bx)
          #0 sim_check_B = 1'b0;
        else
          #0 sim_check_B = !sim_check_B;
        `else
        if(notif_clkb_CLKA_rise_rise_rec === 1'bx)
          #0 notif_clkb_CLKA_rise_rise_rec = 1'b0;
        else
         #0 notif_clkb_CLKA_rise_rise_rec = !notif_clkb_CLKA_rise_rise_rec;
        `endif // endif of VIRAGE_FAST_VERILOG
      end
    end
  end
end
`ifdef VIRAGE_FAST_VERILOG
`else
assign rise_time_same = ( CLK_T_A == CLK_T_B )? 1'b0:1'b1;
`endif

always @( BISTEA_buf )
begin:latch_bisteA
  if ( BISTEA_buf === 1'bX )
  begin 
    uut.report_unknown("BISTEA","","");
  end // if of  BISTEA_buf = X
end


always @(TCLKEA_buf)
begin : blk_tclkebuf_0
  if ( ((ENTCLKEA && CLKA_buf) || (ENTTCLKEA && TCLKA_buf)) === 1'b1 )
  begin
    if( (MES_CNTRL =="ON" || MES_CNTRL =="ERR") && $realtime != 0 && uut.mes_all_valid)
    begin
      $display("<<VIRL_MEM_ERR:TCLKEA Transition during active Clock>> at time=%t; instance=%m (SRAMDP_1920x32_core)",$realtime);
    end // if of message display is enabled
    uut.corrupt_all_loc(`True);
    uut.QA = 32'bx;
    uut.QA_local_tmp <= 32'bx;
    uut.flaga_read_ok = `False;
    uut.flaga_we_ok = `False;
    ->uut.ev_read_out_a_port;
    #0.001;
    uut.flaga_we_ok  = `True;
  end // if of Tclke transition during active clock
end // end of always block blk_tclkebuf_0


always @( BISTEB_buf )
begin:latch_bisteB
  if ( BISTEB_buf === 1'bX )
  begin 
    uut.report_unknown("BISTEB","","");
  end // if of  BISTEB_buf = X
end


always @(TCLKEB_buf)
begin : blk_tclkebuf_1
  if ( ((ENTCLKEB && CLKB_buf) || (ENTTCLKEB && TCLKB_buf)) === 1'b1 )
  begin
    if( (MES_CNTRL =="ON" || MES_CNTRL =="ERR") && $realtime != 0 && uut.mes_all_valid)
    begin
      $display("<<VIRL_MEM_ERR:TCLKEB Transition during active Clock>> at time=%t; instance=%m (SRAMDP_1920x32_core)",$realtime);
    end // if of message display is enabled
    uut.corrupt_all_loc(`True);
    uut.QB = 32'bx;
    uut.QB_local_tmp <= 32'bx;
    uut.flagb_read_ok = `False;
    uut.flagb_we_ok = `False;
    ->uut.ev_read_out_b_port;
    #0.001;
    uut.flagb_we_ok  = `True;
  end // if of Tclke transition during active clock
end // end of always block blk_tclkebuf_1

always @ ( ADRA_buf )
begin : blk_address_0
  if ( $realtime != 0)
  begin
    if ( ADRA_buf > 11'b11101111111) 
    begin
      ADRFLAGA = 0;
    end // if of address is out of range
    else
    begin
      ADRFLAGA = 1;
    end // else of if address is out of range
  end // if of $realtime != 0
end // end of blk_address_0

always @ ( ADRB_buf )
begin : blk_address_1
  if ( $realtime != 0)
  begin
    if ( ADRB_buf > 11'b11101111111) 
    begin
      ADRFLAGB = 0;
    end // if of address is out of range
    else
    begin
      ADRFLAGB = 1;
    end // else of if address is out of range
  end // if of $realtime != 0
end // end of blk_address_1

always @ ( TADRA_buf )
begin : blk_testaddress_0
  if ( $realtime != 0)
  begin
    if ( TADRA_buf > 11'b11101111111) 
    begin
      TADRFLAGA = 0;
    end // if of address is out of range
    else
    begin
      TADRFLAGA = 1;
    end // else of if address is out of range
  end // if of $realtime != 0
end // end of always block blk_testaddress_0
always @ ( TADRB_buf )
begin : blk_testaddress_1
  if ( $realtime != 0)
  begin
    if ( TADRB_buf > 11'b11101111111) 
    begin
      TADRFLAGB = 0;
    end // if of address is out of range
    else
    begin
      TADRFLAGB = 1;
    end // else of if address is out of range
  end // if of $realtime != 0
end // end of always block blk_testaddress_1
reg [31:0] QA_dftclken;
reg [31:0] QPA_dftclken;
wire [31:0] dt_intA, XorA, sticky_outA;
wire [31:0] tmp_QPA_int, QPA_int, er_styA;
reg [31:0] QB_dftclken;
reg [31:0] QPB_dftclken;
wire [31:0] dt_intB, XorB, sticky_outB;
wire [31:0] tmp_QPB_int, QPB_int, er_styB;
wire [14:0] ADRA_int;
wire [31:0] dtA, DA_int;
wire [14:0] ADRB_int;
wire [31:0] dtB, DB_int;
reg [31:0] flag_dA_viol;
reg [3:0] flag_cdA_viol;
reg [10:0] flag_addrA_viol;
reg [31:0] flag_dB_viol;
reg [3:0] flag_cdB_viol;
reg [10:0] flag_addrB_viol;

reg flag_qA, flag_si_qA, flag_dA, flag_si_dA, flag_stickyA, flag_si_cntrA, flag_captA, flag_cdA, flag_pipemeA, flag_meA, flag_weA, flag_addrA, flag_qB, flag_si_qB, flag_dB, flag_si_dB, flag_stickyB, flag_si_cntrB, flag_captB, flag_cdB, flag_pipemeB, flag_meB, flag_weB, flag_addrB;

reg flag_cntrAadr;

reg flag_cntrBadr;


initial
begin
  #0.0;
  if(DFTCLKEN_buf !== 1'b1)
  begin
    flag_dA = 1'bX;
    flag_si_dA = 1'bX;
    flag_si_cntrA = 1'bX;
    flag_weA = 1'bX;
    flag_addrA = 1'bX;
    flag_dB = 1'bX;
    flag_si_dB = 1'bX;
    flag_si_cntrB = 1'bX;
    flag_weB = 1'bX;
    flag_addrB = 1'bX;
  end
    flag_qA <= 1'b1;
    flag_si_qA <= 1'b1;
    flag_stickyA <= 1'b1;
    flag_captA <= 1'b1;
    flag_cdA <= 1'b1;
    flag_pipemeA <= 1'b1;
    flag_meA <= 1'b1;
    flag_qB <= 1'b1;
    flag_si_qB <= 1'b1;
    flag_stickyB <= 1'b1;
    flag_captB <= 1'b1;
    flag_cdB <= 1'b1;
    flag_pipemeB <= 1'b1;
    flag_meB <= 1'b1;
    flag_dA_viol = {32{1'b1}};
    flag_cdA_viol = {4{1'b1}};
    flag_addrA_viol = {11{1'b1}};
    flag_dB_viol = {32{1'b1}};
    flag_cdB_viol = {4{1'b1}};
    flag_addrB_viol = {11{1'b1}};
end




always @( TCLKEA_buf )
begin:latch_tclkeA
  if ( CLKA_buf === 1'b1 || TCLKA_buf === 1'b1 )
  begin
    flag_tclke_clkA = 1'b1;
    if (LS_buf !== 1'b1)
    begin
      flag_dA = 1'bX;
      flag_si_dA = 1'bX;
      flag_si_cntrA = 1'bX;
      flag_weA = 1'bX;
      flag_addrA = 1'bX;
    end
      flag_qA = 1'bX;
      flag_si_qA = 1'bX;
      flag_stickyA = 1'bX;
      flag_captA = 1'bX;
      flag_cdA = 1'bX;
      flag_pipemeA = 1'bX;
      flag_meA = 1'bX;
    #0.001;
    flag_tclke_clkA = 1'b0;
  end
  if ( TCLKEA_buf === 1'bX )
  begin 
    uut.report_unknown("TCLKEA","","");
  end // if of  TCLKEA_buf = X
end
always @( TCLKEB_buf )
begin:latch_tclkeB
  if ( CLKB_buf === 1'b1 || TCLKB_buf === 1'b1 )
  begin
    flag_tclke_clkB = 1'b1;
    if (LS_buf !== 1'b1)
    begin
      flag_dB = 1'bX;
      flag_si_dB = 1'bX;
      flag_si_cntrB = 1'bX;
      flag_weB = 1'bX;
      flag_addrB = 1'bX;
    end
      flag_qB = 1'bX;
      flag_si_qB = 1'bX;
      flag_stickyB = 1'bX;
      flag_captB = 1'bX;
      flag_cdB = 1'bX;
      flag_pipemeB = 1'bX;
      flag_meB = 1'bX;
    #0.001;
    flag_tclke_clkB = 1'b0;
  end
  if ( TCLKEB_buf === 1'bX )
  begin 
    uut.report_unknown("TCLKEB","","");
  end // if of  TCLKEB_buf = X
end

VIRL_SDN_MUX2_1 mux_adA_0 (.X(ADRA_mout[0]), .D0(ADRA_buf[0]), .D1(TADRA_buf[0]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_adA_1 (.X(ADRA_mout[1]), .D0(ADRA_buf[1]), .D1(TADRA_buf[1]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_adA_2 (.X(ADRA_mout[2]), .D0(ADRA_buf[2]), .D1(TADRA_buf[2]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_adA_3 (.X(ADRA_mout[3]), .D0(ADRA_buf[3]), .D1(TADRA_buf[3]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_adA_4 (.X(ADRA_mout[4]), .D0(ADRA_buf[4]), .D1(TADRA_buf[4]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_adA_5 (.X(ADRA_mout[5]), .D0(ADRA_buf[5]), .D1(TADRA_buf[5]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_adA_6 (.X(ADRA_mout[6]), .D0(ADRA_buf[6]), .D1(TADRA_buf[6]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_adA_7 (.X(ADRA_mout[7]), .D0(ADRA_buf[7]), .D1(TADRA_buf[7]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_adA_8 (.X(ADRA_mout[8]), .D0(ADRA_buf[8]), .D1(TADRA_buf[8]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_adA_9 (.X(ADRA_mout[9]), .D0(ADRA_buf[9]), .D1(TADRA_buf[9]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_adA_10 (.X(ADRA_mout[10]), .D0(ADRA_buf[10]), .D1(TADRA_buf[10]), .S(BISTEA_buf));

VIRL_SDN_MUX2_1 mux_diA_0 (.X(DA_mout[0]), .D0(DA_buf[0]), .D1(TDA_buf[0]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_1 (.X(DA_mout[1]), .D0(DA_buf[1]), .D1(TDA_buf[1]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_2 (.X(DA_mout[2]), .D0(DA_buf[2]), .D1(TDA_buf[2]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_3 (.X(DA_mout[3]), .D0(DA_buf[3]), .D1(TDA_buf[3]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_4 (.X(DA_mout[4]), .D0(DA_buf[4]), .D1(TDA_buf[4]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_5 (.X(DA_mout[5]), .D0(DA_buf[5]), .D1(TDA_buf[5]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_6 (.X(DA_mout[6]), .D0(DA_buf[6]), .D1(TDA_buf[6]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_7 (.X(DA_mout[7]), .D0(DA_buf[7]), .D1(TDA_buf[7]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_8 (.X(DA_mout[8]), .D0(DA_buf[8]), .D1(TDA_buf[8]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_9 (.X(DA_mout[9]), .D0(DA_buf[9]), .D1(TDA_buf[9]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_10 (.X(DA_mout[10]), .D0(DA_buf[10]), .D1(TDA_buf[10]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_11 (.X(DA_mout[11]), .D0(DA_buf[11]), .D1(TDA_buf[11]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_12 (.X(DA_mout[12]), .D0(DA_buf[12]), .D1(TDA_buf[12]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_13 (.X(DA_mout[13]), .D0(DA_buf[13]), .D1(TDA_buf[13]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_14 (.X(DA_mout[14]), .D0(DA_buf[14]), .D1(TDA_buf[14]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_15 (.X(DA_mout[15]), .D0(DA_buf[15]), .D1(TDA_buf[15]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_16 (.X(DA_mout[16]), .D0(DA_buf[16]), .D1(TDA_buf[16]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_17 (.X(DA_mout[17]), .D0(DA_buf[17]), .D1(TDA_buf[17]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_18 (.X(DA_mout[18]), .D0(DA_buf[18]), .D1(TDA_buf[18]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_19 (.X(DA_mout[19]), .D0(DA_buf[19]), .D1(TDA_buf[19]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_20 (.X(DA_mout[20]), .D0(DA_buf[20]), .D1(TDA_buf[20]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_21 (.X(DA_mout[21]), .D0(DA_buf[21]), .D1(TDA_buf[21]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_22 (.X(DA_mout[22]), .D0(DA_buf[22]), .D1(TDA_buf[22]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_23 (.X(DA_mout[23]), .D0(DA_buf[23]), .D1(TDA_buf[23]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_24 (.X(DA_mout[24]), .D0(DA_buf[24]), .D1(TDA_buf[24]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_25 (.X(DA_mout[25]), .D0(DA_buf[25]), .D1(TDA_buf[25]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_26 (.X(DA_mout[26]), .D0(DA_buf[26]), .D1(TDA_buf[26]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_27 (.X(DA_mout[27]), .D0(DA_buf[27]), .D1(TDA_buf[27]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_28 (.X(DA_mout[28]), .D0(DA_buf[28]), .D1(TDA_buf[28]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_29 (.X(DA_mout[29]), .D0(DA_buf[29]), .D1(TDA_buf[29]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_30 (.X(DA_mout[30]), .D0(DA_buf[30]), .D1(TDA_buf[30]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_31 (.X(DA_mout[31]), .D0(DA_buf[31]), .D1(TDA_buf[31]), .S(BISTEA_buf));

VIRL_SDN_MUX2_1 mux_weA ( .X(WEA_mout), .D0(WEA_buf), .D1(TWEA_buf), .S(BISTEA_buf));

VIRL_SDN_MUX2_1 mux_meA ( .X(MEA_mout), .D0(MEA_buf), .D1(TMEA_buf), .S(BISTEA_buf));

VIRL_SDN_LDNRB_1 lat_MEA (.Q(MEAlatch), .CK(mclkA), .D(MEA_mout));

VIRL_SDN_OR2_1 or_sel1A ( .X(sel1A), .A1(MEAlatch), .A2(DFTCLKEN_old) );
reg clk_memA_int;
always @(mclkA)
begin
  clk_memA_int = sel1A && mclkA;
end
VIRL_SDN_BUF_1 buf_clk_memA_int ( .X(clk_memA), .A(clk_memA_int) );

reg ls_clk_memA_int;
always@(clk_memA)
begin
  ls_clk_memA_int = clk_memA && !LS_old;
end
VIRL_SDN_BUF_1 buf_ls_clk_memA ( .X(ls_clk_memA), .A(ls_clk_memA_int) );

VIRL_SDN_BUF_1 buf_ls_mclkA ( .X(ls_mclkA), .A(mclkA) );

VIRL_SDN_MUX2_1 mux_clk_A ( .X(mclkA), .D0(CLKA_buf), .D1(TCLKA_buf), .S(TCLKEA_buf) );


VIRL_SDN_MUX2_1 mux_rmA_0 ( .X(RMA_int[0]), .D0(1'b0), .D1(RMA_buf[0]), .S(RMEA_buf) );
VIRL_SDN_MUX2_1 mux_rmA_1 ( .X(RMA_int[1]), .D0(1'b1), .D1(RMA_buf[1]), .S(RMEA_buf) );
VIRL_SDN_MUX2_1 mux_rmA_2 ( .X(RMA_int[2]), .D0(1'b0), .D1(RMA_buf[2]), .S(RMEA_buf) );

VIRL_SDN_MUX2_1 mux_pipemeA ( .X(PIPEMEA_mout), .D0(PIPEMEA_buf), .D1(TPIPEMEA_buf), .S(BISTEA_buf));

VIRL_SDN_MUX2_1 mux_pipemeA_me_intA ( .X(in_PIPEMEAlatch), .D0(PIPEMEA_mout), .D1(MEA_int), .S(SE_INA_buf));

VIRL_SDN_LDNRB_1 lat_PIPEMEA (.Q(PIPEMEAlatch), .CK(mclkA), .D(in_PIPEMEAlatch));

VIRL_SDN_OR2_1 or_sel3A ( .X(sel3A), .A1(PIPEMEAlatch), .A2(DFTCLKEN_old) );

VIRL_SDN_AN2_1 and_clk_pipA ( .X(ls_clk_pipA), .A1(sel3A), .A2(mclkA) );

VIRL_SDN_MUX2_1 mux_adB_0 (.X(ADRB_mout[0]), .D0(ADRB_buf[0]), .D1(TADRB_buf[0]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_adB_1 (.X(ADRB_mout[1]), .D0(ADRB_buf[1]), .D1(TADRB_buf[1]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_adB_2 (.X(ADRB_mout[2]), .D0(ADRB_buf[2]), .D1(TADRB_buf[2]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_adB_3 (.X(ADRB_mout[3]), .D0(ADRB_buf[3]), .D1(TADRB_buf[3]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_adB_4 (.X(ADRB_mout[4]), .D0(ADRB_buf[4]), .D1(TADRB_buf[4]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_adB_5 (.X(ADRB_mout[5]), .D0(ADRB_buf[5]), .D1(TADRB_buf[5]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_adB_6 (.X(ADRB_mout[6]), .D0(ADRB_buf[6]), .D1(TADRB_buf[6]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_adB_7 (.X(ADRB_mout[7]), .D0(ADRB_buf[7]), .D1(TADRB_buf[7]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_adB_8 (.X(ADRB_mout[8]), .D0(ADRB_buf[8]), .D1(TADRB_buf[8]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_adB_9 (.X(ADRB_mout[9]), .D0(ADRB_buf[9]), .D1(TADRB_buf[9]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_adB_10 (.X(ADRB_mout[10]), .D0(ADRB_buf[10]), .D1(TADRB_buf[10]), .S(BISTEB_buf));

VIRL_SDN_MUX2_1 mux_diB_0 (.X(DB_mout[0]), .D0(DB_buf[0]), .D1(TDB_buf[0]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_1 (.X(DB_mout[1]), .D0(DB_buf[1]), .D1(TDB_buf[1]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_2 (.X(DB_mout[2]), .D0(DB_buf[2]), .D1(TDB_buf[2]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_3 (.X(DB_mout[3]), .D0(DB_buf[3]), .D1(TDB_buf[3]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_4 (.X(DB_mout[4]), .D0(DB_buf[4]), .D1(TDB_buf[4]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_5 (.X(DB_mout[5]), .D0(DB_buf[5]), .D1(TDB_buf[5]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_6 (.X(DB_mout[6]), .D0(DB_buf[6]), .D1(TDB_buf[6]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_7 (.X(DB_mout[7]), .D0(DB_buf[7]), .D1(TDB_buf[7]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_8 (.X(DB_mout[8]), .D0(DB_buf[8]), .D1(TDB_buf[8]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_9 (.X(DB_mout[9]), .D0(DB_buf[9]), .D1(TDB_buf[9]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_10 (.X(DB_mout[10]), .D0(DB_buf[10]), .D1(TDB_buf[10]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_11 (.X(DB_mout[11]), .D0(DB_buf[11]), .D1(TDB_buf[11]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_12 (.X(DB_mout[12]), .D0(DB_buf[12]), .D1(TDB_buf[12]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_13 (.X(DB_mout[13]), .D0(DB_buf[13]), .D1(TDB_buf[13]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_14 (.X(DB_mout[14]), .D0(DB_buf[14]), .D1(TDB_buf[14]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_15 (.X(DB_mout[15]), .D0(DB_buf[15]), .D1(TDB_buf[15]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_16 (.X(DB_mout[16]), .D0(DB_buf[16]), .D1(TDB_buf[16]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_17 (.X(DB_mout[17]), .D0(DB_buf[17]), .D1(TDB_buf[17]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_18 (.X(DB_mout[18]), .D0(DB_buf[18]), .D1(TDB_buf[18]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_19 (.X(DB_mout[19]), .D0(DB_buf[19]), .D1(TDB_buf[19]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_20 (.X(DB_mout[20]), .D0(DB_buf[20]), .D1(TDB_buf[20]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_21 (.X(DB_mout[21]), .D0(DB_buf[21]), .D1(TDB_buf[21]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_22 (.X(DB_mout[22]), .D0(DB_buf[22]), .D1(TDB_buf[22]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_23 (.X(DB_mout[23]), .D0(DB_buf[23]), .D1(TDB_buf[23]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_24 (.X(DB_mout[24]), .D0(DB_buf[24]), .D1(TDB_buf[24]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_25 (.X(DB_mout[25]), .D0(DB_buf[25]), .D1(TDB_buf[25]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_26 (.X(DB_mout[26]), .D0(DB_buf[26]), .D1(TDB_buf[26]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_27 (.X(DB_mout[27]), .D0(DB_buf[27]), .D1(TDB_buf[27]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_28 (.X(DB_mout[28]), .D0(DB_buf[28]), .D1(TDB_buf[28]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_29 (.X(DB_mout[29]), .D0(DB_buf[29]), .D1(TDB_buf[29]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_30 (.X(DB_mout[30]), .D0(DB_buf[30]), .D1(TDB_buf[30]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_31 (.X(DB_mout[31]), .D0(DB_buf[31]), .D1(TDB_buf[31]), .S(BISTEB_buf));

VIRL_SDN_MUX2_1 mux_weB ( .X(WEB_mout), .D0(WEB_buf), .D1(TWEB_buf), .S(BISTEB_buf));

VIRL_SDN_MUX2_1 mux_meB ( .X(MEB_mout), .D0(MEB_buf), .D1(TMEB_buf), .S(BISTEB_buf));

VIRL_SDN_LDNRB_1 lat_MEB (.Q(MEBlatch), .CK(mclkB), .D(MEB_mout));

VIRL_SDN_OR2_1 or_sel1B ( .X(sel1B), .A1(MEBlatch), .A2(DFTCLKEN_old) );
reg clk_memB_int;
always @(mclkB)
begin
  clk_memB_int = sel1B && mclkB;
end
VIRL_SDN_BUF_1 buf_clk_memB_int ( .X(clk_memB), .A(clk_memB_int) );

reg ls_clk_memB_int;
always@(clk_memB)
begin
  ls_clk_memB_int = clk_memB && !LS_old;
end
VIRL_SDN_BUF_1 buf_ls_clk_memB ( .X(ls_clk_memB), .A(ls_clk_memB_int) );

VIRL_SDN_BUF_1 buf_ls_mclkB ( .X(ls_mclkB), .A(mclkB) );

VIRL_SDN_MUX2_1 mux_clk_B ( .X(mclkB), .D0(CLKB_buf), .D1(TCLKB_buf), .S(TCLKEB_buf) );


VIRL_SDN_MUX2_1 mux_rmB_0 ( .X(RMB_int[0]), .D0(1'b0), .D1(RMB_buf[0]), .S(RMEB_buf) );
VIRL_SDN_MUX2_1 mux_rmB_1 ( .X(RMB_int[1]), .D0(1'b1), .D1(RMB_buf[1]), .S(RMEB_buf) );
VIRL_SDN_MUX2_1 mux_rmB_2 ( .X(RMB_int[2]), .D0(1'b0), .D1(RMB_buf[2]), .S(RMEB_buf) );

VIRL_SDN_MUX2_1 mux_pipemeB ( .X(PIPEMEB_mout), .D0(PIPEMEB_buf), .D1(TPIPEMEB_buf), .S(BISTEB_buf));

VIRL_SDN_MUX2_1 mux_pipemeB_me_intB ( .X(in_PIPEMEBlatch), .D0(PIPEMEB_mout), .D1(MEB_int), .S(SE_INB_buf));

VIRL_SDN_LDNRB_1 lat_PIPEMEB (.Q(PIPEMEBlatch), .CK(mclkB), .D(in_PIPEMEBlatch));

VIRL_SDN_OR2_1 or_sel3B ( .X(sel3B), .A1(PIPEMEBlatch), .A2(DFTCLKEN_old) );

VIRL_SDN_AN2_1 and_clk_pipB ( .X(ls_clk_pipB), .A1(sel3B), .A2(mclkB) );

VIRL_SDN_BUF_1 buf_dtA_0 ( .X(dtA[0]), .A(DA_mout[0]) );
VIRL_SDN_BUF_1 buf_dtA_1 ( .X(dtA[1]), .A(DA_mout[1]) );
VIRL_SDN_BUF_1 buf_dtA_2 ( .X(dtA[2]), .A(DA_mout[2]) );
VIRL_SDN_BUF_1 buf_dtA_3 ( .X(dtA[3]), .A(DA_mout[3]) );
VIRL_SDN_BUF_1 buf_dtA_4 ( .X(dtA[4]), .A(DA_mout[4]) );
VIRL_SDN_BUF_1 buf_dtA_5 ( .X(dtA[5]), .A(DA_mout[5]) );
VIRL_SDN_BUF_1 buf_dtA_6 ( .X(dtA[6]), .A(DA_mout[6]) );
VIRL_SDN_BUF_1 buf_dtA_7 ( .X(dtA[7]), .A(DA_mout[7]) );
VIRL_SDN_BUF_1 buf_dtA_8 ( .X(dtA[8]), .A(DA_mout[8]) );
VIRL_SDN_BUF_1 buf_dtA_9 ( .X(dtA[9]), .A(DA_mout[9]) );
VIRL_SDN_BUF_1 buf_dtA_10 ( .X(dtA[10]), .A(DA_mout[10]) );
VIRL_SDN_BUF_1 buf_dtA_11 ( .X(dtA[11]), .A(DA_mout[11]) );
VIRL_SDN_BUF_1 buf_dtA_12 ( .X(dtA[12]), .A(DA_mout[12]) );
VIRL_SDN_BUF_1 buf_dtA_13 ( .X(dtA[13]), .A(DA_mout[13]) );
VIRL_SDN_BUF_1 buf_dtA_14 ( .X(dtA[14]), .A(DA_mout[14]) );
VIRL_SDN_BUF_1 buf_dtA_15 ( .X(dtA[15]), .A(DA_mout[15]) );
VIRL_SDN_BUF_1 buf_dtA_16 ( .X(dtA[16]), .A(DA_mout[16]) );
VIRL_SDN_BUF_1 buf_dtA_17 ( .X(dtA[17]), .A(DA_mout[17]) );
VIRL_SDN_BUF_1 buf_dtA_18 ( .X(dtA[18]), .A(DA_mout[18]) );
VIRL_SDN_BUF_1 buf_dtA_19 ( .X(dtA[19]), .A(DA_mout[19]) );
VIRL_SDN_BUF_1 buf_dtA_20 ( .X(dtA[20]), .A(DA_mout[20]) );
VIRL_SDN_BUF_1 buf_dtA_21 ( .X(dtA[21]), .A(DA_mout[21]) );
VIRL_SDN_BUF_1 buf_dtA_22 ( .X(dtA[22]), .A(DA_mout[22]) );
VIRL_SDN_BUF_1 buf_dtA_23 ( .X(dtA[23]), .A(DA_mout[23]) );
VIRL_SDN_BUF_1 buf_dtA_24 ( .X(dtA[24]), .A(DA_mout[24]) );
VIRL_SDN_BUF_1 buf_dtA_25 ( .X(dtA[25]), .A(DA_mout[25]) );
VIRL_SDN_BUF_1 buf_dtA_26 ( .X(dtA[26]), .A(DA_mout[26]) );
VIRL_SDN_BUF_1 buf_dtA_27 ( .X(dtA[27]), .A(DA_mout[27]) );
VIRL_SDN_BUF_1 buf_dtA_28 ( .X(dtA[28]), .A(DA_mout[28]) );
VIRL_SDN_BUF_1 buf_dtA_29 ( .X(dtA[29]), .A(DA_mout[29]) );
VIRL_SDN_BUF_1 buf_dtA_30 ( .X(dtA[30]), .A(DA_mout[30]) );
VIRL_SDN_BUF_1 buf_dtA_31 ( .X(dtA[31]), .A(DA_mout[31]) );

always @ ( negedge mclkA or DFTMASK_buf )
begin: blk_dftmaskAlatched
  if ( mclkA === 1'b0 )
  begin
    DFTMASK_latchedA = DFTMASK_buf;
  end
end


VIRL_SDN_MUX2_1 mux_dt_qA_0 ( .X(dt_intA[0]), .D0(QA_mem[0]), .D1(DA_int[0]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_1 ( .X(dt_intA[1]), .D0(QA_mem[1]), .D1(DA_int[1]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_2 ( .X(dt_intA[2]), .D0(QA_mem[2]), .D1(DA_int[2]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_3 ( .X(dt_intA[3]), .D0(QA_mem[3]), .D1(DA_int[3]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_4 ( .X(dt_intA[4]), .D0(QA_mem[4]), .D1(DA_int[4]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_5 ( .X(dt_intA[5]), .D0(QA_mem[5]), .D1(DA_int[5]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_6 ( .X(dt_intA[6]), .D0(QA_mem[6]), .D1(DA_int[6]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_7 ( .X(dt_intA[7]), .D0(QA_mem[7]), .D1(DA_int[7]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_8 ( .X(dt_intA[8]), .D0(QA_mem[8]), .D1(DA_int[8]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_9 ( .X(dt_intA[9]), .D0(QA_mem[9]), .D1(DA_int[9]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_10 ( .X(dt_intA[10]), .D0(QA_mem[10]), .D1(DA_int[10]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_11 ( .X(dt_intA[11]), .D0(QA_mem[11]), .D1(DA_int[11]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_12 ( .X(dt_intA[12]), .D0(QA_mem[12]), .D1(DA_int[12]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_13 ( .X(dt_intA[13]), .D0(QA_mem[13]), .D1(DA_int[13]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_14 ( .X(dt_intA[14]), .D0(QA_mem[14]), .D1(DA_int[14]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_15 ( .X(dt_intA[15]), .D0(QA_mem[15]), .D1(DA_int[15]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_16 ( .X(dt_intA[16]), .D0(QA_mem[16]), .D1(DA_int[16]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_17 ( .X(dt_intA[17]), .D0(QA_mem[17]), .D1(DA_int[17]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_18 ( .X(dt_intA[18]), .D0(QA_mem[18]), .D1(DA_int[18]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_19 ( .X(dt_intA[19]), .D0(QA_mem[19]), .D1(DA_int[19]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_20 ( .X(dt_intA[20]), .D0(QA_mem[20]), .D1(DA_int[20]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_21 ( .X(dt_intA[21]), .D0(QA_mem[21]), .D1(DA_int[21]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_22 ( .X(dt_intA[22]), .D0(QA_mem[22]), .D1(DA_int[22]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_23 ( .X(dt_intA[23]), .D0(QA_mem[23]), .D1(DA_int[23]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_24 ( .X(dt_intA[24]), .D0(QA_mem[24]), .D1(DA_int[24]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_25 ( .X(dt_intA[25]), .D0(QA_mem[25]), .D1(DA_int[25]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_26 ( .X(dt_intA[26]), .D0(QA_mem[26]), .D1(DA_int[26]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_27 ( .X(dt_intA[27]), .D0(QA_mem[27]), .D1(DA_int[27]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_28 ( .X(dt_intA[28]), .D0(QA_mem[28]), .D1(DA_int[28]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_29 ( .X(dt_intA[29]), .D0(QA_mem[29]), .D1(DA_int[29]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_30 ( .X(dt_intA[30]), .D0(QA_mem[30]), .D1(DA_int[30]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_31 ( .X(dt_intA[31]), .D0(QA_mem[31]), .D1(DA_int[31]), .S(DFTMASK_buf) );

always @(dt_intA)
begin
  `ifdef VIRAGE_FAST_VERILOG
  `else
    QA_dftclken = 32'bx;
    #0.001;
  `endif // endif of VIRAGE_FAST_VERILOG
  QA_dftclken = dt_intA;
  if (DFTMASK_buf !== 1'b0)
  begin
    uut.QA_local_tmp = dt_intA;
  end
end


real DFTMASK_time;

always @(DFTMASK_buf)
begin
  if (DFTMASK_buf === 1'b0)
    DFTMASK_time = $realtime;
end

always @(DA_int)
begin
  if ($realtime == DFTMASK_time)
    uut.QA_local_tmp = DA_int;
end

always @(QPA_int)
begin
  `ifdef VIRAGE_FAST_VERILOG
  `else
    QPA_dftclken = 32'bx;
    #0.001;
  `endif // endif of VIRAGE_FAST_VERILOG
  QPA_dftclken = QPA_int;
end

wire mux_ls, test1_ls_pwr;

assign test1_ls_pwr = ((uut.TEST1Alatched === 1'b1 && uut.MEAlatched === 1'b1) || (uut.TEST1Blatched === 1'b1 && uut.MEBlatched === 1'b1 )) && LS_buf;

VIRL_SDN_MUX2_1 mux_ls_buf_old (.X(mux_ls), .D0(LS_buf), .D1(LS_old), .S(test1_ls_pwr));
VIRL_SDN_BUF_1 buf_doA_0 ( .X(QA_buf[0]), .A(QA_dftclken[0]) );
VIRL_SDN_BUF_1 buf_doA_1 ( .X(QA_buf[1]), .A(QA_dftclken[1]) );
VIRL_SDN_BUF_1 buf_doA_2 ( .X(QA_buf[2]), .A(QA_dftclken[2]) );
VIRL_SDN_BUF_1 buf_doA_3 ( .X(QA_buf[3]), .A(QA_dftclken[3]) );
VIRL_SDN_BUF_1 buf_doA_4 ( .X(QA_buf[4]), .A(QA_dftclken[4]) );
VIRL_SDN_BUF_1 buf_doA_5 ( .X(QA_buf[5]), .A(QA_dftclken[5]) );
VIRL_SDN_BUF_1 buf_doA_6 ( .X(QA_buf[6]), .A(QA_dftclken[6]) );
VIRL_SDN_BUF_1 buf_doA_7 ( .X(QA_buf[7]), .A(QA_dftclken[7]) );
VIRL_SDN_BUF_1 buf_doA_8 ( .X(QA_buf[8]), .A(QA_dftclken[8]) );
VIRL_SDN_BUF_1 buf_doA_9 ( .X(QA_buf[9]), .A(QA_dftclken[9]) );
VIRL_SDN_BUF_1 buf_doA_10 ( .X(QA_buf[10]), .A(QA_dftclken[10]) );
VIRL_SDN_BUF_1 buf_doA_11 ( .X(QA_buf[11]), .A(QA_dftclken[11]) );
VIRL_SDN_BUF_1 buf_doA_12 ( .X(QA_buf[12]), .A(QA_dftclken[12]) );
VIRL_SDN_BUF_1 buf_doA_13 ( .X(QA_buf[13]), .A(QA_dftclken[13]) );
VIRL_SDN_BUF_1 buf_doA_14 ( .X(QA_buf[14]), .A(QA_dftclken[14]) );
VIRL_SDN_BUF_1 buf_doA_15 ( .X(QA_buf[15]), .A(QA_dftclken[15]) );
VIRL_SDN_BUF_1 buf_doA_16 ( .X(QA_buf[16]), .A(QA_dftclken[16]) );
VIRL_SDN_BUF_1 buf_doA_17 ( .X(QA_buf[17]), .A(QA_dftclken[17]) );
VIRL_SDN_BUF_1 buf_doA_18 ( .X(QA_buf[18]), .A(QA_dftclken[18]) );
VIRL_SDN_BUF_1 buf_doA_19 ( .X(QA_buf[19]), .A(QA_dftclken[19]) );
VIRL_SDN_BUF_1 buf_doA_20 ( .X(QA_buf[20]), .A(QA_dftclken[20]) );
VIRL_SDN_BUF_1 buf_doA_21 ( .X(QA_buf[21]), .A(QA_dftclken[21]) );
VIRL_SDN_BUF_1 buf_doA_22 ( .X(QA_buf[22]), .A(QA_dftclken[22]) );
VIRL_SDN_BUF_1 buf_doA_23 ( .X(QA_buf[23]), .A(QA_dftclken[23]) );
VIRL_SDN_BUF_1 buf_doA_24 ( .X(QA_buf[24]), .A(QA_dftclken[24]) );
VIRL_SDN_BUF_1 buf_doA_25 ( .X(QA_buf[25]), .A(QA_dftclken[25]) );
VIRL_SDN_BUF_1 buf_doA_26 ( .X(QA_buf[26]), .A(QA_dftclken[26]) );
VIRL_SDN_BUF_1 buf_doA_27 ( .X(QA_buf[27]), .A(QA_dftclken[27]) );
VIRL_SDN_BUF_1 buf_doA_28 ( .X(QA_buf[28]), .A(QA_dftclken[28]) );
VIRL_SDN_BUF_1 buf_doA_29 ( .X(QA_buf[29]), .A(QA_dftclken[29]) );
VIRL_SDN_BUF_1 buf_doA_30 ( .X(QA_buf[30]), .A(QA_dftclken[30]) );
VIRL_SDN_BUF_1 buf_doA_31 ( .X(QA_buf[31]), .A(QA_dftclken[31]) );

VIRL_SDN_BUF_1 buf_qpA_0 ( .X(QPA_buf[0]), .A(QPA_dftclken[0]) );
VIRL_SDN_BUF_1 buf_qpA_1 ( .X(QPA_buf[1]), .A(QPA_dftclken[1]) );
VIRL_SDN_BUF_1 buf_qpA_2 ( .X(QPA_buf[2]), .A(QPA_dftclken[2]) );
VIRL_SDN_BUF_1 buf_qpA_3 ( .X(QPA_buf[3]), .A(QPA_dftclken[3]) );
VIRL_SDN_BUF_1 buf_qpA_4 ( .X(QPA_buf[4]), .A(QPA_dftclken[4]) );
VIRL_SDN_BUF_1 buf_qpA_5 ( .X(QPA_buf[5]), .A(QPA_dftclken[5]) );
VIRL_SDN_BUF_1 buf_qpA_6 ( .X(QPA_buf[6]), .A(QPA_dftclken[6]) );
VIRL_SDN_BUF_1 buf_qpA_7 ( .X(QPA_buf[7]), .A(QPA_dftclken[7]) );
VIRL_SDN_BUF_1 buf_qpA_8 ( .X(QPA_buf[8]), .A(QPA_dftclken[8]) );
VIRL_SDN_BUF_1 buf_qpA_9 ( .X(QPA_buf[9]), .A(QPA_dftclken[9]) );
VIRL_SDN_BUF_1 buf_qpA_10 ( .X(QPA_buf[10]), .A(QPA_dftclken[10]) );
VIRL_SDN_BUF_1 buf_qpA_11 ( .X(QPA_buf[11]), .A(QPA_dftclken[11]) );
VIRL_SDN_BUF_1 buf_qpA_12 ( .X(QPA_buf[12]), .A(QPA_dftclken[12]) );
VIRL_SDN_BUF_1 buf_qpA_13 ( .X(QPA_buf[13]), .A(QPA_dftclken[13]) );
VIRL_SDN_BUF_1 buf_qpA_14 ( .X(QPA_buf[14]), .A(QPA_dftclken[14]) );
VIRL_SDN_BUF_1 buf_qpA_15 ( .X(QPA_buf[15]), .A(QPA_dftclken[15]) );
VIRL_SDN_BUF_1 buf_qpA_16 ( .X(QPA_buf[16]), .A(QPA_dftclken[16]) );
VIRL_SDN_BUF_1 buf_qpA_17 ( .X(QPA_buf[17]), .A(QPA_dftclken[17]) );
VIRL_SDN_BUF_1 buf_qpA_18 ( .X(QPA_buf[18]), .A(QPA_dftclken[18]) );
VIRL_SDN_BUF_1 buf_qpA_19 ( .X(QPA_buf[19]), .A(QPA_dftclken[19]) );
VIRL_SDN_BUF_1 buf_qpA_20 ( .X(QPA_buf[20]), .A(QPA_dftclken[20]) );
VIRL_SDN_BUF_1 buf_qpA_21 ( .X(QPA_buf[21]), .A(QPA_dftclken[21]) );
VIRL_SDN_BUF_1 buf_qpA_22 ( .X(QPA_buf[22]), .A(QPA_dftclken[22]) );
VIRL_SDN_BUF_1 buf_qpA_23 ( .X(QPA_buf[23]), .A(QPA_dftclken[23]) );
VIRL_SDN_BUF_1 buf_qpA_24 ( .X(QPA_buf[24]), .A(QPA_dftclken[24]) );
VIRL_SDN_BUF_1 buf_qpA_25 ( .X(QPA_buf[25]), .A(QPA_dftclken[25]) );
VIRL_SDN_BUF_1 buf_qpA_26 ( .X(QPA_buf[26]), .A(QPA_dftclken[26]) );
VIRL_SDN_BUF_1 buf_qpA_27 ( .X(QPA_buf[27]), .A(QPA_dftclken[27]) );
VIRL_SDN_BUF_1 buf_qpA_28 ( .X(QPA_buf[28]), .A(QPA_dftclken[28]) );
VIRL_SDN_BUF_1 buf_qpA_29 ( .X(QPA_buf[29]), .A(QPA_dftclken[29]) );
VIRL_SDN_BUF_1 buf_qpA_30 ( .X(QPA_buf[30]), .A(QPA_dftclken[30]) );
VIRL_SDN_BUF_1 buf_qpA_31 ( .X(QPA_buf[31]), .A(QPA_dftclken[31]) );

VIRL_SDN_BUF_1 buf_cd_expA_0 (.X(CDA_exp[0]), .A(CDA_int[0]));
VIRL_SDN_BUF_1 buf_cd_expA_1 (.X(CDA_exp[1]), .A(CDA_int[1]));
VIRL_SDN_BUF_1 buf_cd_expA_2 (.X(CDA_exp[2]), .A(CDA_int[2]));
VIRL_SDN_BUF_1 buf_cd_expA_3 (.X(CDA_exp[3]), .A(CDA_int[3]));
VIRL_SDN_BUF_1 buf_cd_expA_4 (.X(CDA_exp[4]), .A(CDA_int[0]));
VIRL_SDN_BUF_1 buf_cd_expA_5 (.X(CDA_exp[5]), .A(CDA_int[1]));
VIRL_SDN_BUF_1 buf_cd_expA_6 (.X(CDA_exp[6]), .A(CDA_int[2]));
VIRL_SDN_BUF_1 buf_cd_expA_7 (.X(CDA_exp[7]), .A(CDA_int[3]));
VIRL_SDN_BUF_1 buf_cd_expA_8 (.X(CDA_exp[8]), .A(CDA_int[0]));
VIRL_SDN_BUF_1 buf_cd_expA_9 (.X(CDA_exp[9]), .A(CDA_int[1]));
VIRL_SDN_BUF_1 buf_cd_expA_10 (.X(CDA_exp[10]), .A(CDA_int[2]));
VIRL_SDN_BUF_1 buf_cd_expA_11 (.X(CDA_exp[11]), .A(CDA_int[3]));
VIRL_SDN_BUF_1 buf_cd_expA_12 (.X(CDA_exp[12]), .A(CDA_int[0]));
VIRL_SDN_BUF_1 buf_cd_expA_13 (.X(CDA_exp[13]), .A(CDA_int[1]));
VIRL_SDN_BUF_1 buf_cd_expA_14 (.X(CDA_exp[14]), .A(CDA_int[2]));
VIRL_SDN_BUF_1 buf_cd_expA_15 (.X(CDA_exp[15]), .A(CDA_int[3]));
VIRL_SDN_BUF_1 buf_cd_expA_16 (.X(CDA_exp[16]), .A(CDA_int[0]));
VIRL_SDN_BUF_1 buf_cd_expA_17 (.X(CDA_exp[17]), .A(CDA_int[1]));
VIRL_SDN_BUF_1 buf_cd_expA_18 (.X(CDA_exp[18]), .A(CDA_int[2]));
VIRL_SDN_BUF_1 buf_cd_expA_19 (.X(CDA_exp[19]), .A(CDA_int[3]));
VIRL_SDN_BUF_1 buf_cd_expA_20 (.X(CDA_exp[20]), .A(CDA_int[0]));
VIRL_SDN_BUF_1 buf_cd_expA_21 (.X(CDA_exp[21]), .A(CDA_int[1]));
VIRL_SDN_BUF_1 buf_cd_expA_22 (.X(CDA_exp[22]), .A(CDA_int[2]));
VIRL_SDN_BUF_1 buf_cd_expA_23 (.X(CDA_exp[23]), .A(CDA_int[3]));
VIRL_SDN_BUF_1 buf_cd_expA_24 (.X(CDA_exp[24]), .A(CDA_int[0]));
VIRL_SDN_BUF_1 buf_cd_expA_25 (.X(CDA_exp[25]), .A(CDA_int[1]));
VIRL_SDN_BUF_1 buf_cd_expA_26 (.X(CDA_exp[26]), .A(CDA_int[2]));
VIRL_SDN_BUF_1 buf_cd_expA_27 (.X(CDA_exp[27]), .A(CDA_int[3]));
VIRL_SDN_BUF_1 buf_cd_expA_28 (.X(CDA_exp[28]), .A(CDA_int[0]));
VIRL_SDN_BUF_1 buf_cd_expA_29 (.X(CDA_exp[29]), .A(CDA_int[1]));
VIRL_SDN_BUF_1 buf_cd_expA_30 (.X(CDA_exp[30]), .A(CDA_int[2]));
VIRL_SDN_BUF_1 buf_cd_expA_31 (.X(CDA_exp[31]), .A(CDA_int[3]));

VIRL_SDN_EO2_4 eor_out_cdA_0 ( .X(XorA[0]), .A1(dt_intA[0]), .A2(CDA_exp[0]) );
VIRL_SDN_EO2_4 eor_out_cdA_1 ( .X(XorA[1]), .A1(dt_intA[1]), .A2(CDA_exp[1]) );
VIRL_SDN_EO2_4 eor_out_cdA_2 ( .X(XorA[2]), .A1(dt_intA[2]), .A2(CDA_exp[2]) );
VIRL_SDN_EO2_4 eor_out_cdA_3 ( .X(XorA[3]), .A1(dt_intA[3]), .A2(CDA_exp[3]) );
VIRL_SDN_EO2_4 eor_out_cdA_4 ( .X(XorA[4]), .A1(dt_intA[4]), .A2(CDA_exp[4]) );
VIRL_SDN_EO2_4 eor_out_cdA_5 ( .X(XorA[5]), .A1(dt_intA[5]), .A2(CDA_exp[5]) );
VIRL_SDN_EO2_4 eor_out_cdA_6 ( .X(XorA[6]), .A1(dt_intA[6]), .A2(CDA_exp[6]) );
VIRL_SDN_EO2_4 eor_out_cdA_7 ( .X(XorA[7]), .A1(dt_intA[7]), .A2(CDA_exp[7]) );
VIRL_SDN_EO2_4 eor_out_cdA_8 ( .X(XorA[8]), .A1(dt_intA[8]), .A2(CDA_exp[8]) );
VIRL_SDN_EO2_4 eor_out_cdA_9 ( .X(XorA[9]), .A1(dt_intA[9]), .A2(CDA_exp[9]) );
VIRL_SDN_EO2_4 eor_out_cdA_10 ( .X(XorA[10]), .A1(dt_intA[10]), .A2(CDA_exp[10]) );
VIRL_SDN_EO2_4 eor_out_cdA_11 ( .X(XorA[11]), .A1(dt_intA[11]), .A2(CDA_exp[11]) );
VIRL_SDN_EO2_4 eor_out_cdA_12 ( .X(XorA[12]), .A1(dt_intA[12]), .A2(CDA_exp[12]) );
VIRL_SDN_EO2_4 eor_out_cdA_13 ( .X(XorA[13]), .A1(dt_intA[13]), .A2(CDA_exp[13]) );
VIRL_SDN_EO2_4 eor_out_cdA_14 ( .X(XorA[14]), .A1(dt_intA[14]), .A2(CDA_exp[14]) );
VIRL_SDN_EO2_4 eor_out_cdA_15 ( .X(XorA[15]), .A1(dt_intA[15]), .A2(CDA_exp[15]) );
VIRL_SDN_EO2_4 eor_out_cdA_16 ( .X(XorA[16]), .A1(dt_intA[16]), .A2(CDA_exp[16]) );
VIRL_SDN_EO2_4 eor_out_cdA_17 ( .X(XorA[17]), .A1(dt_intA[17]), .A2(CDA_exp[17]) );
VIRL_SDN_EO2_4 eor_out_cdA_18 ( .X(XorA[18]), .A1(dt_intA[18]), .A2(CDA_exp[18]) );
VIRL_SDN_EO2_4 eor_out_cdA_19 ( .X(XorA[19]), .A1(dt_intA[19]), .A2(CDA_exp[19]) );
VIRL_SDN_EO2_4 eor_out_cdA_20 ( .X(XorA[20]), .A1(dt_intA[20]), .A2(CDA_exp[20]) );
VIRL_SDN_EO2_4 eor_out_cdA_21 ( .X(XorA[21]), .A1(dt_intA[21]), .A2(CDA_exp[21]) );
VIRL_SDN_EO2_4 eor_out_cdA_22 ( .X(XorA[22]), .A1(dt_intA[22]), .A2(CDA_exp[22]) );
VIRL_SDN_EO2_4 eor_out_cdA_23 ( .X(XorA[23]), .A1(dt_intA[23]), .A2(CDA_exp[23]) );
VIRL_SDN_EO2_4 eor_out_cdA_24 ( .X(XorA[24]), .A1(dt_intA[24]), .A2(CDA_exp[24]) );
VIRL_SDN_EO2_4 eor_out_cdA_25 ( .X(XorA[25]), .A1(dt_intA[25]), .A2(CDA_exp[25]) );
VIRL_SDN_EO2_4 eor_out_cdA_26 ( .X(XorA[26]), .A1(dt_intA[26]), .A2(CDA_exp[26]) );
VIRL_SDN_EO2_4 eor_out_cdA_27 ( .X(XorA[27]), .A1(dt_intA[27]), .A2(CDA_exp[27]) );
VIRL_SDN_EO2_4 eor_out_cdA_28 ( .X(XorA[28]), .A1(dt_intA[28]), .A2(CDA_exp[28]) );
VIRL_SDN_EO2_4 eor_out_cdA_29 ( .X(XorA[29]), .A1(dt_intA[29]), .A2(CDA_exp[29]) );
VIRL_SDN_EO2_4 eor_out_cdA_30 ( .X(XorA[30]), .A1(dt_intA[30]), .A2(CDA_exp[30]) );
VIRL_SDN_EO2_4 eor_out_cdA_31 ( .X(XorA[31]), .A1(dt_intA[31]), .A2(CDA_exp[31]) );

VIRL_SDN_INV_0P5 invA_32 ( .X(inv_CAPTA_int), .A(CAPTA_int) );

VIRL_SDN_AN2_1 and_xor_captA_0 ( .X(ErrA[0]), .A1(inv_CAPTA_int), .A2(XorA[0]) );
VIRL_SDN_AN2_1 and_xor_captA_1 ( .X(ErrA[1]), .A1(inv_CAPTA_int), .A2(XorA[1]) );
VIRL_SDN_AN2_1 and_xor_captA_2 ( .X(ErrA[2]), .A1(inv_CAPTA_int), .A2(XorA[2]) );
VIRL_SDN_AN2_1 and_xor_captA_3 ( .X(ErrA[3]), .A1(inv_CAPTA_int), .A2(XorA[3]) );
VIRL_SDN_AN2_1 and_xor_captA_4 ( .X(ErrA[4]), .A1(inv_CAPTA_int), .A2(XorA[4]) );
VIRL_SDN_AN2_1 and_xor_captA_5 ( .X(ErrA[5]), .A1(inv_CAPTA_int), .A2(XorA[5]) );
VIRL_SDN_AN2_1 and_xor_captA_6 ( .X(ErrA[6]), .A1(inv_CAPTA_int), .A2(XorA[6]) );
VIRL_SDN_AN2_1 and_xor_captA_7 ( .X(ErrA[7]), .A1(inv_CAPTA_int), .A2(XorA[7]) );
VIRL_SDN_AN2_1 and_xor_captA_8 ( .X(ErrA[8]), .A1(inv_CAPTA_int), .A2(XorA[8]) );
VIRL_SDN_AN2_1 and_xor_captA_9 ( .X(ErrA[9]), .A1(inv_CAPTA_int), .A2(XorA[9]) );
VIRL_SDN_AN2_1 and_xor_captA_10 ( .X(ErrA[10]), .A1(inv_CAPTA_int), .A2(XorA[10]) );
VIRL_SDN_AN2_1 and_xor_captA_11 ( .X(ErrA[11]), .A1(inv_CAPTA_int), .A2(XorA[11]) );
VIRL_SDN_AN2_1 and_xor_captA_12 ( .X(ErrA[12]), .A1(inv_CAPTA_int), .A2(XorA[12]) );
VIRL_SDN_AN2_1 and_xor_captA_13 ( .X(ErrA[13]), .A1(inv_CAPTA_int), .A2(XorA[13]) );
VIRL_SDN_AN2_1 and_xor_captA_14 ( .X(ErrA[14]), .A1(inv_CAPTA_int), .A2(XorA[14]) );
VIRL_SDN_AN2_1 and_xor_captA_15 ( .X(ErrA[15]), .A1(inv_CAPTA_int), .A2(XorA[15]) );
VIRL_SDN_AN2_1 and_xor_captA_16 ( .X(ErrA[16]), .A1(inv_CAPTA_int), .A2(XorA[16]) );
VIRL_SDN_AN2_1 and_xor_captA_17 ( .X(ErrA[17]), .A1(inv_CAPTA_int), .A2(XorA[17]) );
VIRL_SDN_AN2_1 and_xor_captA_18 ( .X(ErrA[18]), .A1(inv_CAPTA_int), .A2(XorA[18]) );
VIRL_SDN_AN2_1 and_xor_captA_19 ( .X(ErrA[19]), .A1(inv_CAPTA_int), .A2(XorA[19]) );
VIRL_SDN_AN2_1 and_xor_captA_20 ( .X(ErrA[20]), .A1(inv_CAPTA_int), .A2(XorA[20]) );
VIRL_SDN_AN2_1 and_xor_captA_21 ( .X(ErrA[21]), .A1(inv_CAPTA_int), .A2(XorA[21]) );
VIRL_SDN_AN2_1 and_xor_captA_22 ( .X(ErrA[22]), .A1(inv_CAPTA_int), .A2(XorA[22]) );
VIRL_SDN_AN2_1 and_xor_captA_23 ( .X(ErrA[23]), .A1(inv_CAPTA_int), .A2(XorA[23]) );
VIRL_SDN_AN2_1 and_xor_captA_24 ( .X(ErrA[24]), .A1(inv_CAPTA_int), .A2(XorA[24]) );
VIRL_SDN_AN2_1 and_xor_captA_25 ( .X(ErrA[25]), .A1(inv_CAPTA_int), .A2(XorA[25]) );
VIRL_SDN_AN2_1 and_xor_captA_26 ( .X(ErrA[26]), .A1(inv_CAPTA_int), .A2(XorA[26]) );
VIRL_SDN_AN2_1 and_xor_captA_27 ( .X(ErrA[27]), .A1(inv_CAPTA_int), .A2(XorA[27]) );
VIRL_SDN_AN2_1 and_xor_captA_28 ( .X(ErrA[28]), .A1(inv_CAPTA_int), .A2(XorA[28]) );
VIRL_SDN_AN2_1 and_xor_captA_29 ( .X(ErrA[29]), .A1(inv_CAPTA_int), .A2(XorA[29]) );
VIRL_SDN_AN2_1 and_xor_captA_30 ( .X(ErrA[30]), .A1(inv_CAPTA_int), .A2(XorA[30]) );
VIRL_SDN_AN2_1 and_xor_captA_31 ( .X(ErrA[31]), .A1(inv_CAPTA_int), .A2(XorA[31]) );

VIRL_SDN_AN2_1 and_sticky_outA_0 ( .X(sticky_outA[0]), .A1(STICKYA_int), .A2(QPA_int[0]) );
VIRL_SDN_AN2_1 and_sticky_outA_1 ( .X(sticky_outA[1]), .A1(STICKYA_int), .A2(QPA_int[1]) );
VIRL_SDN_AN2_1 and_sticky_outA_2 ( .X(sticky_outA[2]), .A1(STICKYA_int), .A2(QPA_int[2]) );
VIRL_SDN_AN2_1 and_sticky_outA_3 ( .X(sticky_outA[3]), .A1(STICKYA_int), .A2(QPA_int[3]) );
VIRL_SDN_AN2_1 and_sticky_outA_4 ( .X(sticky_outA[4]), .A1(STICKYA_int), .A2(QPA_int[4]) );
VIRL_SDN_AN2_1 and_sticky_outA_5 ( .X(sticky_outA[5]), .A1(STICKYA_int), .A2(QPA_int[5]) );
VIRL_SDN_AN2_1 and_sticky_outA_6 ( .X(sticky_outA[6]), .A1(STICKYA_int), .A2(QPA_int[6]) );
VIRL_SDN_AN2_1 and_sticky_outA_7 ( .X(sticky_outA[7]), .A1(STICKYA_int), .A2(QPA_int[7]) );
VIRL_SDN_AN2_1 and_sticky_outA_8 ( .X(sticky_outA[8]), .A1(STICKYA_int), .A2(QPA_int[8]) );
VIRL_SDN_AN2_1 and_sticky_outA_9 ( .X(sticky_outA[9]), .A1(STICKYA_int), .A2(QPA_int[9]) );
VIRL_SDN_AN2_1 and_sticky_outA_10 ( .X(sticky_outA[10]), .A1(STICKYA_int), .A2(QPA_int[10]) );
VIRL_SDN_AN2_1 and_sticky_outA_11 ( .X(sticky_outA[11]), .A1(STICKYA_int), .A2(QPA_int[11]) );
VIRL_SDN_AN2_1 and_sticky_outA_12 ( .X(sticky_outA[12]), .A1(STICKYA_int), .A2(QPA_int[12]) );
VIRL_SDN_AN2_1 and_sticky_outA_13 ( .X(sticky_outA[13]), .A1(STICKYA_int), .A2(QPA_int[13]) );
VIRL_SDN_AN2_1 and_sticky_outA_14 ( .X(sticky_outA[14]), .A1(STICKYA_int), .A2(QPA_int[14]) );
VIRL_SDN_AN2_1 and_sticky_outA_15 ( .X(sticky_outA[15]), .A1(STICKYA_int), .A2(QPA_int[15]) );
VIRL_SDN_AN2_1 and_sticky_outA_16 ( .X(sticky_outA[16]), .A1(STICKYA_int), .A2(QPA_int[16]) );
VIRL_SDN_AN2_1 and_sticky_outA_17 ( .X(sticky_outA[17]), .A1(STICKYA_int), .A2(QPA_int[17]) );
VIRL_SDN_AN2_1 and_sticky_outA_18 ( .X(sticky_outA[18]), .A1(STICKYA_int), .A2(QPA_int[18]) );
VIRL_SDN_AN2_1 and_sticky_outA_19 ( .X(sticky_outA[19]), .A1(STICKYA_int), .A2(QPA_int[19]) );
VIRL_SDN_AN2_1 and_sticky_outA_20 ( .X(sticky_outA[20]), .A1(STICKYA_int), .A2(QPA_int[20]) );
VIRL_SDN_AN2_1 and_sticky_outA_21 ( .X(sticky_outA[21]), .A1(STICKYA_int), .A2(QPA_int[21]) );
VIRL_SDN_AN2_1 and_sticky_outA_22 ( .X(sticky_outA[22]), .A1(STICKYA_int), .A2(QPA_int[22]) );
VIRL_SDN_AN2_1 and_sticky_outA_23 ( .X(sticky_outA[23]), .A1(STICKYA_int), .A2(QPA_int[23]) );
VIRL_SDN_AN2_1 and_sticky_outA_24 ( .X(sticky_outA[24]), .A1(STICKYA_int), .A2(QPA_int[24]) );
VIRL_SDN_AN2_1 and_sticky_outA_25 ( .X(sticky_outA[25]), .A1(STICKYA_int), .A2(QPA_int[25]) );
VIRL_SDN_AN2_1 and_sticky_outA_26 ( .X(sticky_outA[26]), .A1(STICKYA_int), .A2(QPA_int[26]) );
VIRL_SDN_AN2_1 and_sticky_outA_27 ( .X(sticky_outA[27]), .A1(STICKYA_int), .A2(QPA_int[27]) );
VIRL_SDN_AN2_1 and_sticky_outA_28 ( .X(sticky_outA[28]), .A1(STICKYA_int), .A2(QPA_int[28]) );
VIRL_SDN_AN2_1 and_sticky_outA_29 ( .X(sticky_outA[29]), .A1(STICKYA_int), .A2(QPA_int[29]) );
VIRL_SDN_AN2_1 and_sticky_outA_30 ( .X(sticky_outA[30]), .A1(STICKYA_int), .A2(QPA_int[30]) );
VIRL_SDN_AN2_1 and_sticky_outA_31 ( .X(sticky_outA[31]), .A1(STICKYA_int), .A2(QPA_int[31]) );

VIRL_SDN_OR2_1 or_err_stickyA_0 ( .X(er_styA[0]), .A1(sticky_outA[0]), .A2(ErrA[0]) );
VIRL_SDN_OR2_1 or_err_stickyA_1 ( .X(er_styA[1]), .A1(sticky_outA[1]), .A2(ErrA[1]) );
VIRL_SDN_OR2_1 or_err_stickyA_2 ( .X(er_styA[2]), .A1(sticky_outA[2]), .A2(ErrA[2]) );
VIRL_SDN_OR2_1 or_err_stickyA_3 ( .X(er_styA[3]), .A1(sticky_outA[3]), .A2(ErrA[3]) );
VIRL_SDN_OR2_1 or_err_stickyA_4 ( .X(er_styA[4]), .A1(sticky_outA[4]), .A2(ErrA[4]) );
VIRL_SDN_OR2_1 or_err_stickyA_5 ( .X(er_styA[5]), .A1(sticky_outA[5]), .A2(ErrA[5]) );
VIRL_SDN_OR2_1 or_err_stickyA_6 ( .X(er_styA[6]), .A1(sticky_outA[6]), .A2(ErrA[6]) );
VIRL_SDN_OR2_1 or_err_stickyA_7 ( .X(er_styA[7]), .A1(sticky_outA[7]), .A2(ErrA[7]) );
VIRL_SDN_OR2_1 or_err_stickyA_8 ( .X(er_styA[8]), .A1(sticky_outA[8]), .A2(ErrA[8]) );
VIRL_SDN_OR2_1 or_err_stickyA_9 ( .X(er_styA[9]), .A1(sticky_outA[9]), .A2(ErrA[9]) );
VIRL_SDN_OR2_1 or_err_stickyA_10 ( .X(er_styA[10]), .A1(sticky_outA[10]), .A2(ErrA[10]) );
VIRL_SDN_OR2_1 or_err_stickyA_11 ( .X(er_styA[11]), .A1(sticky_outA[11]), .A2(ErrA[11]) );
VIRL_SDN_OR2_1 or_err_stickyA_12 ( .X(er_styA[12]), .A1(sticky_outA[12]), .A2(ErrA[12]) );
VIRL_SDN_OR2_1 or_err_stickyA_13 ( .X(er_styA[13]), .A1(sticky_outA[13]), .A2(ErrA[13]) );
VIRL_SDN_OR2_1 or_err_stickyA_14 ( .X(er_styA[14]), .A1(sticky_outA[14]), .A2(ErrA[14]) );
VIRL_SDN_OR2_1 or_err_stickyA_15 ( .X(er_styA[15]), .A1(sticky_outA[15]), .A2(ErrA[15]) );
VIRL_SDN_OR2_1 or_err_stickyA_16 ( .X(er_styA[16]), .A1(sticky_outA[16]), .A2(ErrA[16]) );
VIRL_SDN_OR2_1 or_err_stickyA_17 ( .X(er_styA[17]), .A1(sticky_outA[17]), .A2(ErrA[17]) );
VIRL_SDN_OR2_1 or_err_stickyA_18 ( .X(er_styA[18]), .A1(sticky_outA[18]), .A2(ErrA[18]) );
VIRL_SDN_OR2_1 or_err_stickyA_19 ( .X(er_styA[19]), .A1(sticky_outA[19]), .A2(ErrA[19]) );
VIRL_SDN_OR2_1 or_err_stickyA_20 ( .X(er_styA[20]), .A1(sticky_outA[20]), .A2(ErrA[20]) );
VIRL_SDN_OR2_1 or_err_stickyA_21 ( .X(er_styA[21]), .A1(sticky_outA[21]), .A2(ErrA[21]) );
VIRL_SDN_OR2_1 or_err_stickyA_22 ( .X(er_styA[22]), .A1(sticky_outA[22]), .A2(ErrA[22]) );
VIRL_SDN_OR2_1 or_err_stickyA_23 ( .X(er_styA[23]), .A1(sticky_outA[23]), .A2(ErrA[23]) );
VIRL_SDN_OR2_1 or_err_stickyA_24 ( .X(er_styA[24]), .A1(sticky_outA[24]), .A2(ErrA[24]) );
VIRL_SDN_OR2_1 or_err_stickyA_25 ( .X(er_styA[25]), .A1(sticky_outA[25]), .A2(ErrA[25]) );
VIRL_SDN_OR2_1 or_err_stickyA_26 ( .X(er_styA[26]), .A1(sticky_outA[26]), .A2(ErrA[26]) );
VIRL_SDN_OR2_1 or_err_stickyA_27 ( .X(er_styA[27]), .A1(sticky_outA[27]), .A2(ErrA[27]) );
VIRL_SDN_OR2_1 or_err_stickyA_28 ( .X(er_styA[28]), .A1(sticky_outA[28]), .A2(ErrA[28]) );
VIRL_SDN_OR2_1 or_err_stickyA_29 ( .X(er_styA[29]), .A1(sticky_outA[29]), .A2(ErrA[29]) );
VIRL_SDN_OR2_1 or_err_stickyA_30 ( .X(er_styA[30]), .A1(sticky_outA[30]), .A2(ErrA[30]) );
VIRL_SDN_OR2_1 or_err_stickyA_31 ( .X(er_styA[31]), .A1(sticky_outA[31]), .A2(ErrA[31]) );
VIRL_SDN_BUF_1 buf_dtB_0 ( .X(dtB[0]), .A(DB_mout[0]) );
VIRL_SDN_BUF_1 buf_dtB_1 ( .X(dtB[1]), .A(DB_mout[1]) );
VIRL_SDN_BUF_1 buf_dtB_2 ( .X(dtB[2]), .A(DB_mout[2]) );
VIRL_SDN_BUF_1 buf_dtB_3 ( .X(dtB[3]), .A(DB_mout[3]) );
VIRL_SDN_BUF_1 buf_dtB_4 ( .X(dtB[4]), .A(DB_mout[4]) );
VIRL_SDN_BUF_1 buf_dtB_5 ( .X(dtB[5]), .A(DB_mout[5]) );
VIRL_SDN_BUF_1 buf_dtB_6 ( .X(dtB[6]), .A(DB_mout[6]) );
VIRL_SDN_BUF_1 buf_dtB_7 ( .X(dtB[7]), .A(DB_mout[7]) );
VIRL_SDN_BUF_1 buf_dtB_8 ( .X(dtB[8]), .A(DB_mout[8]) );
VIRL_SDN_BUF_1 buf_dtB_9 ( .X(dtB[9]), .A(DB_mout[9]) );
VIRL_SDN_BUF_1 buf_dtB_10 ( .X(dtB[10]), .A(DB_mout[10]) );
VIRL_SDN_BUF_1 buf_dtB_11 ( .X(dtB[11]), .A(DB_mout[11]) );
VIRL_SDN_BUF_1 buf_dtB_12 ( .X(dtB[12]), .A(DB_mout[12]) );
VIRL_SDN_BUF_1 buf_dtB_13 ( .X(dtB[13]), .A(DB_mout[13]) );
VIRL_SDN_BUF_1 buf_dtB_14 ( .X(dtB[14]), .A(DB_mout[14]) );
VIRL_SDN_BUF_1 buf_dtB_15 ( .X(dtB[15]), .A(DB_mout[15]) );
VIRL_SDN_BUF_1 buf_dtB_16 ( .X(dtB[16]), .A(DB_mout[16]) );
VIRL_SDN_BUF_1 buf_dtB_17 ( .X(dtB[17]), .A(DB_mout[17]) );
VIRL_SDN_BUF_1 buf_dtB_18 ( .X(dtB[18]), .A(DB_mout[18]) );
VIRL_SDN_BUF_1 buf_dtB_19 ( .X(dtB[19]), .A(DB_mout[19]) );
VIRL_SDN_BUF_1 buf_dtB_20 ( .X(dtB[20]), .A(DB_mout[20]) );
VIRL_SDN_BUF_1 buf_dtB_21 ( .X(dtB[21]), .A(DB_mout[21]) );
VIRL_SDN_BUF_1 buf_dtB_22 ( .X(dtB[22]), .A(DB_mout[22]) );
VIRL_SDN_BUF_1 buf_dtB_23 ( .X(dtB[23]), .A(DB_mout[23]) );
VIRL_SDN_BUF_1 buf_dtB_24 ( .X(dtB[24]), .A(DB_mout[24]) );
VIRL_SDN_BUF_1 buf_dtB_25 ( .X(dtB[25]), .A(DB_mout[25]) );
VIRL_SDN_BUF_1 buf_dtB_26 ( .X(dtB[26]), .A(DB_mout[26]) );
VIRL_SDN_BUF_1 buf_dtB_27 ( .X(dtB[27]), .A(DB_mout[27]) );
VIRL_SDN_BUF_1 buf_dtB_28 ( .X(dtB[28]), .A(DB_mout[28]) );
VIRL_SDN_BUF_1 buf_dtB_29 ( .X(dtB[29]), .A(DB_mout[29]) );
VIRL_SDN_BUF_1 buf_dtB_30 ( .X(dtB[30]), .A(DB_mout[30]) );
VIRL_SDN_BUF_1 buf_dtB_31 ( .X(dtB[31]), .A(DB_mout[31]) );

always @ ( negedge mclkB or DFTMASK_buf )
begin: blk_dftmaskBlatched
  if ( mclkB === 1'b0 )
  begin
    DFTMASK_latchedB = DFTMASK_buf;
  end
end


VIRL_SDN_MUX2_1 mux_dt_qB_0 ( .X(dt_intB[0]), .D0(QB_mem[0]), .D1(DB_int[0]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_1 ( .X(dt_intB[1]), .D0(QB_mem[1]), .D1(DB_int[1]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_2 ( .X(dt_intB[2]), .D0(QB_mem[2]), .D1(DB_int[2]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_3 ( .X(dt_intB[3]), .D0(QB_mem[3]), .D1(DB_int[3]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_4 ( .X(dt_intB[4]), .D0(QB_mem[4]), .D1(DB_int[4]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_5 ( .X(dt_intB[5]), .D0(QB_mem[5]), .D1(DB_int[5]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_6 ( .X(dt_intB[6]), .D0(QB_mem[6]), .D1(DB_int[6]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_7 ( .X(dt_intB[7]), .D0(QB_mem[7]), .D1(DB_int[7]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_8 ( .X(dt_intB[8]), .D0(QB_mem[8]), .D1(DB_int[8]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_9 ( .X(dt_intB[9]), .D0(QB_mem[9]), .D1(DB_int[9]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_10 ( .X(dt_intB[10]), .D0(QB_mem[10]), .D1(DB_int[10]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_11 ( .X(dt_intB[11]), .D0(QB_mem[11]), .D1(DB_int[11]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_12 ( .X(dt_intB[12]), .D0(QB_mem[12]), .D1(DB_int[12]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_13 ( .X(dt_intB[13]), .D0(QB_mem[13]), .D1(DB_int[13]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_14 ( .X(dt_intB[14]), .D0(QB_mem[14]), .D1(DB_int[14]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_15 ( .X(dt_intB[15]), .D0(QB_mem[15]), .D1(DB_int[15]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_16 ( .X(dt_intB[16]), .D0(QB_mem[16]), .D1(DB_int[16]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_17 ( .X(dt_intB[17]), .D0(QB_mem[17]), .D1(DB_int[17]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_18 ( .X(dt_intB[18]), .D0(QB_mem[18]), .D1(DB_int[18]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_19 ( .X(dt_intB[19]), .D0(QB_mem[19]), .D1(DB_int[19]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_20 ( .X(dt_intB[20]), .D0(QB_mem[20]), .D1(DB_int[20]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_21 ( .X(dt_intB[21]), .D0(QB_mem[21]), .D1(DB_int[21]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_22 ( .X(dt_intB[22]), .D0(QB_mem[22]), .D1(DB_int[22]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_23 ( .X(dt_intB[23]), .D0(QB_mem[23]), .D1(DB_int[23]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_24 ( .X(dt_intB[24]), .D0(QB_mem[24]), .D1(DB_int[24]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_25 ( .X(dt_intB[25]), .D0(QB_mem[25]), .D1(DB_int[25]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_26 ( .X(dt_intB[26]), .D0(QB_mem[26]), .D1(DB_int[26]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_27 ( .X(dt_intB[27]), .D0(QB_mem[27]), .D1(DB_int[27]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_28 ( .X(dt_intB[28]), .D0(QB_mem[28]), .D1(DB_int[28]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_29 ( .X(dt_intB[29]), .D0(QB_mem[29]), .D1(DB_int[29]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_30 ( .X(dt_intB[30]), .D0(QB_mem[30]), .D1(DB_int[30]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_31 ( .X(dt_intB[31]), .D0(QB_mem[31]), .D1(DB_int[31]), .S(DFTMASK_buf) );

always @(dt_intB)
begin
  `ifdef VIRAGE_FAST_VERILOG
  `else
    QB_dftclken = 32'bx;
    #0.001;
  `endif // endif of VIRAGE_FAST_VERILOG
  QB_dftclken = dt_intB;
  if (DFTMASK_buf !== 1'b0)
  begin
    uut.QB_local_tmp = dt_intB;
  end
end


always @(DB_int)
begin
  if ($realtime == DFTMASK_time)
    uut.QB_local_tmp = DB_int;
end

always @(QPB_int)
begin
  `ifdef VIRAGE_FAST_VERILOG
  `else
    QPB_dftclken = 32'bx;
    #0.001;
  `endif // endif of VIRAGE_FAST_VERILOG
  QPB_dftclken = QPB_int;
end

VIRL_SDN_BUF_1 buf_doB_0 ( .X(QB_buf[0]), .A(QB_dftclken[0]) );
VIRL_SDN_BUF_1 buf_doB_1 ( .X(QB_buf[1]), .A(QB_dftclken[1]) );
VIRL_SDN_BUF_1 buf_doB_2 ( .X(QB_buf[2]), .A(QB_dftclken[2]) );
VIRL_SDN_BUF_1 buf_doB_3 ( .X(QB_buf[3]), .A(QB_dftclken[3]) );
VIRL_SDN_BUF_1 buf_doB_4 ( .X(QB_buf[4]), .A(QB_dftclken[4]) );
VIRL_SDN_BUF_1 buf_doB_5 ( .X(QB_buf[5]), .A(QB_dftclken[5]) );
VIRL_SDN_BUF_1 buf_doB_6 ( .X(QB_buf[6]), .A(QB_dftclken[6]) );
VIRL_SDN_BUF_1 buf_doB_7 ( .X(QB_buf[7]), .A(QB_dftclken[7]) );
VIRL_SDN_BUF_1 buf_doB_8 ( .X(QB_buf[8]), .A(QB_dftclken[8]) );
VIRL_SDN_BUF_1 buf_doB_9 ( .X(QB_buf[9]), .A(QB_dftclken[9]) );
VIRL_SDN_BUF_1 buf_doB_10 ( .X(QB_buf[10]), .A(QB_dftclken[10]) );
VIRL_SDN_BUF_1 buf_doB_11 ( .X(QB_buf[11]), .A(QB_dftclken[11]) );
VIRL_SDN_BUF_1 buf_doB_12 ( .X(QB_buf[12]), .A(QB_dftclken[12]) );
VIRL_SDN_BUF_1 buf_doB_13 ( .X(QB_buf[13]), .A(QB_dftclken[13]) );
VIRL_SDN_BUF_1 buf_doB_14 ( .X(QB_buf[14]), .A(QB_dftclken[14]) );
VIRL_SDN_BUF_1 buf_doB_15 ( .X(QB_buf[15]), .A(QB_dftclken[15]) );
VIRL_SDN_BUF_1 buf_doB_16 ( .X(QB_buf[16]), .A(QB_dftclken[16]) );
VIRL_SDN_BUF_1 buf_doB_17 ( .X(QB_buf[17]), .A(QB_dftclken[17]) );
VIRL_SDN_BUF_1 buf_doB_18 ( .X(QB_buf[18]), .A(QB_dftclken[18]) );
VIRL_SDN_BUF_1 buf_doB_19 ( .X(QB_buf[19]), .A(QB_dftclken[19]) );
VIRL_SDN_BUF_1 buf_doB_20 ( .X(QB_buf[20]), .A(QB_dftclken[20]) );
VIRL_SDN_BUF_1 buf_doB_21 ( .X(QB_buf[21]), .A(QB_dftclken[21]) );
VIRL_SDN_BUF_1 buf_doB_22 ( .X(QB_buf[22]), .A(QB_dftclken[22]) );
VIRL_SDN_BUF_1 buf_doB_23 ( .X(QB_buf[23]), .A(QB_dftclken[23]) );
VIRL_SDN_BUF_1 buf_doB_24 ( .X(QB_buf[24]), .A(QB_dftclken[24]) );
VIRL_SDN_BUF_1 buf_doB_25 ( .X(QB_buf[25]), .A(QB_dftclken[25]) );
VIRL_SDN_BUF_1 buf_doB_26 ( .X(QB_buf[26]), .A(QB_dftclken[26]) );
VIRL_SDN_BUF_1 buf_doB_27 ( .X(QB_buf[27]), .A(QB_dftclken[27]) );
VIRL_SDN_BUF_1 buf_doB_28 ( .X(QB_buf[28]), .A(QB_dftclken[28]) );
VIRL_SDN_BUF_1 buf_doB_29 ( .X(QB_buf[29]), .A(QB_dftclken[29]) );
VIRL_SDN_BUF_1 buf_doB_30 ( .X(QB_buf[30]), .A(QB_dftclken[30]) );
VIRL_SDN_BUF_1 buf_doB_31 ( .X(QB_buf[31]), .A(QB_dftclken[31]) );

VIRL_SDN_BUF_1 buf_qpB_0 ( .X(QPB_buf[0]), .A(QPB_dftclken[0]) );
VIRL_SDN_BUF_1 buf_qpB_1 ( .X(QPB_buf[1]), .A(QPB_dftclken[1]) );
VIRL_SDN_BUF_1 buf_qpB_2 ( .X(QPB_buf[2]), .A(QPB_dftclken[2]) );
VIRL_SDN_BUF_1 buf_qpB_3 ( .X(QPB_buf[3]), .A(QPB_dftclken[3]) );
VIRL_SDN_BUF_1 buf_qpB_4 ( .X(QPB_buf[4]), .A(QPB_dftclken[4]) );
VIRL_SDN_BUF_1 buf_qpB_5 ( .X(QPB_buf[5]), .A(QPB_dftclken[5]) );
VIRL_SDN_BUF_1 buf_qpB_6 ( .X(QPB_buf[6]), .A(QPB_dftclken[6]) );
VIRL_SDN_BUF_1 buf_qpB_7 ( .X(QPB_buf[7]), .A(QPB_dftclken[7]) );
VIRL_SDN_BUF_1 buf_qpB_8 ( .X(QPB_buf[8]), .A(QPB_dftclken[8]) );
VIRL_SDN_BUF_1 buf_qpB_9 ( .X(QPB_buf[9]), .A(QPB_dftclken[9]) );
VIRL_SDN_BUF_1 buf_qpB_10 ( .X(QPB_buf[10]), .A(QPB_dftclken[10]) );
VIRL_SDN_BUF_1 buf_qpB_11 ( .X(QPB_buf[11]), .A(QPB_dftclken[11]) );
VIRL_SDN_BUF_1 buf_qpB_12 ( .X(QPB_buf[12]), .A(QPB_dftclken[12]) );
VIRL_SDN_BUF_1 buf_qpB_13 ( .X(QPB_buf[13]), .A(QPB_dftclken[13]) );
VIRL_SDN_BUF_1 buf_qpB_14 ( .X(QPB_buf[14]), .A(QPB_dftclken[14]) );
VIRL_SDN_BUF_1 buf_qpB_15 ( .X(QPB_buf[15]), .A(QPB_dftclken[15]) );
VIRL_SDN_BUF_1 buf_qpB_16 ( .X(QPB_buf[16]), .A(QPB_dftclken[16]) );
VIRL_SDN_BUF_1 buf_qpB_17 ( .X(QPB_buf[17]), .A(QPB_dftclken[17]) );
VIRL_SDN_BUF_1 buf_qpB_18 ( .X(QPB_buf[18]), .A(QPB_dftclken[18]) );
VIRL_SDN_BUF_1 buf_qpB_19 ( .X(QPB_buf[19]), .A(QPB_dftclken[19]) );
VIRL_SDN_BUF_1 buf_qpB_20 ( .X(QPB_buf[20]), .A(QPB_dftclken[20]) );
VIRL_SDN_BUF_1 buf_qpB_21 ( .X(QPB_buf[21]), .A(QPB_dftclken[21]) );
VIRL_SDN_BUF_1 buf_qpB_22 ( .X(QPB_buf[22]), .A(QPB_dftclken[22]) );
VIRL_SDN_BUF_1 buf_qpB_23 ( .X(QPB_buf[23]), .A(QPB_dftclken[23]) );
VIRL_SDN_BUF_1 buf_qpB_24 ( .X(QPB_buf[24]), .A(QPB_dftclken[24]) );
VIRL_SDN_BUF_1 buf_qpB_25 ( .X(QPB_buf[25]), .A(QPB_dftclken[25]) );
VIRL_SDN_BUF_1 buf_qpB_26 ( .X(QPB_buf[26]), .A(QPB_dftclken[26]) );
VIRL_SDN_BUF_1 buf_qpB_27 ( .X(QPB_buf[27]), .A(QPB_dftclken[27]) );
VIRL_SDN_BUF_1 buf_qpB_28 ( .X(QPB_buf[28]), .A(QPB_dftclken[28]) );
VIRL_SDN_BUF_1 buf_qpB_29 ( .X(QPB_buf[29]), .A(QPB_dftclken[29]) );
VIRL_SDN_BUF_1 buf_qpB_30 ( .X(QPB_buf[30]), .A(QPB_dftclken[30]) );
VIRL_SDN_BUF_1 buf_qpB_31 ( .X(QPB_buf[31]), .A(QPB_dftclken[31]) );

VIRL_SDN_BUF_1 buf_cd_expB_0 (.X(CDB_exp[0]), .A(CDB_int[0]));
VIRL_SDN_BUF_1 buf_cd_expB_1 (.X(CDB_exp[1]), .A(CDB_int[1]));
VIRL_SDN_BUF_1 buf_cd_expB_2 (.X(CDB_exp[2]), .A(CDB_int[2]));
VIRL_SDN_BUF_1 buf_cd_expB_3 (.X(CDB_exp[3]), .A(CDB_int[3]));
VIRL_SDN_BUF_1 buf_cd_expB_4 (.X(CDB_exp[4]), .A(CDB_int[0]));
VIRL_SDN_BUF_1 buf_cd_expB_5 (.X(CDB_exp[5]), .A(CDB_int[1]));
VIRL_SDN_BUF_1 buf_cd_expB_6 (.X(CDB_exp[6]), .A(CDB_int[2]));
VIRL_SDN_BUF_1 buf_cd_expB_7 (.X(CDB_exp[7]), .A(CDB_int[3]));
VIRL_SDN_BUF_1 buf_cd_expB_8 (.X(CDB_exp[8]), .A(CDB_int[0]));
VIRL_SDN_BUF_1 buf_cd_expB_9 (.X(CDB_exp[9]), .A(CDB_int[1]));
VIRL_SDN_BUF_1 buf_cd_expB_10 (.X(CDB_exp[10]), .A(CDB_int[2]));
VIRL_SDN_BUF_1 buf_cd_expB_11 (.X(CDB_exp[11]), .A(CDB_int[3]));
VIRL_SDN_BUF_1 buf_cd_expB_12 (.X(CDB_exp[12]), .A(CDB_int[0]));
VIRL_SDN_BUF_1 buf_cd_expB_13 (.X(CDB_exp[13]), .A(CDB_int[1]));
VIRL_SDN_BUF_1 buf_cd_expB_14 (.X(CDB_exp[14]), .A(CDB_int[2]));
VIRL_SDN_BUF_1 buf_cd_expB_15 (.X(CDB_exp[15]), .A(CDB_int[3]));
VIRL_SDN_BUF_1 buf_cd_expB_16 (.X(CDB_exp[16]), .A(CDB_int[0]));
VIRL_SDN_BUF_1 buf_cd_expB_17 (.X(CDB_exp[17]), .A(CDB_int[1]));
VIRL_SDN_BUF_1 buf_cd_expB_18 (.X(CDB_exp[18]), .A(CDB_int[2]));
VIRL_SDN_BUF_1 buf_cd_expB_19 (.X(CDB_exp[19]), .A(CDB_int[3]));
VIRL_SDN_BUF_1 buf_cd_expB_20 (.X(CDB_exp[20]), .A(CDB_int[0]));
VIRL_SDN_BUF_1 buf_cd_expB_21 (.X(CDB_exp[21]), .A(CDB_int[1]));
VIRL_SDN_BUF_1 buf_cd_expB_22 (.X(CDB_exp[22]), .A(CDB_int[2]));
VIRL_SDN_BUF_1 buf_cd_expB_23 (.X(CDB_exp[23]), .A(CDB_int[3]));
VIRL_SDN_BUF_1 buf_cd_expB_24 (.X(CDB_exp[24]), .A(CDB_int[0]));
VIRL_SDN_BUF_1 buf_cd_expB_25 (.X(CDB_exp[25]), .A(CDB_int[1]));
VIRL_SDN_BUF_1 buf_cd_expB_26 (.X(CDB_exp[26]), .A(CDB_int[2]));
VIRL_SDN_BUF_1 buf_cd_expB_27 (.X(CDB_exp[27]), .A(CDB_int[3]));
VIRL_SDN_BUF_1 buf_cd_expB_28 (.X(CDB_exp[28]), .A(CDB_int[0]));
VIRL_SDN_BUF_1 buf_cd_expB_29 (.X(CDB_exp[29]), .A(CDB_int[1]));
VIRL_SDN_BUF_1 buf_cd_expB_30 (.X(CDB_exp[30]), .A(CDB_int[2]));
VIRL_SDN_BUF_1 buf_cd_expB_31 (.X(CDB_exp[31]), .A(CDB_int[3]));

VIRL_SDN_EO2_4 eor_out_cdB_0 ( .X(XorB[0]), .A1(dt_intB[0]), .A2(CDB_exp[0]) );
VIRL_SDN_EO2_4 eor_out_cdB_1 ( .X(XorB[1]), .A1(dt_intB[1]), .A2(CDB_exp[1]) );
VIRL_SDN_EO2_4 eor_out_cdB_2 ( .X(XorB[2]), .A1(dt_intB[2]), .A2(CDB_exp[2]) );
VIRL_SDN_EO2_4 eor_out_cdB_3 ( .X(XorB[3]), .A1(dt_intB[3]), .A2(CDB_exp[3]) );
VIRL_SDN_EO2_4 eor_out_cdB_4 ( .X(XorB[4]), .A1(dt_intB[4]), .A2(CDB_exp[4]) );
VIRL_SDN_EO2_4 eor_out_cdB_5 ( .X(XorB[5]), .A1(dt_intB[5]), .A2(CDB_exp[5]) );
VIRL_SDN_EO2_4 eor_out_cdB_6 ( .X(XorB[6]), .A1(dt_intB[6]), .A2(CDB_exp[6]) );
VIRL_SDN_EO2_4 eor_out_cdB_7 ( .X(XorB[7]), .A1(dt_intB[7]), .A2(CDB_exp[7]) );
VIRL_SDN_EO2_4 eor_out_cdB_8 ( .X(XorB[8]), .A1(dt_intB[8]), .A2(CDB_exp[8]) );
VIRL_SDN_EO2_4 eor_out_cdB_9 ( .X(XorB[9]), .A1(dt_intB[9]), .A2(CDB_exp[9]) );
VIRL_SDN_EO2_4 eor_out_cdB_10 ( .X(XorB[10]), .A1(dt_intB[10]), .A2(CDB_exp[10]) );
VIRL_SDN_EO2_4 eor_out_cdB_11 ( .X(XorB[11]), .A1(dt_intB[11]), .A2(CDB_exp[11]) );
VIRL_SDN_EO2_4 eor_out_cdB_12 ( .X(XorB[12]), .A1(dt_intB[12]), .A2(CDB_exp[12]) );
VIRL_SDN_EO2_4 eor_out_cdB_13 ( .X(XorB[13]), .A1(dt_intB[13]), .A2(CDB_exp[13]) );
VIRL_SDN_EO2_4 eor_out_cdB_14 ( .X(XorB[14]), .A1(dt_intB[14]), .A2(CDB_exp[14]) );
VIRL_SDN_EO2_4 eor_out_cdB_15 ( .X(XorB[15]), .A1(dt_intB[15]), .A2(CDB_exp[15]) );
VIRL_SDN_EO2_4 eor_out_cdB_16 ( .X(XorB[16]), .A1(dt_intB[16]), .A2(CDB_exp[16]) );
VIRL_SDN_EO2_4 eor_out_cdB_17 ( .X(XorB[17]), .A1(dt_intB[17]), .A2(CDB_exp[17]) );
VIRL_SDN_EO2_4 eor_out_cdB_18 ( .X(XorB[18]), .A1(dt_intB[18]), .A2(CDB_exp[18]) );
VIRL_SDN_EO2_4 eor_out_cdB_19 ( .X(XorB[19]), .A1(dt_intB[19]), .A2(CDB_exp[19]) );
VIRL_SDN_EO2_4 eor_out_cdB_20 ( .X(XorB[20]), .A1(dt_intB[20]), .A2(CDB_exp[20]) );
VIRL_SDN_EO2_4 eor_out_cdB_21 ( .X(XorB[21]), .A1(dt_intB[21]), .A2(CDB_exp[21]) );
VIRL_SDN_EO2_4 eor_out_cdB_22 ( .X(XorB[22]), .A1(dt_intB[22]), .A2(CDB_exp[22]) );
VIRL_SDN_EO2_4 eor_out_cdB_23 ( .X(XorB[23]), .A1(dt_intB[23]), .A2(CDB_exp[23]) );
VIRL_SDN_EO2_4 eor_out_cdB_24 ( .X(XorB[24]), .A1(dt_intB[24]), .A2(CDB_exp[24]) );
VIRL_SDN_EO2_4 eor_out_cdB_25 ( .X(XorB[25]), .A1(dt_intB[25]), .A2(CDB_exp[25]) );
VIRL_SDN_EO2_4 eor_out_cdB_26 ( .X(XorB[26]), .A1(dt_intB[26]), .A2(CDB_exp[26]) );
VIRL_SDN_EO2_4 eor_out_cdB_27 ( .X(XorB[27]), .A1(dt_intB[27]), .A2(CDB_exp[27]) );
VIRL_SDN_EO2_4 eor_out_cdB_28 ( .X(XorB[28]), .A1(dt_intB[28]), .A2(CDB_exp[28]) );
VIRL_SDN_EO2_4 eor_out_cdB_29 ( .X(XorB[29]), .A1(dt_intB[29]), .A2(CDB_exp[29]) );
VIRL_SDN_EO2_4 eor_out_cdB_30 ( .X(XorB[30]), .A1(dt_intB[30]), .A2(CDB_exp[30]) );
VIRL_SDN_EO2_4 eor_out_cdB_31 ( .X(XorB[31]), .A1(dt_intB[31]), .A2(CDB_exp[31]) );

VIRL_SDN_INV_0P5 invB_32 ( .X(inv_CAPTB_int), .A(CAPTB_int) );

VIRL_SDN_AN2_1 and_xor_captB_0 ( .X(ErrB[0]), .A1(inv_CAPTB_int), .A2(XorB[0]) );
VIRL_SDN_AN2_1 and_xor_captB_1 ( .X(ErrB[1]), .A1(inv_CAPTB_int), .A2(XorB[1]) );
VIRL_SDN_AN2_1 and_xor_captB_2 ( .X(ErrB[2]), .A1(inv_CAPTB_int), .A2(XorB[2]) );
VIRL_SDN_AN2_1 and_xor_captB_3 ( .X(ErrB[3]), .A1(inv_CAPTB_int), .A2(XorB[3]) );
VIRL_SDN_AN2_1 and_xor_captB_4 ( .X(ErrB[4]), .A1(inv_CAPTB_int), .A2(XorB[4]) );
VIRL_SDN_AN2_1 and_xor_captB_5 ( .X(ErrB[5]), .A1(inv_CAPTB_int), .A2(XorB[5]) );
VIRL_SDN_AN2_1 and_xor_captB_6 ( .X(ErrB[6]), .A1(inv_CAPTB_int), .A2(XorB[6]) );
VIRL_SDN_AN2_1 and_xor_captB_7 ( .X(ErrB[7]), .A1(inv_CAPTB_int), .A2(XorB[7]) );
VIRL_SDN_AN2_1 and_xor_captB_8 ( .X(ErrB[8]), .A1(inv_CAPTB_int), .A2(XorB[8]) );
VIRL_SDN_AN2_1 and_xor_captB_9 ( .X(ErrB[9]), .A1(inv_CAPTB_int), .A2(XorB[9]) );
VIRL_SDN_AN2_1 and_xor_captB_10 ( .X(ErrB[10]), .A1(inv_CAPTB_int), .A2(XorB[10]) );
VIRL_SDN_AN2_1 and_xor_captB_11 ( .X(ErrB[11]), .A1(inv_CAPTB_int), .A2(XorB[11]) );
VIRL_SDN_AN2_1 and_xor_captB_12 ( .X(ErrB[12]), .A1(inv_CAPTB_int), .A2(XorB[12]) );
VIRL_SDN_AN2_1 and_xor_captB_13 ( .X(ErrB[13]), .A1(inv_CAPTB_int), .A2(XorB[13]) );
VIRL_SDN_AN2_1 and_xor_captB_14 ( .X(ErrB[14]), .A1(inv_CAPTB_int), .A2(XorB[14]) );
VIRL_SDN_AN2_1 and_xor_captB_15 ( .X(ErrB[15]), .A1(inv_CAPTB_int), .A2(XorB[15]) );
VIRL_SDN_AN2_1 and_xor_captB_16 ( .X(ErrB[16]), .A1(inv_CAPTB_int), .A2(XorB[16]) );
VIRL_SDN_AN2_1 and_xor_captB_17 ( .X(ErrB[17]), .A1(inv_CAPTB_int), .A2(XorB[17]) );
VIRL_SDN_AN2_1 and_xor_captB_18 ( .X(ErrB[18]), .A1(inv_CAPTB_int), .A2(XorB[18]) );
VIRL_SDN_AN2_1 and_xor_captB_19 ( .X(ErrB[19]), .A1(inv_CAPTB_int), .A2(XorB[19]) );
VIRL_SDN_AN2_1 and_xor_captB_20 ( .X(ErrB[20]), .A1(inv_CAPTB_int), .A2(XorB[20]) );
VIRL_SDN_AN2_1 and_xor_captB_21 ( .X(ErrB[21]), .A1(inv_CAPTB_int), .A2(XorB[21]) );
VIRL_SDN_AN2_1 and_xor_captB_22 ( .X(ErrB[22]), .A1(inv_CAPTB_int), .A2(XorB[22]) );
VIRL_SDN_AN2_1 and_xor_captB_23 ( .X(ErrB[23]), .A1(inv_CAPTB_int), .A2(XorB[23]) );
VIRL_SDN_AN2_1 and_xor_captB_24 ( .X(ErrB[24]), .A1(inv_CAPTB_int), .A2(XorB[24]) );
VIRL_SDN_AN2_1 and_xor_captB_25 ( .X(ErrB[25]), .A1(inv_CAPTB_int), .A2(XorB[25]) );
VIRL_SDN_AN2_1 and_xor_captB_26 ( .X(ErrB[26]), .A1(inv_CAPTB_int), .A2(XorB[26]) );
VIRL_SDN_AN2_1 and_xor_captB_27 ( .X(ErrB[27]), .A1(inv_CAPTB_int), .A2(XorB[27]) );
VIRL_SDN_AN2_1 and_xor_captB_28 ( .X(ErrB[28]), .A1(inv_CAPTB_int), .A2(XorB[28]) );
VIRL_SDN_AN2_1 and_xor_captB_29 ( .X(ErrB[29]), .A1(inv_CAPTB_int), .A2(XorB[29]) );
VIRL_SDN_AN2_1 and_xor_captB_30 ( .X(ErrB[30]), .A1(inv_CAPTB_int), .A2(XorB[30]) );
VIRL_SDN_AN2_1 and_xor_captB_31 ( .X(ErrB[31]), .A1(inv_CAPTB_int), .A2(XorB[31]) );

VIRL_SDN_AN2_1 and_sticky_outB_0 ( .X(sticky_outB[0]), .A1(STICKYB_int), .A2(QPB_int[0]) );
VIRL_SDN_AN2_1 and_sticky_outB_1 ( .X(sticky_outB[1]), .A1(STICKYB_int), .A2(QPB_int[1]) );
VIRL_SDN_AN2_1 and_sticky_outB_2 ( .X(sticky_outB[2]), .A1(STICKYB_int), .A2(QPB_int[2]) );
VIRL_SDN_AN2_1 and_sticky_outB_3 ( .X(sticky_outB[3]), .A1(STICKYB_int), .A2(QPB_int[3]) );
VIRL_SDN_AN2_1 and_sticky_outB_4 ( .X(sticky_outB[4]), .A1(STICKYB_int), .A2(QPB_int[4]) );
VIRL_SDN_AN2_1 and_sticky_outB_5 ( .X(sticky_outB[5]), .A1(STICKYB_int), .A2(QPB_int[5]) );
VIRL_SDN_AN2_1 and_sticky_outB_6 ( .X(sticky_outB[6]), .A1(STICKYB_int), .A2(QPB_int[6]) );
VIRL_SDN_AN2_1 and_sticky_outB_7 ( .X(sticky_outB[7]), .A1(STICKYB_int), .A2(QPB_int[7]) );
VIRL_SDN_AN2_1 and_sticky_outB_8 ( .X(sticky_outB[8]), .A1(STICKYB_int), .A2(QPB_int[8]) );
VIRL_SDN_AN2_1 and_sticky_outB_9 ( .X(sticky_outB[9]), .A1(STICKYB_int), .A2(QPB_int[9]) );
VIRL_SDN_AN2_1 and_sticky_outB_10 ( .X(sticky_outB[10]), .A1(STICKYB_int), .A2(QPB_int[10]) );
VIRL_SDN_AN2_1 and_sticky_outB_11 ( .X(sticky_outB[11]), .A1(STICKYB_int), .A2(QPB_int[11]) );
VIRL_SDN_AN2_1 and_sticky_outB_12 ( .X(sticky_outB[12]), .A1(STICKYB_int), .A2(QPB_int[12]) );
VIRL_SDN_AN2_1 and_sticky_outB_13 ( .X(sticky_outB[13]), .A1(STICKYB_int), .A2(QPB_int[13]) );
VIRL_SDN_AN2_1 and_sticky_outB_14 ( .X(sticky_outB[14]), .A1(STICKYB_int), .A2(QPB_int[14]) );
VIRL_SDN_AN2_1 and_sticky_outB_15 ( .X(sticky_outB[15]), .A1(STICKYB_int), .A2(QPB_int[15]) );
VIRL_SDN_AN2_1 and_sticky_outB_16 ( .X(sticky_outB[16]), .A1(STICKYB_int), .A2(QPB_int[16]) );
VIRL_SDN_AN2_1 and_sticky_outB_17 ( .X(sticky_outB[17]), .A1(STICKYB_int), .A2(QPB_int[17]) );
VIRL_SDN_AN2_1 and_sticky_outB_18 ( .X(sticky_outB[18]), .A1(STICKYB_int), .A2(QPB_int[18]) );
VIRL_SDN_AN2_1 and_sticky_outB_19 ( .X(sticky_outB[19]), .A1(STICKYB_int), .A2(QPB_int[19]) );
VIRL_SDN_AN2_1 and_sticky_outB_20 ( .X(sticky_outB[20]), .A1(STICKYB_int), .A2(QPB_int[20]) );
VIRL_SDN_AN2_1 and_sticky_outB_21 ( .X(sticky_outB[21]), .A1(STICKYB_int), .A2(QPB_int[21]) );
VIRL_SDN_AN2_1 and_sticky_outB_22 ( .X(sticky_outB[22]), .A1(STICKYB_int), .A2(QPB_int[22]) );
VIRL_SDN_AN2_1 and_sticky_outB_23 ( .X(sticky_outB[23]), .A1(STICKYB_int), .A2(QPB_int[23]) );
VIRL_SDN_AN2_1 and_sticky_outB_24 ( .X(sticky_outB[24]), .A1(STICKYB_int), .A2(QPB_int[24]) );
VIRL_SDN_AN2_1 and_sticky_outB_25 ( .X(sticky_outB[25]), .A1(STICKYB_int), .A2(QPB_int[25]) );
VIRL_SDN_AN2_1 and_sticky_outB_26 ( .X(sticky_outB[26]), .A1(STICKYB_int), .A2(QPB_int[26]) );
VIRL_SDN_AN2_1 and_sticky_outB_27 ( .X(sticky_outB[27]), .A1(STICKYB_int), .A2(QPB_int[27]) );
VIRL_SDN_AN2_1 and_sticky_outB_28 ( .X(sticky_outB[28]), .A1(STICKYB_int), .A2(QPB_int[28]) );
VIRL_SDN_AN2_1 and_sticky_outB_29 ( .X(sticky_outB[29]), .A1(STICKYB_int), .A2(QPB_int[29]) );
VIRL_SDN_AN2_1 and_sticky_outB_30 ( .X(sticky_outB[30]), .A1(STICKYB_int), .A2(QPB_int[30]) );
VIRL_SDN_AN2_1 and_sticky_outB_31 ( .X(sticky_outB[31]), .A1(STICKYB_int), .A2(QPB_int[31]) );

VIRL_SDN_OR2_1 or_err_stickyB_0 ( .X(er_styB[0]), .A1(sticky_outB[0]), .A2(ErrB[0]) );
VIRL_SDN_OR2_1 or_err_stickyB_1 ( .X(er_styB[1]), .A1(sticky_outB[1]), .A2(ErrB[1]) );
VIRL_SDN_OR2_1 or_err_stickyB_2 ( .X(er_styB[2]), .A1(sticky_outB[2]), .A2(ErrB[2]) );
VIRL_SDN_OR2_1 or_err_stickyB_3 ( .X(er_styB[3]), .A1(sticky_outB[3]), .A2(ErrB[3]) );
VIRL_SDN_OR2_1 or_err_stickyB_4 ( .X(er_styB[4]), .A1(sticky_outB[4]), .A2(ErrB[4]) );
VIRL_SDN_OR2_1 or_err_stickyB_5 ( .X(er_styB[5]), .A1(sticky_outB[5]), .A2(ErrB[5]) );
VIRL_SDN_OR2_1 or_err_stickyB_6 ( .X(er_styB[6]), .A1(sticky_outB[6]), .A2(ErrB[6]) );
VIRL_SDN_OR2_1 or_err_stickyB_7 ( .X(er_styB[7]), .A1(sticky_outB[7]), .A2(ErrB[7]) );
VIRL_SDN_OR2_1 or_err_stickyB_8 ( .X(er_styB[8]), .A1(sticky_outB[8]), .A2(ErrB[8]) );
VIRL_SDN_OR2_1 or_err_stickyB_9 ( .X(er_styB[9]), .A1(sticky_outB[9]), .A2(ErrB[9]) );
VIRL_SDN_OR2_1 or_err_stickyB_10 ( .X(er_styB[10]), .A1(sticky_outB[10]), .A2(ErrB[10]) );
VIRL_SDN_OR2_1 or_err_stickyB_11 ( .X(er_styB[11]), .A1(sticky_outB[11]), .A2(ErrB[11]) );
VIRL_SDN_OR2_1 or_err_stickyB_12 ( .X(er_styB[12]), .A1(sticky_outB[12]), .A2(ErrB[12]) );
VIRL_SDN_OR2_1 or_err_stickyB_13 ( .X(er_styB[13]), .A1(sticky_outB[13]), .A2(ErrB[13]) );
VIRL_SDN_OR2_1 or_err_stickyB_14 ( .X(er_styB[14]), .A1(sticky_outB[14]), .A2(ErrB[14]) );
VIRL_SDN_OR2_1 or_err_stickyB_15 ( .X(er_styB[15]), .A1(sticky_outB[15]), .A2(ErrB[15]) );
VIRL_SDN_OR2_1 or_err_stickyB_16 ( .X(er_styB[16]), .A1(sticky_outB[16]), .A2(ErrB[16]) );
VIRL_SDN_OR2_1 or_err_stickyB_17 ( .X(er_styB[17]), .A1(sticky_outB[17]), .A2(ErrB[17]) );
VIRL_SDN_OR2_1 or_err_stickyB_18 ( .X(er_styB[18]), .A1(sticky_outB[18]), .A2(ErrB[18]) );
VIRL_SDN_OR2_1 or_err_stickyB_19 ( .X(er_styB[19]), .A1(sticky_outB[19]), .A2(ErrB[19]) );
VIRL_SDN_OR2_1 or_err_stickyB_20 ( .X(er_styB[20]), .A1(sticky_outB[20]), .A2(ErrB[20]) );
VIRL_SDN_OR2_1 or_err_stickyB_21 ( .X(er_styB[21]), .A1(sticky_outB[21]), .A2(ErrB[21]) );
VIRL_SDN_OR2_1 or_err_stickyB_22 ( .X(er_styB[22]), .A1(sticky_outB[22]), .A2(ErrB[22]) );
VIRL_SDN_OR2_1 or_err_stickyB_23 ( .X(er_styB[23]), .A1(sticky_outB[23]), .A2(ErrB[23]) );
VIRL_SDN_OR2_1 or_err_stickyB_24 ( .X(er_styB[24]), .A1(sticky_outB[24]), .A2(ErrB[24]) );
VIRL_SDN_OR2_1 or_err_stickyB_25 ( .X(er_styB[25]), .A1(sticky_outB[25]), .A2(ErrB[25]) );
VIRL_SDN_OR2_1 or_err_stickyB_26 ( .X(er_styB[26]), .A1(sticky_outB[26]), .A2(ErrB[26]) );
VIRL_SDN_OR2_1 or_err_stickyB_27 ( .X(er_styB[27]), .A1(sticky_outB[27]), .A2(ErrB[27]) );
VIRL_SDN_OR2_1 or_err_stickyB_28 ( .X(er_styB[28]), .A1(sticky_outB[28]), .A2(ErrB[28]) );
VIRL_SDN_OR2_1 or_err_stickyB_29 ( .X(er_styB[29]), .A1(sticky_outB[29]), .A2(ErrB[29]) );
VIRL_SDN_OR2_1 or_err_stickyB_30 ( .X(er_styB[30]), .A1(sticky_outB[30]), .A2(ErrB[30]) );
VIRL_SDN_OR2_1 or_err_stickyB_31 ( .X(er_styB[31]), .A1(sticky_outB[31]), .A2(ErrB[31]) );


VIRL_SDN_BUF_1 buf_SO_QA_out (.X(SO_QA_buf), .A(QPA_int[31]));
VIRL_SDN_MSDPRB_1 ff_QPA_int_31 (.Q(QPA_int[31]), .CK(ls_clk_pipA), .D(er_styA[31]), .SI(QPA_int[30]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_30 (.Q(QPA_int[30]), .CK(ls_clk_pipA), .D(er_styA[30]), .SI(QPA_int[29]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_29 (.Q(QPA_int[29]), .CK(ls_clk_pipA), .D(er_styA[29]), .SI(QPA_int[28]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_28 (.Q(QPA_int[28]), .CK(ls_clk_pipA), .D(er_styA[28]), .SI(QPA_int[27]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_27 (.Q(QPA_int[27]), .CK(ls_clk_pipA), .D(er_styA[27]), .SI(QPA_int[26]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_26 (.Q(QPA_int[26]), .CK(ls_clk_pipA), .D(er_styA[26]), .SI(QPA_int[25]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_25 (.Q(QPA_int[25]), .CK(ls_clk_pipA), .D(er_styA[25]), .SI(QPA_int[24]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_24 (.Q(QPA_int[24]), .CK(ls_clk_pipA), .D(er_styA[24]), .SI(QPA_int[23]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_23 (.Q(QPA_int[23]), .CK(ls_clk_pipA), .D(er_styA[23]), .SI(QPA_int[22]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_22 (.Q(QPA_int[22]), .CK(ls_clk_pipA), .D(er_styA[22]), .SI(QPA_int[21]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_21 (.Q(QPA_int[21]), .CK(ls_clk_pipA), .D(er_styA[21]), .SI(QPA_int[20]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_20 (.Q(QPA_int[20]), .CK(ls_clk_pipA), .D(er_styA[20]), .SI(QPA_int[19]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_19 (.Q(QPA_int[19]), .CK(ls_clk_pipA), .D(er_styA[19]), .SI(QPA_int[18]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_18 (.Q(QPA_int[18]), .CK(ls_clk_pipA), .D(er_styA[18]), .SI(QPA_int[17]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_17 (.Q(QPA_int[17]), .CK(ls_clk_pipA), .D(er_styA[17]), .SI(QPA_int[16]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_16 (.Q(QPA_int[16]), .CK(ls_clk_pipA), .D(er_styA[16]), .SI(QPA_int[15]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_15 (.Q(QPA_int[15]), .CK(ls_clk_pipA), .D(er_styA[15]), .SI(QPA_int[14]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_14 (.Q(QPA_int[14]), .CK(ls_clk_pipA), .D(er_styA[14]), .SI(QPA_int[13]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_13 (.Q(QPA_int[13]), .CK(ls_clk_pipA), .D(er_styA[13]), .SI(QPA_int[12]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_12 (.Q(QPA_int[12]), .CK(ls_clk_pipA), .D(er_styA[12]), .SI(QPA_int[11]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_11 (.Q(QPA_int[11]), .CK(ls_clk_pipA), .D(er_styA[11]), .SI(QPA_int[10]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_10 (.Q(QPA_int[10]), .CK(ls_clk_pipA), .D(er_styA[10]), .SI(QPA_int[9]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_9 (.Q(QPA_int[9]), .CK(ls_clk_pipA), .D(er_styA[9]), .SI(QPA_int[8]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_8 (.Q(QPA_int[8]), .CK(ls_clk_pipA), .D(er_styA[8]), .SI(QPA_int[7]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_7 (.Q(QPA_int[7]), .CK(ls_clk_pipA), .D(er_styA[7]), .SI(QPA_int[6]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_6 (.Q(QPA_int[6]), .CK(ls_clk_pipA), .D(er_styA[6]), .SI(QPA_int[5]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_5 (.Q(QPA_int[5]), .CK(ls_clk_pipA), .D(er_styA[5]), .SI(QPA_int[4]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_4 (.Q(QPA_int[4]), .CK(ls_clk_pipA), .D(er_styA[4]), .SI(QPA_int[3]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_3 (.Q(QPA_int[3]), .CK(ls_clk_pipA), .D(er_styA[3]), .SI(QPA_int[2]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_2 (.Q(QPA_int[2]), .CK(ls_clk_pipA), .D(er_styA[2]), .SI(QPA_int[1]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_1 (.Q(QPA_int[1]), .CK(ls_clk_pipA), .D(er_styA[1]), .SI(QPA_int[0]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_0 (.Q(QPA_int[0]), .CK(ls_clk_pipA), .D(er_styA[0]), .SI(SI_QA_buf), .SE(SE_QA_buf), .RD(flag_si_qA));
wire [31:0] flag_dA_bit;
assign flag_dA_bit = flag_dA_viol & {{31{flag_dA}},{flag_si_dA}};

VIRL_SDN_BUF_1 buf_SO_DA_out (.X(SO_DA_buf), .A(DA_int[31]));
VIRL_SDN_MSDPRB_1 ff_DA_int_31 (.Q(DA_int[31]), .CK(ls_clk_memA), .D(dtA[31]), .SI(DA_int[30]), .SE(SE_INA_buf), .RD(flag_dA_bit[31]));
VIRL_SDN_MSDPRB_1 ff_DA_int_30 (.Q(DA_int[30]), .CK(ls_clk_memA), .D(dtA[30]), .SI(DA_int[29]), .SE(SE_INA_buf), .RD(flag_dA_bit[30]));
VIRL_SDN_MSDPRB_1 ff_DA_int_29 (.Q(DA_int[29]), .CK(ls_clk_memA), .D(dtA[29]), .SI(DA_int[28]), .SE(SE_INA_buf), .RD(flag_dA_bit[29]));
VIRL_SDN_MSDPRB_1 ff_DA_int_28 (.Q(DA_int[28]), .CK(ls_clk_memA), .D(dtA[28]), .SI(DA_int[27]), .SE(SE_INA_buf), .RD(flag_dA_bit[28]));
VIRL_SDN_MSDPRB_1 ff_DA_int_27 (.Q(DA_int[27]), .CK(ls_clk_memA), .D(dtA[27]), .SI(DA_int[26]), .SE(SE_INA_buf), .RD(flag_dA_bit[27]));
VIRL_SDN_MSDPRB_1 ff_DA_int_26 (.Q(DA_int[26]), .CK(ls_clk_memA), .D(dtA[26]), .SI(DA_int[25]), .SE(SE_INA_buf), .RD(flag_dA_bit[26]));
VIRL_SDN_MSDPRB_1 ff_DA_int_25 (.Q(DA_int[25]), .CK(ls_clk_memA), .D(dtA[25]), .SI(DA_int[24]), .SE(SE_INA_buf), .RD(flag_dA_bit[25]));
VIRL_SDN_MSDPRB_1 ff_DA_int_24 (.Q(DA_int[24]), .CK(ls_clk_memA), .D(dtA[24]), .SI(DA_int[23]), .SE(SE_INA_buf), .RD(flag_dA_bit[24]));
VIRL_SDN_MSDPRB_1 ff_DA_int_23 (.Q(DA_int[23]), .CK(ls_clk_memA), .D(dtA[23]), .SI(DA_int[22]), .SE(SE_INA_buf), .RD(flag_dA_bit[23]));
VIRL_SDN_MSDPRB_1 ff_DA_int_22 (.Q(DA_int[22]), .CK(ls_clk_memA), .D(dtA[22]), .SI(DA_int[21]), .SE(SE_INA_buf), .RD(flag_dA_bit[22]));
VIRL_SDN_MSDPRB_1 ff_DA_int_21 (.Q(DA_int[21]), .CK(ls_clk_memA), .D(dtA[21]), .SI(DA_int[20]), .SE(SE_INA_buf), .RD(flag_dA_bit[21]));
VIRL_SDN_MSDPRB_1 ff_DA_int_20 (.Q(DA_int[20]), .CK(ls_clk_memA), .D(dtA[20]), .SI(DA_int[19]), .SE(SE_INA_buf), .RD(flag_dA_bit[20]));
VIRL_SDN_MSDPRB_1 ff_DA_int_19 (.Q(DA_int[19]), .CK(ls_clk_memA), .D(dtA[19]), .SI(DA_int[18]), .SE(SE_INA_buf), .RD(flag_dA_bit[19]));
VIRL_SDN_MSDPRB_1 ff_DA_int_18 (.Q(DA_int[18]), .CK(ls_clk_memA), .D(dtA[18]), .SI(DA_int[17]), .SE(SE_INA_buf), .RD(flag_dA_bit[18]));
VIRL_SDN_MSDPRB_1 ff_DA_int_17 (.Q(DA_int[17]), .CK(ls_clk_memA), .D(dtA[17]), .SI(DA_int[16]), .SE(SE_INA_buf), .RD(flag_dA_bit[17]));
VIRL_SDN_MSDPRB_1 ff_DA_int_16 (.Q(DA_int[16]), .CK(ls_clk_memA), .D(dtA[16]), .SI(DA_int[15]), .SE(SE_INA_buf), .RD(flag_dA_bit[16]));
VIRL_SDN_MSDPRB_1 ff_DA_int_15 (.Q(DA_int[15]), .CK(ls_clk_memA), .D(dtA[15]), .SI(DA_int[14]), .SE(SE_INA_buf), .RD(flag_dA_bit[15]));
VIRL_SDN_MSDPRB_1 ff_DA_int_14 (.Q(DA_int[14]), .CK(ls_clk_memA), .D(dtA[14]), .SI(DA_int[13]), .SE(SE_INA_buf), .RD(flag_dA_bit[14]));
VIRL_SDN_MSDPRB_1 ff_DA_int_13 (.Q(DA_int[13]), .CK(ls_clk_memA), .D(dtA[13]), .SI(DA_int[12]), .SE(SE_INA_buf), .RD(flag_dA_bit[13]));
VIRL_SDN_MSDPRB_1 ff_DA_int_12 (.Q(DA_int[12]), .CK(ls_clk_memA), .D(dtA[12]), .SI(DA_int[11]), .SE(SE_INA_buf), .RD(flag_dA_bit[12]));
VIRL_SDN_MSDPRB_1 ff_DA_int_11 (.Q(DA_int[11]), .CK(ls_clk_memA), .D(dtA[11]), .SI(DA_int[10]), .SE(SE_INA_buf), .RD(flag_dA_bit[11]));
VIRL_SDN_MSDPRB_1 ff_DA_int_10 (.Q(DA_int[10]), .CK(ls_clk_memA), .D(dtA[10]), .SI(DA_int[9]), .SE(SE_INA_buf), .RD(flag_dA_bit[10]));
VIRL_SDN_MSDPRB_1 ff_DA_int_9 (.Q(DA_int[9]), .CK(ls_clk_memA), .D(dtA[9]), .SI(DA_int[8]), .SE(SE_INA_buf), .RD(flag_dA_bit[9]));
VIRL_SDN_MSDPRB_1 ff_DA_int_8 (.Q(DA_int[8]), .CK(ls_clk_memA), .D(dtA[8]), .SI(DA_int[7]), .SE(SE_INA_buf), .RD(flag_dA_bit[8]));
VIRL_SDN_MSDPRB_1 ff_DA_int_7 (.Q(DA_int[7]), .CK(ls_clk_memA), .D(dtA[7]), .SI(DA_int[6]), .SE(SE_INA_buf), .RD(flag_dA_bit[7]));
VIRL_SDN_MSDPRB_1 ff_DA_int_6 (.Q(DA_int[6]), .CK(ls_clk_memA), .D(dtA[6]), .SI(DA_int[5]), .SE(SE_INA_buf), .RD(flag_dA_bit[6]));
VIRL_SDN_MSDPRB_1 ff_DA_int_5 (.Q(DA_int[5]), .CK(ls_clk_memA), .D(dtA[5]), .SI(DA_int[4]), .SE(SE_INA_buf), .RD(flag_dA_bit[5]));
VIRL_SDN_MSDPRB_1 ff_DA_int_4 (.Q(DA_int[4]), .CK(ls_clk_memA), .D(dtA[4]), .SI(DA_int[3]), .SE(SE_INA_buf), .RD(flag_dA_bit[4]));
VIRL_SDN_MSDPRB_1 ff_DA_int_3 (.Q(DA_int[3]), .CK(ls_clk_memA), .D(dtA[3]), .SI(DA_int[2]), .SE(SE_INA_buf), .RD(flag_dA_bit[3]));
VIRL_SDN_MSDPRB_1 ff_DA_int_2 (.Q(DA_int[2]), .CK(ls_clk_memA), .D(dtA[2]), .SI(DA_int[1]), .SE(SE_INA_buf), .RD(flag_dA_bit[2]));
VIRL_SDN_MSDPRB_1 ff_DA_int_1 (.Q(DA_int[1]), .CK(ls_clk_memA), .D(dtA[1]), .SI(DA_int[0]), .SE(SE_INA_buf), .RD(flag_dA_bit[1]));
VIRL_SDN_MSDPRB_1 ff_DA_int_0 (.Q(DA_int[0]), .CK(ls_clk_memA), .D(dtA[0]), .SI(SI_DA_buf), .SE(SE_INA_buf), .RD(flag_dA_bit[0]));

VIRL_SDN_BUF_1 buf_SO_CNTRA_out (.X(SO_CNTRA_buf), .A(STICKYA_int));
VIRL_SDN_MSDPRB_1 ff_STICKYA_int (.Q(STICKYA_int), .CK(ls_mclkA), .D(STICKYA_buf), .SI(CAPTA_int), .SE(SE_INA_buf), .RD(flag_stickyA));
VIRL_SDN_MSDPRB_1 ff_CAPTA_int (.Q(CAPTA_int), .CK(ls_mclkA), .D(CAPTA_buf), .SI(CDA_int[3]), .SE(SE_INA_buf), .RD(flag_captA));
wire [3:0] flag_cdA_bit;
assign flag_cdA_bit = flag_cdA_viol & {4{flag_cdA}};
VIRL_SDN_MSDPRB_1 ff_CDA_int_3 (.Q(CDA_int[3]), .CK(ls_mclkA), .D(CDA_buf[3]), .SI(CDA_int[2]), .SE(SE_INA_buf), .RD(flag_cdA_bit[3]));
VIRL_SDN_MSDPRB_1 ff_CDA_int_2 (.Q(CDA_int[2]), .CK(ls_mclkA), .D(CDA_buf[2]), .SI(CDA_int[1]), .SE(SE_INA_buf), .RD(flag_cdA_bit[2]));
VIRL_SDN_MSDPRB_1 ff_CDA_int_1 (.Q(CDA_int[1]), .CK(ls_mclkA), .D(CDA_buf[1]), .SI(CDA_int[0]), .SE(SE_INA_buf), .RD(flag_cdA_bit[1]));
VIRL_SDN_MSDPRB_1 ff_CDA_int_0 (.Q(CDA_int[0]), .CK(ls_mclkA), .D(CDA_buf[0]), .SI(PIPEMEA_int), .SE(SE_INA_buf), .RD(flag_cdA_bit[0]));
VIRL_SDN_MSDPRB_1 ff_PIPEMEA_int (.Q(PIPEMEA_int), .CK(ls_mclkA), .D(PIPEMEA_mout), .SI(MEA_int), .SE(SE_INA_buf), .RD(flag_pipemeA));
VIRL_SDN_MSDPRB_1 ff_MEA_int (.Q(MEA_int), .CK(ls_mclkA), .D(MEA_mout), .SI(WEA_int), .SE(SE_INA_buf), .RD(flag_meA));
VIRL_SDN_MSDPRB_1 ff_WEA_int (.Q(WEA_int), .CK(ls_clk_memA), .D(WEA_mout), .SI(ADRA_int[14]), .SE(SE_INA_buf), .RD(flag_weA));

wire [10:0] flag_addrA_bit;
assign flag_addrA_bit = flag_addrA_viol & {{10{flag_addrA}},{flag_si_cntrA}};

VIRL_SDN_MSDPRB_1 ff_ADRA_int_0 (.Q(ADRA_int[0]), .CK(ls_clk_memA), .D(ADRA_mout[0]), .SI(SI_CNTRA_buf), .SE(SE_INA_buf), .RD(flag_addrA_bit[0]));
VIRL_SDN_MSDPRB_1 ff_ADRA_int_1 (.Q(ADRA_int[1]), .CK(ls_clk_memA), .D(ADRA_mout[1]), .SI(ADRA_int[0]), .SE(SE_INA_buf), .RD(flag_addrA_bit[1]));
VIRL_SDN_MSDPRB_1 ff_ADRA_int_2 (.Q(ADRA_int[2]), .CK(ls_clk_memA), .D(ADRA_mout[2]), .SI(ADRA_int[1]), .SE(SE_INA_buf), .RD(flag_addrA_bit[2]));
VIRL_SDN_MSDPRB_1 ff_ADRA_int_3 (.Q(ADRA_int[3]), .CK(ls_clk_memA), .D(1'b0), .SI(ADRA_int[2]), .SE(SE_INA_buf), .RD(flag_addrA));
VIRL_SDN_MSDPRB_1 ff_ADRA_int_4 (.Q(ADRA_int[4]), .CK(ls_clk_memA), .D(ADRA_mout[3]), .SI(ADRA_int[3]), .SE(SE_INA_buf), .RD(flag_addrA_bit[3]));
VIRL_SDN_MSDPRB_1 ff_ADRA_int_5 (.Q(ADRA_int[5]), .CK(ls_clk_memA), .D(ADRA_mout[4]), .SI(ADRA_int[4]), .SE(SE_INA_buf), .RD(flag_addrA_bit[4]));
VIRL_SDN_MSDPRB_1 ff_ADRA_int_6 (.Q(ADRA_int[6]), .CK(ls_clk_memA), .D(ADRA_mout[5]), .SI(ADRA_int[5]), .SE(SE_INA_buf), .RD(flag_addrA_bit[5]));
VIRL_SDN_MSDPRB_1 ff_ADRA_int_7 (.Q(ADRA_int[7]), .CK(ls_clk_memA), .D(1'b0), .SI(ADRA_int[6]), .SE(SE_INA_buf), .RD(flag_addrA));
VIRL_SDN_MSDPRB_1 ff_ADRA_int_8 (.Q(ADRA_int[8]), .CK(ls_clk_memA), .D(1'b0), .SI(ADRA_int[7]), .SE(SE_INA_buf), .RD(flag_addrA));
VIRL_SDN_MSDPRB_1 ff_ADRA_int_9 (.Q(ADRA_int[9]), .CK(ls_clk_memA), .D(ADRA_mout[6]), .SI(ADRA_int[8]), .SE(SE_INA_buf), .RD(flag_addrA_bit[6]));
VIRL_SDN_MSDPRB_1 ff_ADRA_int_10 (.Q(ADRA_int[10]), .CK(ls_clk_memA), .D(ADRA_mout[7]), .SI(ADRA_int[9]), .SE(SE_INA_buf), .RD(flag_addrA_bit[7]));
VIRL_SDN_MSDPRB_1 ff_ADRA_int_11 (.Q(ADRA_int[11]), .CK(ls_clk_memA), .D(ADRA_mout[8]), .SI(ADRA_int[10]), .SE(SE_INA_buf), .RD(flag_addrA_bit[8]));
VIRL_SDN_MSDPRB_1 ff_ADRA_int_12 (.Q(ADRA_int[12]), .CK(ls_clk_memA), .D(ADRA_mout[9]), .SI(ADRA_int[11]), .SE(SE_INA_buf), .RD(flag_addrA_bit[9]));
VIRL_SDN_MSDPRB_1 ff_ADRA_int_13 (.Q(ADRA_int[13]), .CK(ls_clk_memA), .D(ADRA_mout[10]), .SI(ADRA_int[12]), .SE(SE_INA_buf), .RD(flag_addrA_bit[10]));
VIRL_SDN_MSDPRB_1 ff_ADRA_int_14 (.Q(ADRA_int[14]), .CK(ls_clk_memA), .D(1'b0), .SI(ADRA_int[13]), .SE(SE_INA_buf), .RD(flag_addrA));

VIRL_SDN_BUF_1 buf_SO_QB_out (.X(SO_QB_buf), .A(QPB_int[31]));
VIRL_SDN_MSDPRB_1 ff_QPB_int_31 (.Q(QPB_int[31]), .CK(ls_clk_pipB), .D(er_styB[31]), .SI(QPB_int[30]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_30 (.Q(QPB_int[30]), .CK(ls_clk_pipB), .D(er_styB[30]), .SI(QPB_int[29]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_29 (.Q(QPB_int[29]), .CK(ls_clk_pipB), .D(er_styB[29]), .SI(QPB_int[28]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_28 (.Q(QPB_int[28]), .CK(ls_clk_pipB), .D(er_styB[28]), .SI(QPB_int[27]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_27 (.Q(QPB_int[27]), .CK(ls_clk_pipB), .D(er_styB[27]), .SI(QPB_int[26]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_26 (.Q(QPB_int[26]), .CK(ls_clk_pipB), .D(er_styB[26]), .SI(QPB_int[25]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_25 (.Q(QPB_int[25]), .CK(ls_clk_pipB), .D(er_styB[25]), .SI(QPB_int[24]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_24 (.Q(QPB_int[24]), .CK(ls_clk_pipB), .D(er_styB[24]), .SI(QPB_int[23]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_23 (.Q(QPB_int[23]), .CK(ls_clk_pipB), .D(er_styB[23]), .SI(QPB_int[22]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_22 (.Q(QPB_int[22]), .CK(ls_clk_pipB), .D(er_styB[22]), .SI(QPB_int[21]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_21 (.Q(QPB_int[21]), .CK(ls_clk_pipB), .D(er_styB[21]), .SI(QPB_int[20]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_20 (.Q(QPB_int[20]), .CK(ls_clk_pipB), .D(er_styB[20]), .SI(QPB_int[19]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_19 (.Q(QPB_int[19]), .CK(ls_clk_pipB), .D(er_styB[19]), .SI(QPB_int[18]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_18 (.Q(QPB_int[18]), .CK(ls_clk_pipB), .D(er_styB[18]), .SI(QPB_int[17]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_17 (.Q(QPB_int[17]), .CK(ls_clk_pipB), .D(er_styB[17]), .SI(QPB_int[16]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_16 (.Q(QPB_int[16]), .CK(ls_clk_pipB), .D(er_styB[16]), .SI(QPB_int[15]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_15 (.Q(QPB_int[15]), .CK(ls_clk_pipB), .D(er_styB[15]), .SI(QPB_int[14]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_14 (.Q(QPB_int[14]), .CK(ls_clk_pipB), .D(er_styB[14]), .SI(QPB_int[13]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_13 (.Q(QPB_int[13]), .CK(ls_clk_pipB), .D(er_styB[13]), .SI(QPB_int[12]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_12 (.Q(QPB_int[12]), .CK(ls_clk_pipB), .D(er_styB[12]), .SI(QPB_int[11]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_11 (.Q(QPB_int[11]), .CK(ls_clk_pipB), .D(er_styB[11]), .SI(QPB_int[10]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_10 (.Q(QPB_int[10]), .CK(ls_clk_pipB), .D(er_styB[10]), .SI(QPB_int[9]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_9 (.Q(QPB_int[9]), .CK(ls_clk_pipB), .D(er_styB[9]), .SI(QPB_int[8]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_8 (.Q(QPB_int[8]), .CK(ls_clk_pipB), .D(er_styB[8]), .SI(QPB_int[7]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_7 (.Q(QPB_int[7]), .CK(ls_clk_pipB), .D(er_styB[7]), .SI(QPB_int[6]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_6 (.Q(QPB_int[6]), .CK(ls_clk_pipB), .D(er_styB[6]), .SI(QPB_int[5]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_5 (.Q(QPB_int[5]), .CK(ls_clk_pipB), .D(er_styB[5]), .SI(QPB_int[4]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_4 (.Q(QPB_int[4]), .CK(ls_clk_pipB), .D(er_styB[4]), .SI(QPB_int[3]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_3 (.Q(QPB_int[3]), .CK(ls_clk_pipB), .D(er_styB[3]), .SI(QPB_int[2]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_2 (.Q(QPB_int[2]), .CK(ls_clk_pipB), .D(er_styB[2]), .SI(QPB_int[1]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_1 (.Q(QPB_int[1]), .CK(ls_clk_pipB), .D(er_styB[1]), .SI(QPB_int[0]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_0 (.Q(QPB_int[0]), .CK(ls_clk_pipB), .D(er_styB[0]), .SI(SI_QB_buf), .SE(SE_QB_buf), .RD(flag_si_qB));
wire [31:0] flag_dB_bit;
assign flag_dB_bit = flag_dB_viol & {{31{flag_dB}},{flag_si_dB}};

VIRL_SDN_BUF_1 buf_SO_DB_out (.X(SO_DB_buf), .A(DB_int[31]));
VIRL_SDN_MSDPRB_1 ff_DB_int_31 (.Q(DB_int[31]), .CK(ls_clk_memB), .D(dtB[31]), .SI(DB_int[30]), .SE(SE_INB_buf), .RD(flag_dB_bit[31]));
VIRL_SDN_MSDPRB_1 ff_DB_int_30 (.Q(DB_int[30]), .CK(ls_clk_memB), .D(dtB[30]), .SI(DB_int[29]), .SE(SE_INB_buf), .RD(flag_dB_bit[30]));
VIRL_SDN_MSDPRB_1 ff_DB_int_29 (.Q(DB_int[29]), .CK(ls_clk_memB), .D(dtB[29]), .SI(DB_int[28]), .SE(SE_INB_buf), .RD(flag_dB_bit[29]));
VIRL_SDN_MSDPRB_1 ff_DB_int_28 (.Q(DB_int[28]), .CK(ls_clk_memB), .D(dtB[28]), .SI(DB_int[27]), .SE(SE_INB_buf), .RD(flag_dB_bit[28]));
VIRL_SDN_MSDPRB_1 ff_DB_int_27 (.Q(DB_int[27]), .CK(ls_clk_memB), .D(dtB[27]), .SI(DB_int[26]), .SE(SE_INB_buf), .RD(flag_dB_bit[27]));
VIRL_SDN_MSDPRB_1 ff_DB_int_26 (.Q(DB_int[26]), .CK(ls_clk_memB), .D(dtB[26]), .SI(DB_int[25]), .SE(SE_INB_buf), .RD(flag_dB_bit[26]));
VIRL_SDN_MSDPRB_1 ff_DB_int_25 (.Q(DB_int[25]), .CK(ls_clk_memB), .D(dtB[25]), .SI(DB_int[24]), .SE(SE_INB_buf), .RD(flag_dB_bit[25]));
VIRL_SDN_MSDPRB_1 ff_DB_int_24 (.Q(DB_int[24]), .CK(ls_clk_memB), .D(dtB[24]), .SI(DB_int[23]), .SE(SE_INB_buf), .RD(flag_dB_bit[24]));
VIRL_SDN_MSDPRB_1 ff_DB_int_23 (.Q(DB_int[23]), .CK(ls_clk_memB), .D(dtB[23]), .SI(DB_int[22]), .SE(SE_INB_buf), .RD(flag_dB_bit[23]));
VIRL_SDN_MSDPRB_1 ff_DB_int_22 (.Q(DB_int[22]), .CK(ls_clk_memB), .D(dtB[22]), .SI(DB_int[21]), .SE(SE_INB_buf), .RD(flag_dB_bit[22]));
VIRL_SDN_MSDPRB_1 ff_DB_int_21 (.Q(DB_int[21]), .CK(ls_clk_memB), .D(dtB[21]), .SI(DB_int[20]), .SE(SE_INB_buf), .RD(flag_dB_bit[21]));
VIRL_SDN_MSDPRB_1 ff_DB_int_20 (.Q(DB_int[20]), .CK(ls_clk_memB), .D(dtB[20]), .SI(DB_int[19]), .SE(SE_INB_buf), .RD(flag_dB_bit[20]));
VIRL_SDN_MSDPRB_1 ff_DB_int_19 (.Q(DB_int[19]), .CK(ls_clk_memB), .D(dtB[19]), .SI(DB_int[18]), .SE(SE_INB_buf), .RD(flag_dB_bit[19]));
VIRL_SDN_MSDPRB_1 ff_DB_int_18 (.Q(DB_int[18]), .CK(ls_clk_memB), .D(dtB[18]), .SI(DB_int[17]), .SE(SE_INB_buf), .RD(flag_dB_bit[18]));
VIRL_SDN_MSDPRB_1 ff_DB_int_17 (.Q(DB_int[17]), .CK(ls_clk_memB), .D(dtB[17]), .SI(DB_int[16]), .SE(SE_INB_buf), .RD(flag_dB_bit[17]));
VIRL_SDN_MSDPRB_1 ff_DB_int_16 (.Q(DB_int[16]), .CK(ls_clk_memB), .D(dtB[16]), .SI(DB_int[15]), .SE(SE_INB_buf), .RD(flag_dB_bit[16]));
VIRL_SDN_MSDPRB_1 ff_DB_int_15 (.Q(DB_int[15]), .CK(ls_clk_memB), .D(dtB[15]), .SI(DB_int[14]), .SE(SE_INB_buf), .RD(flag_dB_bit[15]));
VIRL_SDN_MSDPRB_1 ff_DB_int_14 (.Q(DB_int[14]), .CK(ls_clk_memB), .D(dtB[14]), .SI(DB_int[13]), .SE(SE_INB_buf), .RD(flag_dB_bit[14]));
VIRL_SDN_MSDPRB_1 ff_DB_int_13 (.Q(DB_int[13]), .CK(ls_clk_memB), .D(dtB[13]), .SI(DB_int[12]), .SE(SE_INB_buf), .RD(flag_dB_bit[13]));
VIRL_SDN_MSDPRB_1 ff_DB_int_12 (.Q(DB_int[12]), .CK(ls_clk_memB), .D(dtB[12]), .SI(DB_int[11]), .SE(SE_INB_buf), .RD(flag_dB_bit[12]));
VIRL_SDN_MSDPRB_1 ff_DB_int_11 (.Q(DB_int[11]), .CK(ls_clk_memB), .D(dtB[11]), .SI(DB_int[10]), .SE(SE_INB_buf), .RD(flag_dB_bit[11]));
VIRL_SDN_MSDPRB_1 ff_DB_int_10 (.Q(DB_int[10]), .CK(ls_clk_memB), .D(dtB[10]), .SI(DB_int[9]), .SE(SE_INB_buf), .RD(flag_dB_bit[10]));
VIRL_SDN_MSDPRB_1 ff_DB_int_9 (.Q(DB_int[9]), .CK(ls_clk_memB), .D(dtB[9]), .SI(DB_int[8]), .SE(SE_INB_buf), .RD(flag_dB_bit[9]));
VIRL_SDN_MSDPRB_1 ff_DB_int_8 (.Q(DB_int[8]), .CK(ls_clk_memB), .D(dtB[8]), .SI(DB_int[7]), .SE(SE_INB_buf), .RD(flag_dB_bit[8]));
VIRL_SDN_MSDPRB_1 ff_DB_int_7 (.Q(DB_int[7]), .CK(ls_clk_memB), .D(dtB[7]), .SI(DB_int[6]), .SE(SE_INB_buf), .RD(flag_dB_bit[7]));
VIRL_SDN_MSDPRB_1 ff_DB_int_6 (.Q(DB_int[6]), .CK(ls_clk_memB), .D(dtB[6]), .SI(DB_int[5]), .SE(SE_INB_buf), .RD(flag_dB_bit[6]));
VIRL_SDN_MSDPRB_1 ff_DB_int_5 (.Q(DB_int[5]), .CK(ls_clk_memB), .D(dtB[5]), .SI(DB_int[4]), .SE(SE_INB_buf), .RD(flag_dB_bit[5]));
VIRL_SDN_MSDPRB_1 ff_DB_int_4 (.Q(DB_int[4]), .CK(ls_clk_memB), .D(dtB[4]), .SI(DB_int[3]), .SE(SE_INB_buf), .RD(flag_dB_bit[4]));
VIRL_SDN_MSDPRB_1 ff_DB_int_3 (.Q(DB_int[3]), .CK(ls_clk_memB), .D(dtB[3]), .SI(DB_int[2]), .SE(SE_INB_buf), .RD(flag_dB_bit[3]));
VIRL_SDN_MSDPRB_1 ff_DB_int_2 (.Q(DB_int[2]), .CK(ls_clk_memB), .D(dtB[2]), .SI(DB_int[1]), .SE(SE_INB_buf), .RD(flag_dB_bit[2]));
VIRL_SDN_MSDPRB_1 ff_DB_int_1 (.Q(DB_int[1]), .CK(ls_clk_memB), .D(dtB[1]), .SI(DB_int[0]), .SE(SE_INB_buf), .RD(flag_dB_bit[1]));
VIRL_SDN_MSDPRB_1 ff_DB_int_0 (.Q(DB_int[0]), .CK(ls_clk_memB), .D(dtB[0]), .SI(SI_DB_buf), .SE(SE_INB_buf), .RD(flag_dB_bit[0]));

VIRL_SDN_BUF_1 buf_SO_CNTRB_out (.X(SO_CNTRB_buf), .A(STICKYB_int));
VIRL_SDN_MSDPRB_1 ff_STICKYB_int (.Q(STICKYB_int), .CK(ls_mclkB), .D(STICKYB_buf), .SI(CAPTB_int), .SE(SE_INB_buf), .RD(flag_stickyB));
VIRL_SDN_MSDPRB_1 ff_CAPTB_int (.Q(CAPTB_int), .CK(ls_mclkB), .D(CAPTB_buf), .SI(CDB_int[3]), .SE(SE_INB_buf), .RD(flag_captB));
wire [3:0] flag_cdB_bit;
assign flag_cdB_bit = flag_cdB_viol & {4{flag_cdB}};
VIRL_SDN_MSDPRB_1 ff_CDB_int_3 (.Q(CDB_int[3]), .CK(ls_mclkB), .D(CDB_buf[3]), .SI(CDB_int[2]), .SE(SE_INB_buf), .RD(flag_cdB_bit[3]));
VIRL_SDN_MSDPRB_1 ff_CDB_int_2 (.Q(CDB_int[2]), .CK(ls_mclkB), .D(CDB_buf[2]), .SI(CDB_int[1]), .SE(SE_INB_buf), .RD(flag_cdB_bit[2]));
VIRL_SDN_MSDPRB_1 ff_CDB_int_1 (.Q(CDB_int[1]), .CK(ls_mclkB), .D(CDB_buf[1]), .SI(CDB_int[0]), .SE(SE_INB_buf), .RD(flag_cdB_bit[1]));
VIRL_SDN_MSDPRB_1 ff_CDB_int_0 (.Q(CDB_int[0]), .CK(ls_mclkB), .D(CDB_buf[0]), .SI(PIPEMEB_int), .SE(SE_INB_buf), .RD(flag_cdB_bit[0]));
VIRL_SDN_MSDPRB_1 ff_PIPEMEB_int (.Q(PIPEMEB_int), .CK(ls_mclkB), .D(PIPEMEB_mout), .SI(MEB_int), .SE(SE_INB_buf), .RD(flag_pipemeB));
VIRL_SDN_MSDPRB_1 ff_MEB_int (.Q(MEB_int), .CK(ls_mclkB), .D(MEB_mout), .SI(WEB_int), .SE(SE_INB_buf), .RD(flag_meB));
VIRL_SDN_MSDPRB_1 ff_WEB_int (.Q(WEB_int), .CK(ls_clk_memB), .D(WEB_mout), .SI(ADRB_int[14]), .SE(SE_INB_buf), .RD(flag_weB));

wire [10:0] flag_addrB_bit;
assign flag_addrB_bit = flag_addrB_viol & {{10{flag_addrB}},{flag_si_cntrB}};

VIRL_SDN_MSDPRB_1 ff_ADRB_int_0 (.Q(ADRB_int[0]), .CK(ls_clk_memB), .D(ADRB_mout[0]), .SI(SI_CNTRB_buf), .SE(SE_INB_buf), .RD(flag_addrB_bit[0]));
VIRL_SDN_MSDPRB_1 ff_ADRB_int_1 (.Q(ADRB_int[1]), .CK(ls_clk_memB), .D(ADRB_mout[1]), .SI(ADRB_int[0]), .SE(SE_INB_buf), .RD(flag_addrB_bit[1]));
VIRL_SDN_MSDPRB_1 ff_ADRB_int_2 (.Q(ADRB_int[2]), .CK(ls_clk_memB), .D(ADRB_mout[2]), .SI(ADRB_int[1]), .SE(SE_INB_buf), .RD(flag_addrB_bit[2]));
VIRL_SDN_MSDPRB_1 ff_ADRB_int_3 (.Q(ADRB_int[3]), .CK(ls_clk_memB), .D(1'b0), .SI(ADRB_int[2]), .SE(SE_INB_buf), .RD(flag_addrB));
VIRL_SDN_MSDPRB_1 ff_ADRB_int_4 (.Q(ADRB_int[4]), .CK(ls_clk_memB), .D(ADRB_mout[3]), .SI(ADRB_int[3]), .SE(SE_INB_buf), .RD(flag_addrB_bit[3]));
VIRL_SDN_MSDPRB_1 ff_ADRB_int_5 (.Q(ADRB_int[5]), .CK(ls_clk_memB), .D(ADRB_mout[4]), .SI(ADRB_int[4]), .SE(SE_INB_buf), .RD(flag_addrB_bit[4]));
VIRL_SDN_MSDPRB_1 ff_ADRB_int_6 (.Q(ADRB_int[6]), .CK(ls_clk_memB), .D(ADRB_mout[5]), .SI(ADRB_int[5]), .SE(SE_INB_buf), .RD(flag_addrB_bit[5]));
VIRL_SDN_MSDPRB_1 ff_ADRB_int_7 (.Q(ADRB_int[7]), .CK(ls_clk_memB), .D(1'b0), .SI(ADRB_int[6]), .SE(SE_INB_buf), .RD(flag_addrB));
VIRL_SDN_MSDPRB_1 ff_ADRB_int_8 (.Q(ADRB_int[8]), .CK(ls_clk_memB), .D(1'b0), .SI(ADRB_int[7]), .SE(SE_INB_buf), .RD(flag_addrB));
VIRL_SDN_MSDPRB_1 ff_ADRB_int_9 (.Q(ADRB_int[9]), .CK(ls_clk_memB), .D(ADRB_mout[6]), .SI(ADRB_int[8]), .SE(SE_INB_buf), .RD(flag_addrB_bit[6]));
VIRL_SDN_MSDPRB_1 ff_ADRB_int_10 (.Q(ADRB_int[10]), .CK(ls_clk_memB), .D(ADRB_mout[7]), .SI(ADRB_int[9]), .SE(SE_INB_buf), .RD(flag_addrB_bit[7]));
VIRL_SDN_MSDPRB_1 ff_ADRB_int_11 (.Q(ADRB_int[11]), .CK(ls_clk_memB), .D(ADRB_mout[8]), .SI(ADRB_int[10]), .SE(SE_INB_buf), .RD(flag_addrB_bit[8]));
VIRL_SDN_MSDPRB_1 ff_ADRB_int_12 (.Q(ADRB_int[12]), .CK(ls_clk_memB), .D(ADRB_mout[9]), .SI(ADRB_int[11]), .SE(SE_INB_buf), .RD(flag_addrB_bit[9]));
VIRL_SDN_MSDPRB_1 ff_ADRB_int_13 (.Q(ADRB_int[13]), .CK(ls_clk_memB), .D(ADRB_mout[10]), .SI(ADRB_int[12]), .SE(SE_INB_buf), .RD(flag_addrB_bit[10]));
VIRL_SDN_MSDPRB_1 ff_ADRB_int_14 (.Q(ADRB_int[14]), .CK(ls_clk_memB), .D(1'b0), .SI(ADRB_int[13]), .SE(SE_INB_buf), .RD(flag_addrB));


initial
begin
disp_LS_msgA = 1'b1;
disp_LS_msgB = 1'b1;
end


// Display the warning when LS is 1.

always @ ( negedge LS_buf )
begin
  disp_LS_msgA = 1'b1;
  disp_LS_msgA_old = 1'b1;
end

always @ (posedge LS_buf or posedge mclkA)
begin : blk_ls_0
  if (LS_buf === 1'b1 && MEA_pre !== 1'b0)
  begin
    if( (MES_CNTRL=="ON" || MES_CNTRL=="WARN") && disp_LS_msgA === 1'b1 )
    begin
      $display("<<VIRL_MEM_WARNING: Port A : No Operation as Memory is in Light Sleep mode.>> time=%0t instance=%m", $time);
      disp_LS_msgA = 1'b0;
    end
  end // if LS = 1
end // end of always block blk_ls_0


// Display the warning when LS is 1.

always @ ( negedge LS_buf )
begin
  disp_LS_msgB = 1'b1;
  disp_LS_msgB_old = 1'b1;
end

always @ (posedge LS_buf or posedge mclkB)
begin : blk_ls_1
  if (LS_buf === 1'b1 && MEB_pre !== 1'b0)
  begin
    if( (MES_CNTRL=="ON" || MES_CNTRL=="WARN") && disp_LS_msgB === 1'b1 )
    begin
      $display("<<VIRL_MEM_WARNING: Port B : No Operation as Memory is in Light Sleep mode.>> time=%0t instance=%m", $time);
      disp_LS_msgB = 1'b0;
    end
  end // if LS = 1
end // end of always block blk_ls_1

wire llsb;


assign llsb = (!(mux_ls) || (RMA_buf[3] || RMB_buf[3]));
always @(RMA_buf[3])
begin
  if(RMA_buf[3] === 1'bx)
  begin
    if( (MES_CNTRL =="ON" || MES_CNTRL == "WARN") && $realtime != 0 && uut.mes_all_valid)
    begin
      $display("<<VIRL_MEM_WARNING:RMA[3] is unknown>> at time=%t; instance=%m (SRAMDP_1920x32_core)",$realtime);
    end
  end
end
always @(RMB_buf[3])
begin
  if(RMB_buf[3] === 1'bx)
  begin
    if( (MES_CNTRL =="ON" || MES_CNTRL == "WARN") && $realtime != 0 && uut.mes_all_valid)
    begin
      $display("<<VIRL_MEM_WARNING:RMB[3] is unknown>> at time=%t; instance=%m (SRAMDP_1920x32_core)",$realtime);
    end
  end
end

real lstime;
always @(posedge LS_buf)
begin
  lstime = $realtime;
  #0;
  if (DFTCLKEN_buf === 1'b1 )
  begin
    flag_dA = 1'bX;
    flag_si_dA = 1'bX;
    flag_si_cntrA = 1'bX;
    flag_weA = 1'bX;
    flag_addrA = 1'bX;
    flag_dB = 1'bX;
    flag_si_dB = 1'bX;
    flag_si_cntrB = 1'bX;
    flag_weB = 1'bX;
    flag_addrB = 1'bX;
  end
end
always @(negedge LS_buf)
begin
  #0;
  if (mclkA === 1'b0 )
  begin
    flag_dA = 1'bX;
    flag_si_dA = 1'bX;
    flag_si_cntrA = 1'bX;
    flag_weA = 1'bX;
    flag_addrA = 1'bX;
  end
end
always @(negedge LS_buf)
begin
  #0;
  if (mclkB === 1'b0 )
  begin
    flag_dB = 1'bX;
    flag_si_dB = 1'bX;
    flag_si_cntrB = 1'bX;
    flag_weB = 1'bX;
    flag_addrB = 1'bX;
  end
end

always @(negedge mclkA or flag_tclke_clkA  )
begin
  if (flag_tclke_clkA === 1'b0 && LS_buf === 1'b0)
  begin
    #0.0;
    if (DFTCLKEN_buf === 1'b1)
    begin
      flag_dA <= 1'b1;
      flag_si_dA <= 1'b1;
      flag_si_cntrA <= 1'b1;
      flag_weA <= 1'b1;
      flag_addrA <= 1'b1;
    end
    else
    begin
      flag_dA = 1'bX;
      flag_si_dA = 1'bX;
      flag_si_cntrA = 1'bX;
      flag_weA = 1'bX;
      flag_addrA = 1'bX;
    end
  end
  if (flag_tclke_clkA === 1'b0)
  begin
    flag_qA <= 1'b1;
    flag_si_qA <= 1'b1;
    flag_stickyA <= 1'b1;
    flag_captA <= 1'b1;
    flag_cdA <= 1'b1;
    flag_pipemeA <= 1'b1;
    flag_meA <= 1'b1;
    flag_dA_viol = {32{1'b1}};
    flag_cdA_viol = {4{1'b1}};
    flag_addrA_viol = {11{1'b1}};
  end
  if (mclkA === 1'bX) 
  begin
  #0;
    flag_stickyA = 1'bX;
    flag_captA = 1'bX;
    flag_cdA = 1'bX;
    flag_pipemeA = 1'bX;
    flag_meA = 1'bX;
    if (sel3A === 1'b1)
    begin
      flag_qA = 1'bX;
      flag_si_qA = 1'bX;
    end
  end
end

always @(negedge ls_clk_memA)
begin
  if (ls_clk_memA === 1'bX)
  begin
    flag_dA = 1'bX;
    flag_si_dA = 1'bX;
    flag_si_cntrA = 1'bX;
    flag_weA = 1'bX;
    flag_addrA = 1'bX;
  end
end
always @(negedge mclkB or flag_tclke_clkB  )
begin
  if (flag_tclke_clkB === 1'b0 && LS_buf === 1'b0)
  begin
    #0.0;
    if (DFTCLKEN_buf === 1'b1)
    begin
      flag_dB <= 1'b1;
      flag_si_dB <= 1'b1;
      flag_si_cntrB <= 1'b1;
      flag_weB <= 1'b1;
      flag_addrB <= 1'b1;
    end
    else
    begin
      flag_dB = 1'bX;
      flag_si_dB = 1'bX;
      flag_si_cntrB = 1'bX;
      flag_weB = 1'bX;
      flag_addrB = 1'bX;
    end
  end
  if (flag_tclke_clkB === 1'b0)
  begin
    flag_qB <= 1'b1;
    flag_si_qB <= 1'b1;
    flag_stickyB <= 1'b1;
    flag_captB <= 1'b1;
    flag_cdB <= 1'b1;
    flag_pipemeB <= 1'b1;
    flag_meB <= 1'b1;
    flag_dB_viol = {32{1'b1}};
    flag_cdB_viol = {4{1'b1}};
    flag_addrB_viol = {11{1'b1}};
  end
  if (mclkB === 1'bX) 
  begin
  #0;
    flag_stickyB = 1'bX;
    flag_captB = 1'bX;
    flag_cdB = 1'bX;
    flag_pipemeB = 1'bX;
    flag_meB = 1'bX;
    if (sel3B === 1'b1)
    begin
      flag_qB = 1'bX;
      flag_si_qB = 1'bX;
    end
  end
end

always @(negedge ls_clk_memB)
begin
  if (ls_clk_memB === 1'bX)
  begin
    flag_dB = 1'bX;
    flag_si_dB = 1'bX;
    flag_si_cntrB = 1'bX;
    flag_weB = 1'bX;
    flag_addrB = 1'bX;
  end
end
always @(posedge mclkA)
begin
  if ( SE_INA_buf === 1'b1 && ((SE_QA_buf === 1'b0 && DFTMASK_buf === 1'b0 && DFTCLKEN_buf === 1'b1) || (DFTCLKEN_buf === 1'b0)))
  begin
      flag_qA = 1'bX;
      flag_si_qA = 1'bX;
  end
end
always @(posedge CLKA_mem) 
begin
  if (DFTMASK_old === 1'b0 && SE_INA_buf !== 0)
  begin
  #0;
    uut.flaga_adr_ok = `False;
    uut.checkSanityOnAport;
    uut.corrupt_all_loc(`True);
    uut.QA = 32'bx;
    uut.QA_local_tmp = 32'bx;
    if (uut.TEST1A_old === 1'b1)
     @(negedge CLKA_mem);
    uut.flaga_read_ok = `False;
    ->uut.ev_read_out_a_port;
  end
end

always @(posedge ls_clk_memA)
begin
  if(SE_INA_buf === 1'bx)
  begin
    uut.report_unknown("SE_INA","","");
  end
  if(SI_CNTRA_buf === 1'bx && SE_INA_buf === 1'b1)
  begin
    uut.report_unknown("SI_CNTRA","","");
  end
  if(SI_DA_buf === 1'bx && SE_INA_buf === 1'b1)
  begin
    uut.report_unknown("SI_DA","","");
  end
end

always @(posedge ls_mclkA)
begin
  if(^CDA_buf === 1'bx && SE_INA_buf === 1'b0)
  begin
    uut.report_unknown("CDA","","");
  end
  if(CAPTA_buf === 1'bx && SE_INA_buf === 1'b0)
  begin
    uut.report_unknown("CAPTA","","");
  end
  if(STICKYA_buf === 1'bx && SE_INA_buf === 1'b0)
  begin
    uut.report_unknown("STICKYA","","");
  end
  if(PIPEMEA_mout === 1'bx && DFTCLKEN_buf === 1'b0 && SE_INA_buf === 1'b0)
  begin
    uut.report_unknown("PIPEMEA","BISTEA","TPIPEMEA");
  end
  if(SE_INA_buf === 1'bx)
  begin
    uut.report_unknown("SE_INA","","");
  end
end

always @(posedge ls_clk_pipA)
begin
  if(SE_QA_buf === 1'bx)
  begin
    uut.report_unknown("SE_QA","","");
  end
  if(SI_QA_buf === 1'bx && SE_QA_buf === 1'b1)
  begin
    uut.report_unknown("SI_QA","","");
  end
end


always @(DFTCLKEN_buf or flag_tclke_clkA or flag_tclke_clkB or LS_old)
begin 
  if(DFTCLKEN_buf === 1'bx)
  begin
    uut.report_unknown("DFTCLKEN","","");
  end
  else if(DFTCLKEN_buf === 1'b0 && (LS_old !== 1'b1 || $realtime == lstime) )
  begin
    flag_dA <= 1'bX;
    flag_si_dA <= 1'bX;
    flag_si_cntrA <= 1'bX;
    flag_weA <= 1'bX;
    flag_addrA <= 1'bX;
    flag_dB <= 1'bX;
    flag_si_dB <= 1'bX;
    flag_si_cntrB <= 1'bX;
    flag_weB <= 1'bX;
    flag_addrB <= 1'bX;
  end
  else if ($realtime != 0 && LS_buf === 1'b0  )
  begin
   #0.0;
    if(DFTCLKEN_buf === 1'b1 && flag_tclke_clkA === 1'b0)
    begin
    flag_dA = 1'b1;
    flag_si_dA = 1'b1;
    flag_si_cntrA = 1'b1;
    flag_weA = 1'b1;
    flag_addrA = 1'b1;
    end
    if(DFTCLKEN_buf === 1'b1 && flag_tclke_clkB === 1'b0)
    begin
    flag_dB = 1'b1;
    flag_si_dB = 1'b1;
    flag_si_cntrB = 1'b1;
    flag_weB = 1'b1;
    flag_addrB = 1'b1;
    end
  end
  #0;
  if (mclkA === 1'b1 && PIPEMEAlatch !== 1'b1)
  begin
    flag_qA = 1'bX;
    flag_si_qA = 1'bX;
  end
  if (mclkB === 1'b1 && PIPEMEBlatch !== 1'b1)
  begin
    flag_qB = 1'bX;
    flag_si_qB = 1'bX;
  end
end

`ifdef VIRAGE_FAST_VERILOG
`else
assign notif_adra = {notif_adra_10, notif_adra_9, notif_adra_8, notif_adra_7, notif_adra_6, notif_adra_5, notif_adra_4, notif_adra_3, notif_adra_2, notif_adra_1, notif_adra_0};
genvar nj;
generate for (nj=0; nj<11; nj=nj+1) 
begin :notif_adra_blk
  always @(notif_adra[nj])     
  begin
  if(LS_old === 1'b0 && SE_INA_buf === 1'b0 && DFTMASK_old === 1'b1)
  begin
    flag_addrA_viol[nj] = 1'bX;
  end
  end
end 
endgenerate
always @(notif_dftclken)
begin : blk_notif_dftclken
  if(LS_old === 1'b0)
  begin
    flag_dA = 1'bX;
    flag_si_dA = 1'bX;
    flag_si_cntrA = 1'bX;
    flag_weA = 1'bX;
    flag_addrA = 1'bX;
  end
  flag_qA = 1'bX;
  flag_si_qA = 1'bX;
end


always @(notif_ls)     
begin : blk_notif_ls
    flag_dA = 1'bX;
    flag_si_dA = 1'bX;
    flag_si_cntrA = 1'bX;
    flag_weA = 1'bX;
    flag_addrA = 1'bX;
    flag_dB = 1'bX;
    flag_si_dB = 1'bX;
    flag_si_cntrB = 1'bX;
    flag_weB = 1'bX;
    flag_addrB = 1'bX;
end



assign notif_da = {notif_da_31, notif_da_30, notif_da_29, notif_da_28, notif_da_27, notif_da_26, notif_da_25, notif_da_24, notif_da_23, notif_da_22, notif_da_21, notif_da_20, notif_da_19, notif_da_18, notif_da_17, notif_da_16, notif_da_15, notif_da_14, notif_da_13, notif_da_12, notif_da_11, notif_da_10, notif_da_9, notif_da_8, notif_da_7, notif_da_6, notif_da_5, notif_da_4, notif_da_3, notif_da_2, notif_da_1, notif_da_0};


generate for (nj=0; nj<32; nj=nj+1)
begin : notif_da_blk
  always @(notif_da[nj])     
begin : blk_notif_di_wem_0
  if(LS_old === 1'b0 && SE_INA_buf === 1'b0 && DFTMASK_old === 1'b1)
  begin
    flag_dA_viol[nj] = 1'bX;
  end
end
end
endgenerate

always @(notif_tda_0)     
begin
  notif_da_0 = ~notif_da_0; 
  notif_da_4 = ~notif_da_4; 
  notif_da_8 = ~notif_da_8; 
  notif_da_12 = ~notif_da_12; 
  notif_da_16 = ~notif_da_16; 
  notif_da_20 = ~notif_da_20; 
  notif_da_24 = ~notif_da_24; 
  notif_da_28 = ~notif_da_28; 
end
always @(notif_tda_1)     
begin
  notif_da_1 = ~notif_da_1; 
  notif_da_5 = ~notif_da_5; 
  notif_da_9 = ~notif_da_9; 
  notif_da_13 = ~notif_da_13; 
  notif_da_17 = ~notif_da_17; 
  notif_da_21 = ~notif_da_21; 
  notif_da_25 = ~notif_da_25; 
  notif_da_29 = ~notif_da_29; 
end
always @(notif_tda_2)     
begin
  notif_da_2 = ~notif_da_2; 
  notif_da_6 = ~notif_da_6; 
  notif_da_10 = ~notif_da_10; 
  notif_da_14 = ~notif_da_14; 
  notif_da_18 = ~notif_da_18; 
  notif_da_22 = ~notif_da_22; 
  notif_da_26 = ~notif_da_26; 
  notif_da_30 = ~notif_da_30; 
end
always @(notif_tda_3)     
begin
  notif_da_3 = ~notif_da_3; 
  notif_da_7 = ~notif_da_7; 
  notif_da_11 = ~notif_da_11; 
  notif_da_15 = ~notif_da_15; 
  notif_da_19 = ~notif_da_19; 
  notif_da_23 = ~notif_da_23; 
  notif_da_27 = ~notif_da_27; 
  notif_da_31 = ~notif_da_31; 
end


always @(notif_se_ina)     
begin : blk_notif_se_in_0
  if(LS_old === 1'b0)
  begin
    flag_dA = 1'bX;
    flag_si_dA = 1'bX;
    flag_si_cntrA = 1'bX;
    flag_weA = 1'bX;
    flag_addrA = 1'bX;
    flag_dB = 1'bX;
    flag_si_dB = 1'bX;
    flag_si_cntrB = 1'bX;
    flag_weB = 1'bX;
    flag_addrB = 1'bX;
  end
  flag_qA = 1'bX;
  flag_si_qA = 1'bX;
  flag_stickyA = 1'bX;
  flag_captA = 1'bX;
  flag_cdA = 1'bX;
  flag_pipemeA = 1'bX;
  flag_meA = 1'bX;
  flag_qB = 1'bX;
  flag_si_qB = 1'bX;
  flag_stickyB = 1'bX;
  flag_captB = 1'bX;
  flag_cdB = 1'bX;
  flag_pipemeB = 1'bX;
  flag_meB = 1'bX;
end

always @(notif_si_cntra)     
begin : blk_notif_si_cntr_0
  if(LS_old === 1'b0 && SE_INA_buf === 1'b1)
  begin
    flag_si_cntrA = 1'bX;
  end
end

always @(notif_si_da)     
begin : blk_notif_si_d_0
  if(LS_old === 1'b0 && SE_INA_buf === 1'b1)
  begin
    flag_si_dA = 1'bX;
  end
end


always @(notif_wea)
begin : blk_notif_we_me_0
  if((LS_old === 1'b0 && SE_INA_buf === 1'b0 && DFTMASK_old === 1'b1))
  begin
    flag_weA = 1'bX;
  end
end


always @(notif_mea)     
begin : blk_notif_me_0
  if(SE_INA_buf === 1'b0)
  begin
    flag_meA = 1'bX;
  end
end

always @(notif_pipemea)     
begin : blk_notif_pipeme_0
  if(SE_INA_buf === 1'b0)
  begin
    flag_pipemeA = 1'bX;
  end
  if(DFTCLKEN_buf === 1'b0 )
  begin
    flag_qA = 1'bX;
    flag_si_qA = 1'bX;
  end
end

assign notif_cda = {notif_cda_3, notif_cda_2, notif_cda_1, notif_cda_0};

generate for (nj=0; nj<4; nj=nj+1)
begin : notif_cda_blk
  always @(notif_cda[nj])     
  begin
    if(SE_INA_buf === 1'b0)
    begin
      flag_cdA_viol[nj] = 1'bX;
    end
  end
end
endgenerate
always @(notif_capta)     
begin : blk_notif_capt_0
  if(SE_INA_buf === 1'b0)
  begin
    flag_captA = 1'bX;
  end
end

always @(notif_stickya)     
begin : blk_notif_sticky_0
  if(SE_INA_buf === 1'b0)
  begin
    flag_stickyA = 1'bX;
  end
end

always @(notif_se_qa)     
begin : blk_notif_se_q_0
    flag_qA = 1'bX;
    flag_si_qA = 1'bX;
end

always @(notif_si_qa)     
begin : blk_notif_si_q_0
  if(SE_QA_buf === 1'b1)
  begin
    flag_si_qA = 1'bX;
  end
end

always @(notif_clka or notif_tclkea)
begin
  if (LS_old === 1'b0)
  begin
    flag_dA = 1'bX;
    flag_si_dA = 1'bX;
    flag_si_cntrA = 1'bX;
    flag_weA = 1'bX;
    flag_addrA = 1'bX;
  end
  flag_qA = 1'bX;
  flag_si_qA = 1'bX;
  flag_stickyA = 1'bX;
  flag_captA = 1'bX;
  flag_cdA = 1'bX;
  flag_pipemeA = 1'bX;
  flag_meA = 1'bX;
end

always @(notif_bistea)
begin
  if (LS_old === 1'b0)
  begin
    flag_dA = 1'bX;
    flag_si_dA = 1'bX;
    flag_si_cntrA = 1'bX;
    flag_weA = 1'bX;
    flag_addrA = 1'bX;
  end
  flag_qA = 1'bX;
  flag_si_qA = 1'bX;
  flag_pipemeA = 1'bX;
  flag_meA = 1'bX;
end

`endif // endif of VIRAGE_FAST_VERILOG
always @(posedge mclkB)
begin
  if ( SE_INB_buf === 1'b1 && ((SE_QB_buf === 1'b0 && DFTMASK_buf === 1'b0 && DFTCLKEN_buf === 1'b1) || (DFTCLKEN_buf === 1'b0)))
  begin
      flag_qB = 1'bX;
      flag_si_qB = 1'bX;
  end
end
always @(posedge CLKB_mem) 
begin
  if (DFTMASK_old === 1'b0 && SE_INB_buf !== 0)
  begin
  #0;
    uut.flagb_adr_ok = `False;
    uut.checkSanityOnBport;
    uut.corrupt_all_loc(`True);
    uut.QB = 32'bx;
    uut.QB_local_tmp = 32'bx;
    if (uut.TEST1B_old === 1'b1)
     @(negedge CLKB_mem);
    uut.flagb_read_ok = `False;
    ->uut.ev_read_out_b_port;
  end
end

always @(posedge ls_clk_memB)
begin
  if(SE_INB_buf === 1'bx)
  begin
    uut.report_unknown("SE_INB","","");
  end
  if(SI_CNTRB_buf === 1'bx && SE_INB_buf === 1'b1)
  begin
    uut.report_unknown("SI_CNTRB","","");
  end
  if(SI_DB_buf === 1'bx && SE_INB_buf === 1'b1)
  begin
    uut.report_unknown("SI_DB","","");
  end
end

always @(posedge ls_mclkB)
begin
  if(^CDB_buf === 1'bx && SE_INB_buf === 1'b0)
  begin
    uut.report_unknown("CDB","","");
  end
  if(CAPTB_buf === 1'bx && SE_INB_buf === 1'b0)
  begin
    uut.report_unknown("CAPTB","","");
  end
  if(STICKYB_buf === 1'bx && SE_INB_buf === 1'b0)
  begin
    uut.report_unknown("STICKYB","","");
  end
  if(PIPEMEB_mout === 1'bx && DFTCLKEN_buf === 1'b0 && SE_INB_buf === 1'b0)
  begin
    uut.report_unknown("PIPEMEB","BISTEB","TPIPEMEB");
  end
  if(SE_INB_buf === 1'bx)
  begin
    uut.report_unknown("SE_INB","","");
  end
end

always @(posedge ls_clk_pipB)
begin
  if(SE_QB_buf === 1'bx)
  begin
    uut.report_unknown("SE_QB","","");
  end
  if(SI_QB_buf === 1'bx && SE_QB_buf === 1'b1)
  begin
    uut.report_unknown("SI_QB","","");
  end
end


`ifdef VIRAGE_FAST_VERILOG
`else
assign notif_adrb = {notif_adrb_10, notif_adrb_9, notif_adrb_8, notif_adrb_7, notif_adrb_6, notif_adrb_5, notif_adrb_4, notif_adrb_3, notif_adrb_2, notif_adrb_1, notif_adrb_0};
generate for (nj=0; nj<11; nj=nj+1) 
begin :notif_adrb_blk
  always @(notif_adrb[nj])     
  begin
  if(LS_old === 1'b0 && SE_INB_buf === 1'b0 && DFTMASK_old === 1'b1)
  begin
    flag_addrB_viol[nj] = 1'bX;
  end
  end
end 
endgenerate
always @(notif_dftclken_b)
begin : blk_notif_dftclken_b
  if(LS_old === 1'b0)
  begin
    flag_dB = 1'bX;
    flag_si_dB = 1'bX;
    flag_si_cntrB = 1'bX;
    flag_weB = 1'bX;
    flag_addrB = 1'bX;
  end
  flag_qB = 1'bX;
  flag_si_qB = 1'bX;
end


assign notif_db = {notif_db_31, notif_db_30, notif_db_29, notif_db_28, notif_db_27, notif_db_26, notif_db_25, notif_db_24, notif_db_23, notif_db_22, notif_db_21, notif_db_20, notif_db_19, notif_db_18, notif_db_17, notif_db_16, notif_db_15, notif_db_14, notif_db_13, notif_db_12, notif_db_11, notif_db_10, notif_db_9, notif_db_8, notif_db_7, notif_db_6, notif_db_5, notif_db_4, notif_db_3, notif_db_2, notif_db_1, notif_db_0};


generate for (nj=0; nj<32; nj=nj+1)
begin : notif_db_blk
  always @(notif_db[nj])     
begin : blk_notif_di_wem_1
  if(LS_old === 1'b0 && SE_INB_buf === 1'b0 && DFTMASK_old === 1'b1)
  begin
    flag_dB_viol[nj] = 1'bX;
  end
end
end
endgenerate

always @(notif_tdb_0)     
begin
  notif_db_0 = ~notif_db_0; 
  notif_db_4 = ~notif_db_4; 
  notif_db_8 = ~notif_db_8; 
  notif_db_12 = ~notif_db_12; 
  notif_db_16 = ~notif_db_16; 
  notif_db_20 = ~notif_db_20; 
  notif_db_24 = ~notif_db_24; 
  notif_db_28 = ~notif_db_28; 
end
always @(notif_tdb_1)     
begin
  notif_db_1 = ~notif_db_1; 
  notif_db_5 = ~notif_db_5; 
  notif_db_9 = ~notif_db_9; 
  notif_db_13 = ~notif_db_13; 
  notif_db_17 = ~notif_db_17; 
  notif_db_21 = ~notif_db_21; 
  notif_db_25 = ~notif_db_25; 
  notif_db_29 = ~notif_db_29; 
end
always @(notif_tdb_2)     
begin
  notif_db_2 = ~notif_db_2; 
  notif_db_6 = ~notif_db_6; 
  notif_db_10 = ~notif_db_10; 
  notif_db_14 = ~notif_db_14; 
  notif_db_18 = ~notif_db_18; 
  notif_db_22 = ~notif_db_22; 
  notif_db_26 = ~notif_db_26; 
  notif_db_30 = ~notif_db_30; 
end
always @(notif_tdb_3)     
begin
  notif_db_3 = ~notif_db_3; 
  notif_db_7 = ~notif_db_7; 
  notif_db_11 = ~notif_db_11; 
  notif_db_15 = ~notif_db_15; 
  notif_db_19 = ~notif_db_19; 
  notif_db_23 = ~notif_db_23; 
  notif_db_27 = ~notif_db_27; 
  notif_db_31 = ~notif_db_31; 
end


always @(notif_se_inb)     
begin : blk_notif_se_in_1
  if(LS_old === 1'b0)
  begin
    flag_dA = 1'bX;
    flag_si_dA = 1'bX;
    flag_si_cntrA = 1'bX;
    flag_weA = 1'bX;
    flag_addrA = 1'bX;
    flag_dB = 1'bX;
    flag_si_dB = 1'bX;
    flag_si_cntrB = 1'bX;
    flag_weB = 1'bX;
    flag_addrB = 1'bX;
  end
  flag_qA = 1'bX;
  flag_si_qA = 1'bX;
  flag_stickyA = 1'bX;
  flag_captA = 1'bX;
  flag_cdA = 1'bX;
  flag_pipemeA = 1'bX;
  flag_meA = 1'bX;
  flag_qB = 1'bX;
  flag_si_qB = 1'bX;
  flag_stickyB = 1'bX;
  flag_captB = 1'bX;
  flag_cdB = 1'bX;
  flag_pipemeB = 1'bX;
  flag_meB = 1'bX;
end

always @(notif_si_cntrb)     
begin : blk_notif_si_cntr_1
  if(LS_old === 1'b0 && SE_INB_buf === 1'b1)
  begin
    flag_si_cntrB = 1'bX;
  end
end

always @(notif_si_db)     
begin : blk_notif_si_d_1
  if(LS_old === 1'b0 && SE_INB_buf === 1'b1)
  begin
    flag_si_dB = 1'bX;
  end
end


always @(notif_web)
begin : blk_notif_we_me_1
  if((LS_old === 1'b0 && SE_INB_buf === 1'b0 && DFTMASK_old === 1'b1))
  begin
    flag_weB = 1'bX;
  end
end


always @(notif_meb)     
begin : blk_notif_me_1
  if(SE_INB_buf === 1'b0)
  begin
    flag_meB = 1'bX;
  end
end

always @(notif_pipemeb)     
begin : blk_notif_pipeme_1
  if(SE_INB_buf === 1'b0)
  begin
    flag_pipemeB = 1'bX;
  end
  if(DFTCLKEN_buf === 1'b0 )
  begin
    flag_qB = 1'bX;
    flag_si_qB = 1'bX;
  end
end

assign notif_cdb = {notif_cdb_3, notif_cdb_2, notif_cdb_1, notif_cdb_0};

generate for (nj=0; nj<4; nj=nj+1)
begin : notif_cdb_blk
  always @(notif_cdb[nj])     
  begin
    if(SE_INB_buf === 1'b0)
    begin
      flag_cdB_viol[nj] = 1'bX;
    end
  end
end
endgenerate
always @(notif_captb)     
begin : blk_notif_capt_1
  if(SE_INB_buf === 1'b0)
  begin
    flag_captB = 1'bX;
  end
end

always @(notif_stickyb)     
begin : blk_notif_sticky_1
  if(SE_INB_buf === 1'b0)
  begin
    flag_stickyB = 1'bX;
  end
end

always @(notif_se_qb)     
begin : blk_notif_se_q_1
    flag_qB = 1'bX;
    flag_si_qB = 1'bX;
end

always @(notif_si_qb)     
begin : blk_notif_si_q_1
  if(SE_QB_buf === 1'b1)
  begin
    flag_si_qB = 1'bX;
  end
end

always @(notif_clkb or notif_tclkeb)
begin
  if (LS_old === 1'b0)
  begin
    flag_dB = 1'bX;
    flag_si_dB = 1'bX;
    flag_si_cntrB = 1'bX;
    flag_weB = 1'bX;
    flag_addrB = 1'bX;
  end
  flag_qB = 1'bX;
  flag_si_qB = 1'bX;
  flag_stickyB = 1'bX;
  flag_captB = 1'bX;
  flag_cdB = 1'bX;
  flag_pipemeB = 1'bX;
  flag_meB = 1'bX;
end

always @(notif_bisteb)
begin
  if (LS_old === 1'b0)
  begin
    flag_dB = 1'bX;
    flag_si_dB = 1'bX;
    flag_si_cntrB = 1'bX;
    flag_weB = 1'bX;
    flag_addrB = 1'bX;
  end
  flag_qB = 1'bX;
  flag_si_qB = 1'bX;
  flag_pipemeB = 1'bX;
  flag_meB = 1'bX;
end

`endif // endif of VIRAGE_FAST_VERILOG
reg del_mclkA, del_mclkB;
always @(mclkA)
begin
  if (mclkA === 1'b1)
  begin
    del_mclkA = mclkA && MEA_pre;
    if (TEST1A_buf === 1'b0)
      #2.286 del_mclkA = 1'b0;
  end
  else
  begin
    del_mclkA = mclkA;
  end
end
always @(negedge TEST1A_buf)
begin
  if (mclkA === 1'b1 && TEST1A_buf === 1'b0)
    del_mclkA = 1'b0;
end
always @(mclkB)
begin
  if (mclkB === 1'b1)
  begin
    del_mclkB = mclkB && MEB_pre;
    if (TEST1B_buf === 1'b0)
      #2.286 del_mclkB = 1'b0;
  end
  else
  begin
    del_mclkB = mclkB;
  end
end
always @(negedge TEST1B_buf)
begin
  if (mclkB === 1'b1 && TEST1B_buf === 1'b0)
    del_mclkB = 1'b0;
end
assign LS_old = (del_mclkA === 1'b0 && del_mclkB === 1'b0) ? LS_buf : LS_old;
assign DFTMASK_old = (del_mclkA === 1'b0 && del_mclkB === 1'b0) ? DFTMASK_buf : DFTMASK_old;
assign DFTCLKEN_old = (del_mclkA === 1'b0 && del_mclkB === 1'b0) ? DFTCLKEN_buf : DFTCLKEN_old;
assign CLKA_mem = mclkA && !DFTMASK_latchedA;
assign CLKB_mem = mclkB && !DFTMASK_latchedB;

endmodule
`endcelldefine 
`ifdef verifault 
`disable_portfaults 
`nosuppress_faults 
`endif 


`ifdef VIRAGE_FAST_VERILOG
module generic_behav_SRAMDP_1920x32 (  QA, QB, ADRA, DA, WEA, MEA, CLKA, TCLKA, BISTEA, TEST1A, RMEA, RMA, TCLKEA, DFTMASK, LS, ADRB, DB, WEB, MEB, CLKB, TCLKB, BISTEB, TEST1B, RMEB, RMB, TCLKEB,sim_check_A, sim_check_B );
`else
module generic_behav_SRAMDP_1920x32 (  QA, QB, ADRA, DA, WEA, MEA, CLKA, TCLKA, BISTEA, TEST1A, RMEA, RMA, TCLKEA, DFTMASK, LS, ADRB, DB, WEB, MEB, CLKB, TCLKB, BISTEB, TEST1B, RMEB, RMB, TCLKEB, EVENT_TCQ_A, EVENT_TCQ_B,notif_adra, notif_da, notif_wea, notif_mea, notif_clka, notif_clka_CLKB_rise_rise_rec, notif_clka_TCLKB_rise_rise_rec, notif_bistea, notif_test1a, notif_rmea, notif_rma, notif_tclkea, notif_dftmask, notif_dftmask_b, notif_ls, notif_ls_b, notif_adrb, notif_db, notif_web, notif_meb, notif_clkb, notif_clkb_CLKA_rise_rise_rec, notif_clkb_TCLKA_rise_rise_rec, notif_bisteb, notif_test1b, notif_rmeb, notif_rmb, notif_tclkeb );
`endif // endif of VIRAGE_FAST_VERILOG

parameter MES_CNTRL = "ON";
parameter MemFault_Inj = 0;

parameter words = 1920, bits = 32, addrbits = 11, O_delay=0.0, timingmode = 1, rmbits=3;

output [bits-1:0] QA;
output [bits-1:0] QB;
input [addrbits-1:0] ADRA;
input [bits-1:0] DA;
input WEA;
input MEA;
input CLKA;
input TCLKA;
input BISTEA;
input TEST1A;
input RMEA;
input [rmbits-1:0] RMA;
input TCLKEA;
input DFTMASK;
input LS;
input [addrbits-1:0] ADRB;
input [bits-1:0] DB;
input WEB;
input MEB;
input CLKB;
input TCLKB;
input BISTEB;
input TEST1B;
input RMEB;
input [rmbits-1:0] RMB;
input TCLKEB;

`ifdef VIRAGE_FAST_VERILOG
input sim_check_A, sim_check_B;
`else
input EVENT_TCQ_A;
input EVENT_TCQ_B;
input [10:0] notif_adra;
input [31:0] notif_da;
input [10:0] notif_adrb;
input [31:0] notif_db;
input notif_wea, notif_mea, notif_clka, notif_clka_CLKB_rise_rise_rec, notif_clka_TCLKB_rise_rise_rec, notif_bistea, notif_test1a, notif_rmea, notif_rma, notif_tclkea, notif_dftmask, notif_dftmask_b, notif_ls, notif_ls_b, notif_web, notif_meb, notif_clkb, notif_clkb_CLKA_rise_rise_rec, notif_clkb_TCLKA_rise_rise_rec, notif_bisteb, notif_test1b, notif_rmeb, notif_rmb, notif_tclkeb;

`endif // endif of VIRAGE_FAST_VERILOG

parameter DataX = { bits { 1'bx } };
parameter DataZ = { bits { 1'bz } };


reg  [bits-1:0]  QA;
reg  [bits-1:0]  QB;
reg [addrbits-1:0] ADRAlatched;

reg [addrbits-1:0] ADRA_old;

reg [bits-1:0] DAlatched;

reg [bits-1:0] DA_old;

reg WEAlatched;
reg WEA_old;
reg MEAlatched;
reg MEA_old;
reg TEST1Alatched;
reg TCLKEAlatched;
reg LSlatched;
reg TEST1A_old;
reg [addrbits-1:0] ADRBlatched;

reg [addrbits-1:0] ADRB_old;

reg [bits-1:0] DBlatched;

reg [bits-1:0] DB_old;

reg WEBlatched;
reg WEB_old;
reg MEBlatched;
reg MEB_old;
reg TEST1Blatched;
reg TCLKEBlatched;
reg TEST1B_old;
//reg  [bits-1:0] X_a_corrupt;
reg disp_LS_msg;
reg
  flaga_read_ok,
  flaga_we_ok,
  flaga_d_ok,
  flaga_rm_ok,
  flaga_adr_ok,
  flaga_range_ok;
reg     flaga_clk_valid;
reg     flaga_viol;
event   ev_read_out_a_port;
event   ev_RST_out_a_port;
reg  MEA_chk;
real CLKA_TIME;
real CLKA_T;
wire   [31:0]  QA_temp;
reg    [31:0]  QA_local_tmp;
reg    [31:0]  QA_local_inj;
reg
  flagb_read_ok,
  flagb_we_ok,
  flagb_d_ok,
  flagb_rm_ok,
  flagb_adr_ok,
  flagb_range_ok;
reg     flagb_clk_valid;
reg     flagb_viol;
event   ev_read_out_b_port;
event   ev_RST_out_b_port;
reg  MEB_chk;
real CLKB_TIME;
real CLKB_T;
wire   [31:0]  QB_temp;
reg    [31:0]  QB_local_tmp;
reg    [31:0]  QB_local_inj;
`ifdef VIRAGE_FAST_VERILOG
`else
real tcqa_time;

always @(negedge EVENT_TCQ_A)
begin : blk_negtcqevent_0
  tcqa_time = $realtime;
end // end of always block blk_negtcqevent_0
`endif // endif of VIRAGE_FAST_VERILOG
reg mes_all_valid;
integer i;
reg  [bits-1:0] mem_core_array [0:words -1];
reg [31:0] mem_core_array_read [0:1919];
reg [bits - 1:0] mem_core_rowA;
reg  [bits-1:0] mem_fault_array_XOR [0:words -1];
reg  [bits-1:0] mem_fault_array_sa0 [0:words -1];
reg  [bits-1:0] mem_fault_array_sa1 [0:words -1];
reg faultinj_en;
initial
begin
  faultinj_en = 1'b0;
`ifdef MEMFAULTINJ
  faultinj_en = 1'b1;
`else
  if (MemFault_Inj == 1)
    faultinj_en = 1'b1;
`endif
  for (i=0; i< words ; i=i+1)
  begin
    if (faultinj_en == 1)
      mem_fault_array_XOR[i]=0;
    else
    begin
      mem_fault_array_sa0[i]={bits{1'b1}};
      mem_fault_array_sa1[i]=0;
    end
  end
  if (faultinj_en == 1)
  begin
    if ($test$plusargs("asap_error"))
    mem_fault_array_XOR[1] = 1'b1 << (bits - 1);
  end 
end

`ifdef VIRAGE_FAST_VERILOG
`else
real tcqb_time;

always @(negedge EVENT_TCQ_B)
begin : blk_negtcqevent_1
  tcqb_time = $realtime;
end // end of always block blk_negtcqevent_1
`endif // endif of VIRAGE_FAST_VERILOG


// Checks whether address input is Valid; 1-bit return value
function is_adr_Valid;  
input [addrbits-1:0] addr_to_check;
reg     ret_value;
begin
  ret_value = `True;
  if ((^addr_to_check) === 1'bx)
  begin
    ret_value = `False;
  end // if addr_to_check is X
  is_adr_Valid = ret_value;
end
endfunction

// -------------------------------------------------------------------
// Common tasks
// -------------------------------------------------------------------

// Task to report unknown messages
task report_unknown;
input [8*8:1] signal;
input [8*8:1] bsignal;
input [8*8:1] tsignal;
reg bist_reg;
begin
  if ( bsignal !== "" )
  begin
    if ( bsignal == "BISTEA" )
      bist_reg = BISTEA;
    else if ( bsignal == "TCLKEA" )
      bist_reg = TCLKEA;
    else if ( bsignal == "TCLKEB" )
      bist_reg = TCLKEB;
    else
      bist_reg = BISTEB;

    if( (MES_CNTRL=="ON" || MES_CNTRL=="ERR") && $realtime != 0 && mes_all_valid)
    begin
      if ( bist_reg === 1'b0 )
        $display("<<VIRL_MEM_ERR: %0s unknown>> at time=%t; instance=%m (RAMS1H)",signal,$realtime);
      else if ( bist_reg === 1'b1 )
        $display("<<VIRL_MEM_ERR: %0s unknown>> at time=%t; instance=%m (RAMS1H)",tsignal,$realtime);
    end
  end
  else
    if( (MES_CNTRL=="ON" || MES_CNTRL=="ERR") && $realtime != 0 && mes_all_valid )
    begin
      $display("<<VIRL_MEM_ERR:%0s unknown>> at time=%t; instance=%m (RAMS1H)",signal,$realtime);
    end
end
endtask


// Corrupt Current Location
task corrupt_cur_loc;
input[10:0] Adr_to_corrupt;
integer cnt;
begin
  if (is_adr_Valid (Adr_to_corrupt))
  begin
    mem_core_array[Adr_to_corrupt] = 32'bx;
  end // if of is_adr_Valid (Adr_to_corrupt)
  else
  begin
      corrupt_all_loc(`True);
  end // else of if is_adr_Valid (Adr_to_corrupt)
end
endtask

// Corrupt Entire memory; Do not corrupt entire memory if address is out of range
// during Write; For all other cases, if flag_range_ok is true, corrupt entire memory
task corrupt_all_loc;
input flag_range_ok;
integer row_index;
begin
  if( flag_range_ok == `True)
  begin
    for( row_index = 0; row_index < words ; row_index = row_index + 1)
    begin
      mem_core_array[row_index] = 32'bx;
    end // end of for row_index loop
  end // if of flag_range_ok is true
end
endtask



        

// Perform Sanity Check on Port A, Corrupt memory if required

task checkSanityOnAport;
begin

  #0;                // let CLOCK and NOTIFIER stuff execute first
  case ( {flaga_adr_ok, flaga_we_ok, flaga_d_ok} ) // only 1 and 0
    3'b111   : ;                                                // everything ok!!!
    3'b101,
    3'b100   : corrupt_cur_loc(ADRAlatched);          // WE is unstable
    3'b110   : if (WEAlatched !== 1'b0)
                 corrupt_cur_loc(ADRAlatched);         // Data is unstable
    3'b000,
    3'b001   : corrupt_all_loc(flaga_range_ok);            // ADR and WE unstable
    3'b010,
    3'b011   : corrupt_all_loc(flaga_range_ok);    // ADR unstable, WE stable
  endcase
 end
endtask // end of task checkSanityOnAport

// PORT A FUNCTIONALITY (Handle violation behavior)


initial
begin
  mes_all_valid = 1'b0;
  flaga_adr_ok  = `True;
  flaga_range_ok = `True;
  flaga_we_ok   = `True;
  flaga_d_ok    = `True;
  flaga_read_ok = `True;
  flaga_rm_ok = `True;
  flaga_viol = `False;
  flaga_clk_valid = `True;
   disp_LS_msg = 1'b1;
end // end of initial block

// Perform Sanity Check on Port B, Corrupt memory if required

task checkSanityOnBport;
begin

  #0;                // let CLOCK and NOTIFIER stuff execute first
  case ( {flagb_adr_ok, flagb_we_ok, flagb_d_ok} ) // only 1 and 0
    3'b111   : ;                                                // everything ok!!!
    3'b101,
    3'b100   : corrupt_cur_loc(ADRBlatched);          // WE is unstable
    3'b110   : if (WEBlatched !== 1'b0)
                 corrupt_cur_loc(ADRBlatched);         // Data is unstable
    3'b000,
    3'b001   : corrupt_all_loc(flagb_range_ok);            // ADR and WE unstable
    3'b010,
    3'b011   : corrupt_all_loc(flagb_range_ok);    // ADR unstable, WE stable
  endcase
 end
endtask // end of task checkSanityOnBport

// PORT B FUNCTIONALITY (Handle violation behavior)


initial
begin
  mes_all_valid = 1'b0;
  flagb_adr_ok  = `True;
  flagb_range_ok = `True;
  flagb_we_ok   = `True;
  flagb_d_ok    = `True;
  flagb_read_ok = `True;
  flagb_rm_ok = `True;
  flagb_viol = `False;
  flagb_clk_valid = `True;
end // end of initial block

// For Zerohold of ADRA pin
always @( negedge CLKA or ADRA )
begin : blk_addrhold_0
  if ( CLKA == 1'b0 )
  begin
    ADRA_old <= ADRA;
  end // if of CLKA = 0
end // end of always block blk_addrhold_0
// For Zerohold of DA pin
always @( negedge CLKA or DA )
begin : blk_dihold_0
  if ( CLKA == 1'b0 )
  begin
    DA_old <= DA;
  end // if of CLKA = 0
end // end of always block blk_dihold_0
// For Zerohold of WEA pin
always @( negedge CLKA or WEA )
begin : blk_wehold_0
  if ( CLKA == 1'b0 )
  begin
    WEA_old <= WEA;
  end // if of CLKA = 0
end // end of always block blk_wehold_0
// For Zerohold of MEA pin
always @( negedge CLKA or MEA or LS or DFTMASK )
begin : blk_mehold_0
  if ( CLKA == 1'b0 )
  begin
    if ((DFTMASK === 1'b1) || (LS === 1'b1 && MEA !== 1'bx))
      MEA_old <= 1'b0;
    else
      MEA_old <= MEA;
  end // if of CLKA = 0
end // end of always block blk_mehold_0
// For Zerohold of Test1 pin
always @( negedge CLKA or TEST1A )
begin : blk_test1hold_0
  if ( CLKA == 1'b0 )
  begin
    TEST1A_old <= TEST1A;
  end // if of CLKA = 0
end // end of always block blk_test1hold_0


reg LSA_old;
always @( negedge CLKA or LS )
begin : blk_lshold_0
  if (CLKA == 1'b0)
  begin
    LSA_old <= LS;
  end
end // end of always block blk_lshold_0
// For Zerohold of ADRB pin
always @( negedge CLKB or ADRB )
begin : blk_addrhold_1
  if ( CLKB == 1'b0 )
  begin
    ADRB_old <= ADRB;
  end // if of CLKB = 0
end // end of always block blk_addrhold_1
// For Zerohold of DB pin
always @( negedge CLKB or DB )
begin : blk_dihold_1
  if ( CLKB == 1'b0 )
  begin
    DB_old <= DB;
  end // if of CLKB = 0
end // end of always block blk_dihold_1
// For Zerohold of WEB pin
always @( negedge CLKB or WEB )
begin : blk_wehold_1
  if ( CLKB == 1'b0 )
  begin
    WEB_old <= WEB;
  end // if of CLKB = 0
end // end of always block blk_wehold_1
// For Zerohold of MEB pin
always @( negedge CLKB or MEB or LS or DFTMASK )
begin : blk_mehold_1
  if ( CLKB == 1'b0 )
  begin
    if ((DFTMASK === 1'b1) || (LS === 1'b1 && MEB !== 1'bx))
      MEB_old <= 1'b0;
    else
      MEB_old <= MEB;
  end // if of CLKB = 0
end // end of always block blk_mehold_1
// For Zerohold of Test1 pin
always @( negedge CLKB or TEST1B )
begin : blk_test1hold_1
  if ( CLKB == 1'b0 )
  begin
    TEST1B_old <= TEST1B;
  end // if of CLKB = 0
end // end of always block blk_test1hold_1


reg LSB_old;
always @( negedge CLKB or LS )
begin : blk_lshold_1
  if (CLKB == 1'b0)
  begin
    LSB_old <= LS;
  end
end // end of always block blk_lshold_1

`ifdef VIRAGE_FAST_VERILOG
`else
// PORT A WE violation
always @(notif_wea)           
begin : blk_notif_we_0
if (DFTMASK === 1'b0)
begin
    if ( WEA_old === 1'b0)
    begin
      flaga_viol = `True;
    end // if of WEA_old = 0
    flaga_we_ok = `False;
    checkSanityOnAport;
    if (^(ADRA_old) === 1'bx)
    begin
      corrupt_all_loc(`True);
    end 
    flaga_read_ok = `False;
    -> ev_read_out_a_port;
    QA_local_tmp = 32'bx;
  end // if of DFTMASK
end // end of always block blk_notif_we_0

// PORT A CLKA violation
always @(notif_clka)
begin : blk_notif_clk_0
if (DFTMASK === 1'b0)
begin
  flaga_clk_valid = `False;
  MEB_chk = MEB_old;
  if ( EVENT_TCQ_B == 1'b1 && MEB_chk === 1'b1 )
  begin
    disable blk_readout_1.OUTPUT_b;
    flagb_read_ok = `False;
    -> ev_read_out_b_port;
  end 
  flaga_adr_ok = `False;
  flaga_we_ok  = `False;
     corrupt_all_loc(`True);
  flaga_read_ok = `False;     // irrespective of WE
  -> ev_read_out_a_port;
  end // if of dftmask = 0
end // end of always block blk_notif_clk_0

// PORT A ME violation
always @(notif_mea)           
begin : blk_notif_me_0
if (DFTMASK === 1'b0)
begin
  if (((WEAlatched === 1'b1)) && (EVENT_TCQ_B == 1'b1 || (tcqb_time == $realtime)))
  begin
    disable blk_readout_1.OUTPUT_b;
    flagb_read_ok = `False;
    -> ev_read_out_b_port;
  end // if of write
    flaga_viol = `True;
    flaga_read_ok = `False;                           
    -> ev_read_out_a_port;
    flaga_adr_ok = `False;
    corrupt_all_loc(`True);
end // if of DFTMASK 
end // end of always block blk_notif_me_0

// PORT A ADR violation
always @(notif_adra)     
begin : blk_notif_addr_0
if (DFTMASK === 1'b0)
begin
   MEB_chk = MEB_old;
   if (MEB_chk === 1'b1 && ((WEAlatched === 1'b1)) && (EVENT_TCQ_B == 1'b1 || (tcqb_time == $realtime)))
    begin
      disable blk_readout_1.OUTPUT_b;
      flagb_read_ok = `False;
      -> ev_read_out_b_port;
    end // if of write
      flaga_viol = `True;
      flaga_read_ok = `False;                         
      -> ev_read_out_a_port;
      flaga_adr_ok = `False;
      corrupt_all_loc(`True);
end // if of DFTMASK 
end // end of always block blk_notif_addr_0

// PORT A D violation
always @(notif_da)     
begin : blk_notif_di_0
if (DFTMASK === 1'b0)
begin
    flaga_viol = `True;
    flaga_read_ok = `False;
    -> ev_read_out_a_port;
    flaga_d_ok = `False;
    checkSanityOnAport;
end // if of DFTMASK 
end // end of always block blk_notif_di_0
// PORT A BISTEA violation
always @(notif_bistea or notif_tclkea)  
begin : blk_notif_biste_0 
if (DFTMASK === 1'b0)
begin
    flaga_read_ok = `False;
    -> ev_read_out_a_port;
    flaga_adr_ok  = `False;
    checkSanityOnAport;
end // if of DFTMASK 
end // end of always block blk_notif_biste_0

always @(notif_dftmask)
begin : blk_notif_dftmask_0
    corrupt_all_loc(`True);
    #0.001;
    flaga_read_ok = `False;
    -> ev_read_out_a_port;
end


//PORT A TEST1A violation
always @(notif_test1a)   
begin : blk_notif_test1_0
//  MEA_chk = MEA_old;
  if ( WEAlatched === 1'b0 )
  begin
    flaga_viol = `True;
    flaga_read_ok = `False;
    -> ev_read_out_a_port;
  end
  else if ( WEAlatched === 1'b1 )
  begin
    flaga_d_ok  = `False;
    checkSanityOnAport;
  end
end // end of always block blk_notif_test1_0

always @(notif_ls)
begin
  corrupt_all_loc(`True);
  flaga_read_ok = `False;
  -> ev_read_out_a_port;
end

//PORT A RMA violation
always @(notif_rma)       
begin : blk_notif_rm_0
    flaga_viol = `True;
    flaga_read_ok = `False;
    -> ev_read_out_a_port;
    flaga_d_ok  = `False;
    checkSanityOnAport;
end // end of always block blk_notif_rm_0

//PORT A RME violation
always @(notif_rmea)  
begin : blk_notif_rmen_0
    flaga_viol = `True;
    flaga_read_ok = `False;
    -> ev_read_out_a_port;
    flaga_d_ok  = `False;
    checkSanityOnAport;
end // end of always block blk_notif_rmen_0
`endif // endif of VIRAGE_FAST_VERILOG

// Simultaneous Clock Handling
`ifdef VIRAGE_FAST_VERILOG
always @(sim_check_A)
begin : blk_simultclock_0
`else
always @(notif_clka_CLKB_rise_rise_rec or notif_clka_TCLKB_rise_rise_rec)
begin : blk_simultclock_0
`endif // endif of VIRAGE_FAST_VERILOG
      if ( WEAlatched !== 1'b0 && WEB_old  !== 1'b0 )
      begin
        flaga_d_ok = `False;
        flagb_d_ok = `False;
        mem_core_array[ADRAlatched] = (((DAlatched ^ DB_old) & 32'bx) ^ DAlatched);
      end // if write enable is not disabled for both ports
      else if ( WEAlatched !== 1'b0)
      begin
        #0;
        flagb_viol = `True;
        flagb_read_ok = `False;
       if ( TEST1Blatched === 1'b0)
        -> ev_read_out_b_port;
      end // else if of WEAlatched != 0
      else 
      begin
        flaga_read_ok = `False;
       if ( TEST1Alatched === 1'b0)
        -> ev_read_out_a_port;
      end // else if of WEB_old  != 0
end // end of always block blk_simultclock_0


// reset for next cycle

always @(negedge CLKA)
begin : blk_intnegclock_0
  if ( CLKA !== 1'bx )
  begin
    #0.001;
    flaga_range_ok  = `True;
    flaga_read_ok = `True;
    flaga_rm_ok = `True;
    flaga_clk_valid = `True;
    flaga_adr_ok  = `True;
    flaga_we_ok   = `True;
    flaga_d_ok    = `True;
    flaga_viol    = `False;
  end // if of CLKA != X
  else
  begin
    flaga_clk_valid = `False;
    QA_local_tmp = 32'bx;
    corrupt_all_loc(`True);
    report_unknown("CLKA","TCLKEA","TCLKA");
  end // else of if CLKA != X
end // end of always block blk_intnegclock_0

// PORT A FUNCTIONALITY 


always @(posedge CLKA)
begin : blk_intposclock_0
  CLKA_T = $realtime;
  MEAlatched = MEA_old;
  WEAlatched = WEA_old;
  TEST1Alatched = TEST1A_old;
  ADRAlatched = ADRA_old;
  DAlatched = DA_old;
  if (DFTMASK === 1'b1 || (LSA_old === 1'b1 && MEAlatched !== 1'bx))
  begin
    MEAlatched = 1'b0;
  end
  if (LSA_old === 1'bX && MEAlatched !== 1'b0)
  begin
    report_unknown("LS","","");
    corrupt_all_loc(`True);
    QA_local_tmp = 32'bx;
  end
  else
  begin
    if (^(ADRAlatched) === 1'bx && MEAlatched !== 1'b0)
    begin
      report_unknown("ADRA","BISTEA","TADRA");
      if ( WEAlatched === 1'b1 )
      begin
        flaga_viol = `True;
      end // if of WEAlatched = 1
      else
      begin
        flaga_read_ok = `False;
      end
      `ifdef virage_ignore_read_addx
      if ((WEAlatched === 1'b1))
      begin
        flaga_adr_ok = `False;
        corrupt_all_loc(flaga_range_ok);
      end // if of write
      `else
        flaga_adr_ok = `False;
        corrupt_all_loc(flaga_range_ok);
      `endif // endif of virage_ignore_read_addx is true
      -> ev_RST_out_a_port;
    end // if of (^ADRAlatched) is 1'bx and MEAlatched != 0
    else if((ADRAlatched > 11'b11101111111) && (MEAlatched === 1'b1) && (WEAlatched === 1'b1) )
    begin
      if( (MES_CNTRL=="ON" || MES_CNTRL=="WARN")&& $realtime != 0 && mes_all_valid)
      begin
        $display("\n%m<<VIRL_MEM_WARNING:address is out of range>>(time %0t)\n RANGE: 0 to 1919\n", $time);
      end
      flaga_range_ok = `False;
    end // if of ADRAlatched out of range with MEAlatched = 1
    if (!flaga_clk_valid) 
    begin
      QA_local_tmp = 32'bx;
    end // if of flaga_clk_valid is NOT true
    else if ( CLKA === 1'bx )
    begin
      QA_local_tmp = 32'bx;
      corrupt_all_loc(flaga_range_ok);
      report_unknown("CLKA","TCLKEA","TCLKA");
    end // if of CLKA = X
    else if ( DFTMASK === 1'bx )
    begin
      uut.report_unknown("DFTMASK","","");
    end // if of DFTMASK = X
    else
    begin
      -> ev_RST_out_a_port;
    end // else of if CLKA = X
  end // else of if power pin unknown 
end // end of always block blk_intposclock_0
// PORT A READ-OUT

always @(ev_read_out_a_port)
begin : blk_readout_0
  #0;                // let CLOCK and NOTIFIER module execute first
  if (RMEA === 1'b1)
  begin
    if (RMA >= 3'b100)
    begin
      if( (MES_CNTRL =="ON" || MES_CNTRL =="WARN") && $realtime != 0 && mes_all_valid)
      begin
      $display("<<VIRL_MEM_WARNING:RMA = %b is not recommended value>> at time=%t; instance=%m (RAMS1H)",RMA,$realtime);
      end
    end
  end
  if (^RMA === 1'bx)
  begin
    flaga_rm_ok = `False;
  end // if of RMA is not valid
  if (flaga_adr_ok && flaga_read_ok && flaga_rm_ok)
  begin : OUTPUT_a
    if (WEAlatched === 1'b0)
    begin
      if (ADRAlatched <= 11'b11101111111)
      begin
          
          if (faultinj_en == 1)
          begin
            QA_local_tmp = mem_core_array[ADRAlatched]^mem_fault_array_XOR[ADRAlatched];
          end
          else
          begin
            QA_local_inj = mem_core_array[ADRAlatched] & mem_fault_array_sa0[ADRAlatched];
            QA_local_inj = QA_local_inj | mem_fault_array_sa1[ADRAlatched];
            QA_local_tmp = QA_local_inj;
          end
      end // if of ADRAlatched <= 11'b11101111111
    end // if of WEAlatched = 0
  end //if of flaga_adr_ok is true and flaga_read_ok is true and flaga_rm_ok is true
  else
  begin
    if (flaga_viol)
    begin
      if ((WEAlatched === 1'b0))
      begin
        QA_local_tmp = 32'bx;
      end  // if of read
    end // if of flaga_viol is true
    else
    begin
      QA_local_tmp = 32'bx;
    end // else of if flaga_viol is true
  end // else of if flaga_adr_ok is true and flaga_read_ok is true and flaga_rm_ok is true
  flaga_read_ok = `True;
end // end of always block blk_readout_0

// Handle Read/Write
always @(ev_RST_out_a_port)
begin : blk_readwrite_0
    if (MEAlatched !== 1'b0 && !flaga_viol)
    begin
      if (WEAlatched === 1'bx)
      begin
        flaga_we_ok = `False;
        flaga_read_ok = `False;
        report_unknown("WEA","BISTEA","TWEA");
      end // if of WEAlatched = X
      if ((^DAlatched === 1'bx))
      begin
        if (DAlatched === 32'bx)
        begin
          flaga_d_ok  = `False;
        end
        if (WEAlatched !== 1'b0)
        begin
          report_unknown("DA","BISTEA","TDA");
        end
      end
          if (TEST1Alatched === 1'bx)
          begin
            report_unknown("TEST1A","","");
            if ( WEAlatched == 1'b1 )
            begin
              corrupt_cur_loc(ADRAlatched);                             
            end // if of WEAlatched = 1
            else
            begin
              QA_local_tmp = 32'bx;
            end // else of if WEAlatched = 1
          end // if TEST1Alatched = X
          else
          begin
                if (^RMA === 1'bx)
                begin
                  if ( RMEA !== 1'bx )
                    report_unknown("RMA","","");
                  else
                    report_unknown("RMEA","","");
                  if ( WEAlatched == 1'b1 )
                  begin
                    corrupt_cur_loc(ADRAlatched);
                  end // if of WEAlatched = 1
                  else
                  begin
                    QA_local_tmp = 32'bx;
                  end // else of if WEAlatched = 1
                end // if of RMA = X
                else
                begin
                  if (MEAlatched !== 1'b1)
                  begin
                    flaga_we_ok = `False;       // don't know if cycle is On or Off
                  end // if of MEAlatched != 1 

                  if(ADRAlatched > 11'b11101111111) 
                  begin
                    if( (MES_CNTRL=="ON" || MES_CNTRL=="WARN") && $realtime != 0 && mes_all_valid)
                    begin
                      $display("\n%m<<VIRL_MEM_WARNING:address is out of range>>(time %0t)\n RANGE:0 to 1919\n", $time);
                    end
                    flaga_range_ok = `False;
                    if (WEAlatched === 1'b0)
                    begin
                      flaga_read_ok = `False;
                    end // if of flaga_read_ok
                  end // if of ADRAlatched out of range with MEAlatched = 1
                  if ( MEAlatched === 1'bx )
                  begin
                    report_unknown("MEA","BISTEA","TMEA");
                    `ifdef virage_ignore_read_addx
                    if (WEAlatched == 1'b1)
                    begin
                      corrupt_all_loc(flaga_range_ok);
                    end // if of WEAlatched = 1 
                    else
                    begin
                      QA_local_tmp = 32'bx;
                    end // else of if WEAlatched = 1
                    `else
                    if (WEAlatched == 1'b1)
                    begin
                      corrupt_all_loc(flaga_range_ok);
                    end // if of WEAlatched = 1
                    else
                    begin
                      QA_local_tmp = 32'bx;
                      corrupt_all_loc(flaga_range_ok);
                    end // else of if WEAlatched = 1
                    `endif
                  end // if of MEAlatched = X
                  else
                  begin
                      if (flaga_range_ok && flaga_we_ok && flaga_adr_ok && flaga_d_ok && (WEAlatched == 1'b1))
                      begin
                        
                        mem_core_array[ADRAlatched] = DAlatched;
                          if (!mes_all_valid)
                          begin
                            mes_all_valid = 1'b1;
                          end // if of mes_all_valid = 0
                      end // if of write
                      else
                      begin
                        checkSanityOnAport;
                      end // else of if write
                  if (TEST1Alatched === 1'b1)
                  begin
                     if (WEAlatched === 1'b0)
                     begin
                       flaga_read_ok = `False;
                       -> ev_read_out_a_port;
                       @(negedge CLKA);
                     end
                     if (DFTMASK === 1'b0)
                     -> ev_read_out_a_port;
                  end // if of TEST1Alatched = 1
                  else 
                  begin
                    -> ev_read_out_a_port;
                  end // else of if TEST1Alatched = 1
                  end // else of if MEAlatched = X
                end // else of if RMA = X
          end // else of if TEST1Alatched = X
    end // if of MEAlatched != 0 & flaga_viol = 0
end // end of always block blk_readwrite_0



assign QA_temp = QA_local_tmp;

// Final Output Update 

always @( QA_temp )
begin : blk_output_0
     QA <= QA_temp;
end // end of always block blk_output_0



// Display the warning when TEST1A is 1.
always @ (TEST1A)
begin : blk_test1_0
  if (CLKA === 1'b1 && MEAlatched === 1'b1)
  begin
    QA_local_tmp = 32'bx; 
    flaga_read_ok = `False;
  end
  if ( TEST1A == 1'b1 && (LS === 1'b0))
  begin
    if( (MES_CNTRL =="ON" || MES_CNTRL =="WARN") && $realtime != 0 && mes_all_valid)
    begin
      $display("\n%m <<VIRL_MEM_WARNING: Tcc value in the RAM model is for TEST1A=1'b0,but input value is TEST1A=1'b1>>(time %0t)\n\n", $time);
    end
  end // if TEST1A = 1 
end // end of always block blk_test1_0


`ifdef VIRAGE_FAST_VERILOG
`else
// PORT B WE violation
always @(notif_web)           
begin : blk_notif_we_1
if (DFTMASK === 1'b0)
begin
    if ( WEB_old === 1'b0)
    begin
      flagb_viol = `True;
    end // if of WEB_old = 0
    flagb_we_ok = `False;
    checkSanityOnBport;
    if (^(ADRB_old) === 1'bx)
    begin
      corrupt_all_loc(`True);
    end 
    flagb_read_ok = `False;
    -> ev_read_out_b_port;
    QB_local_tmp = 32'bx;
  end // if of DFTMASK
end // end of always block blk_notif_we_1

// PORT B CLKB violation
always @(notif_clkb)
begin : blk_notif_clk_1
if (DFTMASK === 1'b0)
begin
  flagb_clk_valid = `False;
  MEA_chk = MEA_old;
  if ( EVENT_TCQ_A == 1'b1 && MEA_chk === 1'b1 )
  begin
    disable blk_readout_0.OUTPUT_a;
    flaga_read_ok = `False;
    -> ev_read_out_a_port;
  end 
  flagb_adr_ok = `False;
  flagb_we_ok  = `False;
     corrupt_all_loc(`True);
  flagb_read_ok = `False;     // irrespective of WE
  -> ev_read_out_b_port;
  end // if of dftmask = 0
end // end of always block blk_notif_clk_1

// PORT B ME violation
always @(notif_meb)           
begin : blk_notif_me_1
if (DFTMASK === 1'b0)
begin
  if (((WEBlatched === 1'b1)) && (EVENT_TCQ_A == 1'b1 || (tcqa_time == $realtime)))
  begin
    disable blk_readout_0.OUTPUT_a;
    flaga_read_ok = `False;
    -> ev_read_out_a_port;
  end // if of write
    flagb_viol = `True;
    flagb_read_ok = `False;                           
    -> ev_read_out_b_port;
    flagb_adr_ok = `False;
    corrupt_all_loc(`True);
end // if of DFTMASK 
end // end of always block blk_notif_me_1

// PORT B ADR violation
always @(notif_adrb)     
begin : blk_notif_addr_1
if (DFTMASK === 1'b0)
begin
   MEA_chk = MEA_old;
   if (MEA_chk === 1'b1 && ((WEBlatched === 1'b1)) && (EVENT_TCQ_A == 1'b1 || (tcqa_time == $realtime)))
    begin
      disable blk_readout_0.OUTPUT_a;
      flaga_read_ok = `False;
      -> ev_read_out_a_port;
    end // if of write
      flagb_viol = `True;
      flagb_read_ok = `False;                         
      -> ev_read_out_b_port;
      flagb_adr_ok = `False;
      corrupt_all_loc(`True);
end // if of DFTMASK 
end // end of always block blk_notif_addr_1

// PORT B D violation
always @(notif_db)     
begin : blk_notif_di_1
if (DFTMASK === 1'b0)
begin
    flagb_viol = `True;
    flagb_read_ok = `False;
    -> ev_read_out_b_port;
    flagb_d_ok = `False;
    checkSanityOnBport;
end // if of DFTMASK 
end // end of always block blk_notif_di_1
// PORT B BISTEB violation
always @(notif_bisteb or notif_tclkeb) 
begin : blk_notif_biste_1
if (DFTMASK === 1'b0)
begin
    flagb_read_ok = `False;
    -> ev_read_out_b_port;
    flagb_adr_ok  = `False;
    checkSanityOnBport;
end // if of DFTMASK 
end // end of always block blk_notif_biste_1

always @(notif_dftmask_b)
begin : blk_notif_dftmask_1
    corrupt_all_loc(`True);
    #0.001;
    flagb_read_ok = `False;
    -> ev_read_out_b_port;
end


//PORT B TEST1B violation
always @(notif_test1b)   
begin : blk_notif_test1_1
//  MEB_chk = MEB_old;
  if ( WEBlatched === 1'b0 )
  begin
    flagb_viol = `True;
    flagb_read_ok = `False;
    -> ev_read_out_b_port;
  end
  else if ( WEBlatched === 1'b1 )
  begin
    flagb_d_ok  = `False;
    checkSanityOnBport;
  end
end // end of always block blk_notif_test1_1

always @(notif_ls_b)
begin
  corrupt_all_loc(`True);
  flagb_read_ok = `False;
  -> ev_read_out_b_port;
end

//PORT B RMB violation
always @(notif_rmb)       
begin : blk_notif_rm_1
    flagb_viol = `True;
    flagb_read_ok = `False;
    -> ev_read_out_b_port;
    flagb_d_ok  = `False;
    checkSanityOnBport;
end // end of always block blk_notif_rm_1

//PORT B RME violation
always @(notif_rmeb)  
begin : blk_notif_rmen_1
    flagb_viol = `True;
    flagb_read_ok = `False;
    -> ev_read_out_b_port;
    flagb_d_ok  = `False;
    checkSanityOnBport;
end // end of always block blk_notif_rmen_1
`endif // endif of VIRAGE_FAST_VERILOG

// Simultaneous Clock Handling
`ifdef VIRAGE_FAST_VERILOG
always @(sim_check_B)
begin : blk_simultclock_1
`else
always @(notif_clkb_CLKA_rise_rise_rec or notif_clkb_TCLKA_rise_rise_rec)
begin : blk_simultclock_1
`endif // endif of VIRAGE_FAST_VERILOG
      if ( WEBlatched !== 1'b0 && WEA_old  !== 1'b0 )
      begin
        flaga_d_ok = `False;
        flagb_d_ok = `False;
        mem_core_array[ADRBlatched] = (((DBlatched ^ DA_old) & 32'bx) ^ DBlatched);
      end // if write enable is not disabled for both ports
      else if ( WEBlatched !== 1'b0)
      begin
        #0;
        flaga_viol = `True;
        flaga_read_ok = `False;
       if ( TEST1Alatched === 1'b0)
        -> ev_read_out_a_port;
      end // else if of WEBlatched != 0
      else 
      begin
        flagb_read_ok = `False;
       if ( TEST1Blatched === 1'b0)
        -> ev_read_out_b_port;
      end // else if of WEA_old  != 0
end // end of always block blk_simultclock_1


// reset for next cycle

always @(negedge CLKB)
begin : blk_intnegclock_1
  if ( CLKB !== 1'bx )
  begin
    #0.001;
    flagb_range_ok  = `True;
    flagb_read_ok = `True;
    flagb_rm_ok = `True;
    flagb_clk_valid = `True;
    flagb_adr_ok  = `True;
    flagb_we_ok   = `True;
    flagb_d_ok    = `True;
    flagb_viol    = `False;
  end // if of CLKB != X
  else
  begin
    flagb_clk_valid = `False;
    QB_local_tmp = 32'bx;
    corrupt_all_loc(`True);
    report_unknown("CLKB","TCLKEB","TCLKB");
  end // else of if CLKB != X
end // end of always block blk_intnegclock_1

// PORT B FUNCTIONALITY 


always @(posedge CLKB)
begin : blk_intposclock_1
  CLKB_T = $realtime;
  MEBlatched = MEB_old;
  WEBlatched = WEB_old;
  TEST1Blatched = TEST1B_old;
  ADRBlatched = ADRB_old;
  DBlatched = DB_old;
  if (DFTMASK === 1'b1 || (LSB_old === 1'b1 && MEBlatched !== 1'bx))
  begin
    MEBlatched = 1'b0;
  end
  if (LSB_old === 1'bX && MEBlatched !== 1'b0)
  begin
    report_unknown("LS","","");
    corrupt_all_loc(`True);
    QB_local_tmp = 32'bx;
  end
  else
  begin
    if (^(ADRBlatched) === 1'bx && MEBlatched !== 1'b0)
    begin
      report_unknown("ADRB","BISTEB","TADRB");
      if ( WEBlatched === 1'b1 )
      begin
        flagb_viol = `True;
      end // if of WEBlatched = 1
      else
      begin
        flagb_read_ok = `False;
      end
      `ifdef virage_ignore_read_addx
      if ((WEBlatched === 1'b1))
      begin
        flagb_adr_ok = `False;
        corrupt_all_loc(flagb_range_ok);
      end // if of write
      `else
        flagb_adr_ok = `False;
        corrupt_all_loc(flagb_range_ok);
      `endif // endif of virage_ignore_read_addx is true
      -> ev_RST_out_b_port;
    end // if of (^ADRBlatched) is 1'bx and MEBlatched != 0
    else if((ADRBlatched > 11'b11101111111) && (MEBlatched === 1'b1) && (WEBlatched === 1'b1) )
    begin
      if( (MES_CNTRL=="ON" || MES_CNTRL=="WARN")&& $realtime != 0 && mes_all_valid)
      begin
        $display("\n%m<<VIRL_MEM_WARNING:address is out of range>>(time %0t)\n RANGE: 0 to 1919\n", $time);
      end
      flagb_range_ok = `False;
    end // if of ADRBlatched out of range with MEBlatched = 1
    if (!flagb_clk_valid) 
    begin
      QB_local_tmp = 32'bx;
    end // if of flagb_clk_valid is NOT true
    else if ( CLKB === 1'bx )
    begin
      QB_local_tmp = 32'bx;
      corrupt_all_loc(flagb_range_ok);
      report_unknown("CLKB","TCLKEB","TCLKB");
    end // if of CLKB = X
    else if ( DFTMASK === 1'bx )
    begin
      uut.report_unknown("DFTMASK","","");
    end // if of DFTMASK = X
    else
    begin
      -> ev_RST_out_b_port;
    end // else of if CLKB = X
  end // else of if power pin unknown 
end // end of always block blk_intposclock_1
// PORT B READ-OUT

always @(ev_read_out_b_port)
begin : blk_readout_1
  #0;                // let CLOCK and NOTIFIER module execute first
  if (RMEB === 1'b1)
  begin
    if (RMB >= 3'b100)
    begin
      if( (MES_CNTRL =="ON" || MES_CNTRL =="WARN") && $realtime != 0 && mes_all_valid)
      begin
      $display("<<VIRL_MEM_WARNING:RMB = %b is not recommended value>> at time=%t; instance=%m (RAMS1H)",RMB,$realtime);
      end
    end
  end
  if (^RMB === 1'bx)
  begin
    flagb_rm_ok = `False;
  end // if of RMB is not valid
  if (flagb_adr_ok && flagb_read_ok && flagb_rm_ok)
  begin : OUTPUT_b
    if (WEBlatched === 1'b0)
    begin
      if (ADRBlatched <= 11'b11101111111)
      begin
          
          if (faultinj_en == 1)
          begin
            QB_local_tmp = mem_core_array[ADRBlatched]^mem_fault_array_XOR[ADRBlatched];
          end
          else
          begin
            QB_local_inj = mem_core_array[ADRBlatched] & mem_fault_array_sa0[ADRBlatched];
            QB_local_inj = QB_local_inj | mem_fault_array_sa1[ADRBlatched];
            QB_local_tmp = QB_local_inj;
          end
      end // if of ADRBlatched <= 11'b11101111111
    end // if of WEBlatched = 0
  end //if of flagb_adr_ok is true and flagb_read_ok is true and flagb_rm_ok is true
  else
  begin
    if (flagb_viol)
    begin
      if ((WEBlatched === 1'b0))
      begin
        QB_local_tmp = 32'bx;
      end  // if of read
    end // if of flagb_viol is true
    else
    begin
      QB_local_tmp = 32'bx;
    end // else of if flagb_viol is true
  end // else of if flagb_adr_ok is true and flagb_read_ok is true and flagb_rm_ok is true
  flagb_read_ok = `True;
end // end of always block blk_readout_1

// Handle Read/Write
always @(ev_RST_out_b_port)
begin : blk_readwrite_1
    if (MEBlatched !== 1'b0 && !flagb_viol)
    begin
      if (WEBlatched === 1'bx)
      begin
        flagb_we_ok = `False;
        flagb_read_ok = `False;
        report_unknown("WEB","BISTEB","TWEB");
      end // if of WEBlatched = X
      if ((^DBlatched === 1'bx))
      begin
        if (DBlatched === 32'bx)
        begin
          flagb_d_ok  = `False;
        end
        if (WEBlatched !== 1'b0)
        begin
          report_unknown("DB","BISTEB","TDB");
        end
      end
          if (TEST1Blatched === 1'bx)
          begin
            report_unknown("TEST1B","","");
            if ( WEBlatched == 1'b1 )
            begin
              corrupt_cur_loc(ADRBlatched);                             
            end // if of WEBlatched = 1
            else
            begin
              QB_local_tmp = 32'bx;
            end // else of if WEBlatched = 1
          end // if TEST1Blatched = X
          else
          begin
                if (^RMB === 1'bx)
                begin
                  if ( RMEB !== 1'bx )
                    report_unknown("RMB","","");
                  else
                    report_unknown("RMEB","","");
                  if ( WEBlatched == 1'b1 )
                  begin
                    corrupt_cur_loc(ADRBlatched);
                  end // if of WEBlatched = 1
                  else
                  begin
                    QB_local_tmp = 32'bx;
                  end // else of if WEBlatched = 1
                end // if of RMB = X
                else
                begin
                  if (MEBlatched !== 1'b1)
                  begin
                    flagb_we_ok = `False;       // don't know if cycle is On or Off
                  end // if of MEBlatched != 1 

                  if(ADRBlatched > 11'b11101111111) 
                  begin
                    if( (MES_CNTRL=="ON" || MES_CNTRL=="WARN") && $realtime != 0 && mes_all_valid)
                    begin
                      $display("\n%m<<VIRL_MEM_WARNING:address is out of range>>(time %0t)\n RANGE:0 to 1919\n", $time);
                    end
                    flagb_range_ok = `False;
                    if (WEBlatched === 1'b0)
                    begin
                      flagb_read_ok = `False;
                    end // if of flagb_read_ok
                  end // if of ADRBlatched out of range with MEBlatched = 1
                  if ( MEBlatched === 1'bx )
                  begin
                    report_unknown("MEB","BISTEB","TMEB");
                    `ifdef virage_ignore_read_addx
                    if (WEBlatched == 1'b1)
                    begin
                      corrupt_all_loc(flagb_range_ok);
                    end // if of WEBlatched = 1 
                    else
                    begin
                      QB_local_tmp = 32'bx;
                    end // else of if WEBlatched = 1
                    `else
                    if (WEBlatched == 1'b1)
                    begin
                      corrupt_all_loc(flagb_range_ok);
                    end // if of WEBlatched = 1
                    else
                    begin
                      QB_local_tmp = 32'bx;
                      corrupt_all_loc(flagb_range_ok);
                    end // else of if WEBlatched = 1
                    `endif
                  end // if of MEBlatched = X
                  else
                  begin
                      if (flagb_range_ok && flagb_we_ok && flagb_adr_ok && flagb_d_ok && (WEBlatched == 1'b1))
                      begin
                        
                        mem_core_array[ADRBlatched] = DBlatched;
                          if (!mes_all_valid)
                          begin
                            mes_all_valid = 1'b1;
                          end // if of mes_all_valid = 0
                      end // if of write
                      else
                      begin
                        checkSanityOnBport;
                      end // else of if write
                  if (TEST1Blatched === 1'b1)
                  begin
                     if (WEBlatched === 1'b0)
                     begin
                       flagb_read_ok = `False;
                       -> ev_read_out_b_port;
                       @(negedge CLKB);
                     end
                     if (DFTMASK === 1'b0)
                     -> ev_read_out_b_port;
                  end // if of TEST1Blatched = 1
                  else 
                  begin
                    -> ev_read_out_b_port;
                  end // else of if TEST1Blatched = 1
                  end // else of if MEBlatched = X
                end // else of if RMB = X
          end // else of if TEST1Blatched = X
    end // if of MEBlatched != 0 & flagb_viol = 0
end // end of always block blk_readwrite_1



assign QB_temp = QB_local_tmp;

// Final Output Update 

always @( QB_temp )
begin : blk_output_1
     QB <= QB_temp;
end // end of always block blk_output_1



// Display the warning when TEST1B is 1.
always @ (TEST1B)
begin : blk_test1_1
  if (CLKB === 1'b1 && MEBlatched === 1'b1)
  begin
    QB_local_tmp = 32'bx; 
    flagb_read_ok = `False;
  end
  if ( TEST1B == 1'b1 && (LS === 1'b0))
  begin
    if( (MES_CNTRL =="ON" || MES_CNTRL =="WARN") && $realtime != 0 && mes_all_valid)
    begin
      $display("\n%m <<VIRL_MEM_WARNING: Tcc value in the RAM model is for TEST1B=1'b0,but input value is TEST1B=1'b1>>(time %0t)\n\n", $time);
    end
  end // if TEST1B = 1 
end // end of always block blk_test1_1


endmodule
