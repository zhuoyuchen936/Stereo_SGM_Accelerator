//---------------------------------------------------------------------
//               Copyright(c) Synopsys, Inc.                           
//     All Rights reserved - Unpublished -rights reserved under        
//     the Copyright laws of the United States of America.             
//                                                                     
//  U.S. Patents: 7,093,156 B1 and 7,406,620 B2 (and more pending).    
//                                                                     
//  This file includes the Confidential information of Synopsys, Inc.  
//  and Huali.                                                         
//  The receiver of this Confidential Information shall not disclose   
//  it to any third party and shall protect its confidentiality by     
//  using the same degree of care, but not less than a reasonable      
//  degree of care, as the receiver uses to protect receiver's own     
//  Confidential Information.                                          
//  Licensee acknowledges and agrees that all output generated for     
//  Licensee by Synopsys, Inc. as described in the pertinent Program   
//  Schedule(s), or generated by Licensee through use of any Compiler  
//  licensed hereunder contains information that complies with the     
//  Virtual Component Identification Physical Tagging Standard (VCID)  
//  as maintained by the Virtual Socket Interface Alliance (VSIA).     
//  Such information may be expressed in GDSII Layer 63 or other such  
//  layer designated by the VSIA, hardware definition languages, or    
//  other formats.  Licensee is not authorized to alter or change any  
//  such information.                                                  
//---------------------------------------------------------------------
//                                                                     
//  Built for linux64 and running on linux64.                          
//                                                                     
//  Software           : Rev: T-2022.09                                
//  Library Format     : Rev: 1.05.00                                  
//  Compiler Name      : hu40npk42p22sadsl01msa02                      
//  Platform           : Linux3.10.0-957.el7.x86_64                    
//                     : #1 SMP Thu Nov 8 23:39:32 UTC 2018x86_64      
//  Date of Generation : Fri Jan 26 19:03:50 PST 2024                  
//                                                                     
//---------------------------------------------------------------------
//   --------------------------------------------------------------     
//                       Template Revision : 4.3.2                      
//   --------------------------------------------------------------     
//                      * Synchronous, 2-Port SRAM *                  
//                    * Verilog Behavioral/RTL Model *                
//                THIS IS A SYNCHRONOUS 2-PORT MEMORY MODEL           
//                                                                    
//   Memory Name:SRAMDP_1920x160                                      
//   Memory Size:1920 words x 160 bits                                
//                                                                    
//                               PORT NAME                            
//                               ---------                            
//               Output Ports                                         
//                                   QA[159:0]                        
//                                   QPA[159:0]                       
//                                   SO_QA                            
//                                   SO_DA                            
//                                   SO_CNTRA                         
//                                   QB[159:0]                        
//                                   QPB[159:0]                       
//                                   SO_QB                            
//                                   SO_DB                            
//                                   SO_CNTRB                         
//               Input Ports:                                         
//                                   ADRA[10:0]                       
//                                   DA[159:0]                        
//                                   WEA                              
//                                   MEA                              
//                                   CLKA                             
//                                   TADRA[10:0]                      
//                                   TDA[3:0]                         
//                                   TWEA                             
//                                   TMEA                             
//                                   TCLKA                            
//                                   BISTEA                           
//                                   TEST1A                           
//                                   RMEA                             
//                                   RMA[3:0]                         
//                                   CDA[3:0]                         
//                                   CAPTA                            
//                                   PIPEMEA                          
//                                   TPIPEMEA                         
//                                   TCLKEA                           
//                                   STICKYA                          
//                                   SI_QA                            
//                                   SI_DA                            
//                                   SE_QA                            
//                                   SE_INA                           
//                                   SI_CNTRA                         
//                                   DFTCLKEN                         
//                                   DFTMASK                          
//                                   LS                               
//                                   ADRB[10:0]                       
//                                   DB[159:0]                        
//                                   WEB                              
//                                   MEB                              
//                                   CLKB                             
//                                   TADRB[10:0]                      
//                                   TDB[3:0]                         
//                                   TWEB                             
//                                   TMEB                             
//                                   TCLKB                            
//                                   BISTEB                           
//                                   TEST1B                           
//                                   RMEB                             
//                                   RMB[3:0]                         
//                                   CDB[3:0]                         
//                                   CAPTB                            
//                                   PIPEMEB                          
//                                   TPIPEMEB                         
//                                   TCLKEB                           
//                                   STICKYB                          
//                                   SI_QB                            
//                                   SI_DB                            
//                                   SE_QB                            
//                                   SE_INB                           
//                                   SI_CNTRB                         
// -------------------------------------------------------------------- 
// -------------------------------------------------------------------- 
// This instance is generated with Periphery_Vt = STANDARD option.    
// -------------------------------------------------------------------- 

`resetall 
`timescale 1 ns / 1 ps 
`celldefine 
`ifdef verifault // for fault simulation purpose 
`suppress_faults 
`enable_portfaults 
`endif 

`define True    1'b1
`define False   1'b0

module SRAMDP_1920x160 ( QA, QPA, SO_QA, SO_DA, SO_CNTRA, QB, QPB, SO_QB, SO_DB, SO_CNTRB, ADRA, DA, WEA, MEA, CLKA, TADRA, TDA, TWEA, TMEA, TCLKA, BISTEA, TEST1A, RMEA, RMA, CDA, CAPTA, PIPEMEA, TPIPEMEA, TCLKEA, STICKYA, SI_QA, SI_DA, SE_QA, SE_INA, SI_CNTRA, DFTCLKEN, DFTMASK, LS, ADRB, DB, WEB, MEB, CLKB, TADRB, TDB, TWEB, TMEB, TCLKB, BISTEB, TEST1B, RMEB, RMB, CDB, CAPTB, PIPEMEB, TPIPEMEB, TCLKEB, STICKYB, SI_QB, SI_DB, SE_QB, SE_INB, SI_CNTRB);

// Input/Output Ports Declaration
output  [159:0] QA;
output  [159:0] QPA;
output SO_QA;
output SO_DA;
output SO_CNTRA;
output  [159:0] QB;
output  [159:0] QPB;
output SO_QB;
output SO_DB;
output SO_CNTRB;
input  [10:0] ADRA;
input  [159:0] DA;
input WEA;
input MEA;
input CLKA;
input  [10:0] TADRA;
input  [3:0] TDA;
input TWEA;
input TMEA;
input TCLKA;
input BISTEA;
input TEST1A;
input RMEA;
input  [3:0] RMA;
input  [3:0] CDA;
input CAPTA;
input PIPEMEA;
input TPIPEMEA;
input TCLKEA;
input STICKYA;
input SI_QA;
input SI_DA;
input SE_QA;
input SE_INA;
input SI_CNTRA;
input DFTCLKEN;
input DFTMASK;
input LS;
input  [10:0] ADRB;
input  [159:0] DB;
input WEB;
input MEB;
input CLKB;
input  [10:0] TADRB;
input  [3:0] TDB;
input TWEB;
input TMEB;
input TCLKB;
input BISTEB;
input TEST1B;
input RMEB;
input  [3:0] RMB;
input  [3:0] CDB;
input CAPTB;
input PIPEMEB;
input TPIPEMEB;
input TCLKEB;
input STICKYB;
input SI_QB;
input SI_DB;
input SE_QB;
input SE_INB;
input SI_CNTRB;

// Local registers, wires, etc
`ifdef MEM_CHECK_OFF
parameter MES_CNTRL = "OFF";
`else
parameter MES_CNTRL = "ON";
`endif
parameter MemFault_Inj = 0;

`ifndef MES_CNTRL_DEL_BEGIN
  `define MES_CNTRL_DEL_BEGIN 0
`endif

`ifndef MES_CNTRL_DEL_END
  `define MES_CNTRL_DEL_END 0
`endif
parameter MesCntrl_Begin = `MES_CNTRL_DEL_BEGIN;
parameter MesCntrl_End = `MES_CNTRL_DEL_END;


`ifdef VIRAGE_FAST_VERILOG
reg sim_check_A ;
reg sim_check_B ;
`else
// Notifiers Declaration
wire [10:0] notif_adra;
reg notif_adra_10, notif_adra_9, notif_adra_8, notif_adra_7, notif_adra_6, notif_adra_5, notif_adra_4, notif_adra_3, notif_adra_2, notif_adra_1, notif_adra_0;
wire [159:0] notif_da;
reg notif_da_159, notif_da_158, notif_da_157, notif_da_156, notif_da_155, notif_da_154, notif_da_153, notif_da_152, notif_da_151, notif_da_150, notif_da_149, notif_da_148, notif_da_147, notif_da_146, notif_da_145, notif_da_144, notif_da_143, notif_da_142, notif_da_141, notif_da_140, notif_da_139, notif_da_138, notif_da_137, notif_da_136, notif_da_135, notif_da_134, notif_da_133, notif_da_132, notif_da_131, notif_da_130, notif_da_129, notif_da_128, notif_da_127, notif_da_126, notif_da_125, notif_da_124, notif_da_123, notif_da_122, notif_da_121, notif_da_120, notif_da_119, notif_da_118, notif_da_117, notif_da_116, notif_da_115, notif_da_114, notif_da_113, notif_da_112, notif_da_111, notif_da_110, notif_da_109, notif_da_108, notif_da_107, notif_da_106, notif_da_105, notif_da_104, notif_da_103, notif_da_102, notif_da_101, notif_da_100, notif_da_99, notif_da_98, notif_da_97, notif_da_96, notif_da_95, notif_da_94, notif_da_93, notif_da_92, notif_da_91, notif_da_90, notif_da_89, notif_da_88, notif_da_87, 
notif_da_86, notif_da_85, notif_da_84, notif_da_83, notif_da_82, notif_da_81, notif_da_80, notif_da_79, notif_da_78, notif_da_77, notif_da_76, notif_da_75, notif_da_74, notif_da_73, notif_da_72, notif_da_71, notif_da_70, notif_da_69, notif_da_68, notif_da_67, notif_da_66, notif_da_65, notif_da_64, notif_da_63, notif_da_62, notif_da_61, notif_da_60, notif_da_59, notif_da_58, notif_da_57, notif_da_56, notif_da_55, notif_da_54, notif_da_53, notif_da_52, notif_da_51, notif_da_50, notif_da_49, notif_da_48, notif_da_47, notif_da_46, notif_da_45, notif_da_44, notif_da_43, notif_da_42, notif_da_41, notif_da_40, notif_da_39, notif_da_38, notif_da_37, notif_da_36, notif_da_35, notif_da_34, notif_da_33, notif_da_32, notif_da_31, notif_da_30, notif_da_29, notif_da_28, notif_da_27, notif_da_26, notif_da_25, notif_da_24, notif_da_23, notif_da_22, notif_da_21, notif_da_20, notif_da_19, notif_da_18, notif_da_17, notif_da_16, notif_da_15, notif_da_14, notif_da_13, notif_da_12, notif_da_11, notif_da_10, notif_da_9, notif_da_8, 
notif_da_7, notif_da_6, notif_da_5, notif_da_4, notif_da_3, notif_da_2, notif_da_1, notif_da_0;
reg notif_wea;
reg notif_mea;
reg notif_clka;
reg notif_clka_CLKB_rise_rise_rec;
reg notif_tda_3, notif_tda_2, notif_tda_1, notif_tda_0;
initial begin
{notif_da_159, notif_da_158, notif_da_157, notif_da_156, notif_da_155, notif_da_154, notif_da_153, notif_da_152, notif_da_151, notif_da_150, notif_da_149, notif_da_148, notif_da_147, notif_da_146, notif_da_145, notif_da_144, notif_da_143, notif_da_142, notif_da_141, notif_da_140, notif_da_139, notif_da_138, notif_da_137, notif_da_136, notif_da_135, notif_da_134, notif_da_133, notif_da_132, notif_da_131, notif_da_130, notif_da_129, notif_da_128, notif_da_127, notif_da_126, notif_da_125, notif_da_124, notif_da_123, notif_da_122, notif_da_121, notif_da_120, notif_da_119, notif_da_118, notif_da_117, notif_da_116, notif_da_115, notif_da_114, notif_da_113, notif_da_112, notif_da_111, notif_da_110, notif_da_109, notif_da_108, notif_da_107, notif_da_106, notif_da_105, notif_da_104, notif_da_103, notif_da_102, notif_da_101, notif_da_100, notif_da_99, notif_da_98, notif_da_97, notif_da_96, notif_da_95, notif_da_94, notif_da_93, notif_da_92, notif_da_91, notif_da_90, notif_da_89, notif_da_88, notif_da_87, notif_da_86, 
notif_da_85, notif_da_84, notif_da_83, notif_da_82, notif_da_81, notif_da_80, notif_da_79, notif_da_78, notif_da_77, notif_da_76, notif_da_75, notif_da_74, notif_da_73, notif_da_72, notif_da_71, notif_da_70, notif_da_69, notif_da_68, notif_da_67, notif_da_66, notif_da_65, notif_da_64, notif_da_63, notif_da_62, notif_da_61, notif_da_60, notif_da_59, notif_da_58, notif_da_57, notif_da_56, notif_da_55, notif_da_54, notif_da_53, notif_da_52, notif_da_51, notif_da_50, notif_da_49, notif_da_48, notif_da_47, notif_da_46, notif_da_45, notif_da_44, notif_da_43, notif_da_42, notif_da_41, notif_da_40, notif_da_39, notif_da_38, notif_da_37, notif_da_36, notif_da_35, notif_da_34, notif_da_33, notif_da_32, notif_da_31, notif_da_30, notif_da_29, notif_da_28, notif_da_27, notif_da_26, notif_da_25, notif_da_24, notif_da_23, notif_da_22, notif_da_21, notif_da_20, notif_da_19, notif_da_18, notif_da_17, notif_da_16, notif_da_15, notif_da_14, notif_da_13, notif_da_12, notif_da_11, notif_da_10, notif_da_9, notif_da_8, notif_da_7, 
notif_da_6, notif_da_5, notif_da_4, notif_da_3, notif_da_2, notif_da_1, notif_da_0} = 160'b0;
end
reg notif_clka_TCLKB_rise_rise_rec;
reg notif_bistea;
reg notif_test1a;
reg notif_rmea;
reg notif_rma;
wire [3:0] notif_cda;
reg notif_cda_3, notif_cda_2, notif_cda_1, notif_cda_0;
reg notif_capta;
reg notif_pipemea;
reg notif_tclkea;
reg notif_stickya;
reg notif_si_qa;
reg notif_si_da;
reg notif_se_qa;
reg notif_se_ina;
reg notif_si_cntra;
reg notif_dftclken;
reg notif_dftclken_b;
reg notif_dftmask;
reg notif_dftmask_b;
reg notif_ls;
reg notif_ls_b;
wire [10:0] notif_adrb;
reg notif_adrb_10, notif_adrb_9, notif_adrb_8, notif_adrb_7, notif_adrb_6, notif_adrb_5, notif_adrb_4, notif_adrb_3, notif_adrb_2, notif_adrb_1, notif_adrb_0;
wire [159:0] notif_db;
reg notif_db_159, notif_db_158, notif_db_157, notif_db_156, notif_db_155, notif_db_154, notif_db_153, notif_db_152, notif_db_151, notif_db_150, notif_db_149, notif_db_148, notif_db_147, notif_db_146, notif_db_145, notif_db_144, notif_db_143, notif_db_142, notif_db_141, notif_db_140, notif_db_139, notif_db_138, notif_db_137, notif_db_136, notif_db_135, notif_db_134, notif_db_133, notif_db_132, notif_db_131, notif_db_130, notif_db_129, notif_db_128, notif_db_127, notif_db_126, notif_db_125, notif_db_124, notif_db_123, notif_db_122, notif_db_121, notif_db_120, notif_db_119, notif_db_118, notif_db_117, notif_db_116, notif_db_115, notif_db_114, notif_db_113, notif_db_112, notif_db_111, notif_db_110, notif_db_109, notif_db_108, notif_db_107, notif_db_106, notif_db_105, notif_db_104, notif_db_103, notif_db_102, notif_db_101, notif_db_100, notif_db_99, notif_db_98, notif_db_97, notif_db_96, notif_db_95, notif_db_94, notif_db_93, notif_db_92, notif_db_91, notif_db_90, notif_db_89, notif_db_88, notif_db_87, 
notif_db_86, notif_db_85, notif_db_84, notif_db_83, notif_db_82, notif_db_81, notif_db_80, notif_db_79, notif_db_78, notif_db_77, notif_db_76, notif_db_75, notif_db_74, notif_db_73, notif_db_72, notif_db_71, notif_db_70, notif_db_69, notif_db_68, notif_db_67, notif_db_66, notif_db_65, notif_db_64, notif_db_63, notif_db_62, notif_db_61, notif_db_60, notif_db_59, notif_db_58, notif_db_57, notif_db_56, notif_db_55, notif_db_54, notif_db_53, notif_db_52, notif_db_51, notif_db_50, notif_db_49, notif_db_48, notif_db_47, notif_db_46, notif_db_45, notif_db_44, notif_db_43, notif_db_42, notif_db_41, notif_db_40, notif_db_39, notif_db_38, notif_db_37, notif_db_36, notif_db_35, notif_db_34, notif_db_33, notif_db_32, notif_db_31, notif_db_30, notif_db_29, notif_db_28, notif_db_27, notif_db_26, notif_db_25, notif_db_24, notif_db_23, notif_db_22, notif_db_21, notif_db_20, notif_db_19, notif_db_18, notif_db_17, notif_db_16, notif_db_15, notif_db_14, notif_db_13, notif_db_12, notif_db_11, notif_db_10, notif_db_9, notif_db_8, 
notif_db_7, notif_db_6, notif_db_5, notif_db_4, notif_db_3, notif_db_2, notif_db_1, notif_db_0;
reg notif_web;
reg notif_meb;
reg notif_clkb;
reg notif_clkb_CLKA_rise_rise_rec;
reg notif_tdb_3, notif_tdb_2, notif_tdb_1, notif_tdb_0;
initial begin
{notif_db_159, notif_db_158, notif_db_157, notif_db_156, notif_db_155, notif_db_154, notif_db_153, notif_db_152, notif_db_151, notif_db_150, notif_db_149, notif_db_148, notif_db_147, notif_db_146, notif_db_145, notif_db_144, notif_db_143, notif_db_142, notif_db_141, notif_db_140, notif_db_139, notif_db_138, notif_db_137, notif_db_136, notif_db_135, notif_db_134, notif_db_133, notif_db_132, notif_db_131, notif_db_130, notif_db_129, notif_db_128, notif_db_127, notif_db_126, notif_db_125, notif_db_124, notif_db_123, notif_db_122, notif_db_121, notif_db_120, notif_db_119, notif_db_118, notif_db_117, notif_db_116, notif_db_115, notif_db_114, notif_db_113, notif_db_112, notif_db_111, notif_db_110, notif_db_109, notif_db_108, notif_db_107, notif_db_106, notif_db_105, notif_db_104, notif_db_103, notif_db_102, notif_db_101, notif_db_100, notif_db_99, notif_db_98, notif_db_97, notif_db_96, notif_db_95, notif_db_94, notif_db_93, notif_db_92, notif_db_91, notif_db_90, notif_db_89, notif_db_88, notif_db_87, notif_db_86, 
notif_db_85, notif_db_84, notif_db_83, notif_db_82, notif_db_81, notif_db_80, notif_db_79, notif_db_78, notif_db_77, notif_db_76, notif_db_75, notif_db_74, notif_db_73, notif_db_72, notif_db_71, notif_db_70, notif_db_69, notif_db_68, notif_db_67, notif_db_66, notif_db_65, notif_db_64, notif_db_63, notif_db_62, notif_db_61, notif_db_60, notif_db_59, notif_db_58, notif_db_57, notif_db_56, notif_db_55, notif_db_54, notif_db_53, notif_db_52, notif_db_51, notif_db_50, notif_db_49, notif_db_48, notif_db_47, notif_db_46, notif_db_45, notif_db_44, notif_db_43, notif_db_42, notif_db_41, notif_db_40, notif_db_39, notif_db_38, notif_db_37, notif_db_36, notif_db_35, notif_db_34, notif_db_33, notif_db_32, notif_db_31, notif_db_30, notif_db_29, notif_db_28, notif_db_27, notif_db_26, notif_db_25, notif_db_24, notif_db_23, notif_db_22, notif_db_21, notif_db_20, notif_db_19, notif_db_18, notif_db_17, notif_db_16, notif_db_15, notif_db_14, notif_db_13, notif_db_12, notif_db_11, notif_db_10, notif_db_9, notif_db_8, notif_db_7, 
notif_db_6, notif_db_5, notif_db_4, notif_db_3, notif_db_2, notif_db_1, notif_db_0} = 160'b0;
end
reg notif_clkb_TCLKA_rise_rise_rec;
reg notif_bisteb;
reg notif_test1b;
reg notif_rmeb;
reg notif_rmb;
wire [3:0] notif_cdb;
reg notif_cdb_3, notif_cdb_2, notif_cdb_1, notif_cdb_0;
reg notif_captb;
reg notif_pipemeb;
reg notif_tclkeb;
reg notif_stickyb;
reg notif_si_qb;
reg notif_si_db;
reg notif_se_qb;
reg notif_se_inb;
reg notif_si_cntrb;
`endif
`ifdef VIRAGE_FAST_VERILOG
`else
reg  EVENT_TCQ_A;
`endif
real  CLK_T_A;
reg  [10 : 0 ] ADRA_buf_L;
reg ADRFLAGA;
reg TADRFLAGA;
reg  [10 : 0 ] ADRA_old;
reg  MEA_old;
reg  WEA_old;
`ifdef VIRAGE_FAST_VERILOG
`else
reg  EVENT_TCQ_B;
`endif
real  CLK_T_B;
reg  [10 : 0 ] ADRB_buf_L;
reg ADRFLAGB;
reg TADRFLAGB;
reg  [10 : 0 ] ADRB_old;
reg  MEB_old;
reg  WEB_old;
wire WEA_mout;
wire [10:0] ADRA_mout;
wire [159:0] DA_mout;
wire MEA_mout;
wire PIPEMEA_mout;
wire CLKA_tmp;
wire mclkA;
wire [159:0] QA_mem;
wire CAPTA_int;
wire [3:0]  CDA_int;
wire [159:0] CDA_exp;
wire [159:0] ErrA;
wire WEB_mout;
wire [10:0] ADRB_mout;
wire [159:0] DB_mout;
wire MEB_mout;
wire PIPEMEB_mout;
wire CLKB_tmp;
wire mclkB;
wire [159:0] QB_mem;
wire CAPTB_int;
wire [3:0]  CDB_int;
wire [159:0] CDB_exp;
wire [159:0] ErrB;
wire [159:0] QA_final;
wire [159:0] QB_final;
`ifdef VIRAGE_FAST_VERILOG
wire [159:0] QA_buf;
assign QA[0] = QA_buf[0];
assign QA[1] = QA_buf[1];
assign QA[2] = QA_buf[2];
assign QA[3] = QA_buf[3];
assign QA[4] = QA_buf[4];
assign QA[5] = QA_buf[5];
assign QA[6] = QA_buf[6];
assign QA[7] = QA_buf[7];
assign QA[8] = QA_buf[8];
assign QA[9] = QA_buf[9];
assign QA[10] = QA_buf[10];
assign QA[11] = QA_buf[11];
assign QA[12] = QA_buf[12];
assign QA[13] = QA_buf[13];
assign QA[14] = QA_buf[14];
assign QA[15] = QA_buf[15];
assign QA[16] = QA_buf[16];
assign QA[17] = QA_buf[17];
assign QA[18] = QA_buf[18];
assign QA[19] = QA_buf[19];
assign QA[20] = QA_buf[20];
assign QA[21] = QA_buf[21];
assign QA[22] = QA_buf[22];
assign QA[23] = QA_buf[23];
assign QA[24] = QA_buf[24];
assign QA[25] = QA_buf[25];
assign QA[26] = QA_buf[26];
assign QA[27] = QA_buf[27];
assign QA[28] = QA_buf[28];
assign QA[29] = QA_buf[29];
assign QA[30] = QA_buf[30];
assign QA[31] = QA_buf[31];
assign QA[32] = QA_buf[32];
assign QA[33] = QA_buf[33];
assign QA[34] = QA_buf[34];
assign QA[35] = QA_buf[35];
assign QA[36] = QA_buf[36];
assign QA[37] = QA_buf[37];
assign QA[38] = QA_buf[38];
assign QA[39] = QA_buf[39];
assign QA[40] = QA_buf[40];
assign QA[41] = QA_buf[41];
assign QA[42] = QA_buf[42];
assign QA[43] = QA_buf[43];
assign QA[44] = QA_buf[44];
assign QA[45] = QA_buf[45];
assign QA[46] = QA_buf[46];
assign QA[47] = QA_buf[47];
assign QA[48] = QA_buf[48];
assign QA[49] = QA_buf[49];
assign QA[50] = QA_buf[50];
assign QA[51] = QA_buf[51];
assign QA[52] = QA_buf[52];
assign QA[53] = QA_buf[53];
assign QA[54] = QA_buf[54];
assign QA[55] = QA_buf[55];
assign QA[56] = QA_buf[56];
assign QA[57] = QA_buf[57];
assign QA[58] = QA_buf[58];
assign QA[59] = QA_buf[59];
assign QA[60] = QA_buf[60];
assign QA[61] = QA_buf[61];
assign QA[62] = QA_buf[62];
assign QA[63] = QA_buf[63];
assign QA[64] = QA_buf[64];
assign QA[65] = QA_buf[65];
assign QA[66] = QA_buf[66];
assign QA[67] = QA_buf[67];
assign QA[68] = QA_buf[68];
assign QA[69] = QA_buf[69];
assign QA[70] = QA_buf[70];
assign QA[71] = QA_buf[71];
assign QA[72] = QA_buf[72];
assign QA[73] = QA_buf[73];
assign QA[74] = QA_buf[74];
assign QA[75] = QA_buf[75];
assign QA[76] = QA_buf[76];
assign QA[77] = QA_buf[77];
assign QA[78] = QA_buf[78];
assign QA[79] = QA_buf[79];
assign QA[80] = QA_buf[80];
assign QA[81] = QA_buf[81];
assign QA[82] = QA_buf[82];
assign QA[83] = QA_buf[83];
assign QA[84] = QA_buf[84];
assign QA[85] = QA_buf[85];
assign QA[86] = QA_buf[86];
assign QA[87] = QA_buf[87];
assign QA[88] = QA_buf[88];
assign QA[89] = QA_buf[89];
assign QA[90] = QA_buf[90];
assign QA[91] = QA_buf[91];
assign QA[92] = QA_buf[92];
assign QA[93] = QA_buf[93];
assign QA[94] = QA_buf[94];
assign QA[95] = QA_buf[95];
assign QA[96] = QA_buf[96];
assign QA[97] = QA_buf[97];
assign QA[98] = QA_buf[98];
assign QA[99] = QA_buf[99];
assign QA[100] = QA_buf[100];
assign QA[101] = QA_buf[101];
assign QA[102] = QA_buf[102];
assign QA[103] = QA_buf[103];
assign QA[104] = QA_buf[104];
assign QA[105] = QA_buf[105];
assign QA[106] = QA_buf[106];
assign QA[107] = QA_buf[107];
assign QA[108] = QA_buf[108];
assign QA[109] = QA_buf[109];
assign QA[110] = QA_buf[110];
assign QA[111] = QA_buf[111];
assign QA[112] = QA_buf[112];
assign QA[113] = QA_buf[113];
assign QA[114] = QA_buf[114];
assign QA[115] = QA_buf[115];
assign QA[116] = QA_buf[116];
assign QA[117] = QA_buf[117];
assign QA[118] = QA_buf[118];
assign QA[119] = QA_buf[119];
assign QA[120] = QA_buf[120];
assign QA[121] = QA_buf[121];
assign QA[122] = QA_buf[122];
assign QA[123] = QA_buf[123];
assign QA[124] = QA_buf[124];
assign QA[125] = QA_buf[125];
assign QA[126] = QA_buf[126];
assign QA[127] = QA_buf[127];
assign QA[128] = QA_buf[128];
assign QA[129] = QA_buf[129];
assign QA[130] = QA_buf[130];
assign QA[131] = QA_buf[131];
assign QA[132] = QA_buf[132];
assign QA[133] = QA_buf[133];
assign QA[134] = QA_buf[134];
assign QA[135] = QA_buf[135];
assign QA[136] = QA_buf[136];
assign QA[137] = QA_buf[137];
assign QA[138] = QA_buf[138];
assign QA[139] = QA_buf[139];
assign QA[140] = QA_buf[140];
assign QA[141] = QA_buf[141];
assign QA[142] = QA_buf[142];
assign QA[143] = QA_buf[143];
assign QA[144] = QA_buf[144];
assign QA[145] = QA_buf[145];
assign QA[146] = QA_buf[146];
assign QA[147] = QA_buf[147];
assign QA[148] = QA_buf[148];
assign QA[149] = QA_buf[149];
assign QA[150] = QA_buf[150];
assign QA[151] = QA_buf[151];
assign QA[152] = QA_buf[152];
assign QA[153] = QA_buf[153];
assign QA[154] = QA_buf[154];
assign QA[155] = QA_buf[155];
assign QA[156] = QA_buf[156];
assign QA[157] = QA_buf[157];
assign QA[158] = QA_buf[158];
assign QA[159] = QA_buf[159];
wire [159:0] QPA_buf;
assign QPA[0] = QPA_buf[0];
assign QPA[1] = QPA_buf[1];
assign QPA[2] = QPA_buf[2];
assign QPA[3] = QPA_buf[3];
assign QPA[4] = QPA_buf[4];
assign QPA[5] = QPA_buf[5];
assign QPA[6] = QPA_buf[6];
assign QPA[7] = QPA_buf[7];
assign QPA[8] = QPA_buf[8];
assign QPA[9] = QPA_buf[9];
assign QPA[10] = QPA_buf[10];
assign QPA[11] = QPA_buf[11];
assign QPA[12] = QPA_buf[12];
assign QPA[13] = QPA_buf[13];
assign QPA[14] = QPA_buf[14];
assign QPA[15] = QPA_buf[15];
assign QPA[16] = QPA_buf[16];
assign QPA[17] = QPA_buf[17];
assign QPA[18] = QPA_buf[18];
assign QPA[19] = QPA_buf[19];
assign QPA[20] = QPA_buf[20];
assign QPA[21] = QPA_buf[21];
assign QPA[22] = QPA_buf[22];
assign QPA[23] = QPA_buf[23];
assign QPA[24] = QPA_buf[24];
assign QPA[25] = QPA_buf[25];
assign QPA[26] = QPA_buf[26];
assign QPA[27] = QPA_buf[27];
assign QPA[28] = QPA_buf[28];
assign QPA[29] = QPA_buf[29];
assign QPA[30] = QPA_buf[30];
assign QPA[31] = QPA_buf[31];
assign QPA[32] = QPA_buf[32];
assign QPA[33] = QPA_buf[33];
assign QPA[34] = QPA_buf[34];
assign QPA[35] = QPA_buf[35];
assign QPA[36] = QPA_buf[36];
assign QPA[37] = QPA_buf[37];
assign QPA[38] = QPA_buf[38];
assign QPA[39] = QPA_buf[39];
assign QPA[40] = QPA_buf[40];
assign QPA[41] = QPA_buf[41];
assign QPA[42] = QPA_buf[42];
assign QPA[43] = QPA_buf[43];
assign QPA[44] = QPA_buf[44];
assign QPA[45] = QPA_buf[45];
assign QPA[46] = QPA_buf[46];
assign QPA[47] = QPA_buf[47];
assign QPA[48] = QPA_buf[48];
assign QPA[49] = QPA_buf[49];
assign QPA[50] = QPA_buf[50];
assign QPA[51] = QPA_buf[51];
assign QPA[52] = QPA_buf[52];
assign QPA[53] = QPA_buf[53];
assign QPA[54] = QPA_buf[54];
assign QPA[55] = QPA_buf[55];
assign QPA[56] = QPA_buf[56];
assign QPA[57] = QPA_buf[57];
assign QPA[58] = QPA_buf[58];
assign QPA[59] = QPA_buf[59];
assign QPA[60] = QPA_buf[60];
assign QPA[61] = QPA_buf[61];
assign QPA[62] = QPA_buf[62];
assign QPA[63] = QPA_buf[63];
assign QPA[64] = QPA_buf[64];
assign QPA[65] = QPA_buf[65];
assign QPA[66] = QPA_buf[66];
assign QPA[67] = QPA_buf[67];
assign QPA[68] = QPA_buf[68];
assign QPA[69] = QPA_buf[69];
assign QPA[70] = QPA_buf[70];
assign QPA[71] = QPA_buf[71];
assign QPA[72] = QPA_buf[72];
assign QPA[73] = QPA_buf[73];
assign QPA[74] = QPA_buf[74];
assign QPA[75] = QPA_buf[75];
assign QPA[76] = QPA_buf[76];
assign QPA[77] = QPA_buf[77];
assign QPA[78] = QPA_buf[78];
assign QPA[79] = QPA_buf[79];
assign QPA[80] = QPA_buf[80];
assign QPA[81] = QPA_buf[81];
assign QPA[82] = QPA_buf[82];
assign QPA[83] = QPA_buf[83];
assign QPA[84] = QPA_buf[84];
assign QPA[85] = QPA_buf[85];
assign QPA[86] = QPA_buf[86];
assign QPA[87] = QPA_buf[87];
assign QPA[88] = QPA_buf[88];
assign QPA[89] = QPA_buf[89];
assign QPA[90] = QPA_buf[90];
assign QPA[91] = QPA_buf[91];
assign QPA[92] = QPA_buf[92];
assign QPA[93] = QPA_buf[93];
assign QPA[94] = QPA_buf[94];
assign QPA[95] = QPA_buf[95];
assign QPA[96] = QPA_buf[96];
assign QPA[97] = QPA_buf[97];
assign QPA[98] = QPA_buf[98];
assign QPA[99] = QPA_buf[99];
assign QPA[100] = QPA_buf[100];
assign QPA[101] = QPA_buf[101];
assign QPA[102] = QPA_buf[102];
assign QPA[103] = QPA_buf[103];
assign QPA[104] = QPA_buf[104];
assign QPA[105] = QPA_buf[105];
assign QPA[106] = QPA_buf[106];
assign QPA[107] = QPA_buf[107];
assign QPA[108] = QPA_buf[108];
assign QPA[109] = QPA_buf[109];
assign QPA[110] = QPA_buf[110];
assign QPA[111] = QPA_buf[111];
assign QPA[112] = QPA_buf[112];
assign QPA[113] = QPA_buf[113];
assign QPA[114] = QPA_buf[114];
assign QPA[115] = QPA_buf[115];
assign QPA[116] = QPA_buf[116];
assign QPA[117] = QPA_buf[117];
assign QPA[118] = QPA_buf[118];
assign QPA[119] = QPA_buf[119];
assign QPA[120] = QPA_buf[120];
assign QPA[121] = QPA_buf[121];
assign QPA[122] = QPA_buf[122];
assign QPA[123] = QPA_buf[123];
assign QPA[124] = QPA_buf[124];
assign QPA[125] = QPA_buf[125];
assign QPA[126] = QPA_buf[126];
assign QPA[127] = QPA_buf[127];
assign QPA[128] = QPA_buf[128];
assign QPA[129] = QPA_buf[129];
assign QPA[130] = QPA_buf[130];
assign QPA[131] = QPA_buf[131];
assign QPA[132] = QPA_buf[132];
assign QPA[133] = QPA_buf[133];
assign QPA[134] = QPA_buf[134];
assign QPA[135] = QPA_buf[135];
assign QPA[136] = QPA_buf[136];
assign QPA[137] = QPA_buf[137];
assign QPA[138] = QPA_buf[138];
assign QPA[139] = QPA_buf[139];
assign QPA[140] = QPA_buf[140];
assign QPA[141] = QPA_buf[141];
assign QPA[142] = QPA_buf[142];
assign QPA[143] = QPA_buf[143];
assign QPA[144] = QPA_buf[144];
assign QPA[145] = QPA_buf[145];
assign QPA[146] = QPA_buf[146];
assign QPA[147] = QPA_buf[147];
assign QPA[148] = QPA_buf[148];
assign QPA[149] = QPA_buf[149];
assign QPA[150] = QPA_buf[150];
assign QPA[151] = QPA_buf[151];
assign QPA[152] = QPA_buf[152];
assign QPA[153] = QPA_buf[153];
assign QPA[154] = QPA_buf[154];
assign QPA[155] = QPA_buf[155];
assign QPA[156] = QPA_buf[156];
assign QPA[157] = QPA_buf[157];
assign QPA[158] = QPA_buf[158];
assign QPA[159] = QPA_buf[159];
wire SO_QA_buf;
assign  SO_QA = SO_QA_buf;
wire SO_DA_buf;
assign  SO_DA = SO_DA_buf;
wire SO_CNTRA_buf;
assign  SO_CNTRA = SO_CNTRA_buf;
wire [159:0] QB_buf;
assign QB[0] = QB_buf[0];
assign QB[1] = QB_buf[1];
assign QB[2] = QB_buf[2];
assign QB[3] = QB_buf[3];
assign QB[4] = QB_buf[4];
assign QB[5] = QB_buf[5];
assign QB[6] = QB_buf[6];
assign QB[7] = QB_buf[7];
assign QB[8] = QB_buf[8];
assign QB[9] = QB_buf[9];
assign QB[10] = QB_buf[10];
assign QB[11] = QB_buf[11];
assign QB[12] = QB_buf[12];
assign QB[13] = QB_buf[13];
assign QB[14] = QB_buf[14];
assign QB[15] = QB_buf[15];
assign QB[16] = QB_buf[16];
assign QB[17] = QB_buf[17];
assign QB[18] = QB_buf[18];
assign QB[19] = QB_buf[19];
assign QB[20] = QB_buf[20];
assign QB[21] = QB_buf[21];
assign QB[22] = QB_buf[22];
assign QB[23] = QB_buf[23];
assign QB[24] = QB_buf[24];
assign QB[25] = QB_buf[25];
assign QB[26] = QB_buf[26];
assign QB[27] = QB_buf[27];
assign QB[28] = QB_buf[28];
assign QB[29] = QB_buf[29];
assign QB[30] = QB_buf[30];
assign QB[31] = QB_buf[31];
assign QB[32] = QB_buf[32];
assign QB[33] = QB_buf[33];
assign QB[34] = QB_buf[34];
assign QB[35] = QB_buf[35];
assign QB[36] = QB_buf[36];
assign QB[37] = QB_buf[37];
assign QB[38] = QB_buf[38];
assign QB[39] = QB_buf[39];
assign QB[40] = QB_buf[40];
assign QB[41] = QB_buf[41];
assign QB[42] = QB_buf[42];
assign QB[43] = QB_buf[43];
assign QB[44] = QB_buf[44];
assign QB[45] = QB_buf[45];
assign QB[46] = QB_buf[46];
assign QB[47] = QB_buf[47];
assign QB[48] = QB_buf[48];
assign QB[49] = QB_buf[49];
assign QB[50] = QB_buf[50];
assign QB[51] = QB_buf[51];
assign QB[52] = QB_buf[52];
assign QB[53] = QB_buf[53];
assign QB[54] = QB_buf[54];
assign QB[55] = QB_buf[55];
assign QB[56] = QB_buf[56];
assign QB[57] = QB_buf[57];
assign QB[58] = QB_buf[58];
assign QB[59] = QB_buf[59];
assign QB[60] = QB_buf[60];
assign QB[61] = QB_buf[61];
assign QB[62] = QB_buf[62];
assign QB[63] = QB_buf[63];
assign QB[64] = QB_buf[64];
assign QB[65] = QB_buf[65];
assign QB[66] = QB_buf[66];
assign QB[67] = QB_buf[67];
assign QB[68] = QB_buf[68];
assign QB[69] = QB_buf[69];
assign QB[70] = QB_buf[70];
assign QB[71] = QB_buf[71];
assign QB[72] = QB_buf[72];
assign QB[73] = QB_buf[73];
assign QB[74] = QB_buf[74];
assign QB[75] = QB_buf[75];
assign QB[76] = QB_buf[76];
assign QB[77] = QB_buf[77];
assign QB[78] = QB_buf[78];
assign QB[79] = QB_buf[79];
assign QB[80] = QB_buf[80];
assign QB[81] = QB_buf[81];
assign QB[82] = QB_buf[82];
assign QB[83] = QB_buf[83];
assign QB[84] = QB_buf[84];
assign QB[85] = QB_buf[85];
assign QB[86] = QB_buf[86];
assign QB[87] = QB_buf[87];
assign QB[88] = QB_buf[88];
assign QB[89] = QB_buf[89];
assign QB[90] = QB_buf[90];
assign QB[91] = QB_buf[91];
assign QB[92] = QB_buf[92];
assign QB[93] = QB_buf[93];
assign QB[94] = QB_buf[94];
assign QB[95] = QB_buf[95];
assign QB[96] = QB_buf[96];
assign QB[97] = QB_buf[97];
assign QB[98] = QB_buf[98];
assign QB[99] = QB_buf[99];
assign QB[100] = QB_buf[100];
assign QB[101] = QB_buf[101];
assign QB[102] = QB_buf[102];
assign QB[103] = QB_buf[103];
assign QB[104] = QB_buf[104];
assign QB[105] = QB_buf[105];
assign QB[106] = QB_buf[106];
assign QB[107] = QB_buf[107];
assign QB[108] = QB_buf[108];
assign QB[109] = QB_buf[109];
assign QB[110] = QB_buf[110];
assign QB[111] = QB_buf[111];
assign QB[112] = QB_buf[112];
assign QB[113] = QB_buf[113];
assign QB[114] = QB_buf[114];
assign QB[115] = QB_buf[115];
assign QB[116] = QB_buf[116];
assign QB[117] = QB_buf[117];
assign QB[118] = QB_buf[118];
assign QB[119] = QB_buf[119];
assign QB[120] = QB_buf[120];
assign QB[121] = QB_buf[121];
assign QB[122] = QB_buf[122];
assign QB[123] = QB_buf[123];
assign QB[124] = QB_buf[124];
assign QB[125] = QB_buf[125];
assign QB[126] = QB_buf[126];
assign QB[127] = QB_buf[127];
assign QB[128] = QB_buf[128];
assign QB[129] = QB_buf[129];
assign QB[130] = QB_buf[130];
assign QB[131] = QB_buf[131];
assign QB[132] = QB_buf[132];
assign QB[133] = QB_buf[133];
assign QB[134] = QB_buf[134];
assign QB[135] = QB_buf[135];
assign QB[136] = QB_buf[136];
assign QB[137] = QB_buf[137];
assign QB[138] = QB_buf[138];
assign QB[139] = QB_buf[139];
assign QB[140] = QB_buf[140];
assign QB[141] = QB_buf[141];
assign QB[142] = QB_buf[142];
assign QB[143] = QB_buf[143];
assign QB[144] = QB_buf[144];
assign QB[145] = QB_buf[145];
assign QB[146] = QB_buf[146];
assign QB[147] = QB_buf[147];
assign QB[148] = QB_buf[148];
assign QB[149] = QB_buf[149];
assign QB[150] = QB_buf[150];
assign QB[151] = QB_buf[151];
assign QB[152] = QB_buf[152];
assign QB[153] = QB_buf[153];
assign QB[154] = QB_buf[154];
assign QB[155] = QB_buf[155];
assign QB[156] = QB_buf[156];
assign QB[157] = QB_buf[157];
assign QB[158] = QB_buf[158];
assign QB[159] = QB_buf[159];
wire [159:0] QPB_buf;
assign QPB[0] = QPB_buf[0];
assign QPB[1] = QPB_buf[1];
assign QPB[2] = QPB_buf[2];
assign QPB[3] = QPB_buf[3];
assign QPB[4] = QPB_buf[4];
assign QPB[5] = QPB_buf[5];
assign QPB[6] = QPB_buf[6];
assign QPB[7] = QPB_buf[7];
assign QPB[8] = QPB_buf[8];
assign QPB[9] = QPB_buf[9];
assign QPB[10] = QPB_buf[10];
assign QPB[11] = QPB_buf[11];
assign QPB[12] = QPB_buf[12];
assign QPB[13] = QPB_buf[13];
assign QPB[14] = QPB_buf[14];
assign QPB[15] = QPB_buf[15];
assign QPB[16] = QPB_buf[16];
assign QPB[17] = QPB_buf[17];
assign QPB[18] = QPB_buf[18];
assign QPB[19] = QPB_buf[19];
assign QPB[20] = QPB_buf[20];
assign QPB[21] = QPB_buf[21];
assign QPB[22] = QPB_buf[22];
assign QPB[23] = QPB_buf[23];
assign QPB[24] = QPB_buf[24];
assign QPB[25] = QPB_buf[25];
assign QPB[26] = QPB_buf[26];
assign QPB[27] = QPB_buf[27];
assign QPB[28] = QPB_buf[28];
assign QPB[29] = QPB_buf[29];
assign QPB[30] = QPB_buf[30];
assign QPB[31] = QPB_buf[31];
assign QPB[32] = QPB_buf[32];
assign QPB[33] = QPB_buf[33];
assign QPB[34] = QPB_buf[34];
assign QPB[35] = QPB_buf[35];
assign QPB[36] = QPB_buf[36];
assign QPB[37] = QPB_buf[37];
assign QPB[38] = QPB_buf[38];
assign QPB[39] = QPB_buf[39];
assign QPB[40] = QPB_buf[40];
assign QPB[41] = QPB_buf[41];
assign QPB[42] = QPB_buf[42];
assign QPB[43] = QPB_buf[43];
assign QPB[44] = QPB_buf[44];
assign QPB[45] = QPB_buf[45];
assign QPB[46] = QPB_buf[46];
assign QPB[47] = QPB_buf[47];
assign QPB[48] = QPB_buf[48];
assign QPB[49] = QPB_buf[49];
assign QPB[50] = QPB_buf[50];
assign QPB[51] = QPB_buf[51];
assign QPB[52] = QPB_buf[52];
assign QPB[53] = QPB_buf[53];
assign QPB[54] = QPB_buf[54];
assign QPB[55] = QPB_buf[55];
assign QPB[56] = QPB_buf[56];
assign QPB[57] = QPB_buf[57];
assign QPB[58] = QPB_buf[58];
assign QPB[59] = QPB_buf[59];
assign QPB[60] = QPB_buf[60];
assign QPB[61] = QPB_buf[61];
assign QPB[62] = QPB_buf[62];
assign QPB[63] = QPB_buf[63];
assign QPB[64] = QPB_buf[64];
assign QPB[65] = QPB_buf[65];
assign QPB[66] = QPB_buf[66];
assign QPB[67] = QPB_buf[67];
assign QPB[68] = QPB_buf[68];
assign QPB[69] = QPB_buf[69];
assign QPB[70] = QPB_buf[70];
assign QPB[71] = QPB_buf[71];
assign QPB[72] = QPB_buf[72];
assign QPB[73] = QPB_buf[73];
assign QPB[74] = QPB_buf[74];
assign QPB[75] = QPB_buf[75];
assign QPB[76] = QPB_buf[76];
assign QPB[77] = QPB_buf[77];
assign QPB[78] = QPB_buf[78];
assign QPB[79] = QPB_buf[79];
assign QPB[80] = QPB_buf[80];
assign QPB[81] = QPB_buf[81];
assign QPB[82] = QPB_buf[82];
assign QPB[83] = QPB_buf[83];
assign QPB[84] = QPB_buf[84];
assign QPB[85] = QPB_buf[85];
assign QPB[86] = QPB_buf[86];
assign QPB[87] = QPB_buf[87];
assign QPB[88] = QPB_buf[88];
assign QPB[89] = QPB_buf[89];
assign QPB[90] = QPB_buf[90];
assign QPB[91] = QPB_buf[91];
assign QPB[92] = QPB_buf[92];
assign QPB[93] = QPB_buf[93];
assign QPB[94] = QPB_buf[94];
assign QPB[95] = QPB_buf[95];
assign QPB[96] = QPB_buf[96];
assign QPB[97] = QPB_buf[97];
assign QPB[98] = QPB_buf[98];
assign QPB[99] = QPB_buf[99];
assign QPB[100] = QPB_buf[100];
assign QPB[101] = QPB_buf[101];
assign QPB[102] = QPB_buf[102];
assign QPB[103] = QPB_buf[103];
assign QPB[104] = QPB_buf[104];
assign QPB[105] = QPB_buf[105];
assign QPB[106] = QPB_buf[106];
assign QPB[107] = QPB_buf[107];
assign QPB[108] = QPB_buf[108];
assign QPB[109] = QPB_buf[109];
assign QPB[110] = QPB_buf[110];
assign QPB[111] = QPB_buf[111];
assign QPB[112] = QPB_buf[112];
assign QPB[113] = QPB_buf[113];
assign QPB[114] = QPB_buf[114];
assign QPB[115] = QPB_buf[115];
assign QPB[116] = QPB_buf[116];
assign QPB[117] = QPB_buf[117];
assign QPB[118] = QPB_buf[118];
assign QPB[119] = QPB_buf[119];
assign QPB[120] = QPB_buf[120];
assign QPB[121] = QPB_buf[121];
assign QPB[122] = QPB_buf[122];
assign QPB[123] = QPB_buf[123];
assign QPB[124] = QPB_buf[124];
assign QPB[125] = QPB_buf[125];
assign QPB[126] = QPB_buf[126];
assign QPB[127] = QPB_buf[127];
assign QPB[128] = QPB_buf[128];
assign QPB[129] = QPB_buf[129];
assign QPB[130] = QPB_buf[130];
assign QPB[131] = QPB_buf[131];
assign QPB[132] = QPB_buf[132];
assign QPB[133] = QPB_buf[133];
assign QPB[134] = QPB_buf[134];
assign QPB[135] = QPB_buf[135];
assign QPB[136] = QPB_buf[136];
assign QPB[137] = QPB_buf[137];
assign QPB[138] = QPB_buf[138];
assign QPB[139] = QPB_buf[139];
assign QPB[140] = QPB_buf[140];
assign QPB[141] = QPB_buf[141];
assign QPB[142] = QPB_buf[142];
assign QPB[143] = QPB_buf[143];
assign QPB[144] = QPB_buf[144];
assign QPB[145] = QPB_buf[145];
assign QPB[146] = QPB_buf[146];
assign QPB[147] = QPB_buf[147];
assign QPB[148] = QPB_buf[148];
assign QPB[149] = QPB_buf[149];
assign QPB[150] = QPB_buf[150];
assign QPB[151] = QPB_buf[151];
assign QPB[152] = QPB_buf[152];
assign QPB[153] = QPB_buf[153];
assign QPB[154] = QPB_buf[154];
assign QPB[155] = QPB_buf[155];
assign QPB[156] = QPB_buf[156];
assign QPB[157] = QPB_buf[157];
assign QPB[158] = QPB_buf[158];
assign QPB[159] = QPB_buf[159];
wire SO_QB_buf;
assign  SO_QB = SO_QB_buf;
wire SO_DB_buf;
assign  SO_DB = SO_DB_buf;
wire SO_CNTRB_buf;
assign  SO_CNTRB = SO_CNTRB_buf;
wire [10:0] ADRA_buf;
assign  ADRA_buf[0] =  ADRA[0];
assign  ADRA_buf[1] =  ADRA[1];
assign  ADRA_buf[2] =  ADRA[2];
assign  ADRA_buf[3] =  ADRA[3];
assign  ADRA_buf[4] =  ADRA[4];
assign  ADRA_buf[5] =  ADRA[5];
assign  ADRA_buf[6] =  ADRA[6];
assign  ADRA_buf[7] =  ADRA[7];
assign  ADRA_buf[8] =  ADRA[8];
assign  ADRA_buf[9] =  ADRA[9];
assign  ADRA_buf[10] =  ADRA[10];
wire [159:0] DA_buf;
assign  DA_buf[0] =  DA[0];
assign  DA_buf[1] =  DA[1];
assign  DA_buf[2] =  DA[2];
assign  DA_buf[3] =  DA[3];
assign  DA_buf[4] =  DA[4];
assign  DA_buf[5] =  DA[5];
assign  DA_buf[6] =  DA[6];
assign  DA_buf[7] =  DA[7];
assign  DA_buf[8] =  DA[8];
assign  DA_buf[9] =  DA[9];
assign  DA_buf[10] =  DA[10];
assign  DA_buf[11] =  DA[11];
assign  DA_buf[12] =  DA[12];
assign  DA_buf[13] =  DA[13];
assign  DA_buf[14] =  DA[14];
assign  DA_buf[15] =  DA[15];
assign  DA_buf[16] =  DA[16];
assign  DA_buf[17] =  DA[17];
assign  DA_buf[18] =  DA[18];
assign  DA_buf[19] =  DA[19];
assign  DA_buf[20] =  DA[20];
assign  DA_buf[21] =  DA[21];
assign  DA_buf[22] =  DA[22];
assign  DA_buf[23] =  DA[23];
assign  DA_buf[24] =  DA[24];
assign  DA_buf[25] =  DA[25];
assign  DA_buf[26] =  DA[26];
assign  DA_buf[27] =  DA[27];
assign  DA_buf[28] =  DA[28];
assign  DA_buf[29] =  DA[29];
assign  DA_buf[30] =  DA[30];
assign  DA_buf[31] =  DA[31];
assign  DA_buf[32] =  DA[32];
assign  DA_buf[33] =  DA[33];
assign  DA_buf[34] =  DA[34];
assign  DA_buf[35] =  DA[35];
assign  DA_buf[36] =  DA[36];
assign  DA_buf[37] =  DA[37];
assign  DA_buf[38] =  DA[38];
assign  DA_buf[39] =  DA[39];
assign  DA_buf[40] =  DA[40];
assign  DA_buf[41] =  DA[41];
assign  DA_buf[42] =  DA[42];
assign  DA_buf[43] =  DA[43];
assign  DA_buf[44] =  DA[44];
assign  DA_buf[45] =  DA[45];
assign  DA_buf[46] =  DA[46];
assign  DA_buf[47] =  DA[47];
assign  DA_buf[48] =  DA[48];
assign  DA_buf[49] =  DA[49];
assign  DA_buf[50] =  DA[50];
assign  DA_buf[51] =  DA[51];
assign  DA_buf[52] =  DA[52];
assign  DA_buf[53] =  DA[53];
assign  DA_buf[54] =  DA[54];
assign  DA_buf[55] =  DA[55];
assign  DA_buf[56] =  DA[56];
assign  DA_buf[57] =  DA[57];
assign  DA_buf[58] =  DA[58];
assign  DA_buf[59] =  DA[59];
assign  DA_buf[60] =  DA[60];
assign  DA_buf[61] =  DA[61];
assign  DA_buf[62] =  DA[62];
assign  DA_buf[63] =  DA[63];
assign  DA_buf[64] =  DA[64];
assign  DA_buf[65] =  DA[65];
assign  DA_buf[66] =  DA[66];
assign  DA_buf[67] =  DA[67];
assign  DA_buf[68] =  DA[68];
assign  DA_buf[69] =  DA[69];
assign  DA_buf[70] =  DA[70];
assign  DA_buf[71] =  DA[71];
assign  DA_buf[72] =  DA[72];
assign  DA_buf[73] =  DA[73];
assign  DA_buf[74] =  DA[74];
assign  DA_buf[75] =  DA[75];
assign  DA_buf[76] =  DA[76];
assign  DA_buf[77] =  DA[77];
assign  DA_buf[78] =  DA[78];
assign  DA_buf[79] =  DA[79];
assign  DA_buf[80] =  DA[80];
assign  DA_buf[81] =  DA[81];
assign  DA_buf[82] =  DA[82];
assign  DA_buf[83] =  DA[83];
assign  DA_buf[84] =  DA[84];
assign  DA_buf[85] =  DA[85];
assign  DA_buf[86] =  DA[86];
assign  DA_buf[87] =  DA[87];
assign  DA_buf[88] =  DA[88];
assign  DA_buf[89] =  DA[89];
assign  DA_buf[90] =  DA[90];
assign  DA_buf[91] =  DA[91];
assign  DA_buf[92] =  DA[92];
assign  DA_buf[93] =  DA[93];
assign  DA_buf[94] =  DA[94];
assign  DA_buf[95] =  DA[95];
assign  DA_buf[96] =  DA[96];
assign  DA_buf[97] =  DA[97];
assign  DA_buf[98] =  DA[98];
assign  DA_buf[99] =  DA[99];
assign  DA_buf[100] =  DA[100];
assign  DA_buf[101] =  DA[101];
assign  DA_buf[102] =  DA[102];
assign  DA_buf[103] =  DA[103];
assign  DA_buf[104] =  DA[104];
assign  DA_buf[105] =  DA[105];
assign  DA_buf[106] =  DA[106];
assign  DA_buf[107] =  DA[107];
assign  DA_buf[108] =  DA[108];
assign  DA_buf[109] =  DA[109];
assign  DA_buf[110] =  DA[110];
assign  DA_buf[111] =  DA[111];
assign  DA_buf[112] =  DA[112];
assign  DA_buf[113] =  DA[113];
assign  DA_buf[114] =  DA[114];
assign  DA_buf[115] =  DA[115];
assign  DA_buf[116] =  DA[116];
assign  DA_buf[117] =  DA[117];
assign  DA_buf[118] =  DA[118];
assign  DA_buf[119] =  DA[119];
assign  DA_buf[120] =  DA[120];
assign  DA_buf[121] =  DA[121];
assign  DA_buf[122] =  DA[122];
assign  DA_buf[123] =  DA[123];
assign  DA_buf[124] =  DA[124];
assign  DA_buf[125] =  DA[125];
assign  DA_buf[126] =  DA[126];
assign  DA_buf[127] =  DA[127];
assign  DA_buf[128] =  DA[128];
assign  DA_buf[129] =  DA[129];
assign  DA_buf[130] =  DA[130];
assign  DA_buf[131] =  DA[131];
assign  DA_buf[132] =  DA[132];
assign  DA_buf[133] =  DA[133];
assign  DA_buf[134] =  DA[134];
assign  DA_buf[135] =  DA[135];
assign  DA_buf[136] =  DA[136];
assign  DA_buf[137] =  DA[137];
assign  DA_buf[138] =  DA[138];
assign  DA_buf[139] =  DA[139];
assign  DA_buf[140] =  DA[140];
assign  DA_buf[141] =  DA[141];
assign  DA_buf[142] =  DA[142];
assign  DA_buf[143] =  DA[143];
assign  DA_buf[144] =  DA[144];
assign  DA_buf[145] =  DA[145];
assign  DA_buf[146] =  DA[146];
assign  DA_buf[147] =  DA[147];
assign  DA_buf[148] =  DA[148];
assign  DA_buf[149] =  DA[149];
assign  DA_buf[150] =  DA[150];
assign  DA_buf[151] =  DA[151];
assign  DA_buf[152] =  DA[152];
assign  DA_buf[153] =  DA[153];
assign  DA_buf[154] =  DA[154];
assign  DA_buf[155] =  DA[155];
assign  DA_buf[156] =  DA[156];
assign  DA_buf[157] =  DA[157];
assign  DA_buf[158] =  DA[158];
assign  DA_buf[159] =  DA[159];
wire WEA_buf;
assign  WEA_buf =  WEA;
wire MEA_buf;
assign  MEA_buf =  MEA;
wire CLKA_buf;
assign  CLKA_buf =  CLKA;
wire [10:0] TADRA_buf;
assign  TADRA_buf[0] =  TADRA[0];
assign  TADRA_buf[1] =  TADRA[1];
assign  TADRA_buf[2] =  TADRA[2];
assign  TADRA_buf[3] =  TADRA[3];
assign  TADRA_buf[4] =  TADRA[4];
assign  TADRA_buf[5] =  TADRA[5];
assign  TADRA_buf[6] =  TADRA[6];
assign  TADRA_buf[7] =  TADRA[7];
assign  TADRA_buf[8] =  TADRA[8];
assign  TADRA_buf[9] =  TADRA[9];
assign  TADRA_buf[10] =  TADRA[10];
wire [159:0] TDA_buf;
assign  TDA_buf[0] =  TDA[0];
assign  TDA_buf[1] =  TDA[1];
assign  TDA_buf[2] =  TDA[2];
assign  TDA_buf[3] =  TDA[3];
assign  TDA_buf[4] =  TDA[0];
assign  TDA_buf[5] =  TDA[1];
assign  TDA_buf[6] =  TDA[2];
assign  TDA_buf[7] =  TDA[3];
assign  TDA_buf[8] =  TDA[0];
assign  TDA_buf[9] =  TDA[1];
assign  TDA_buf[10] =  TDA[2];
assign  TDA_buf[11] =  TDA[3];
assign  TDA_buf[12] =  TDA[0];
assign  TDA_buf[13] =  TDA[1];
assign  TDA_buf[14] =  TDA[2];
assign  TDA_buf[15] =  TDA[3];
assign  TDA_buf[16] =  TDA[0];
assign  TDA_buf[17] =  TDA[1];
assign  TDA_buf[18] =  TDA[2];
assign  TDA_buf[19] =  TDA[3];
assign  TDA_buf[20] =  TDA[0];
assign  TDA_buf[21] =  TDA[1];
assign  TDA_buf[22] =  TDA[2];
assign  TDA_buf[23] =  TDA[3];
assign  TDA_buf[24] =  TDA[0];
assign  TDA_buf[25] =  TDA[1];
assign  TDA_buf[26] =  TDA[2];
assign  TDA_buf[27] =  TDA[3];
assign  TDA_buf[28] =  TDA[0];
assign  TDA_buf[29] =  TDA[1];
assign  TDA_buf[30] =  TDA[2];
assign  TDA_buf[31] =  TDA[3];
assign  TDA_buf[32] =  TDA[0];
assign  TDA_buf[33] =  TDA[1];
assign  TDA_buf[34] =  TDA[2];
assign  TDA_buf[35] =  TDA[3];
assign  TDA_buf[36] =  TDA[0];
assign  TDA_buf[37] =  TDA[1];
assign  TDA_buf[38] =  TDA[2];
assign  TDA_buf[39] =  TDA[3];
assign  TDA_buf[40] =  TDA[0];
assign  TDA_buf[41] =  TDA[1];
assign  TDA_buf[42] =  TDA[2];
assign  TDA_buf[43] =  TDA[3];
assign  TDA_buf[44] =  TDA[0];
assign  TDA_buf[45] =  TDA[1];
assign  TDA_buf[46] =  TDA[2];
assign  TDA_buf[47] =  TDA[3];
assign  TDA_buf[48] =  TDA[0];
assign  TDA_buf[49] =  TDA[1];
assign  TDA_buf[50] =  TDA[2];
assign  TDA_buf[51] =  TDA[3];
assign  TDA_buf[52] =  TDA[0];
assign  TDA_buf[53] =  TDA[1];
assign  TDA_buf[54] =  TDA[2];
assign  TDA_buf[55] =  TDA[3];
assign  TDA_buf[56] =  TDA[0];
assign  TDA_buf[57] =  TDA[1];
assign  TDA_buf[58] =  TDA[2];
assign  TDA_buf[59] =  TDA[3];
assign  TDA_buf[60] =  TDA[0];
assign  TDA_buf[61] =  TDA[1];
assign  TDA_buf[62] =  TDA[2];
assign  TDA_buf[63] =  TDA[3];
assign  TDA_buf[64] =  TDA[0];
assign  TDA_buf[65] =  TDA[1];
assign  TDA_buf[66] =  TDA[2];
assign  TDA_buf[67] =  TDA[3];
assign  TDA_buf[68] =  TDA[0];
assign  TDA_buf[69] =  TDA[1];
assign  TDA_buf[70] =  TDA[2];
assign  TDA_buf[71] =  TDA[3];
assign  TDA_buf[72] =  TDA[0];
assign  TDA_buf[73] =  TDA[1];
assign  TDA_buf[74] =  TDA[2];
assign  TDA_buf[75] =  TDA[3];
assign  TDA_buf[76] =  TDA[0];
assign  TDA_buf[77] =  TDA[1];
assign  TDA_buf[78] =  TDA[2];
assign  TDA_buf[79] =  TDA[3];
assign  TDA_buf[80] =  TDA[0];
assign  TDA_buf[81] =  TDA[1];
assign  TDA_buf[82] =  TDA[2];
assign  TDA_buf[83] =  TDA[3];
assign  TDA_buf[84] =  TDA[0];
assign  TDA_buf[85] =  TDA[1];
assign  TDA_buf[86] =  TDA[2];
assign  TDA_buf[87] =  TDA[3];
assign  TDA_buf[88] =  TDA[0];
assign  TDA_buf[89] =  TDA[1];
assign  TDA_buf[90] =  TDA[2];
assign  TDA_buf[91] =  TDA[3];
assign  TDA_buf[92] =  TDA[0];
assign  TDA_buf[93] =  TDA[1];
assign  TDA_buf[94] =  TDA[2];
assign  TDA_buf[95] =  TDA[3];
assign  TDA_buf[96] =  TDA[0];
assign  TDA_buf[97] =  TDA[1];
assign  TDA_buf[98] =  TDA[2];
assign  TDA_buf[99] =  TDA[3];
assign  TDA_buf[100] =  TDA[0];
assign  TDA_buf[101] =  TDA[1];
assign  TDA_buf[102] =  TDA[2];
assign  TDA_buf[103] =  TDA[3];
assign  TDA_buf[104] =  TDA[0];
assign  TDA_buf[105] =  TDA[1];
assign  TDA_buf[106] =  TDA[2];
assign  TDA_buf[107] =  TDA[3];
assign  TDA_buf[108] =  TDA[0];
assign  TDA_buf[109] =  TDA[1];
assign  TDA_buf[110] =  TDA[2];
assign  TDA_buf[111] =  TDA[3];
assign  TDA_buf[112] =  TDA[0];
assign  TDA_buf[113] =  TDA[1];
assign  TDA_buf[114] =  TDA[2];
assign  TDA_buf[115] =  TDA[3];
assign  TDA_buf[116] =  TDA[0];
assign  TDA_buf[117] =  TDA[1];
assign  TDA_buf[118] =  TDA[2];
assign  TDA_buf[119] =  TDA[3];
assign  TDA_buf[120] =  TDA[0];
assign  TDA_buf[121] =  TDA[1];
assign  TDA_buf[122] =  TDA[2];
assign  TDA_buf[123] =  TDA[3];
assign  TDA_buf[124] =  TDA[0];
assign  TDA_buf[125] =  TDA[1];
assign  TDA_buf[126] =  TDA[2];
assign  TDA_buf[127] =  TDA[3];
assign  TDA_buf[128] =  TDA[0];
assign  TDA_buf[129] =  TDA[1];
assign  TDA_buf[130] =  TDA[2];
assign  TDA_buf[131] =  TDA[3];
assign  TDA_buf[132] =  TDA[0];
assign  TDA_buf[133] =  TDA[1];
assign  TDA_buf[134] =  TDA[2];
assign  TDA_buf[135] =  TDA[3];
assign  TDA_buf[136] =  TDA[0];
assign  TDA_buf[137] =  TDA[1];
assign  TDA_buf[138] =  TDA[2];
assign  TDA_buf[139] =  TDA[3];
assign  TDA_buf[140] =  TDA[0];
assign  TDA_buf[141] =  TDA[1];
assign  TDA_buf[142] =  TDA[2];
assign  TDA_buf[143] =  TDA[3];
assign  TDA_buf[144] =  TDA[0];
assign  TDA_buf[145] =  TDA[1];
assign  TDA_buf[146] =  TDA[2];
assign  TDA_buf[147] =  TDA[3];
assign  TDA_buf[148] =  TDA[0];
assign  TDA_buf[149] =  TDA[1];
assign  TDA_buf[150] =  TDA[2];
assign  TDA_buf[151] =  TDA[3];
assign  TDA_buf[152] =  TDA[0];
assign  TDA_buf[153] =  TDA[1];
assign  TDA_buf[154] =  TDA[2];
assign  TDA_buf[155] =  TDA[3];
assign  TDA_buf[156] =  TDA[0];
assign  TDA_buf[157] =  TDA[1];
assign  TDA_buf[158] =  TDA[2];
assign  TDA_buf[159] =  TDA[3];
wire TWEA_buf;
assign  TWEA_buf =  TWEA;
wire TMEA_buf;
assign  TMEA_buf =  TMEA;
wire TCLKA_buf;
assign  TCLKA_buf =  TCLKA;
wire BISTEA_buf;
assign  BISTEA_buf =  BISTEA;
wire TEST1A_buf;
assign  TEST1A_buf =  TEST1A;
wire RMEA_buf;
assign  RMEA_buf =  RMEA;
wire [2:0] RMA_int;
wire [3:0] RMA_buf;
assign  RMA_buf[0] =  RMA[0];
assign  RMA_buf[1] =  RMA[1];
assign  RMA_buf[2] =  RMA[2];
assign  RMA_buf[3] =  RMA[3];
wire [3:0] CDA_buf;
assign  CDA_buf[0] =  CDA[0];
assign  CDA_buf[1] =  CDA[1];
assign  CDA_buf[2] =  CDA[2];
assign  CDA_buf[3] =  CDA[3];
wire CAPTA_buf;
assign  CAPTA_buf =  CAPTA;
wire PIPEMEA_buf;
assign  PIPEMEA_buf =  PIPEMEA;
wire TPIPEMEA_buf;
assign  TPIPEMEA_buf =  TPIPEMEA;
wire TCLKEA_buf;
assign  TCLKEA_buf =  TCLKEA;
wire STICKYA_buf;
assign  STICKYA_buf =  STICKYA;
wire SI_QA_buf;
assign  SI_QA_buf =  SI_QA;
wire SI_DA_buf;
assign  SI_DA_buf =  SI_DA;
wire SE_QA_buf;
assign  SE_QA_buf =  SE_QA;
wire SE_INA_buf;
assign  SE_INA_buf =  SE_INA;
wire SI_CNTRA_buf;
assign  SI_CNTRA_buf =  SI_CNTRA;
wire DFTCLKEN_buf;
assign  DFTCLKEN_buf =  DFTCLKEN;
wire DFTMASK_buf;
assign  DFTMASK_buf =  DFTMASK;
wire LS_buf;
assign  LS_buf =  LS;
wire [10:0] ADRB_buf;
assign  ADRB_buf[0] =  ADRB[0];
assign  ADRB_buf[1] =  ADRB[1];
assign  ADRB_buf[2] =  ADRB[2];
assign  ADRB_buf[3] =  ADRB[3];
assign  ADRB_buf[4] =  ADRB[4];
assign  ADRB_buf[5] =  ADRB[5];
assign  ADRB_buf[6] =  ADRB[6];
assign  ADRB_buf[7] =  ADRB[7];
assign  ADRB_buf[8] =  ADRB[8];
assign  ADRB_buf[9] =  ADRB[9];
assign  ADRB_buf[10] =  ADRB[10];
wire [159:0] DB_buf;
assign  DB_buf[0] =  DB[0];
assign  DB_buf[1] =  DB[1];
assign  DB_buf[2] =  DB[2];
assign  DB_buf[3] =  DB[3];
assign  DB_buf[4] =  DB[4];
assign  DB_buf[5] =  DB[5];
assign  DB_buf[6] =  DB[6];
assign  DB_buf[7] =  DB[7];
assign  DB_buf[8] =  DB[8];
assign  DB_buf[9] =  DB[9];
assign  DB_buf[10] =  DB[10];
assign  DB_buf[11] =  DB[11];
assign  DB_buf[12] =  DB[12];
assign  DB_buf[13] =  DB[13];
assign  DB_buf[14] =  DB[14];
assign  DB_buf[15] =  DB[15];
assign  DB_buf[16] =  DB[16];
assign  DB_buf[17] =  DB[17];
assign  DB_buf[18] =  DB[18];
assign  DB_buf[19] =  DB[19];
assign  DB_buf[20] =  DB[20];
assign  DB_buf[21] =  DB[21];
assign  DB_buf[22] =  DB[22];
assign  DB_buf[23] =  DB[23];
assign  DB_buf[24] =  DB[24];
assign  DB_buf[25] =  DB[25];
assign  DB_buf[26] =  DB[26];
assign  DB_buf[27] =  DB[27];
assign  DB_buf[28] =  DB[28];
assign  DB_buf[29] =  DB[29];
assign  DB_buf[30] =  DB[30];
assign  DB_buf[31] =  DB[31];
assign  DB_buf[32] =  DB[32];
assign  DB_buf[33] =  DB[33];
assign  DB_buf[34] =  DB[34];
assign  DB_buf[35] =  DB[35];
assign  DB_buf[36] =  DB[36];
assign  DB_buf[37] =  DB[37];
assign  DB_buf[38] =  DB[38];
assign  DB_buf[39] =  DB[39];
assign  DB_buf[40] =  DB[40];
assign  DB_buf[41] =  DB[41];
assign  DB_buf[42] =  DB[42];
assign  DB_buf[43] =  DB[43];
assign  DB_buf[44] =  DB[44];
assign  DB_buf[45] =  DB[45];
assign  DB_buf[46] =  DB[46];
assign  DB_buf[47] =  DB[47];
assign  DB_buf[48] =  DB[48];
assign  DB_buf[49] =  DB[49];
assign  DB_buf[50] =  DB[50];
assign  DB_buf[51] =  DB[51];
assign  DB_buf[52] =  DB[52];
assign  DB_buf[53] =  DB[53];
assign  DB_buf[54] =  DB[54];
assign  DB_buf[55] =  DB[55];
assign  DB_buf[56] =  DB[56];
assign  DB_buf[57] =  DB[57];
assign  DB_buf[58] =  DB[58];
assign  DB_buf[59] =  DB[59];
assign  DB_buf[60] =  DB[60];
assign  DB_buf[61] =  DB[61];
assign  DB_buf[62] =  DB[62];
assign  DB_buf[63] =  DB[63];
assign  DB_buf[64] =  DB[64];
assign  DB_buf[65] =  DB[65];
assign  DB_buf[66] =  DB[66];
assign  DB_buf[67] =  DB[67];
assign  DB_buf[68] =  DB[68];
assign  DB_buf[69] =  DB[69];
assign  DB_buf[70] =  DB[70];
assign  DB_buf[71] =  DB[71];
assign  DB_buf[72] =  DB[72];
assign  DB_buf[73] =  DB[73];
assign  DB_buf[74] =  DB[74];
assign  DB_buf[75] =  DB[75];
assign  DB_buf[76] =  DB[76];
assign  DB_buf[77] =  DB[77];
assign  DB_buf[78] =  DB[78];
assign  DB_buf[79] =  DB[79];
assign  DB_buf[80] =  DB[80];
assign  DB_buf[81] =  DB[81];
assign  DB_buf[82] =  DB[82];
assign  DB_buf[83] =  DB[83];
assign  DB_buf[84] =  DB[84];
assign  DB_buf[85] =  DB[85];
assign  DB_buf[86] =  DB[86];
assign  DB_buf[87] =  DB[87];
assign  DB_buf[88] =  DB[88];
assign  DB_buf[89] =  DB[89];
assign  DB_buf[90] =  DB[90];
assign  DB_buf[91] =  DB[91];
assign  DB_buf[92] =  DB[92];
assign  DB_buf[93] =  DB[93];
assign  DB_buf[94] =  DB[94];
assign  DB_buf[95] =  DB[95];
assign  DB_buf[96] =  DB[96];
assign  DB_buf[97] =  DB[97];
assign  DB_buf[98] =  DB[98];
assign  DB_buf[99] =  DB[99];
assign  DB_buf[100] =  DB[100];
assign  DB_buf[101] =  DB[101];
assign  DB_buf[102] =  DB[102];
assign  DB_buf[103] =  DB[103];
assign  DB_buf[104] =  DB[104];
assign  DB_buf[105] =  DB[105];
assign  DB_buf[106] =  DB[106];
assign  DB_buf[107] =  DB[107];
assign  DB_buf[108] =  DB[108];
assign  DB_buf[109] =  DB[109];
assign  DB_buf[110] =  DB[110];
assign  DB_buf[111] =  DB[111];
assign  DB_buf[112] =  DB[112];
assign  DB_buf[113] =  DB[113];
assign  DB_buf[114] =  DB[114];
assign  DB_buf[115] =  DB[115];
assign  DB_buf[116] =  DB[116];
assign  DB_buf[117] =  DB[117];
assign  DB_buf[118] =  DB[118];
assign  DB_buf[119] =  DB[119];
assign  DB_buf[120] =  DB[120];
assign  DB_buf[121] =  DB[121];
assign  DB_buf[122] =  DB[122];
assign  DB_buf[123] =  DB[123];
assign  DB_buf[124] =  DB[124];
assign  DB_buf[125] =  DB[125];
assign  DB_buf[126] =  DB[126];
assign  DB_buf[127] =  DB[127];
assign  DB_buf[128] =  DB[128];
assign  DB_buf[129] =  DB[129];
assign  DB_buf[130] =  DB[130];
assign  DB_buf[131] =  DB[131];
assign  DB_buf[132] =  DB[132];
assign  DB_buf[133] =  DB[133];
assign  DB_buf[134] =  DB[134];
assign  DB_buf[135] =  DB[135];
assign  DB_buf[136] =  DB[136];
assign  DB_buf[137] =  DB[137];
assign  DB_buf[138] =  DB[138];
assign  DB_buf[139] =  DB[139];
assign  DB_buf[140] =  DB[140];
assign  DB_buf[141] =  DB[141];
assign  DB_buf[142] =  DB[142];
assign  DB_buf[143] =  DB[143];
assign  DB_buf[144] =  DB[144];
assign  DB_buf[145] =  DB[145];
assign  DB_buf[146] =  DB[146];
assign  DB_buf[147] =  DB[147];
assign  DB_buf[148] =  DB[148];
assign  DB_buf[149] =  DB[149];
assign  DB_buf[150] =  DB[150];
assign  DB_buf[151] =  DB[151];
assign  DB_buf[152] =  DB[152];
assign  DB_buf[153] =  DB[153];
assign  DB_buf[154] =  DB[154];
assign  DB_buf[155] =  DB[155];
assign  DB_buf[156] =  DB[156];
assign  DB_buf[157] =  DB[157];
assign  DB_buf[158] =  DB[158];
assign  DB_buf[159] =  DB[159];
wire WEB_buf;
assign  WEB_buf =  WEB;
wire MEB_buf;
assign  MEB_buf =  MEB;
wire CLKB_buf;
assign  CLKB_buf =  CLKB;
wire [10:0] TADRB_buf;
assign  TADRB_buf[0] =  TADRB[0];
assign  TADRB_buf[1] =  TADRB[1];
assign  TADRB_buf[2] =  TADRB[2];
assign  TADRB_buf[3] =  TADRB[3];
assign  TADRB_buf[4] =  TADRB[4];
assign  TADRB_buf[5] =  TADRB[5];
assign  TADRB_buf[6] =  TADRB[6];
assign  TADRB_buf[7] =  TADRB[7];
assign  TADRB_buf[8] =  TADRB[8];
assign  TADRB_buf[9] =  TADRB[9];
assign  TADRB_buf[10] =  TADRB[10];
wire [159:0] TDB_buf;
assign  TDB_buf[0] =  TDB[0];
assign  TDB_buf[1] =  TDB[1];
assign  TDB_buf[2] =  TDB[2];
assign  TDB_buf[3] =  TDB[3];
assign  TDB_buf[4] =  TDB[0];
assign  TDB_buf[5] =  TDB[1];
assign  TDB_buf[6] =  TDB[2];
assign  TDB_buf[7] =  TDB[3];
assign  TDB_buf[8] =  TDB[0];
assign  TDB_buf[9] =  TDB[1];
assign  TDB_buf[10] =  TDB[2];
assign  TDB_buf[11] =  TDB[3];
assign  TDB_buf[12] =  TDB[0];
assign  TDB_buf[13] =  TDB[1];
assign  TDB_buf[14] =  TDB[2];
assign  TDB_buf[15] =  TDB[3];
assign  TDB_buf[16] =  TDB[0];
assign  TDB_buf[17] =  TDB[1];
assign  TDB_buf[18] =  TDB[2];
assign  TDB_buf[19] =  TDB[3];
assign  TDB_buf[20] =  TDB[0];
assign  TDB_buf[21] =  TDB[1];
assign  TDB_buf[22] =  TDB[2];
assign  TDB_buf[23] =  TDB[3];
assign  TDB_buf[24] =  TDB[0];
assign  TDB_buf[25] =  TDB[1];
assign  TDB_buf[26] =  TDB[2];
assign  TDB_buf[27] =  TDB[3];
assign  TDB_buf[28] =  TDB[0];
assign  TDB_buf[29] =  TDB[1];
assign  TDB_buf[30] =  TDB[2];
assign  TDB_buf[31] =  TDB[3];
assign  TDB_buf[32] =  TDB[0];
assign  TDB_buf[33] =  TDB[1];
assign  TDB_buf[34] =  TDB[2];
assign  TDB_buf[35] =  TDB[3];
assign  TDB_buf[36] =  TDB[0];
assign  TDB_buf[37] =  TDB[1];
assign  TDB_buf[38] =  TDB[2];
assign  TDB_buf[39] =  TDB[3];
assign  TDB_buf[40] =  TDB[0];
assign  TDB_buf[41] =  TDB[1];
assign  TDB_buf[42] =  TDB[2];
assign  TDB_buf[43] =  TDB[3];
assign  TDB_buf[44] =  TDB[0];
assign  TDB_buf[45] =  TDB[1];
assign  TDB_buf[46] =  TDB[2];
assign  TDB_buf[47] =  TDB[3];
assign  TDB_buf[48] =  TDB[0];
assign  TDB_buf[49] =  TDB[1];
assign  TDB_buf[50] =  TDB[2];
assign  TDB_buf[51] =  TDB[3];
assign  TDB_buf[52] =  TDB[0];
assign  TDB_buf[53] =  TDB[1];
assign  TDB_buf[54] =  TDB[2];
assign  TDB_buf[55] =  TDB[3];
assign  TDB_buf[56] =  TDB[0];
assign  TDB_buf[57] =  TDB[1];
assign  TDB_buf[58] =  TDB[2];
assign  TDB_buf[59] =  TDB[3];
assign  TDB_buf[60] =  TDB[0];
assign  TDB_buf[61] =  TDB[1];
assign  TDB_buf[62] =  TDB[2];
assign  TDB_buf[63] =  TDB[3];
assign  TDB_buf[64] =  TDB[0];
assign  TDB_buf[65] =  TDB[1];
assign  TDB_buf[66] =  TDB[2];
assign  TDB_buf[67] =  TDB[3];
assign  TDB_buf[68] =  TDB[0];
assign  TDB_buf[69] =  TDB[1];
assign  TDB_buf[70] =  TDB[2];
assign  TDB_buf[71] =  TDB[3];
assign  TDB_buf[72] =  TDB[0];
assign  TDB_buf[73] =  TDB[1];
assign  TDB_buf[74] =  TDB[2];
assign  TDB_buf[75] =  TDB[3];
assign  TDB_buf[76] =  TDB[0];
assign  TDB_buf[77] =  TDB[1];
assign  TDB_buf[78] =  TDB[2];
assign  TDB_buf[79] =  TDB[3];
assign  TDB_buf[80] =  TDB[0];
assign  TDB_buf[81] =  TDB[1];
assign  TDB_buf[82] =  TDB[2];
assign  TDB_buf[83] =  TDB[3];
assign  TDB_buf[84] =  TDB[0];
assign  TDB_buf[85] =  TDB[1];
assign  TDB_buf[86] =  TDB[2];
assign  TDB_buf[87] =  TDB[3];
assign  TDB_buf[88] =  TDB[0];
assign  TDB_buf[89] =  TDB[1];
assign  TDB_buf[90] =  TDB[2];
assign  TDB_buf[91] =  TDB[3];
assign  TDB_buf[92] =  TDB[0];
assign  TDB_buf[93] =  TDB[1];
assign  TDB_buf[94] =  TDB[2];
assign  TDB_buf[95] =  TDB[3];
assign  TDB_buf[96] =  TDB[0];
assign  TDB_buf[97] =  TDB[1];
assign  TDB_buf[98] =  TDB[2];
assign  TDB_buf[99] =  TDB[3];
assign  TDB_buf[100] =  TDB[0];
assign  TDB_buf[101] =  TDB[1];
assign  TDB_buf[102] =  TDB[2];
assign  TDB_buf[103] =  TDB[3];
assign  TDB_buf[104] =  TDB[0];
assign  TDB_buf[105] =  TDB[1];
assign  TDB_buf[106] =  TDB[2];
assign  TDB_buf[107] =  TDB[3];
assign  TDB_buf[108] =  TDB[0];
assign  TDB_buf[109] =  TDB[1];
assign  TDB_buf[110] =  TDB[2];
assign  TDB_buf[111] =  TDB[3];
assign  TDB_buf[112] =  TDB[0];
assign  TDB_buf[113] =  TDB[1];
assign  TDB_buf[114] =  TDB[2];
assign  TDB_buf[115] =  TDB[3];
assign  TDB_buf[116] =  TDB[0];
assign  TDB_buf[117] =  TDB[1];
assign  TDB_buf[118] =  TDB[2];
assign  TDB_buf[119] =  TDB[3];
assign  TDB_buf[120] =  TDB[0];
assign  TDB_buf[121] =  TDB[1];
assign  TDB_buf[122] =  TDB[2];
assign  TDB_buf[123] =  TDB[3];
assign  TDB_buf[124] =  TDB[0];
assign  TDB_buf[125] =  TDB[1];
assign  TDB_buf[126] =  TDB[2];
assign  TDB_buf[127] =  TDB[3];
assign  TDB_buf[128] =  TDB[0];
assign  TDB_buf[129] =  TDB[1];
assign  TDB_buf[130] =  TDB[2];
assign  TDB_buf[131] =  TDB[3];
assign  TDB_buf[132] =  TDB[0];
assign  TDB_buf[133] =  TDB[1];
assign  TDB_buf[134] =  TDB[2];
assign  TDB_buf[135] =  TDB[3];
assign  TDB_buf[136] =  TDB[0];
assign  TDB_buf[137] =  TDB[1];
assign  TDB_buf[138] =  TDB[2];
assign  TDB_buf[139] =  TDB[3];
assign  TDB_buf[140] =  TDB[0];
assign  TDB_buf[141] =  TDB[1];
assign  TDB_buf[142] =  TDB[2];
assign  TDB_buf[143] =  TDB[3];
assign  TDB_buf[144] =  TDB[0];
assign  TDB_buf[145] =  TDB[1];
assign  TDB_buf[146] =  TDB[2];
assign  TDB_buf[147] =  TDB[3];
assign  TDB_buf[148] =  TDB[0];
assign  TDB_buf[149] =  TDB[1];
assign  TDB_buf[150] =  TDB[2];
assign  TDB_buf[151] =  TDB[3];
assign  TDB_buf[152] =  TDB[0];
assign  TDB_buf[153] =  TDB[1];
assign  TDB_buf[154] =  TDB[2];
assign  TDB_buf[155] =  TDB[3];
assign  TDB_buf[156] =  TDB[0];
assign  TDB_buf[157] =  TDB[1];
assign  TDB_buf[158] =  TDB[2];
assign  TDB_buf[159] =  TDB[3];
wire TWEB_buf;
assign  TWEB_buf =  TWEB;
wire TMEB_buf;
assign  TMEB_buf =  TMEB;
wire TCLKB_buf;
assign  TCLKB_buf =  TCLKB;
wire BISTEB_buf;
assign  BISTEB_buf =  BISTEB;
wire TEST1B_buf;
assign  TEST1B_buf =  TEST1B;
wire RMEB_buf;
assign  RMEB_buf =  RMEB;
wire [2:0] RMB_int;
wire [3:0] RMB_buf;
assign  RMB_buf[0] =  RMB[0];
assign  RMB_buf[1] =  RMB[1];
assign  RMB_buf[2] =  RMB[2];
assign  RMB_buf[3] =  RMB[3];
wire [3:0] CDB_buf;
assign  CDB_buf[0] =  CDB[0];
assign  CDB_buf[1] =  CDB[1];
assign  CDB_buf[2] =  CDB[2];
assign  CDB_buf[3] =  CDB[3];
wire CAPTB_buf;
assign  CAPTB_buf =  CAPTB;
wire PIPEMEB_buf;
assign  PIPEMEB_buf =  PIPEMEB;
wire TPIPEMEB_buf;
assign  TPIPEMEB_buf =  TPIPEMEB;
wire TCLKEB_buf;
assign  TCLKEB_buf =  TCLKEB;
wire STICKYB_buf;
assign  STICKYB_buf =  STICKYB;
wire SI_QB_buf;
assign  SI_QB_buf =  SI_QB;
wire SI_DB_buf;
assign  SI_DB_buf =  SI_DB;
wire SE_QB_buf;
assign  SE_QB_buf =  SE_QB;
wire SE_INB_buf;
assign  SE_INB_buf =  SE_INB;
wire SI_CNTRB_buf;
assign  SI_CNTRB_buf =  SI_CNTRB;
`else
wire [159:0] QA_buf;
buf (QA[0], QA_buf[0]);
buf (QA_final[0],QA[0]);
buf (QA[1], QA_buf[1]);
buf (QA_final[1],QA[1]);
buf (QA[2], QA_buf[2]);
buf (QA_final[2],QA[2]);
buf (QA[3], QA_buf[3]);
buf (QA_final[3],QA[3]);
buf (QA[4], QA_buf[4]);
buf (QA_final[4],QA[4]);
buf (QA[5], QA_buf[5]);
buf (QA_final[5],QA[5]);
buf (QA[6], QA_buf[6]);
buf (QA_final[6],QA[6]);
buf (QA[7], QA_buf[7]);
buf (QA_final[7],QA[7]);
buf (QA[8], QA_buf[8]);
buf (QA_final[8],QA[8]);
buf (QA[9], QA_buf[9]);
buf (QA_final[9],QA[9]);
buf (QA[10], QA_buf[10]);
buf (QA_final[10],QA[10]);
buf (QA[11], QA_buf[11]);
buf (QA_final[11],QA[11]);
buf (QA[12], QA_buf[12]);
buf (QA_final[12],QA[12]);
buf (QA[13], QA_buf[13]);
buf (QA_final[13],QA[13]);
buf (QA[14], QA_buf[14]);
buf (QA_final[14],QA[14]);
buf (QA[15], QA_buf[15]);
buf (QA_final[15],QA[15]);
buf (QA[16], QA_buf[16]);
buf (QA_final[16],QA[16]);
buf (QA[17], QA_buf[17]);
buf (QA_final[17],QA[17]);
buf (QA[18], QA_buf[18]);
buf (QA_final[18],QA[18]);
buf (QA[19], QA_buf[19]);
buf (QA_final[19],QA[19]);
buf (QA[20], QA_buf[20]);
buf (QA_final[20],QA[20]);
buf (QA[21], QA_buf[21]);
buf (QA_final[21],QA[21]);
buf (QA[22], QA_buf[22]);
buf (QA_final[22],QA[22]);
buf (QA[23], QA_buf[23]);
buf (QA_final[23],QA[23]);
buf (QA[24], QA_buf[24]);
buf (QA_final[24],QA[24]);
buf (QA[25], QA_buf[25]);
buf (QA_final[25],QA[25]);
buf (QA[26], QA_buf[26]);
buf (QA_final[26],QA[26]);
buf (QA[27], QA_buf[27]);
buf (QA_final[27],QA[27]);
buf (QA[28], QA_buf[28]);
buf (QA_final[28],QA[28]);
buf (QA[29], QA_buf[29]);
buf (QA_final[29],QA[29]);
buf (QA[30], QA_buf[30]);
buf (QA_final[30],QA[30]);
buf (QA[31], QA_buf[31]);
buf (QA_final[31],QA[31]);
buf (QA[32], QA_buf[32]);
buf (QA_final[32],QA[32]);
buf (QA[33], QA_buf[33]);
buf (QA_final[33],QA[33]);
buf (QA[34], QA_buf[34]);
buf (QA_final[34],QA[34]);
buf (QA[35], QA_buf[35]);
buf (QA_final[35],QA[35]);
buf (QA[36], QA_buf[36]);
buf (QA_final[36],QA[36]);
buf (QA[37], QA_buf[37]);
buf (QA_final[37],QA[37]);
buf (QA[38], QA_buf[38]);
buf (QA_final[38],QA[38]);
buf (QA[39], QA_buf[39]);
buf (QA_final[39],QA[39]);
buf (QA[40], QA_buf[40]);
buf (QA_final[40],QA[40]);
buf (QA[41], QA_buf[41]);
buf (QA_final[41],QA[41]);
buf (QA[42], QA_buf[42]);
buf (QA_final[42],QA[42]);
buf (QA[43], QA_buf[43]);
buf (QA_final[43],QA[43]);
buf (QA[44], QA_buf[44]);
buf (QA_final[44],QA[44]);
buf (QA[45], QA_buf[45]);
buf (QA_final[45],QA[45]);
buf (QA[46], QA_buf[46]);
buf (QA_final[46],QA[46]);
buf (QA[47], QA_buf[47]);
buf (QA_final[47],QA[47]);
buf (QA[48], QA_buf[48]);
buf (QA_final[48],QA[48]);
buf (QA[49], QA_buf[49]);
buf (QA_final[49],QA[49]);
buf (QA[50], QA_buf[50]);
buf (QA_final[50],QA[50]);
buf (QA[51], QA_buf[51]);
buf (QA_final[51],QA[51]);
buf (QA[52], QA_buf[52]);
buf (QA_final[52],QA[52]);
buf (QA[53], QA_buf[53]);
buf (QA_final[53],QA[53]);
buf (QA[54], QA_buf[54]);
buf (QA_final[54],QA[54]);
buf (QA[55], QA_buf[55]);
buf (QA_final[55],QA[55]);
buf (QA[56], QA_buf[56]);
buf (QA_final[56],QA[56]);
buf (QA[57], QA_buf[57]);
buf (QA_final[57],QA[57]);
buf (QA[58], QA_buf[58]);
buf (QA_final[58],QA[58]);
buf (QA[59], QA_buf[59]);
buf (QA_final[59],QA[59]);
buf (QA[60], QA_buf[60]);
buf (QA_final[60],QA[60]);
buf (QA[61], QA_buf[61]);
buf (QA_final[61],QA[61]);
buf (QA[62], QA_buf[62]);
buf (QA_final[62],QA[62]);
buf (QA[63], QA_buf[63]);
buf (QA_final[63],QA[63]);
buf (QA[64], QA_buf[64]);
buf (QA_final[64],QA[64]);
buf (QA[65], QA_buf[65]);
buf (QA_final[65],QA[65]);
buf (QA[66], QA_buf[66]);
buf (QA_final[66],QA[66]);
buf (QA[67], QA_buf[67]);
buf (QA_final[67],QA[67]);
buf (QA[68], QA_buf[68]);
buf (QA_final[68],QA[68]);
buf (QA[69], QA_buf[69]);
buf (QA_final[69],QA[69]);
buf (QA[70], QA_buf[70]);
buf (QA_final[70],QA[70]);
buf (QA[71], QA_buf[71]);
buf (QA_final[71],QA[71]);
buf (QA[72], QA_buf[72]);
buf (QA_final[72],QA[72]);
buf (QA[73], QA_buf[73]);
buf (QA_final[73],QA[73]);
buf (QA[74], QA_buf[74]);
buf (QA_final[74],QA[74]);
buf (QA[75], QA_buf[75]);
buf (QA_final[75],QA[75]);
buf (QA[76], QA_buf[76]);
buf (QA_final[76],QA[76]);
buf (QA[77], QA_buf[77]);
buf (QA_final[77],QA[77]);
buf (QA[78], QA_buf[78]);
buf (QA_final[78],QA[78]);
buf (QA[79], QA_buf[79]);
buf (QA_final[79],QA[79]);
buf (QA[80], QA_buf[80]);
buf (QA_final[80],QA[80]);
buf (QA[81], QA_buf[81]);
buf (QA_final[81],QA[81]);
buf (QA[82], QA_buf[82]);
buf (QA_final[82],QA[82]);
buf (QA[83], QA_buf[83]);
buf (QA_final[83],QA[83]);
buf (QA[84], QA_buf[84]);
buf (QA_final[84],QA[84]);
buf (QA[85], QA_buf[85]);
buf (QA_final[85],QA[85]);
buf (QA[86], QA_buf[86]);
buf (QA_final[86],QA[86]);
buf (QA[87], QA_buf[87]);
buf (QA_final[87],QA[87]);
buf (QA[88], QA_buf[88]);
buf (QA_final[88],QA[88]);
buf (QA[89], QA_buf[89]);
buf (QA_final[89],QA[89]);
buf (QA[90], QA_buf[90]);
buf (QA_final[90],QA[90]);
buf (QA[91], QA_buf[91]);
buf (QA_final[91],QA[91]);
buf (QA[92], QA_buf[92]);
buf (QA_final[92],QA[92]);
buf (QA[93], QA_buf[93]);
buf (QA_final[93],QA[93]);
buf (QA[94], QA_buf[94]);
buf (QA_final[94],QA[94]);
buf (QA[95], QA_buf[95]);
buf (QA_final[95],QA[95]);
buf (QA[96], QA_buf[96]);
buf (QA_final[96],QA[96]);
buf (QA[97], QA_buf[97]);
buf (QA_final[97],QA[97]);
buf (QA[98], QA_buf[98]);
buf (QA_final[98],QA[98]);
buf (QA[99], QA_buf[99]);
buf (QA_final[99],QA[99]);
buf (QA[100], QA_buf[100]);
buf (QA_final[100],QA[100]);
buf (QA[101], QA_buf[101]);
buf (QA_final[101],QA[101]);
buf (QA[102], QA_buf[102]);
buf (QA_final[102],QA[102]);
buf (QA[103], QA_buf[103]);
buf (QA_final[103],QA[103]);
buf (QA[104], QA_buf[104]);
buf (QA_final[104],QA[104]);
buf (QA[105], QA_buf[105]);
buf (QA_final[105],QA[105]);
buf (QA[106], QA_buf[106]);
buf (QA_final[106],QA[106]);
buf (QA[107], QA_buf[107]);
buf (QA_final[107],QA[107]);
buf (QA[108], QA_buf[108]);
buf (QA_final[108],QA[108]);
buf (QA[109], QA_buf[109]);
buf (QA_final[109],QA[109]);
buf (QA[110], QA_buf[110]);
buf (QA_final[110],QA[110]);
buf (QA[111], QA_buf[111]);
buf (QA_final[111],QA[111]);
buf (QA[112], QA_buf[112]);
buf (QA_final[112],QA[112]);
buf (QA[113], QA_buf[113]);
buf (QA_final[113],QA[113]);
buf (QA[114], QA_buf[114]);
buf (QA_final[114],QA[114]);
buf (QA[115], QA_buf[115]);
buf (QA_final[115],QA[115]);
buf (QA[116], QA_buf[116]);
buf (QA_final[116],QA[116]);
buf (QA[117], QA_buf[117]);
buf (QA_final[117],QA[117]);
buf (QA[118], QA_buf[118]);
buf (QA_final[118],QA[118]);
buf (QA[119], QA_buf[119]);
buf (QA_final[119],QA[119]);
buf (QA[120], QA_buf[120]);
buf (QA_final[120],QA[120]);
buf (QA[121], QA_buf[121]);
buf (QA_final[121],QA[121]);
buf (QA[122], QA_buf[122]);
buf (QA_final[122],QA[122]);
buf (QA[123], QA_buf[123]);
buf (QA_final[123],QA[123]);
buf (QA[124], QA_buf[124]);
buf (QA_final[124],QA[124]);
buf (QA[125], QA_buf[125]);
buf (QA_final[125],QA[125]);
buf (QA[126], QA_buf[126]);
buf (QA_final[126],QA[126]);
buf (QA[127], QA_buf[127]);
buf (QA_final[127],QA[127]);
buf (QA[128], QA_buf[128]);
buf (QA_final[128],QA[128]);
buf (QA[129], QA_buf[129]);
buf (QA_final[129],QA[129]);
buf (QA[130], QA_buf[130]);
buf (QA_final[130],QA[130]);
buf (QA[131], QA_buf[131]);
buf (QA_final[131],QA[131]);
buf (QA[132], QA_buf[132]);
buf (QA_final[132],QA[132]);
buf (QA[133], QA_buf[133]);
buf (QA_final[133],QA[133]);
buf (QA[134], QA_buf[134]);
buf (QA_final[134],QA[134]);
buf (QA[135], QA_buf[135]);
buf (QA_final[135],QA[135]);
buf (QA[136], QA_buf[136]);
buf (QA_final[136],QA[136]);
buf (QA[137], QA_buf[137]);
buf (QA_final[137],QA[137]);
buf (QA[138], QA_buf[138]);
buf (QA_final[138],QA[138]);
buf (QA[139], QA_buf[139]);
buf (QA_final[139],QA[139]);
buf (QA[140], QA_buf[140]);
buf (QA_final[140],QA[140]);
buf (QA[141], QA_buf[141]);
buf (QA_final[141],QA[141]);
buf (QA[142], QA_buf[142]);
buf (QA_final[142],QA[142]);
buf (QA[143], QA_buf[143]);
buf (QA_final[143],QA[143]);
buf (QA[144], QA_buf[144]);
buf (QA_final[144],QA[144]);
buf (QA[145], QA_buf[145]);
buf (QA_final[145],QA[145]);
buf (QA[146], QA_buf[146]);
buf (QA_final[146],QA[146]);
buf (QA[147], QA_buf[147]);
buf (QA_final[147],QA[147]);
buf (QA[148], QA_buf[148]);
buf (QA_final[148],QA[148]);
buf (QA[149], QA_buf[149]);
buf (QA_final[149],QA[149]);
buf (QA[150], QA_buf[150]);
buf (QA_final[150],QA[150]);
buf (QA[151], QA_buf[151]);
buf (QA_final[151],QA[151]);
buf (QA[152], QA_buf[152]);
buf (QA_final[152],QA[152]);
buf (QA[153], QA_buf[153]);
buf (QA_final[153],QA[153]);
buf (QA[154], QA_buf[154]);
buf (QA_final[154],QA[154]);
buf (QA[155], QA_buf[155]);
buf (QA_final[155],QA[155]);
buf (QA[156], QA_buf[156]);
buf (QA_final[156],QA[156]);
buf (QA[157], QA_buf[157]);
buf (QA_final[157],QA[157]);
buf (QA[158], QA_buf[158]);
buf (QA_final[158],QA[158]);
buf (QA[159], QA_buf[159]);
buf (QA_final[159],QA[159]);
wire [159:0] QPA_buf;
buf (QPA[0], QPA_buf[0]);
buf (QPA[1], QPA_buf[1]);
buf (QPA[2], QPA_buf[2]);
buf (QPA[3], QPA_buf[3]);
buf (QPA[4], QPA_buf[4]);
buf (QPA[5], QPA_buf[5]);
buf (QPA[6], QPA_buf[6]);
buf (QPA[7], QPA_buf[7]);
buf (QPA[8], QPA_buf[8]);
buf (QPA[9], QPA_buf[9]);
buf (QPA[10], QPA_buf[10]);
buf (QPA[11], QPA_buf[11]);
buf (QPA[12], QPA_buf[12]);
buf (QPA[13], QPA_buf[13]);
buf (QPA[14], QPA_buf[14]);
buf (QPA[15], QPA_buf[15]);
buf (QPA[16], QPA_buf[16]);
buf (QPA[17], QPA_buf[17]);
buf (QPA[18], QPA_buf[18]);
buf (QPA[19], QPA_buf[19]);
buf (QPA[20], QPA_buf[20]);
buf (QPA[21], QPA_buf[21]);
buf (QPA[22], QPA_buf[22]);
buf (QPA[23], QPA_buf[23]);
buf (QPA[24], QPA_buf[24]);
buf (QPA[25], QPA_buf[25]);
buf (QPA[26], QPA_buf[26]);
buf (QPA[27], QPA_buf[27]);
buf (QPA[28], QPA_buf[28]);
buf (QPA[29], QPA_buf[29]);
buf (QPA[30], QPA_buf[30]);
buf (QPA[31], QPA_buf[31]);
buf (QPA[32], QPA_buf[32]);
buf (QPA[33], QPA_buf[33]);
buf (QPA[34], QPA_buf[34]);
buf (QPA[35], QPA_buf[35]);
buf (QPA[36], QPA_buf[36]);
buf (QPA[37], QPA_buf[37]);
buf (QPA[38], QPA_buf[38]);
buf (QPA[39], QPA_buf[39]);
buf (QPA[40], QPA_buf[40]);
buf (QPA[41], QPA_buf[41]);
buf (QPA[42], QPA_buf[42]);
buf (QPA[43], QPA_buf[43]);
buf (QPA[44], QPA_buf[44]);
buf (QPA[45], QPA_buf[45]);
buf (QPA[46], QPA_buf[46]);
buf (QPA[47], QPA_buf[47]);
buf (QPA[48], QPA_buf[48]);
buf (QPA[49], QPA_buf[49]);
buf (QPA[50], QPA_buf[50]);
buf (QPA[51], QPA_buf[51]);
buf (QPA[52], QPA_buf[52]);
buf (QPA[53], QPA_buf[53]);
buf (QPA[54], QPA_buf[54]);
buf (QPA[55], QPA_buf[55]);
buf (QPA[56], QPA_buf[56]);
buf (QPA[57], QPA_buf[57]);
buf (QPA[58], QPA_buf[58]);
buf (QPA[59], QPA_buf[59]);
buf (QPA[60], QPA_buf[60]);
buf (QPA[61], QPA_buf[61]);
buf (QPA[62], QPA_buf[62]);
buf (QPA[63], QPA_buf[63]);
buf (QPA[64], QPA_buf[64]);
buf (QPA[65], QPA_buf[65]);
buf (QPA[66], QPA_buf[66]);
buf (QPA[67], QPA_buf[67]);
buf (QPA[68], QPA_buf[68]);
buf (QPA[69], QPA_buf[69]);
buf (QPA[70], QPA_buf[70]);
buf (QPA[71], QPA_buf[71]);
buf (QPA[72], QPA_buf[72]);
buf (QPA[73], QPA_buf[73]);
buf (QPA[74], QPA_buf[74]);
buf (QPA[75], QPA_buf[75]);
buf (QPA[76], QPA_buf[76]);
buf (QPA[77], QPA_buf[77]);
buf (QPA[78], QPA_buf[78]);
buf (QPA[79], QPA_buf[79]);
buf (QPA[80], QPA_buf[80]);
buf (QPA[81], QPA_buf[81]);
buf (QPA[82], QPA_buf[82]);
buf (QPA[83], QPA_buf[83]);
buf (QPA[84], QPA_buf[84]);
buf (QPA[85], QPA_buf[85]);
buf (QPA[86], QPA_buf[86]);
buf (QPA[87], QPA_buf[87]);
buf (QPA[88], QPA_buf[88]);
buf (QPA[89], QPA_buf[89]);
buf (QPA[90], QPA_buf[90]);
buf (QPA[91], QPA_buf[91]);
buf (QPA[92], QPA_buf[92]);
buf (QPA[93], QPA_buf[93]);
buf (QPA[94], QPA_buf[94]);
buf (QPA[95], QPA_buf[95]);
buf (QPA[96], QPA_buf[96]);
buf (QPA[97], QPA_buf[97]);
buf (QPA[98], QPA_buf[98]);
buf (QPA[99], QPA_buf[99]);
buf (QPA[100], QPA_buf[100]);
buf (QPA[101], QPA_buf[101]);
buf (QPA[102], QPA_buf[102]);
buf (QPA[103], QPA_buf[103]);
buf (QPA[104], QPA_buf[104]);
buf (QPA[105], QPA_buf[105]);
buf (QPA[106], QPA_buf[106]);
buf (QPA[107], QPA_buf[107]);
buf (QPA[108], QPA_buf[108]);
buf (QPA[109], QPA_buf[109]);
buf (QPA[110], QPA_buf[110]);
buf (QPA[111], QPA_buf[111]);
buf (QPA[112], QPA_buf[112]);
buf (QPA[113], QPA_buf[113]);
buf (QPA[114], QPA_buf[114]);
buf (QPA[115], QPA_buf[115]);
buf (QPA[116], QPA_buf[116]);
buf (QPA[117], QPA_buf[117]);
buf (QPA[118], QPA_buf[118]);
buf (QPA[119], QPA_buf[119]);
buf (QPA[120], QPA_buf[120]);
buf (QPA[121], QPA_buf[121]);
buf (QPA[122], QPA_buf[122]);
buf (QPA[123], QPA_buf[123]);
buf (QPA[124], QPA_buf[124]);
buf (QPA[125], QPA_buf[125]);
buf (QPA[126], QPA_buf[126]);
buf (QPA[127], QPA_buf[127]);
buf (QPA[128], QPA_buf[128]);
buf (QPA[129], QPA_buf[129]);
buf (QPA[130], QPA_buf[130]);
buf (QPA[131], QPA_buf[131]);
buf (QPA[132], QPA_buf[132]);
buf (QPA[133], QPA_buf[133]);
buf (QPA[134], QPA_buf[134]);
buf (QPA[135], QPA_buf[135]);
buf (QPA[136], QPA_buf[136]);
buf (QPA[137], QPA_buf[137]);
buf (QPA[138], QPA_buf[138]);
buf (QPA[139], QPA_buf[139]);
buf (QPA[140], QPA_buf[140]);
buf (QPA[141], QPA_buf[141]);
buf (QPA[142], QPA_buf[142]);
buf (QPA[143], QPA_buf[143]);
buf (QPA[144], QPA_buf[144]);
buf (QPA[145], QPA_buf[145]);
buf (QPA[146], QPA_buf[146]);
buf (QPA[147], QPA_buf[147]);
buf (QPA[148], QPA_buf[148]);
buf (QPA[149], QPA_buf[149]);
buf (QPA[150], QPA_buf[150]);
buf (QPA[151], QPA_buf[151]);
buf (QPA[152], QPA_buf[152]);
buf (QPA[153], QPA_buf[153]);
buf (QPA[154], QPA_buf[154]);
buf (QPA[155], QPA_buf[155]);
buf (QPA[156], QPA_buf[156]);
buf (QPA[157], QPA_buf[157]);
buf (QPA[158], QPA_buf[158]);
buf (QPA[159], QPA_buf[159]);
wire SO_QA_buf;
buf (SO_QA, SO_QA_buf);
wire SO_DA_buf;
buf (SO_DA, SO_DA_buf);
wire SO_CNTRA_buf;
buf (SO_CNTRA, SO_CNTRA_buf);
wire [159:0] QB_buf;
buf (QB[0], QB_buf[0]);
buf (QB_final[0],QB[0]);
buf (QB[1], QB_buf[1]);
buf (QB_final[1],QB[1]);
buf (QB[2], QB_buf[2]);
buf (QB_final[2],QB[2]);
buf (QB[3], QB_buf[3]);
buf (QB_final[3],QB[3]);
buf (QB[4], QB_buf[4]);
buf (QB_final[4],QB[4]);
buf (QB[5], QB_buf[5]);
buf (QB_final[5],QB[5]);
buf (QB[6], QB_buf[6]);
buf (QB_final[6],QB[6]);
buf (QB[7], QB_buf[7]);
buf (QB_final[7],QB[7]);
buf (QB[8], QB_buf[8]);
buf (QB_final[8],QB[8]);
buf (QB[9], QB_buf[9]);
buf (QB_final[9],QB[9]);
buf (QB[10], QB_buf[10]);
buf (QB_final[10],QB[10]);
buf (QB[11], QB_buf[11]);
buf (QB_final[11],QB[11]);
buf (QB[12], QB_buf[12]);
buf (QB_final[12],QB[12]);
buf (QB[13], QB_buf[13]);
buf (QB_final[13],QB[13]);
buf (QB[14], QB_buf[14]);
buf (QB_final[14],QB[14]);
buf (QB[15], QB_buf[15]);
buf (QB_final[15],QB[15]);
buf (QB[16], QB_buf[16]);
buf (QB_final[16],QB[16]);
buf (QB[17], QB_buf[17]);
buf (QB_final[17],QB[17]);
buf (QB[18], QB_buf[18]);
buf (QB_final[18],QB[18]);
buf (QB[19], QB_buf[19]);
buf (QB_final[19],QB[19]);
buf (QB[20], QB_buf[20]);
buf (QB_final[20],QB[20]);
buf (QB[21], QB_buf[21]);
buf (QB_final[21],QB[21]);
buf (QB[22], QB_buf[22]);
buf (QB_final[22],QB[22]);
buf (QB[23], QB_buf[23]);
buf (QB_final[23],QB[23]);
buf (QB[24], QB_buf[24]);
buf (QB_final[24],QB[24]);
buf (QB[25], QB_buf[25]);
buf (QB_final[25],QB[25]);
buf (QB[26], QB_buf[26]);
buf (QB_final[26],QB[26]);
buf (QB[27], QB_buf[27]);
buf (QB_final[27],QB[27]);
buf (QB[28], QB_buf[28]);
buf (QB_final[28],QB[28]);
buf (QB[29], QB_buf[29]);
buf (QB_final[29],QB[29]);
buf (QB[30], QB_buf[30]);
buf (QB_final[30],QB[30]);
buf (QB[31], QB_buf[31]);
buf (QB_final[31],QB[31]);
buf (QB[32], QB_buf[32]);
buf (QB_final[32],QB[32]);
buf (QB[33], QB_buf[33]);
buf (QB_final[33],QB[33]);
buf (QB[34], QB_buf[34]);
buf (QB_final[34],QB[34]);
buf (QB[35], QB_buf[35]);
buf (QB_final[35],QB[35]);
buf (QB[36], QB_buf[36]);
buf (QB_final[36],QB[36]);
buf (QB[37], QB_buf[37]);
buf (QB_final[37],QB[37]);
buf (QB[38], QB_buf[38]);
buf (QB_final[38],QB[38]);
buf (QB[39], QB_buf[39]);
buf (QB_final[39],QB[39]);
buf (QB[40], QB_buf[40]);
buf (QB_final[40],QB[40]);
buf (QB[41], QB_buf[41]);
buf (QB_final[41],QB[41]);
buf (QB[42], QB_buf[42]);
buf (QB_final[42],QB[42]);
buf (QB[43], QB_buf[43]);
buf (QB_final[43],QB[43]);
buf (QB[44], QB_buf[44]);
buf (QB_final[44],QB[44]);
buf (QB[45], QB_buf[45]);
buf (QB_final[45],QB[45]);
buf (QB[46], QB_buf[46]);
buf (QB_final[46],QB[46]);
buf (QB[47], QB_buf[47]);
buf (QB_final[47],QB[47]);
buf (QB[48], QB_buf[48]);
buf (QB_final[48],QB[48]);
buf (QB[49], QB_buf[49]);
buf (QB_final[49],QB[49]);
buf (QB[50], QB_buf[50]);
buf (QB_final[50],QB[50]);
buf (QB[51], QB_buf[51]);
buf (QB_final[51],QB[51]);
buf (QB[52], QB_buf[52]);
buf (QB_final[52],QB[52]);
buf (QB[53], QB_buf[53]);
buf (QB_final[53],QB[53]);
buf (QB[54], QB_buf[54]);
buf (QB_final[54],QB[54]);
buf (QB[55], QB_buf[55]);
buf (QB_final[55],QB[55]);
buf (QB[56], QB_buf[56]);
buf (QB_final[56],QB[56]);
buf (QB[57], QB_buf[57]);
buf (QB_final[57],QB[57]);
buf (QB[58], QB_buf[58]);
buf (QB_final[58],QB[58]);
buf (QB[59], QB_buf[59]);
buf (QB_final[59],QB[59]);
buf (QB[60], QB_buf[60]);
buf (QB_final[60],QB[60]);
buf (QB[61], QB_buf[61]);
buf (QB_final[61],QB[61]);
buf (QB[62], QB_buf[62]);
buf (QB_final[62],QB[62]);
buf (QB[63], QB_buf[63]);
buf (QB_final[63],QB[63]);
buf (QB[64], QB_buf[64]);
buf (QB_final[64],QB[64]);
buf (QB[65], QB_buf[65]);
buf (QB_final[65],QB[65]);
buf (QB[66], QB_buf[66]);
buf (QB_final[66],QB[66]);
buf (QB[67], QB_buf[67]);
buf (QB_final[67],QB[67]);
buf (QB[68], QB_buf[68]);
buf (QB_final[68],QB[68]);
buf (QB[69], QB_buf[69]);
buf (QB_final[69],QB[69]);
buf (QB[70], QB_buf[70]);
buf (QB_final[70],QB[70]);
buf (QB[71], QB_buf[71]);
buf (QB_final[71],QB[71]);
buf (QB[72], QB_buf[72]);
buf (QB_final[72],QB[72]);
buf (QB[73], QB_buf[73]);
buf (QB_final[73],QB[73]);
buf (QB[74], QB_buf[74]);
buf (QB_final[74],QB[74]);
buf (QB[75], QB_buf[75]);
buf (QB_final[75],QB[75]);
buf (QB[76], QB_buf[76]);
buf (QB_final[76],QB[76]);
buf (QB[77], QB_buf[77]);
buf (QB_final[77],QB[77]);
buf (QB[78], QB_buf[78]);
buf (QB_final[78],QB[78]);
buf (QB[79], QB_buf[79]);
buf (QB_final[79],QB[79]);
buf (QB[80], QB_buf[80]);
buf (QB_final[80],QB[80]);
buf (QB[81], QB_buf[81]);
buf (QB_final[81],QB[81]);
buf (QB[82], QB_buf[82]);
buf (QB_final[82],QB[82]);
buf (QB[83], QB_buf[83]);
buf (QB_final[83],QB[83]);
buf (QB[84], QB_buf[84]);
buf (QB_final[84],QB[84]);
buf (QB[85], QB_buf[85]);
buf (QB_final[85],QB[85]);
buf (QB[86], QB_buf[86]);
buf (QB_final[86],QB[86]);
buf (QB[87], QB_buf[87]);
buf (QB_final[87],QB[87]);
buf (QB[88], QB_buf[88]);
buf (QB_final[88],QB[88]);
buf (QB[89], QB_buf[89]);
buf (QB_final[89],QB[89]);
buf (QB[90], QB_buf[90]);
buf (QB_final[90],QB[90]);
buf (QB[91], QB_buf[91]);
buf (QB_final[91],QB[91]);
buf (QB[92], QB_buf[92]);
buf (QB_final[92],QB[92]);
buf (QB[93], QB_buf[93]);
buf (QB_final[93],QB[93]);
buf (QB[94], QB_buf[94]);
buf (QB_final[94],QB[94]);
buf (QB[95], QB_buf[95]);
buf (QB_final[95],QB[95]);
buf (QB[96], QB_buf[96]);
buf (QB_final[96],QB[96]);
buf (QB[97], QB_buf[97]);
buf (QB_final[97],QB[97]);
buf (QB[98], QB_buf[98]);
buf (QB_final[98],QB[98]);
buf (QB[99], QB_buf[99]);
buf (QB_final[99],QB[99]);
buf (QB[100], QB_buf[100]);
buf (QB_final[100],QB[100]);
buf (QB[101], QB_buf[101]);
buf (QB_final[101],QB[101]);
buf (QB[102], QB_buf[102]);
buf (QB_final[102],QB[102]);
buf (QB[103], QB_buf[103]);
buf (QB_final[103],QB[103]);
buf (QB[104], QB_buf[104]);
buf (QB_final[104],QB[104]);
buf (QB[105], QB_buf[105]);
buf (QB_final[105],QB[105]);
buf (QB[106], QB_buf[106]);
buf (QB_final[106],QB[106]);
buf (QB[107], QB_buf[107]);
buf (QB_final[107],QB[107]);
buf (QB[108], QB_buf[108]);
buf (QB_final[108],QB[108]);
buf (QB[109], QB_buf[109]);
buf (QB_final[109],QB[109]);
buf (QB[110], QB_buf[110]);
buf (QB_final[110],QB[110]);
buf (QB[111], QB_buf[111]);
buf (QB_final[111],QB[111]);
buf (QB[112], QB_buf[112]);
buf (QB_final[112],QB[112]);
buf (QB[113], QB_buf[113]);
buf (QB_final[113],QB[113]);
buf (QB[114], QB_buf[114]);
buf (QB_final[114],QB[114]);
buf (QB[115], QB_buf[115]);
buf (QB_final[115],QB[115]);
buf (QB[116], QB_buf[116]);
buf (QB_final[116],QB[116]);
buf (QB[117], QB_buf[117]);
buf (QB_final[117],QB[117]);
buf (QB[118], QB_buf[118]);
buf (QB_final[118],QB[118]);
buf (QB[119], QB_buf[119]);
buf (QB_final[119],QB[119]);
buf (QB[120], QB_buf[120]);
buf (QB_final[120],QB[120]);
buf (QB[121], QB_buf[121]);
buf (QB_final[121],QB[121]);
buf (QB[122], QB_buf[122]);
buf (QB_final[122],QB[122]);
buf (QB[123], QB_buf[123]);
buf (QB_final[123],QB[123]);
buf (QB[124], QB_buf[124]);
buf (QB_final[124],QB[124]);
buf (QB[125], QB_buf[125]);
buf (QB_final[125],QB[125]);
buf (QB[126], QB_buf[126]);
buf (QB_final[126],QB[126]);
buf (QB[127], QB_buf[127]);
buf (QB_final[127],QB[127]);
buf (QB[128], QB_buf[128]);
buf (QB_final[128],QB[128]);
buf (QB[129], QB_buf[129]);
buf (QB_final[129],QB[129]);
buf (QB[130], QB_buf[130]);
buf (QB_final[130],QB[130]);
buf (QB[131], QB_buf[131]);
buf (QB_final[131],QB[131]);
buf (QB[132], QB_buf[132]);
buf (QB_final[132],QB[132]);
buf (QB[133], QB_buf[133]);
buf (QB_final[133],QB[133]);
buf (QB[134], QB_buf[134]);
buf (QB_final[134],QB[134]);
buf (QB[135], QB_buf[135]);
buf (QB_final[135],QB[135]);
buf (QB[136], QB_buf[136]);
buf (QB_final[136],QB[136]);
buf (QB[137], QB_buf[137]);
buf (QB_final[137],QB[137]);
buf (QB[138], QB_buf[138]);
buf (QB_final[138],QB[138]);
buf (QB[139], QB_buf[139]);
buf (QB_final[139],QB[139]);
buf (QB[140], QB_buf[140]);
buf (QB_final[140],QB[140]);
buf (QB[141], QB_buf[141]);
buf (QB_final[141],QB[141]);
buf (QB[142], QB_buf[142]);
buf (QB_final[142],QB[142]);
buf (QB[143], QB_buf[143]);
buf (QB_final[143],QB[143]);
buf (QB[144], QB_buf[144]);
buf (QB_final[144],QB[144]);
buf (QB[145], QB_buf[145]);
buf (QB_final[145],QB[145]);
buf (QB[146], QB_buf[146]);
buf (QB_final[146],QB[146]);
buf (QB[147], QB_buf[147]);
buf (QB_final[147],QB[147]);
buf (QB[148], QB_buf[148]);
buf (QB_final[148],QB[148]);
buf (QB[149], QB_buf[149]);
buf (QB_final[149],QB[149]);
buf (QB[150], QB_buf[150]);
buf (QB_final[150],QB[150]);
buf (QB[151], QB_buf[151]);
buf (QB_final[151],QB[151]);
buf (QB[152], QB_buf[152]);
buf (QB_final[152],QB[152]);
buf (QB[153], QB_buf[153]);
buf (QB_final[153],QB[153]);
buf (QB[154], QB_buf[154]);
buf (QB_final[154],QB[154]);
buf (QB[155], QB_buf[155]);
buf (QB_final[155],QB[155]);
buf (QB[156], QB_buf[156]);
buf (QB_final[156],QB[156]);
buf (QB[157], QB_buf[157]);
buf (QB_final[157],QB[157]);
buf (QB[158], QB_buf[158]);
buf (QB_final[158],QB[158]);
buf (QB[159], QB_buf[159]);
buf (QB_final[159],QB[159]);
wire [159:0] QPB_buf;
buf (QPB[0], QPB_buf[0]);
buf (QPB[1], QPB_buf[1]);
buf (QPB[2], QPB_buf[2]);
buf (QPB[3], QPB_buf[3]);
buf (QPB[4], QPB_buf[4]);
buf (QPB[5], QPB_buf[5]);
buf (QPB[6], QPB_buf[6]);
buf (QPB[7], QPB_buf[7]);
buf (QPB[8], QPB_buf[8]);
buf (QPB[9], QPB_buf[9]);
buf (QPB[10], QPB_buf[10]);
buf (QPB[11], QPB_buf[11]);
buf (QPB[12], QPB_buf[12]);
buf (QPB[13], QPB_buf[13]);
buf (QPB[14], QPB_buf[14]);
buf (QPB[15], QPB_buf[15]);
buf (QPB[16], QPB_buf[16]);
buf (QPB[17], QPB_buf[17]);
buf (QPB[18], QPB_buf[18]);
buf (QPB[19], QPB_buf[19]);
buf (QPB[20], QPB_buf[20]);
buf (QPB[21], QPB_buf[21]);
buf (QPB[22], QPB_buf[22]);
buf (QPB[23], QPB_buf[23]);
buf (QPB[24], QPB_buf[24]);
buf (QPB[25], QPB_buf[25]);
buf (QPB[26], QPB_buf[26]);
buf (QPB[27], QPB_buf[27]);
buf (QPB[28], QPB_buf[28]);
buf (QPB[29], QPB_buf[29]);
buf (QPB[30], QPB_buf[30]);
buf (QPB[31], QPB_buf[31]);
buf (QPB[32], QPB_buf[32]);
buf (QPB[33], QPB_buf[33]);
buf (QPB[34], QPB_buf[34]);
buf (QPB[35], QPB_buf[35]);
buf (QPB[36], QPB_buf[36]);
buf (QPB[37], QPB_buf[37]);
buf (QPB[38], QPB_buf[38]);
buf (QPB[39], QPB_buf[39]);
buf (QPB[40], QPB_buf[40]);
buf (QPB[41], QPB_buf[41]);
buf (QPB[42], QPB_buf[42]);
buf (QPB[43], QPB_buf[43]);
buf (QPB[44], QPB_buf[44]);
buf (QPB[45], QPB_buf[45]);
buf (QPB[46], QPB_buf[46]);
buf (QPB[47], QPB_buf[47]);
buf (QPB[48], QPB_buf[48]);
buf (QPB[49], QPB_buf[49]);
buf (QPB[50], QPB_buf[50]);
buf (QPB[51], QPB_buf[51]);
buf (QPB[52], QPB_buf[52]);
buf (QPB[53], QPB_buf[53]);
buf (QPB[54], QPB_buf[54]);
buf (QPB[55], QPB_buf[55]);
buf (QPB[56], QPB_buf[56]);
buf (QPB[57], QPB_buf[57]);
buf (QPB[58], QPB_buf[58]);
buf (QPB[59], QPB_buf[59]);
buf (QPB[60], QPB_buf[60]);
buf (QPB[61], QPB_buf[61]);
buf (QPB[62], QPB_buf[62]);
buf (QPB[63], QPB_buf[63]);
buf (QPB[64], QPB_buf[64]);
buf (QPB[65], QPB_buf[65]);
buf (QPB[66], QPB_buf[66]);
buf (QPB[67], QPB_buf[67]);
buf (QPB[68], QPB_buf[68]);
buf (QPB[69], QPB_buf[69]);
buf (QPB[70], QPB_buf[70]);
buf (QPB[71], QPB_buf[71]);
buf (QPB[72], QPB_buf[72]);
buf (QPB[73], QPB_buf[73]);
buf (QPB[74], QPB_buf[74]);
buf (QPB[75], QPB_buf[75]);
buf (QPB[76], QPB_buf[76]);
buf (QPB[77], QPB_buf[77]);
buf (QPB[78], QPB_buf[78]);
buf (QPB[79], QPB_buf[79]);
buf (QPB[80], QPB_buf[80]);
buf (QPB[81], QPB_buf[81]);
buf (QPB[82], QPB_buf[82]);
buf (QPB[83], QPB_buf[83]);
buf (QPB[84], QPB_buf[84]);
buf (QPB[85], QPB_buf[85]);
buf (QPB[86], QPB_buf[86]);
buf (QPB[87], QPB_buf[87]);
buf (QPB[88], QPB_buf[88]);
buf (QPB[89], QPB_buf[89]);
buf (QPB[90], QPB_buf[90]);
buf (QPB[91], QPB_buf[91]);
buf (QPB[92], QPB_buf[92]);
buf (QPB[93], QPB_buf[93]);
buf (QPB[94], QPB_buf[94]);
buf (QPB[95], QPB_buf[95]);
buf (QPB[96], QPB_buf[96]);
buf (QPB[97], QPB_buf[97]);
buf (QPB[98], QPB_buf[98]);
buf (QPB[99], QPB_buf[99]);
buf (QPB[100], QPB_buf[100]);
buf (QPB[101], QPB_buf[101]);
buf (QPB[102], QPB_buf[102]);
buf (QPB[103], QPB_buf[103]);
buf (QPB[104], QPB_buf[104]);
buf (QPB[105], QPB_buf[105]);
buf (QPB[106], QPB_buf[106]);
buf (QPB[107], QPB_buf[107]);
buf (QPB[108], QPB_buf[108]);
buf (QPB[109], QPB_buf[109]);
buf (QPB[110], QPB_buf[110]);
buf (QPB[111], QPB_buf[111]);
buf (QPB[112], QPB_buf[112]);
buf (QPB[113], QPB_buf[113]);
buf (QPB[114], QPB_buf[114]);
buf (QPB[115], QPB_buf[115]);
buf (QPB[116], QPB_buf[116]);
buf (QPB[117], QPB_buf[117]);
buf (QPB[118], QPB_buf[118]);
buf (QPB[119], QPB_buf[119]);
buf (QPB[120], QPB_buf[120]);
buf (QPB[121], QPB_buf[121]);
buf (QPB[122], QPB_buf[122]);
buf (QPB[123], QPB_buf[123]);
buf (QPB[124], QPB_buf[124]);
buf (QPB[125], QPB_buf[125]);
buf (QPB[126], QPB_buf[126]);
buf (QPB[127], QPB_buf[127]);
buf (QPB[128], QPB_buf[128]);
buf (QPB[129], QPB_buf[129]);
buf (QPB[130], QPB_buf[130]);
buf (QPB[131], QPB_buf[131]);
buf (QPB[132], QPB_buf[132]);
buf (QPB[133], QPB_buf[133]);
buf (QPB[134], QPB_buf[134]);
buf (QPB[135], QPB_buf[135]);
buf (QPB[136], QPB_buf[136]);
buf (QPB[137], QPB_buf[137]);
buf (QPB[138], QPB_buf[138]);
buf (QPB[139], QPB_buf[139]);
buf (QPB[140], QPB_buf[140]);
buf (QPB[141], QPB_buf[141]);
buf (QPB[142], QPB_buf[142]);
buf (QPB[143], QPB_buf[143]);
buf (QPB[144], QPB_buf[144]);
buf (QPB[145], QPB_buf[145]);
buf (QPB[146], QPB_buf[146]);
buf (QPB[147], QPB_buf[147]);
buf (QPB[148], QPB_buf[148]);
buf (QPB[149], QPB_buf[149]);
buf (QPB[150], QPB_buf[150]);
buf (QPB[151], QPB_buf[151]);
buf (QPB[152], QPB_buf[152]);
buf (QPB[153], QPB_buf[153]);
buf (QPB[154], QPB_buf[154]);
buf (QPB[155], QPB_buf[155]);
buf (QPB[156], QPB_buf[156]);
buf (QPB[157], QPB_buf[157]);
buf (QPB[158], QPB_buf[158]);
buf (QPB[159], QPB_buf[159]);
wire SO_QB_buf;
buf (SO_QB, SO_QB_buf);
wire SO_DB_buf;
buf (SO_DB, SO_DB_buf);
wire SO_CNTRB_buf;
buf (SO_CNTRB, SO_CNTRB_buf);
wire [10:0] ADRA_buf;
wire [10:0] delayed_ADRA;
buf (ADRA_buf[0], delayed_ADRA[0]);
buf (ADRA_buf[1], delayed_ADRA[1]);
buf (ADRA_buf[2], delayed_ADRA[2]);
buf (ADRA_buf[3], delayed_ADRA[3]);
buf (ADRA_buf[4], delayed_ADRA[4]);
buf (ADRA_buf[5], delayed_ADRA[5]);
buf (ADRA_buf[6], delayed_ADRA[6]);
buf (ADRA_buf[7], delayed_ADRA[7]);
buf (ADRA_buf[8], delayed_ADRA[8]);
buf (ADRA_buf[9], delayed_ADRA[9]);
buf (ADRA_buf[10], delayed_ADRA[10]);
wire [159:0] DA_buf;
wire [159:0] delayed_DA;
buf (DA_buf[0], delayed_DA[0]);
buf (DA_buf[1], delayed_DA[1]);
buf (DA_buf[2], delayed_DA[2]);
buf (DA_buf[3], delayed_DA[3]);
buf (DA_buf[4], delayed_DA[4]);
buf (DA_buf[5], delayed_DA[5]);
buf (DA_buf[6], delayed_DA[6]);
buf (DA_buf[7], delayed_DA[7]);
buf (DA_buf[8], delayed_DA[8]);
buf (DA_buf[9], delayed_DA[9]);
buf (DA_buf[10], delayed_DA[10]);
buf (DA_buf[11], delayed_DA[11]);
buf (DA_buf[12], delayed_DA[12]);
buf (DA_buf[13], delayed_DA[13]);
buf (DA_buf[14], delayed_DA[14]);
buf (DA_buf[15], delayed_DA[15]);
buf (DA_buf[16], delayed_DA[16]);
buf (DA_buf[17], delayed_DA[17]);
buf (DA_buf[18], delayed_DA[18]);
buf (DA_buf[19], delayed_DA[19]);
buf (DA_buf[20], delayed_DA[20]);
buf (DA_buf[21], delayed_DA[21]);
buf (DA_buf[22], delayed_DA[22]);
buf (DA_buf[23], delayed_DA[23]);
buf (DA_buf[24], delayed_DA[24]);
buf (DA_buf[25], delayed_DA[25]);
buf (DA_buf[26], delayed_DA[26]);
buf (DA_buf[27], delayed_DA[27]);
buf (DA_buf[28], delayed_DA[28]);
buf (DA_buf[29], delayed_DA[29]);
buf (DA_buf[30], delayed_DA[30]);
buf (DA_buf[31], delayed_DA[31]);
buf (DA_buf[32], delayed_DA[32]);
buf (DA_buf[33], delayed_DA[33]);
buf (DA_buf[34], delayed_DA[34]);
buf (DA_buf[35], delayed_DA[35]);
buf (DA_buf[36], delayed_DA[36]);
buf (DA_buf[37], delayed_DA[37]);
buf (DA_buf[38], delayed_DA[38]);
buf (DA_buf[39], delayed_DA[39]);
buf (DA_buf[40], delayed_DA[40]);
buf (DA_buf[41], delayed_DA[41]);
buf (DA_buf[42], delayed_DA[42]);
buf (DA_buf[43], delayed_DA[43]);
buf (DA_buf[44], delayed_DA[44]);
buf (DA_buf[45], delayed_DA[45]);
buf (DA_buf[46], delayed_DA[46]);
buf (DA_buf[47], delayed_DA[47]);
buf (DA_buf[48], delayed_DA[48]);
buf (DA_buf[49], delayed_DA[49]);
buf (DA_buf[50], delayed_DA[50]);
buf (DA_buf[51], delayed_DA[51]);
buf (DA_buf[52], delayed_DA[52]);
buf (DA_buf[53], delayed_DA[53]);
buf (DA_buf[54], delayed_DA[54]);
buf (DA_buf[55], delayed_DA[55]);
buf (DA_buf[56], delayed_DA[56]);
buf (DA_buf[57], delayed_DA[57]);
buf (DA_buf[58], delayed_DA[58]);
buf (DA_buf[59], delayed_DA[59]);
buf (DA_buf[60], delayed_DA[60]);
buf (DA_buf[61], delayed_DA[61]);
buf (DA_buf[62], delayed_DA[62]);
buf (DA_buf[63], delayed_DA[63]);
buf (DA_buf[64], delayed_DA[64]);
buf (DA_buf[65], delayed_DA[65]);
buf (DA_buf[66], delayed_DA[66]);
buf (DA_buf[67], delayed_DA[67]);
buf (DA_buf[68], delayed_DA[68]);
buf (DA_buf[69], delayed_DA[69]);
buf (DA_buf[70], delayed_DA[70]);
buf (DA_buf[71], delayed_DA[71]);
buf (DA_buf[72], delayed_DA[72]);
buf (DA_buf[73], delayed_DA[73]);
buf (DA_buf[74], delayed_DA[74]);
buf (DA_buf[75], delayed_DA[75]);
buf (DA_buf[76], delayed_DA[76]);
buf (DA_buf[77], delayed_DA[77]);
buf (DA_buf[78], delayed_DA[78]);
buf (DA_buf[79], delayed_DA[79]);
buf (DA_buf[80], delayed_DA[80]);
buf (DA_buf[81], delayed_DA[81]);
buf (DA_buf[82], delayed_DA[82]);
buf (DA_buf[83], delayed_DA[83]);
buf (DA_buf[84], delayed_DA[84]);
buf (DA_buf[85], delayed_DA[85]);
buf (DA_buf[86], delayed_DA[86]);
buf (DA_buf[87], delayed_DA[87]);
buf (DA_buf[88], delayed_DA[88]);
buf (DA_buf[89], delayed_DA[89]);
buf (DA_buf[90], delayed_DA[90]);
buf (DA_buf[91], delayed_DA[91]);
buf (DA_buf[92], delayed_DA[92]);
buf (DA_buf[93], delayed_DA[93]);
buf (DA_buf[94], delayed_DA[94]);
buf (DA_buf[95], delayed_DA[95]);
buf (DA_buf[96], delayed_DA[96]);
buf (DA_buf[97], delayed_DA[97]);
buf (DA_buf[98], delayed_DA[98]);
buf (DA_buf[99], delayed_DA[99]);
buf (DA_buf[100], delayed_DA[100]);
buf (DA_buf[101], delayed_DA[101]);
buf (DA_buf[102], delayed_DA[102]);
buf (DA_buf[103], delayed_DA[103]);
buf (DA_buf[104], delayed_DA[104]);
buf (DA_buf[105], delayed_DA[105]);
buf (DA_buf[106], delayed_DA[106]);
buf (DA_buf[107], delayed_DA[107]);
buf (DA_buf[108], delayed_DA[108]);
buf (DA_buf[109], delayed_DA[109]);
buf (DA_buf[110], delayed_DA[110]);
buf (DA_buf[111], delayed_DA[111]);
buf (DA_buf[112], delayed_DA[112]);
buf (DA_buf[113], delayed_DA[113]);
buf (DA_buf[114], delayed_DA[114]);
buf (DA_buf[115], delayed_DA[115]);
buf (DA_buf[116], delayed_DA[116]);
buf (DA_buf[117], delayed_DA[117]);
buf (DA_buf[118], delayed_DA[118]);
buf (DA_buf[119], delayed_DA[119]);
buf (DA_buf[120], delayed_DA[120]);
buf (DA_buf[121], delayed_DA[121]);
buf (DA_buf[122], delayed_DA[122]);
buf (DA_buf[123], delayed_DA[123]);
buf (DA_buf[124], delayed_DA[124]);
buf (DA_buf[125], delayed_DA[125]);
buf (DA_buf[126], delayed_DA[126]);
buf (DA_buf[127], delayed_DA[127]);
buf (DA_buf[128], delayed_DA[128]);
buf (DA_buf[129], delayed_DA[129]);
buf (DA_buf[130], delayed_DA[130]);
buf (DA_buf[131], delayed_DA[131]);
buf (DA_buf[132], delayed_DA[132]);
buf (DA_buf[133], delayed_DA[133]);
buf (DA_buf[134], delayed_DA[134]);
buf (DA_buf[135], delayed_DA[135]);
buf (DA_buf[136], delayed_DA[136]);
buf (DA_buf[137], delayed_DA[137]);
buf (DA_buf[138], delayed_DA[138]);
buf (DA_buf[139], delayed_DA[139]);
buf (DA_buf[140], delayed_DA[140]);
buf (DA_buf[141], delayed_DA[141]);
buf (DA_buf[142], delayed_DA[142]);
buf (DA_buf[143], delayed_DA[143]);
buf (DA_buf[144], delayed_DA[144]);
buf (DA_buf[145], delayed_DA[145]);
buf (DA_buf[146], delayed_DA[146]);
buf (DA_buf[147], delayed_DA[147]);
buf (DA_buf[148], delayed_DA[148]);
buf (DA_buf[149], delayed_DA[149]);
buf (DA_buf[150], delayed_DA[150]);
buf (DA_buf[151], delayed_DA[151]);
buf (DA_buf[152], delayed_DA[152]);
buf (DA_buf[153], delayed_DA[153]);
buf (DA_buf[154], delayed_DA[154]);
buf (DA_buf[155], delayed_DA[155]);
buf (DA_buf[156], delayed_DA[156]);
buf (DA_buf[157], delayed_DA[157]);
buf (DA_buf[158], delayed_DA[158]);
buf (DA_buf[159], delayed_DA[159]);
wire delayed_WEA;
buf (WEA_buf, delayed_WEA);
wire delayed_MEA;
buf (MEA_buf, delayed_MEA);
wire delayed_CLKA;
buf (CLKA_buf, delayed_CLKA);
wire [10:0] TADRA_buf;
wire [10:0] delayed_TADRA;
buf (TADRA_buf[0], delayed_TADRA[0]);
buf (TADRA_buf[1], delayed_TADRA[1]);
buf (TADRA_buf[2], delayed_TADRA[2]);
buf (TADRA_buf[3], delayed_TADRA[3]);
buf (TADRA_buf[4], delayed_TADRA[4]);
buf (TADRA_buf[5], delayed_TADRA[5]);
buf (TADRA_buf[6], delayed_TADRA[6]);
buf (TADRA_buf[7], delayed_TADRA[7]);
buf (TADRA_buf[8], delayed_TADRA[8]);
buf (TADRA_buf[9], delayed_TADRA[9]);
buf (TADRA_buf[10], delayed_TADRA[10]);
wire [159:0] TDA_buf;
wire [3:0] delayed_TDA;
buf (TDA_buf[0], delayed_TDA[0]);
buf (TDA_buf[1], delayed_TDA[1]);
buf (TDA_buf[2], delayed_TDA[2]);
buf (TDA_buf[3], delayed_TDA[3]);
buf (TDA_buf[4], delayed_TDA[0]);
buf (TDA_buf[5], delayed_TDA[1]);
buf (TDA_buf[6], delayed_TDA[2]);
buf (TDA_buf[7], delayed_TDA[3]);
buf (TDA_buf[8], delayed_TDA[0]);
buf (TDA_buf[9], delayed_TDA[1]);
buf (TDA_buf[10], delayed_TDA[2]);
buf (TDA_buf[11], delayed_TDA[3]);
buf (TDA_buf[12], delayed_TDA[0]);
buf (TDA_buf[13], delayed_TDA[1]);
buf (TDA_buf[14], delayed_TDA[2]);
buf (TDA_buf[15], delayed_TDA[3]);
buf (TDA_buf[16], delayed_TDA[0]);
buf (TDA_buf[17], delayed_TDA[1]);
buf (TDA_buf[18], delayed_TDA[2]);
buf (TDA_buf[19], delayed_TDA[3]);
buf (TDA_buf[20], delayed_TDA[0]);
buf (TDA_buf[21], delayed_TDA[1]);
buf (TDA_buf[22], delayed_TDA[2]);
buf (TDA_buf[23], delayed_TDA[3]);
buf (TDA_buf[24], delayed_TDA[0]);
buf (TDA_buf[25], delayed_TDA[1]);
buf (TDA_buf[26], delayed_TDA[2]);
buf (TDA_buf[27], delayed_TDA[3]);
buf (TDA_buf[28], delayed_TDA[0]);
buf (TDA_buf[29], delayed_TDA[1]);
buf (TDA_buf[30], delayed_TDA[2]);
buf (TDA_buf[31], delayed_TDA[3]);
buf (TDA_buf[32], delayed_TDA[0]);
buf (TDA_buf[33], delayed_TDA[1]);
buf (TDA_buf[34], delayed_TDA[2]);
buf (TDA_buf[35], delayed_TDA[3]);
buf (TDA_buf[36], delayed_TDA[0]);
buf (TDA_buf[37], delayed_TDA[1]);
buf (TDA_buf[38], delayed_TDA[2]);
buf (TDA_buf[39], delayed_TDA[3]);
buf (TDA_buf[40], delayed_TDA[0]);
buf (TDA_buf[41], delayed_TDA[1]);
buf (TDA_buf[42], delayed_TDA[2]);
buf (TDA_buf[43], delayed_TDA[3]);
buf (TDA_buf[44], delayed_TDA[0]);
buf (TDA_buf[45], delayed_TDA[1]);
buf (TDA_buf[46], delayed_TDA[2]);
buf (TDA_buf[47], delayed_TDA[3]);
buf (TDA_buf[48], delayed_TDA[0]);
buf (TDA_buf[49], delayed_TDA[1]);
buf (TDA_buf[50], delayed_TDA[2]);
buf (TDA_buf[51], delayed_TDA[3]);
buf (TDA_buf[52], delayed_TDA[0]);
buf (TDA_buf[53], delayed_TDA[1]);
buf (TDA_buf[54], delayed_TDA[2]);
buf (TDA_buf[55], delayed_TDA[3]);
buf (TDA_buf[56], delayed_TDA[0]);
buf (TDA_buf[57], delayed_TDA[1]);
buf (TDA_buf[58], delayed_TDA[2]);
buf (TDA_buf[59], delayed_TDA[3]);
buf (TDA_buf[60], delayed_TDA[0]);
buf (TDA_buf[61], delayed_TDA[1]);
buf (TDA_buf[62], delayed_TDA[2]);
buf (TDA_buf[63], delayed_TDA[3]);
buf (TDA_buf[64], delayed_TDA[0]);
buf (TDA_buf[65], delayed_TDA[1]);
buf (TDA_buf[66], delayed_TDA[2]);
buf (TDA_buf[67], delayed_TDA[3]);
buf (TDA_buf[68], delayed_TDA[0]);
buf (TDA_buf[69], delayed_TDA[1]);
buf (TDA_buf[70], delayed_TDA[2]);
buf (TDA_buf[71], delayed_TDA[3]);
buf (TDA_buf[72], delayed_TDA[0]);
buf (TDA_buf[73], delayed_TDA[1]);
buf (TDA_buf[74], delayed_TDA[2]);
buf (TDA_buf[75], delayed_TDA[3]);
buf (TDA_buf[76], delayed_TDA[0]);
buf (TDA_buf[77], delayed_TDA[1]);
buf (TDA_buf[78], delayed_TDA[2]);
buf (TDA_buf[79], delayed_TDA[3]);
buf (TDA_buf[80], delayed_TDA[0]);
buf (TDA_buf[81], delayed_TDA[1]);
buf (TDA_buf[82], delayed_TDA[2]);
buf (TDA_buf[83], delayed_TDA[3]);
buf (TDA_buf[84], delayed_TDA[0]);
buf (TDA_buf[85], delayed_TDA[1]);
buf (TDA_buf[86], delayed_TDA[2]);
buf (TDA_buf[87], delayed_TDA[3]);
buf (TDA_buf[88], delayed_TDA[0]);
buf (TDA_buf[89], delayed_TDA[1]);
buf (TDA_buf[90], delayed_TDA[2]);
buf (TDA_buf[91], delayed_TDA[3]);
buf (TDA_buf[92], delayed_TDA[0]);
buf (TDA_buf[93], delayed_TDA[1]);
buf (TDA_buf[94], delayed_TDA[2]);
buf (TDA_buf[95], delayed_TDA[3]);
buf (TDA_buf[96], delayed_TDA[0]);
buf (TDA_buf[97], delayed_TDA[1]);
buf (TDA_buf[98], delayed_TDA[2]);
buf (TDA_buf[99], delayed_TDA[3]);
buf (TDA_buf[100], delayed_TDA[0]);
buf (TDA_buf[101], delayed_TDA[1]);
buf (TDA_buf[102], delayed_TDA[2]);
buf (TDA_buf[103], delayed_TDA[3]);
buf (TDA_buf[104], delayed_TDA[0]);
buf (TDA_buf[105], delayed_TDA[1]);
buf (TDA_buf[106], delayed_TDA[2]);
buf (TDA_buf[107], delayed_TDA[3]);
buf (TDA_buf[108], delayed_TDA[0]);
buf (TDA_buf[109], delayed_TDA[1]);
buf (TDA_buf[110], delayed_TDA[2]);
buf (TDA_buf[111], delayed_TDA[3]);
buf (TDA_buf[112], delayed_TDA[0]);
buf (TDA_buf[113], delayed_TDA[1]);
buf (TDA_buf[114], delayed_TDA[2]);
buf (TDA_buf[115], delayed_TDA[3]);
buf (TDA_buf[116], delayed_TDA[0]);
buf (TDA_buf[117], delayed_TDA[1]);
buf (TDA_buf[118], delayed_TDA[2]);
buf (TDA_buf[119], delayed_TDA[3]);
buf (TDA_buf[120], delayed_TDA[0]);
buf (TDA_buf[121], delayed_TDA[1]);
buf (TDA_buf[122], delayed_TDA[2]);
buf (TDA_buf[123], delayed_TDA[3]);
buf (TDA_buf[124], delayed_TDA[0]);
buf (TDA_buf[125], delayed_TDA[1]);
buf (TDA_buf[126], delayed_TDA[2]);
buf (TDA_buf[127], delayed_TDA[3]);
buf (TDA_buf[128], delayed_TDA[0]);
buf (TDA_buf[129], delayed_TDA[1]);
buf (TDA_buf[130], delayed_TDA[2]);
buf (TDA_buf[131], delayed_TDA[3]);
buf (TDA_buf[132], delayed_TDA[0]);
buf (TDA_buf[133], delayed_TDA[1]);
buf (TDA_buf[134], delayed_TDA[2]);
buf (TDA_buf[135], delayed_TDA[3]);
buf (TDA_buf[136], delayed_TDA[0]);
buf (TDA_buf[137], delayed_TDA[1]);
buf (TDA_buf[138], delayed_TDA[2]);
buf (TDA_buf[139], delayed_TDA[3]);
buf (TDA_buf[140], delayed_TDA[0]);
buf (TDA_buf[141], delayed_TDA[1]);
buf (TDA_buf[142], delayed_TDA[2]);
buf (TDA_buf[143], delayed_TDA[3]);
buf (TDA_buf[144], delayed_TDA[0]);
buf (TDA_buf[145], delayed_TDA[1]);
buf (TDA_buf[146], delayed_TDA[2]);
buf (TDA_buf[147], delayed_TDA[3]);
buf (TDA_buf[148], delayed_TDA[0]);
buf (TDA_buf[149], delayed_TDA[1]);
buf (TDA_buf[150], delayed_TDA[2]);
buf (TDA_buf[151], delayed_TDA[3]);
buf (TDA_buf[152], delayed_TDA[0]);
buf (TDA_buf[153], delayed_TDA[1]);
buf (TDA_buf[154], delayed_TDA[2]);
buf (TDA_buf[155], delayed_TDA[3]);
buf (TDA_buf[156], delayed_TDA[0]);
buf (TDA_buf[157], delayed_TDA[1]);
buf (TDA_buf[158], delayed_TDA[2]);
buf (TDA_buf[159], delayed_TDA[3]);
wire delayed_TWEA;
buf (TWEA_buf, delayed_TWEA);
wire delayed_TMEA;
buf (TMEA_buf, delayed_TMEA);
wire delayed_TCLKA;
buf (TCLKA_buf, delayed_TCLKA);
wire delayed_BISTEA;
buf (BISTEA_buf, delayed_BISTEA);
wire delayed_TEST1A;
buf (TEST1A_buf, delayed_TEST1A);
wire delayed_RMEA;
buf (RMEA_buf, delayed_RMEA);
wire [2:0] RMA_int;
wire [3:0] RMA_buf;
wire [3:0] delayed_RMA;
buf (RMA_buf[0], delayed_RMA[0]);
buf (RMA_buf[1], delayed_RMA[1]);
buf (RMA_buf[2], delayed_RMA[2]);
buf (RMA_buf[3], delayed_RMA[3]);
wire [3:0] CDA_buf;
wire [3:0] delayed_CDA;
buf (CDA_buf[0], delayed_CDA[0]);
buf (CDA_buf[1], delayed_CDA[1]);
buf (CDA_buf[2], delayed_CDA[2]);
buf (CDA_buf[3], delayed_CDA[3]);
wire delayed_CAPTA;
buf (CAPTA_buf, delayed_CAPTA);
wire delayed_PIPEMEA;
buf (PIPEMEA_buf, delayed_PIPEMEA);
wire delayed_TPIPEMEA;
buf (TPIPEMEA_buf, delayed_TPIPEMEA);
wire delayed_TCLKEA;
buf (TCLKEA_buf, delayed_TCLKEA);
wire delayed_STICKYA;
buf (STICKYA_buf, delayed_STICKYA);
wire delayed_SI_QA;
buf (SI_QA_buf, delayed_SI_QA);
wire delayed_SI_DA;
buf (SI_DA_buf, delayed_SI_DA);
wire delayed_SE_QA;
buf (SE_QA_buf, delayed_SE_QA);
wire delayed_SE_INA;
buf (SE_INA_buf, delayed_SE_INA);
wire delayed_SI_CNTRA;
buf (SI_CNTRA_buf, delayed_SI_CNTRA);
wire delayed_DFTCLKEN;
buf (DFTCLKEN_buf, delayed_DFTCLKEN);
wire delayed_DFTMASK;
buf (DFTMASK_buf, delayed_DFTMASK);
wire delayed_LS;
buf (LS_buf, delayed_LS);
wire [10:0] ADRB_buf;
wire [10:0] delayed_ADRB;
buf (ADRB_buf[0], delayed_ADRB[0]);
buf (ADRB_buf[1], delayed_ADRB[1]);
buf (ADRB_buf[2], delayed_ADRB[2]);
buf (ADRB_buf[3], delayed_ADRB[3]);
buf (ADRB_buf[4], delayed_ADRB[4]);
buf (ADRB_buf[5], delayed_ADRB[5]);
buf (ADRB_buf[6], delayed_ADRB[6]);
buf (ADRB_buf[7], delayed_ADRB[7]);
buf (ADRB_buf[8], delayed_ADRB[8]);
buf (ADRB_buf[9], delayed_ADRB[9]);
buf (ADRB_buf[10], delayed_ADRB[10]);
wire [159:0] DB_buf;
wire [159:0] delayed_DB;
buf (DB_buf[0], delayed_DB[0]);
buf (DB_buf[1], delayed_DB[1]);
buf (DB_buf[2], delayed_DB[2]);
buf (DB_buf[3], delayed_DB[3]);
buf (DB_buf[4], delayed_DB[4]);
buf (DB_buf[5], delayed_DB[5]);
buf (DB_buf[6], delayed_DB[6]);
buf (DB_buf[7], delayed_DB[7]);
buf (DB_buf[8], delayed_DB[8]);
buf (DB_buf[9], delayed_DB[9]);
buf (DB_buf[10], delayed_DB[10]);
buf (DB_buf[11], delayed_DB[11]);
buf (DB_buf[12], delayed_DB[12]);
buf (DB_buf[13], delayed_DB[13]);
buf (DB_buf[14], delayed_DB[14]);
buf (DB_buf[15], delayed_DB[15]);
buf (DB_buf[16], delayed_DB[16]);
buf (DB_buf[17], delayed_DB[17]);
buf (DB_buf[18], delayed_DB[18]);
buf (DB_buf[19], delayed_DB[19]);
buf (DB_buf[20], delayed_DB[20]);
buf (DB_buf[21], delayed_DB[21]);
buf (DB_buf[22], delayed_DB[22]);
buf (DB_buf[23], delayed_DB[23]);
buf (DB_buf[24], delayed_DB[24]);
buf (DB_buf[25], delayed_DB[25]);
buf (DB_buf[26], delayed_DB[26]);
buf (DB_buf[27], delayed_DB[27]);
buf (DB_buf[28], delayed_DB[28]);
buf (DB_buf[29], delayed_DB[29]);
buf (DB_buf[30], delayed_DB[30]);
buf (DB_buf[31], delayed_DB[31]);
buf (DB_buf[32], delayed_DB[32]);
buf (DB_buf[33], delayed_DB[33]);
buf (DB_buf[34], delayed_DB[34]);
buf (DB_buf[35], delayed_DB[35]);
buf (DB_buf[36], delayed_DB[36]);
buf (DB_buf[37], delayed_DB[37]);
buf (DB_buf[38], delayed_DB[38]);
buf (DB_buf[39], delayed_DB[39]);
buf (DB_buf[40], delayed_DB[40]);
buf (DB_buf[41], delayed_DB[41]);
buf (DB_buf[42], delayed_DB[42]);
buf (DB_buf[43], delayed_DB[43]);
buf (DB_buf[44], delayed_DB[44]);
buf (DB_buf[45], delayed_DB[45]);
buf (DB_buf[46], delayed_DB[46]);
buf (DB_buf[47], delayed_DB[47]);
buf (DB_buf[48], delayed_DB[48]);
buf (DB_buf[49], delayed_DB[49]);
buf (DB_buf[50], delayed_DB[50]);
buf (DB_buf[51], delayed_DB[51]);
buf (DB_buf[52], delayed_DB[52]);
buf (DB_buf[53], delayed_DB[53]);
buf (DB_buf[54], delayed_DB[54]);
buf (DB_buf[55], delayed_DB[55]);
buf (DB_buf[56], delayed_DB[56]);
buf (DB_buf[57], delayed_DB[57]);
buf (DB_buf[58], delayed_DB[58]);
buf (DB_buf[59], delayed_DB[59]);
buf (DB_buf[60], delayed_DB[60]);
buf (DB_buf[61], delayed_DB[61]);
buf (DB_buf[62], delayed_DB[62]);
buf (DB_buf[63], delayed_DB[63]);
buf (DB_buf[64], delayed_DB[64]);
buf (DB_buf[65], delayed_DB[65]);
buf (DB_buf[66], delayed_DB[66]);
buf (DB_buf[67], delayed_DB[67]);
buf (DB_buf[68], delayed_DB[68]);
buf (DB_buf[69], delayed_DB[69]);
buf (DB_buf[70], delayed_DB[70]);
buf (DB_buf[71], delayed_DB[71]);
buf (DB_buf[72], delayed_DB[72]);
buf (DB_buf[73], delayed_DB[73]);
buf (DB_buf[74], delayed_DB[74]);
buf (DB_buf[75], delayed_DB[75]);
buf (DB_buf[76], delayed_DB[76]);
buf (DB_buf[77], delayed_DB[77]);
buf (DB_buf[78], delayed_DB[78]);
buf (DB_buf[79], delayed_DB[79]);
buf (DB_buf[80], delayed_DB[80]);
buf (DB_buf[81], delayed_DB[81]);
buf (DB_buf[82], delayed_DB[82]);
buf (DB_buf[83], delayed_DB[83]);
buf (DB_buf[84], delayed_DB[84]);
buf (DB_buf[85], delayed_DB[85]);
buf (DB_buf[86], delayed_DB[86]);
buf (DB_buf[87], delayed_DB[87]);
buf (DB_buf[88], delayed_DB[88]);
buf (DB_buf[89], delayed_DB[89]);
buf (DB_buf[90], delayed_DB[90]);
buf (DB_buf[91], delayed_DB[91]);
buf (DB_buf[92], delayed_DB[92]);
buf (DB_buf[93], delayed_DB[93]);
buf (DB_buf[94], delayed_DB[94]);
buf (DB_buf[95], delayed_DB[95]);
buf (DB_buf[96], delayed_DB[96]);
buf (DB_buf[97], delayed_DB[97]);
buf (DB_buf[98], delayed_DB[98]);
buf (DB_buf[99], delayed_DB[99]);
buf (DB_buf[100], delayed_DB[100]);
buf (DB_buf[101], delayed_DB[101]);
buf (DB_buf[102], delayed_DB[102]);
buf (DB_buf[103], delayed_DB[103]);
buf (DB_buf[104], delayed_DB[104]);
buf (DB_buf[105], delayed_DB[105]);
buf (DB_buf[106], delayed_DB[106]);
buf (DB_buf[107], delayed_DB[107]);
buf (DB_buf[108], delayed_DB[108]);
buf (DB_buf[109], delayed_DB[109]);
buf (DB_buf[110], delayed_DB[110]);
buf (DB_buf[111], delayed_DB[111]);
buf (DB_buf[112], delayed_DB[112]);
buf (DB_buf[113], delayed_DB[113]);
buf (DB_buf[114], delayed_DB[114]);
buf (DB_buf[115], delayed_DB[115]);
buf (DB_buf[116], delayed_DB[116]);
buf (DB_buf[117], delayed_DB[117]);
buf (DB_buf[118], delayed_DB[118]);
buf (DB_buf[119], delayed_DB[119]);
buf (DB_buf[120], delayed_DB[120]);
buf (DB_buf[121], delayed_DB[121]);
buf (DB_buf[122], delayed_DB[122]);
buf (DB_buf[123], delayed_DB[123]);
buf (DB_buf[124], delayed_DB[124]);
buf (DB_buf[125], delayed_DB[125]);
buf (DB_buf[126], delayed_DB[126]);
buf (DB_buf[127], delayed_DB[127]);
buf (DB_buf[128], delayed_DB[128]);
buf (DB_buf[129], delayed_DB[129]);
buf (DB_buf[130], delayed_DB[130]);
buf (DB_buf[131], delayed_DB[131]);
buf (DB_buf[132], delayed_DB[132]);
buf (DB_buf[133], delayed_DB[133]);
buf (DB_buf[134], delayed_DB[134]);
buf (DB_buf[135], delayed_DB[135]);
buf (DB_buf[136], delayed_DB[136]);
buf (DB_buf[137], delayed_DB[137]);
buf (DB_buf[138], delayed_DB[138]);
buf (DB_buf[139], delayed_DB[139]);
buf (DB_buf[140], delayed_DB[140]);
buf (DB_buf[141], delayed_DB[141]);
buf (DB_buf[142], delayed_DB[142]);
buf (DB_buf[143], delayed_DB[143]);
buf (DB_buf[144], delayed_DB[144]);
buf (DB_buf[145], delayed_DB[145]);
buf (DB_buf[146], delayed_DB[146]);
buf (DB_buf[147], delayed_DB[147]);
buf (DB_buf[148], delayed_DB[148]);
buf (DB_buf[149], delayed_DB[149]);
buf (DB_buf[150], delayed_DB[150]);
buf (DB_buf[151], delayed_DB[151]);
buf (DB_buf[152], delayed_DB[152]);
buf (DB_buf[153], delayed_DB[153]);
buf (DB_buf[154], delayed_DB[154]);
buf (DB_buf[155], delayed_DB[155]);
buf (DB_buf[156], delayed_DB[156]);
buf (DB_buf[157], delayed_DB[157]);
buf (DB_buf[158], delayed_DB[158]);
buf (DB_buf[159], delayed_DB[159]);
wire delayed_WEB;
buf (WEB_buf, delayed_WEB);
wire delayed_MEB;
buf (MEB_buf, delayed_MEB);
wire delayed_CLKB;
buf (CLKB_buf, delayed_CLKB);
wire [10:0] TADRB_buf;
wire [10:0] delayed_TADRB;
buf (TADRB_buf[0], delayed_TADRB[0]);
buf (TADRB_buf[1], delayed_TADRB[1]);
buf (TADRB_buf[2], delayed_TADRB[2]);
buf (TADRB_buf[3], delayed_TADRB[3]);
buf (TADRB_buf[4], delayed_TADRB[4]);
buf (TADRB_buf[5], delayed_TADRB[5]);
buf (TADRB_buf[6], delayed_TADRB[6]);
buf (TADRB_buf[7], delayed_TADRB[7]);
buf (TADRB_buf[8], delayed_TADRB[8]);
buf (TADRB_buf[9], delayed_TADRB[9]);
buf (TADRB_buf[10], delayed_TADRB[10]);
wire [159:0] TDB_buf;
wire [3:0] delayed_TDB;
buf (TDB_buf[0], delayed_TDB[0]);
buf (TDB_buf[1], delayed_TDB[1]);
buf (TDB_buf[2], delayed_TDB[2]);
buf (TDB_buf[3], delayed_TDB[3]);
buf (TDB_buf[4], delayed_TDB[0]);
buf (TDB_buf[5], delayed_TDB[1]);
buf (TDB_buf[6], delayed_TDB[2]);
buf (TDB_buf[7], delayed_TDB[3]);
buf (TDB_buf[8], delayed_TDB[0]);
buf (TDB_buf[9], delayed_TDB[1]);
buf (TDB_buf[10], delayed_TDB[2]);
buf (TDB_buf[11], delayed_TDB[3]);
buf (TDB_buf[12], delayed_TDB[0]);
buf (TDB_buf[13], delayed_TDB[1]);
buf (TDB_buf[14], delayed_TDB[2]);
buf (TDB_buf[15], delayed_TDB[3]);
buf (TDB_buf[16], delayed_TDB[0]);
buf (TDB_buf[17], delayed_TDB[1]);
buf (TDB_buf[18], delayed_TDB[2]);
buf (TDB_buf[19], delayed_TDB[3]);
buf (TDB_buf[20], delayed_TDB[0]);
buf (TDB_buf[21], delayed_TDB[1]);
buf (TDB_buf[22], delayed_TDB[2]);
buf (TDB_buf[23], delayed_TDB[3]);
buf (TDB_buf[24], delayed_TDB[0]);
buf (TDB_buf[25], delayed_TDB[1]);
buf (TDB_buf[26], delayed_TDB[2]);
buf (TDB_buf[27], delayed_TDB[3]);
buf (TDB_buf[28], delayed_TDB[0]);
buf (TDB_buf[29], delayed_TDB[1]);
buf (TDB_buf[30], delayed_TDB[2]);
buf (TDB_buf[31], delayed_TDB[3]);
buf (TDB_buf[32], delayed_TDB[0]);
buf (TDB_buf[33], delayed_TDB[1]);
buf (TDB_buf[34], delayed_TDB[2]);
buf (TDB_buf[35], delayed_TDB[3]);
buf (TDB_buf[36], delayed_TDB[0]);
buf (TDB_buf[37], delayed_TDB[1]);
buf (TDB_buf[38], delayed_TDB[2]);
buf (TDB_buf[39], delayed_TDB[3]);
buf (TDB_buf[40], delayed_TDB[0]);
buf (TDB_buf[41], delayed_TDB[1]);
buf (TDB_buf[42], delayed_TDB[2]);
buf (TDB_buf[43], delayed_TDB[3]);
buf (TDB_buf[44], delayed_TDB[0]);
buf (TDB_buf[45], delayed_TDB[1]);
buf (TDB_buf[46], delayed_TDB[2]);
buf (TDB_buf[47], delayed_TDB[3]);
buf (TDB_buf[48], delayed_TDB[0]);
buf (TDB_buf[49], delayed_TDB[1]);
buf (TDB_buf[50], delayed_TDB[2]);
buf (TDB_buf[51], delayed_TDB[3]);
buf (TDB_buf[52], delayed_TDB[0]);
buf (TDB_buf[53], delayed_TDB[1]);
buf (TDB_buf[54], delayed_TDB[2]);
buf (TDB_buf[55], delayed_TDB[3]);
buf (TDB_buf[56], delayed_TDB[0]);
buf (TDB_buf[57], delayed_TDB[1]);
buf (TDB_buf[58], delayed_TDB[2]);
buf (TDB_buf[59], delayed_TDB[3]);
buf (TDB_buf[60], delayed_TDB[0]);
buf (TDB_buf[61], delayed_TDB[1]);
buf (TDB_buf[62], delayed_TDB[2]);
buf (TDB_buf[63], delayed_TDB[3]);
buf (TDB_buf[64], delayed_TDB[0]);
buf (TDB_buf[65], delayed_TDB[1]);
buf (TDB_buf[66], delayed_TDB[2]);
buf (TDB_buf[67], delayed_TDB[3]);
buf (TDB_buf[68], delayed_TDB[0]);
buf (TDB_buf[69], delayed_TDB[1]);
buf (TDB_buf[70], delayed_TDB[2]);
buf (TDB_buf[71], delayed_TDB[3]);
buf (TDB_buf[72], delayed_TDB[0]);
buf (TDB_buf[73], delayed_TDB[1]);
buf (TDB_buf[74], delayed_TDB[2]);
buf (TDB_buf[75], delayed_TDB[3]);
buf (TDB_buf[76], delayed_TDB[0]);
buf (TDB_buf[77], delayed_TDB[1]);
buf (TDB_buf[78], delayed_TDB[2]);
buf (TDB_buf[79], delayed_TDB[3]);
buf (TDB_buf[80], delayed_TDB[0]);
buf (TDB_buf[81], delayed_TDB[1]);
buf (TDB_buf[82], delayed_TDB[2]);
buf (TDB_buf[83], delayed_TDB[3]);
buf (TDB_buf[84], delayed_TDB[0]);
buf (TDB_buf[85], delayed_TDB[1]);
buf (TDB_buf[86], delayed_TDB[2]);
buf (TDB_buf[87], delayed_TDB[3]);
buf (TDB_buf[88], delayed_TDB[0]);
buf (TDB_buf[89], delayed_TDB[1]);
buf (TDB_buf[90], delayed_TDB[2]);
buf (TDB_buf[91], delayed_TDB[3]);
buf (TDB_buf[92], delayed_TDB[0]);
buf (TDB_buf[93], delayed_TDB[1]);
buf (TDB_buf[94], delayed_TDB[2]);
buf (TDB_buf[95], delayed_TDB[3]);
buf (TDB_buf[96], delayed_TDB[0]);
buf (TDB_buf[97], delayed_TDB[1]);
buf (TDB_buf[98], delayed_TDB[2]);
buf (TDB_buf[99], delayed_TDB[3]);
buf (TDB_buf[100], delayed_TDB[0]);
buf (TDB_buf[101], delayed_TDB[1]);
buf (TDB_buf[102], delayed_TDB[2]);
buf (TDB_buf[103], delayed_TDB[3]);
buf (TDB_buf[104], delayed_TDB[0]);
buf (TDB_buf[105], delayed_TDB[1]);
buf (TDB_buf[106], delayed_TDB[2]);
buf (TDB_buf[107], delayed_TDB[3]);
buf (TDB_buf[108], delayed_TDB[0]);
buf (TDB_buf[109], delayed_TDB[1]);
buf (TDB_buf[110], delayed_TDB[2]);
buf (TDB_buf[111], delayed_TDB[3]);
buf (TDB_buf[112], delayed_TDB[0]);
buf (TDB_buf[113], delayed_TDB[1]);
buf (TDB_buf[114], delayed_TDB[2]);
buf (TDB_buf[115], delayed_TDB[3]);
buf (TDB_buf[116], delayed_TDB[0]);
buf (TDB_buf[117], delayed_TDB[1]);
buf (TDB_buf[118], delayed_TDB[2]);
buf (TDB_buf[119], delayed_TDB[3]);
buf (TDB_buf[120], delayed_TDB[0]);
buf (TDB_buf[121], delayed_TDB[1]);
buf (TDB_buf[122], delayed_TDB[2]);
buf (TDB_buf[123], delayed_TDB[3]);
buf (TDB_buf[124], delayed_TDB[0]);
buf (TDB_buf[125], delayed_TDB[1]);
buf (TDB_buf[126], delayed_TDB[2]);
buf (TDB_buf[127], delayed_TDB[3]);
buf (TDB_buf[128], delayed_TDB[0]);
buf (TDB_buf[129], delayed_TDB[1]);
buf (TDB_buf[130], delayed_TDB[2]);
buf (TDB_buf[131], delayed_TDB[3]);
buf (TDB_buf[132], delayed_TDB[0]);
buf (TDB_buf[133], delayed_TDB[1]);
buf (TDB_buf[134], delayed_TDB[2]);
buf (TDB_buf[135], delayed_TDB[3]);
buf (TDB_buf[136], delayed_TDB[0]);
buf (TDB_buf[137], delayed_TDB[1]);
buf (TDB_buf[138], delayed_TDB[2]);
buf (TDB_buf[139], delayed_TDB[3]);
buf (TDB_buf[140], delayed_TDB[0]);
buf (TDB_buf[141], delayed_TDB[1]);
buf (TDB_buf[142], delayed_TDB[2]);
buf (TDB_buf[143], delayed_TDB[3]);
buf (TDB_buf[144], delayed_TDB[0]);
buf (TDB_buf[145], delayed_TDB[1]);
buf (TDB_buf[146], delayed_TDB[2]);
buf (TDB_buf[147], delayed_TDB[3]);
buf (TDB_buf[148], delayed_TDB[0]);
buf (TDB_buf[149], delayed_TDB[1]);
buf (TDB_buf[150], delayed_TDB[2]);
buf (TDB_buf[151], delayed_TDB[3]);
buf (TDB_buf[152], delayed_TDB[0]);
buf (TDB_buf[153], delayed_TDB[1]);
buf (TDB_buf[154], delayed_TDB[2]);
buf (TDB_buf[155], delayed_TDB[3]);
buf (TDB_buf[156], delayed_TDB[0]);
buf (TDB_buf[157], delayed_TDB[1]);
buf (TDB_buf[158], delayed_TDB[2]);
buf (TDB_buf[159], delayed_TDB[3]);
wire delayed_TWEB;
buf (TWEB_buf, delayed_TWEB);
wire delayed_TMEB;
buf (TMEB_buf, delayed_TMEB);
wire delayed_TCLKB;
buf (TCLKB_buf, delayed_TCLKB);
wire delayed_BISTEB;
buf (BISTEB_buf, delayed_BISTEB);
wire delayed_TEST1B;
buf (TEST1B_buf, delayed_TEST1B);
wire delayed_RMEB;
buf (RMEB_buf, delayed_RMEB);
wire [2:0] RMB_int;
wire [3:0] RMB_buf;
wire [3:0] delayed_RMB;
buf (RMB_buf[0], delayed_RMB[0]);
buf (RMB_buf[1], delayed_RMB[1]);
buf (RMB_buf[2], delayed_RMB[2]);
buf (RMB_buf[3], delayed_RMB[3]);
wire [3:0] CDB_buf;
wire [3:0] delayed_CDB;
buf (CDB_buf[0], delayed_CDB[0]);
buf (CDB_buf[1], delayed_CDB[1]);
buf (CDB_buf[2], delayed_CDB[2]);
buf (CDB_buf[3], delayed_CDB[3]);
wire delayed_CAPTB;
buf (CAPTB_buf, delayed_CAPTB);
wire delayed_PIPEMEB;
buf (PIPEMEB_buf, delayed_PIPEMEB);
wire delayed_TPIPEMEB;
buf (TPIPEMEB_buf, delayed_TPIPEMEB);
wire delayed_TCLKEB;
buf (TCLKEB_buf, delayed_TCLKEB);
wire delayed_STICKYB;
buf (STICKYB_buf, delayed_STICKYB);
wire delayed_SI_QB;
buf (SI_QB_buf, delayed_SI_QB);
wire delayed_SI_DB;
buf (SI_DB_buf, delayed_SI_DB);
wire delayed_SE_QB;
buf (SE_QB_buf, delayed_SE_QB);
wire delayed_SE_INB;
buf (SE_INB_buf, delayed_SE_INB);
wire delayed_SI_CNTRB;
buf (SI_CNTRB_buf, delayed_SI_CNTRB);
 
always @ (QA_final)
begin : blk_dofinal_0  
  if (QA_final !== 160'bx )
  begin
    EVENT_TCQ_A = 1'b0;
  end // if of QA_final != X
end // end of always block blk_dofinal_0
 
always @ (QB_final)
begin : blk_dofinal_1  
  if (QB_final !== 160'bx )
  begin
    EVENT_TCQ_B = 1'b0;
  end // if of QB_final != X
end // end of always block blk_dofinal_1
`endif
// -------------------------------------------------------------------
// Tasks
// -------------------------------------------------------------------

`ifndef MEMFAULTINJ
task fault_inject;
input [10 : 0] address;
input [7:0] bit_pos;
input flt_type;
begin
  if (uut.faultinj_en == 0)
  begin
    if (flt_type == 1)
    begin
      uut.mem_fault_array_sa1[address][bit_pos] = 1'b1 ;
      uut.mem_fault_array_sa0[address][bit_pos] = 1'b1 ;
    end
    else
    begin
      uut.mem_fault_array_sa0[address][bit_pos] = 1'b0 ;
      uut.mem_fault_array_sa1[address][bit_pos] = 1'b0 ;
    end
  end
end
endtask
`endif

reg disp_LS_msgA;
reg disp_LS_msgB;

reg en_msg_cntrl, mes_all_valid_old;
real msg_start_lmt, msg_end_lmt;
reg disp_LS_msgA_old;
reg disp_LS_msgB_old;
initial
begin
  en_msg_cntrl = 1'b0;
  mes_all_valid_old = 1'b0;
  disp_LS_msgA_old = 1'b1;
  disp_LS_msgB_old = 1'b1;
  if (MesCntrl_Begin < 0)
    msg_start_lmt = 0;
  else
    msg_start_lmt = MesCntrl_Begin;
  if (MesCntrl_End < 0)
    msg_end_lmt = 0;
  else
    msg_end_lmt = MesCntrl_End;
  
  if (msg_end_lmt > msg_start_lmt)
  begin
    en_msg_cntrl <= #(msg_start_lmt) 1'b1;
    en_msg_cntrl <= #(msg_end_lmt) 1'b0;
  end
end

`ifdef MES_CNTRL_PIN
always @(`MES_CNTRL_PIN)
begin
  if (msg_start_lmt == 0 && msg_end_lmt == 0)
  begin
    if (`MES_CNTRL_PIN  === `MES_CNTRL_PIN_VAL)
    begin
      en_msg_cntrl = 1;
    end
    else
    begin
      en_msg_cntrl = 0;
    end
  end
end
`endif

always @( en_msg_cntrl )
begin
  if (en_msg_cntrl == 1'b1 )
  begin
    mes_all_valid_old = uut.mes_all_valid;
    assign uut.mes_all_valid = 0;
    disp_LS_msgA_old = disp_LS_msgA;
    assign disp_LS_msgA = 0;
    disp_LS_msgB_old = disp_LS_msgB;
    assign disp_LS_msgB = 0;
  end
  else
  begin
    deassign uut.mes_all_valid ;
    uut.mes_all_valid = mes_all_valid_old;
    deassign disp_LS_msgA;
    disp_LS_msgA = disp_LS_msgA_old;
    deassign disp_LS_msgB;
    disp_LS_msgB = disp_LS_msgB_old;
  end
end


wire ADRA_valid;
assign ADRA_valid =  (ADRA_buf <= 11'b11101111111 )?1'b1:1'b0;
wire TADRA_valid;
assign TADRA_valid =  ( TADRA_buf <= 11'b11101111111 )?1'b1:1'b0;
wire ADRB_valid;
assign ADRB_valid =  (ADRB_buf <= 11'b11101111111 )?1'b1:1'b0;
wire TADRB_valid;
assign TADRB_valid =  ( TADRB_buf <= 11'b11101111111 )?1'b1:1'b0;
// Setup/hold conditions for syncronous signals
reg  MEA_pre,TMEA_pre;
reg  WEA_pre,TWEA_pre;
reg  [10:0] ADRA_pre;
reg  [159:0] DA_pre;
reg flag_ADRA_x;
assign CLKA_tmp = mclkA;

always @(MEA_mout or negedge CLKA_tmp) 
begin : blk_mebuf_0
  #0;
  if ( CLKA_tmp == 1'b0)
  begin
    MEA_pre = MEA_mout;
  end // if of CLKA_tmp = 0
end // end of always block blk_mebuf_0

always @(WEA_mout or negedge CLKA_tmp) 
begin : blk_webuf_0
  #0;
  if ( CLKA_tmp == 1'b0)
  begin
    WEA_pre = WEA_mout;
  end // if of CLKA_tmp = 0
end // end of always block blk_webuf_0

always @(ADRA_mout or negedge CLKA_tmp) 
begin : blk_addrbuf_0
  #0;
  if ( CLKA_tmp == 1'b0)
  begin
    ADRA_pre = ADRA_mout;
  end // if of CLKA_tmp = 0
  if ( (^ADRA_mout) === 1'bx)
  begin
    flag_ADRA_x = 1'b1;
  end 
  else
  begin
    flag_ADRA_x = 1'b0;
  end 
end // end of always block blk_addrbuf_0

always @(DA_mout or negedge CLKA_tmp) 
begin : blk_dibuf_0
  #0;
  if ( CLKA_tmp == 1'b0)
  begin
    DA_pre = DA_mout;
  end // if of CLKA_tmp = 0
end // end of always block blk_dibuf_0


always @(TWEA_buf or negedge TCLKA_buf) 
begin : blk_twebuf_0
  if ( TCLKA_buf == 1'b0)
  begin
    TWEA_pre = TWEA_buf;
  end // if of TCLKA_buf = 0
end // end of always block blk_twebuf_0

always @(TMEA_buf or negedge TCLKA_buf)
begin : blk_tmebuf_0
  if ( TCLKA_buf == 1'b0)
  begin
    TMEA_pre = TMEA_buf;
  end // if of TCLKA_buf = 0
end // end of always block blk_tmebuf_0


// Setup/hold condition for BISTEA: BISTEA is : ENBISTEA
real ENBISTEA_timeA,ENTBISTEA_timeA;
reg  ENBISTEAIA,ENTBISTEAIA;
reg  ENBISTEA_regA,ENTBISTEA_regA;
wire ENBISTEA,ENTBISTEA;

always @( MEA_buf or TMEA_buf )
begin : blk_me_tmebuf_0
  if ( MEA_buf === 1'b0 && TMEA_buf === 1'b0 && ($realtime == ENBISTEA_timeA) )
     ENBISTEAIA = 1'b0;
  else if ((ENBISTEA_regA === 1'b0) & (CLKA_buf === 1'b0))
    ENBISTEA_regA = 1'b1;
  else
     ENBISTEAIA = 1'b1;
end // end of always block blk_me_tmebuf_0

always @(negedge CLKA_buf)
begin : blk_negclkbuf_0
  if ( ENBISTEAIA === 1'b0)
    ENBISTEA_regA = MEA_buf || TMEA_buf;
  else
    ENBISTEA_regA = 1'b1;
end // end of always block blk_clkbuf_0

always @(posedge CLKA_buf)
begin : blk_posclkbuf_0
  ENBISTEA_timeA = $realtime;
  ENBISTEAIA = MEA_buf || TMEA_buf;
end // end of always block blk_posclkbuf_0

always @( MEA_buf or TMEA_buf )
begin
  if ( MEA_buf === 1'b0 && TMEA_buf === 1'b0 && ($realtime == ENTBISTEA_timeA) )
    ENTBISTEAIA = 1'b0;
  else if ((ENTBISTEA_regA === 1'b0) & (TCLKA_buf === 1'b0))
    ENTBISTEA_regA = 1'b1;
  else
    ENTBISTEAIA = 1'b1;
end

always @(negedge TCLKA_buf)
begin
  if ( ENTBISTEAIA === 1'b0)
    ENTBISTEA_regA = MEA_buf || TMEA_buf;
  else
    ENTBISTEA_regA = 1'b1;
end

always @(posedge TCLKA_buf)
begin
  ENTBISTEA_timeA = $realtime;
  ENTBISTEAIA = MEA_buf || TMEA_buf;
end

assign ENTBISTEA = (((ENTBISTEA_regA && !DFTMASK_buf) || (DFTMASK_buf === 1'b1 && SE_INA_buf === 1'b0)) && (TCLKEA_buf === 1'b1) && (LS_buf === 1'b0)) ;
assign ENBISTEA = (((ENBISTEA_regA && !DFTMASK_buf) || (DFTMASK_buf === 1'b1 && SE_INA_buf === 1'b0)) && (TCLKEA_buf === 1'b0) && (LS_buf === 1'b0));
`ifdef VIRAGE_FAST_VERILOG
`else
// Setup/hold condition for Address: ADRA is : ENADRACLKA
wire ENADRACLKA;
assign ENADRACLKA = ((((MEA_pre !== 1'b0 && DFTMASK_buf === 1'b0) || (DFTMASK_buf === 1'b1 && SE_INA_buf === 1'b0)) && BISTEA_buf === 1'b0 && (LS_buf === 1'b0) && (TCLKEA_buf === 1'b0)) ?1'b1:1'b0);
wire ENADRATCLKA;
assign ENADRATCLKA = ((((MEA_pre !== 1'b0 && DFTMASK_buf === 1'b0) || (DFTMASK_buf === 1'b1 && SE_INA_buf === 1'b0)) && BISTEA_buf === 1'b0 && (LS_buf === 1'b0) && (TCLKEA_buf === 1'b1)) ?1'b1:1'b0);

// Setup/hold condition for Memory Enable: MEA is : ENMEACLKA
wire ENMEACLKA;
assign ENMEACLKA = ((((DFTMASK_buf === 1'b0 && (ADRA_valid || flag_ADRA_x)) || (DFTMASK_buf === 1'b1 && SE_INA_buf === 1'b0)) && BISTEA_buf === 1'b0  && (TCLKEA_buf === 1'b0)) ?1'b1:1'b0);
wire ENMEATCLKA;
assign ENMEATCLKA = ((((DFTMASK_buf === 1'b0 && (ADRA_valid || flag_ADRA_x)) || (DFTMASK_buf === 1'b1 && SE_INA_buf === 1'b0)) && BISTEA_buf === 1'b0  && (TCLKEA_buf === 1'b1)) ?1'b1:1'b0);
 
// Setup/hold condition for Write Enable: WEA is : ENWEACLKA
wire ENWEACLKA;
assign ENWEACLKA = ((((MEA_pre !== 1'b0 && DFTMASK_buf === 1'b0 ) || (DFTMASK_buf === 1'b1 && SE_INA_buf === 1'b0)) && BISTEA_buf === 1'b0  && (LS_buf === 1'b0) && (TCLKEA_buf === 1'b0)) ?1'b1:1'b0);
wire ENWEATCLKA;
assign ENWEATCLKA = ((((MEA_pre !== 1'b0 && DFTMASK_buf === 1'b0 ) || (DFTMASK_buf === 1'b1 && SE_INA_buf === 1'b0)) && BISTEA_buf === 1'b0  && (LS_buf === 1'b0) && (TCLKEA_buf === 1'b1)) ?1'b1:1'b0);
 

// Setup/hold condition for Data In: DA is : ENDACLKA
wire ENDACLKA;
wire ENDATCLKA;
assign ENDACLKA = ((((MEA_pre !== 1'b0 && WEA_pre !== 1'b0 && DFTMASK_buf === 1'b0 && ADRA_valid) || (DFTMASK_buf === 1'b1 && SE_INA_buf === 1'b0)) && BISTEA_buf === 1'b0 && (LS_buf === 1'b0) && (TCLKEA_buf === 1'b0))?1'b1:1'b0);
assign ENDATCLKA = ((((MEA_pre !== 1'b0 && WEA_pre !== 1'b0 && DFTMASK_buf === 1'b0 && ADRA_valid) || (DFTMASK_buf === 1'b1 && SE_INA_buf === 1'b0)) && BISTEA_buf === 1'b0 && (LS_buf === 1'b0) && (TCLKEA_buf === 1'b1))?1'b1:1'b0);

// Setup/hold condition for test1 Vector: TEST1A is : ENTEST1A
wire ENTEST1A;
assign ENTEST1A = ((((ADRA_valid && BISTEA_buf == 1'b0) || (TADRA_valid && BISTEA_buf == 1'b1)) && MEA_pre !== 1'b0 && DFTMASK_buf === 1'b0 && (LS_buf === 1'b0) && (TCLKEA_buf === 1'b0))?1'b1:1'b0);
wire ENTTEST1A;
assign ENTTEST1A = ((((ADRA_valid && BISTEA_buf == 1'b0) || (TADRA_valid && BISTEA_buf == 1'b1)) && MEA_pre !== 1'b0 && DFTMASK_buf === 1'b0 && (LS_buf === 1'b0) && (TCLKEA_buf === 1'b1))?1'b1:1'b0);
// Setup/hold condition for Read Margin Vector: RMA is : ENRMA
wire ENRMA;
assign ENRMA = ((((ADRA_valid && BISTEA_buf == 1'b0) || (TADRA_valid && BISTEA_buf == 1'b1)) && RMEA_buf === 1'b1 && MEA_pre !== 1'b0  && DFTMASK_buf === 1'b0 && (LS_buf === 1'b0) && (TCLKEA_buf === 1'b0))?1'b1:1'b0);
wire ENTRMA;
assign ENTRMA = ((((ADRA_valid && BISTEA_buf == 1'b0) || (TADRA_valid && BISTEA_buf == 1'b1)) && RMEA_buf === 1'b1 && MEA_pre !== 1'b0 && DFTMASK_buf === 1'b0 && (LS_buf === 1'b0) && (TCLKEA_buf === 1'b1))?1'b1:1'b0);
wire ENRMEA;
assign ENRMEA = ((((ADRA_valid && BISTEA_buf == 1'b0) || (TADRA_valid && BISTEA_buf == 1'b1)) && MEA_pre !== 1'b0 && DFTMASK_buf === 1'b0 && (LS_buf === 1'b0) && (TCLKEA_buf === 1'b0))?1'b1:1'b0);
wire ENTRMEA;
assign ENTRMEA = ((((ADRA_valid && BISTEA_buf == 1'b0) || (TADRA_valid && BISTEA_buf == 1'b1)) && MEA_pre !== 1'b0 && DFTMASK_buf === 1'b0 && (LS_buf === 1'b0) && (TCLKEA_buf === 1'b1))?1'b1:1'b0);
// Setup/hold condition for Address: TADRA is : ENTADRATCLKA
wire ENTADRATCLKA;
assign ENTADRATCLKA = ((((MEA_pre !== 1'b0 && DFTMASK_buf === 1'b0) || (DFTMASK_buf === 1'b1 && SE_INA_buf === 1'b0)) && BISTEA_buf !== 1'b0 && (LS_buf === 1'b0) && (TCLKEA_buf === 1'b1)) ?1'b1:1'b0);
wire ENTADRACLKA;
assign ENTADRACLKA = ((((MEA_pre !== 1'b0 && DFTMASK_buf === 1'b0) || (DFTMASK_buf === 1'b1 && SE_INA_buf === 1'b0)) && BISTEA_buf !== 1'b0 && (LS_buf === 1'b0) && (TCLKEA_buf === 1'b0)) ?1'b1:1'b0);
 
// Setup/hold condition for Memory Enable: TMEA is : ENTMEATCLKA
wire ENTMEATCLKA;
assign ENTMEATCLKA =  ((((DFTMASK_buf === 1'b0 && (TADRA_valid || flag_ADRA_x)) || (DFTMASK_buf === 1'b1 && SE_INA_buf === 1'b0)) && BISTEA_buf !== 1'b0 && (TCLKEA_buf === 1'b1))?1'b1:1'b0);
wire ENTMEACLKA;
assign ENTMEACLKA =  ((((DFTMASK_buf === 1'b0 && (TADRA_valid || flag_ADRA_x)) || (DFTMASK_buf === 1'b1 && SE_INA_buf === 1'b0)) && BISTEA_buf !== 1'b0 && (TCLKEA_buf === 1'b0))?1'b1:1'b0);
 
// Setup/hold condition for Write Enable: TWEA is : ENTWEATCLKA
wire ENTWEATCLKA;
assign ENTWEATCLKA = ((((MEA_pre !== 1'b0 && DFTMASK_buf === 1'b0) || (DFTMASK_buf === 1'b1 && SE_INA_buf === 1'b0)) && BISTEA_buf !== 1'b0 && (LS_buf === 1'b0) && (TCLKEA_buf === 1'b1)) ?1'b1:1'b0);
wire ENTWEACLKA;
assign ENTWEACLKA = ((((MEA_pre !== 1'b0 && DFTMASK_buf === 1'b0) || (DFTMASK_buf === 1'b1 && SE_INA_buf === 1'b0)) && BISTEA_buf !== 1'b0 && (LS_buf === 1'b0) && (TCLKEA_buf === 1'b0)) ?1'b1:1'b0);
// Setup/hold condition for Data In: TDA is : ENTDATCLKA
wire ENTDATCLKA;
wire ENTDACLKA;
assign ENTDATCLKA = ((((MEA_pre !== 1'b0 && DFTMASK_buf === 1'b0 && TWEA_pre !== 1'b0 && TADRA_valid) || (DFTMASK_buf === 1'b1 && SE_INA_buf === 1'b0)) && BISTEA_buf !== 1'b0 && (LS_buf === 1'b0) && (TCLKEA_buf === 1'b1))?1'b1:1'b0) ;
assign ENTDACLKA = ((((MEA_pre !== 1'b0 && DFTMASK_buf === 1'b0 && TWEA_pre !== 1'b0 && TADRA_valid) || (DFTMASK_buf === 1'b1 && SE_INA_buf === 1'b0)) && BISTEA_buf !== 1'b0 && (LS_buf === 1'b0) && (TCLKEA_buf === 1'b0))?1'b1:1'b0) ;

// Setup/hold condition for Light Sleep: LS is : ENLS_A
wire ENLS_A;
assign ENLS_A = ((MEA_pre !== 1'b0 && (TCLKEA_buf === 1'b0))?1'b1:1'b0);

// Setup/hold condition for Light Sleep: LS is : ENTLS_A
wire ENTLS_A;
assign ENTLS_A = ((MEA_pre !== 1'b0 && (TCLKEA_buf === 1'b1))?1'b1:1'b0);

wire ENCLKA;
wire ENCLKA_test1;
wire ENTCLKA;
wire ENTCLKA_test1;
assign ENTCLKA = (((TCLKEA_buf === 1'b1) && (TEST1A_buf === 1'b0))?1'b1:1'b0);
assign ENTCLKA_test1 = (((TCLKEA_buf === 1'b1) && (TEST1A_buf === 1'b1) && DFTMASK_buf === 1'b0)?1'b1:1'b0);
wire ENTCLKA_rmezo,ENTCLKA_vdm,ENTCLKA_slw,ENTCLKA_def,ENTCLKA_fst;
assign ENTCLKA_rmezo = ((RMEA_buf !== 1'b1 && (TCLKEA_buf === 1'b1))?1'b1:1'b0) ;
assign ENTCLKA_vdm = ((RMEA_buf === 1'b1  && ( (RMA_buf[0] !== 1'b1) && (RMA_buf[1] !== 1'b1) && (RMA_buf[2] !== 1'b1) && (RMA_buf[3] !== 1'b1) ) && (TCLKEA_buf === 1'b1) )?1'b1:1'b0) ;
assign ENTCLKA_slw = ((RMEA_buf === 1'b1  && ( (RMA_buf[0] !== 1'b0) && (RMA_buf[1] !== 1'b1) && (RMA_buf[2] !== 1'b1) && (RMA_buf[3] !== 1'b1) ) && (TCLKEA_buf === 1'b1) )?1'b1:1'b0) ;
assign ENTCLKA_def = ((RMEA_buf === 1'b1  && ( (RMA_buf[0] !== 1'b1) && (RMA_buf[1] !== 1'b0) && (RMA_buf[2] !== 1'b1) && (RMA_buf[3] !== 1'b1) ) && (TCLKEA_buf === 1'b1) )?1'b1:1'b0) ;
assign ENTCLKA_fst = ((RMEA_buf === 1'b1  && ( (RMA_buf[0] !== 1'b0) && (RMA_buf[1] !== 1'b0) && (RMA_buf[2] !== 1'b1) && (RMA_buf[3] !== 1'b1) ) && (TCLKEA_buf === 1'b1) )?1'b1:1'b0) ;
assign ENCLKA = (((TCLKEA_buf === 1'b0) && (TEST1A_buf === 1'b0))?1'b1:1'b0) ;
assign ENCLKA_test1 = (((TCLKEA_buf === 1'b0) && (TEST1A_buf === 1'b1) && DFTMASK_buf === 1'b0)?1'b1:1'b0);
wire ENCLKA_rmezo,ENCLKA_vdm,ENCLKA_slw,ENCLKA_def,ENCLKA_fst;
assign ENCLKA_rmezo = ((RMEA_buf !== 1'b1 && (TCLKEA_buf === 1'b0))?1'b1:1'b0) ;
assign ENCLKA_vdm = ((RMEA_buf === 1'b1  && ( (RMA_buf[0] !== 1'b1) && (RMA_buf[1] !== 1'b1) && (RMA_buf[2] !== 1'b1) && (RMA_buf[3] !== 1'b1) ) && (TCLKEA_buf === 1'b0))?1'b1:1'b0) ;
assign ENCLKA_slw = ((RMEA_buf === 1'b1  && ( (RMA_buf[0] !== 1'b0) && (RMA_buf[1] !== 1'b1) && (RMA_buf[2] !== 1'b1) && (RMA_buf[3] !== 1'b1) ) && (TCLKEA_buf === 1'b0))?1'b1:1'b0) ;
assign ENCLKA_def = ((RMEA_buf === 1'b1  && ( (RMA_buf[0] !== 1'b1) && (RMA_buf[1] !== 1'b0) && (RMA_buf[2] !== 1'b1) && (RMA_buf[3] !== 1'b1) ) && (TCLKEA_buf === 1'b0))?1'b1:1'b0) ;
assign ENCLKA_fst = ((RMEA_buf === 1'b1  && ( (RMA_buf[0] !== 1'b0) && (RMA_buf[1] !== 1'b0) && (RMA_buf[2] !== 1'b1) && (RMA_buf[3] !== 1'b1) ) && (TCLKEA_buf === 1'b0))?1'b1:1'b0) ;

// Setup/hold condition for Pipeline Memory enable pin: PIPEMEA is : ENPIPEMEACLKA
wire ENPIPEMEACLKA, ENPIPEMEATCLKA, ENTPIPEMEATCLKA, ENTPIPEMEACLKA;
assign ENPIPEMEACLKA = ((BISTEA_buf == 1'b0 && SE_INA_buf === 1'b0 && ADRA_valid && (TCLKEA_buf === 1'b0))?1'b1:1'b0);
assign ENTPIPEMEATCLKA = ((BISTEA_buf == 1'b1 && SE_INA_buf === 1'b0 && TADRA_valid && (TCLKEA_buf === 1'b1))?1'b1:1'b0);
assign ENPIPEMEATCLKA = ((BISTEA_buf == 1'b0 && SE_INA_buf === 1'b0 && ADRA_valid && (TCLKEA_buf === 1'b1))?1'b1:1'b0);
assign ENTPIPEMEACLKA = ((BISTEA_buf == 1'b1 && SE_INA_buf === 1'b0 && TADRA_valid && (TCLKEA_buf === 1'b0))?1'b1:1'b0);

// Setup/hold condition for Synchronous Write enable pin: DFTCLKEN is : ENDFTCLKEN_A
wire ENDFTCLKEN_A, ENTDFTCLKEN_A;
assign ENDFTCLKEN_A = (( (LS_buf === 1'b0) && (TCLKEA_buf === 1'b0))?1'b1:1'b0);
assign ENTDFTCLKEN_A = (( (LS_buf === 1'b0) && (TCLKEA_buf === 1'b1))?1'b1:1'b0);

// Setup/hold condition for : DFTMASK is : ENDFTMASK_A
wire ENDFTMASK_A, ENTDFTMASK_A;
assign ENDFTMASK_A = (( (LS_buf === 1'b0) && (TCLKEA_buf === 1'b0) && ((MEA_pre !== 1'b0) || (SE_INA_buf === 1'b0)))?1'b1:1'b0);
assign ENTDFTMASK_A = (( (LS_buf === 1'b0) && (TCLKEA_buf === 1'b1) && ((MEA_pre !== 1'b0) || (SE_INA_buf === 1'b0)))?1'b1:1'b0);

// Setup/hold condition for : CAPTA is : ENCAPTA
wire ENCAPTA, ENTCAPTA;
assign ENCAPTA = (((TCLKEA_buf === 1'b0) && SE_INA_buf === 1'b0)?1'b1:1'b0);
assign ENTCAPTA = (((TCLKEA_buf === 1'b1) && SE_INA_buf === 1'b0)?1'b1:1'b0);

// Setup/hold condition for : CDA is : ENCDA
wire ENCDA, ENTCDA;
assign ENCDA = (((TCLKEA_buf === 1'b0) && SE_INA_buf === 1'b0)?1'b1:1'b0);
assign ENTCDA = (((TCLKEA_buf === 1'b1) && SE_INA_buf === 1'b0)?1'b1:1'b0);

// Setup/hold condition for : STICKYA is : ENSTICKYA
wire ENSTICKYA, ENTSTICKYA;
assign ENSTICKYA = (((TCLKEA_buf === 1'b0) && SE_INA_buf === 1'b0)?1'b1:1'b0);
assign ENTSTICKYA = (((TCLKEA_buf === 1'b1) && SE_INA_buf === 1'b0)?1'b1:1'b0);

// Setup/hold condition for : SI_QA is : ENSI_QA
wire ENSI_QA, ENTSI_QA;
assign ENSI_QA = (((TCLKEA_buf === 1'b0) && SE_QA_buf === 1'b1 && (((PIPEMEA_buf === 1'b1 && BISTEA_buf === 1'b0) || (TPIPEMEA_buf === 1'b1 && BISTEA_buf === 1'b1)) || DFTCLKEN_buf === 1'b1))?1'b1:1'b0);
assign ENTSI_QA = (((TCLKEA_buf === 1'b1) && SE_QA_buf === 1'b1 && (((PIPEMEA_buf === 1'b1 && BISTEA_buf === 1'b0) || (TPIPEMEA_buf === 1'b1 && BISTEA_buf === 1'b1)) || DFTCLKEN_buf === 1'b1))?1'b1:1'b0);

// Setup/hold condition for : SI_DA is : ENSI_DA
wire ENSI_DA, ENTSI_DA;
assign ENSI_DA = (( (LS_buf === 1'b0) && (TCLKEA_buf === 1'b0) && SE_INA_buf === 1'b1 && (MEA_pre !== 1'b0 || DFTCLKEN_buf === 1'b1))?1'b1:1'b0);
assign ENTSI_DA = (( (LS_buf === 1'b0) && (TCLKEA_buf === 1'b1) && SE_INA_buf === 1'b1 && (MEA_pre !== 1'b0 || DFTCLKEN_buf === 1'b1))?1'b1:1'b0);

// Setup/hold condition for : SI_CNTRA is : ENSI_CNTRA
wire ENSI_CNTRA, ENTSI_CNTRA;
assign ENSI_CNTRA = (( (LS_buf === 1'b0) && (TCLKEA_buf === 1'b0) && SE_INA_buf === 1'b1 && (MEA_pre !== 1'b0 || DFTCLKEN_buf === 1'b1))?1'b1:1'b0);
assign ENTSI_CNTRA = (( (LS_buf === 1'b0) && (TCLKEA_buf === 1'b1) && SE_INA_buf === 1'b1 && (MEA_pre !== 1'b0 || DFTCLKEN_buf === 1'b1))?1'b1:1'b0);

// Setup/hold condition for : SE_INA is : ENSE_INA
wire ENSE_INA, ENTSE_INA;
assign ENSE_INA = (( (LS_buf === 1'b0) && (TCLKEA_buf === 1'b0))?1'b1:1'b0);
assign ENTSE_INA = (( (LS_buf === 1'b0) && (TCLKEA_buf === 1'b1))?1'b1:1'b0);

// Setup/hold condition for : SE_QA, ENSE_QA
wire ENSE_QA, ENTSE_QA;
assign ENSE_QA = (((TCLKEA_buf === 1'b0) && (((PIPEMEA_buf === 1'b1 && BISTEA_buf === 1'b0) || (TPIPEMEA_buf === 1'b1 && BISTEA_buf === 1'b1)) || DFTCLKEN_buf === 1'b1))?1'b1:1'b0);
assign ENTSE_QA = (((TCLKEA_buf === 1'b1) && (((PIPEMEA_buf === 1'b1 && BISTEA_buf === 1'b0) || (TPIPEMEA_buf === 1'b1 && BISTEA_buf === 1'b1)) || DFTCLKEN_buf === 1'b1))?1'b1:1'b0);

`endif // endif of VIRAGE_FAST_VERILOG
// Setup/hold condition for Clock Select pin: TCLKEA is : ENTCLKEA
wire ENTCLKEA, ENTTCLKEA;
assign ENTCLKEA = ((((ENBISTEA_regA === 1'b1 && DFTMASK_buf === 1'b0 && ADRA_valid) || (DFTMASK_buf === 1'b1 && SE_INA_buf === 1'b0))  && (LS_buf === 1'b0))?1'b1:1'b0);
assign ENTTCLKEA = ((((ENTBISTEA_regA === 1'b1 && DFTMASK_buf === 1'b0 && TADRA_valid) || (DFTMASK_buf === 1'b1 && SE_INA_buf === 1'b0))  && (LS_buf === 1'b0))?1'b1:1'b0);


reg  MEB_pre,TMEB_pre;
reg  WEB_pre,TWEB_pre;
reg  [10:0] ADRB_pre;
reg  [159:0] DB_pre;
reg flag_ADRB_x;
assign CLKB_tmp = mclkB;

always @(MEB_mout or negedge CLKB_tmp) 
begin : blk_mebuf_1
  #0;
  if ( CLKB_tmp == 1'b0)
  begin
    MEB_pre = MEB_mout;
  end // if of CLKB_tmp = 0
end // end of always block blk_mebuf_1

always @(WEB_mout or negedge CLKB_tmp) 
begin : blk_webuf_1
  #0;
  if ( CLKB_tmp == 1'b0)
  begin
    WEB_pre = WEB_mout;
  end // if of CLKB_tmp = 0
end // end of always block blk_webuf_1

always @(ADRB_mout or negedge CLKB_tmp) 
begin : blk_addrbuf_1
  #0;
  if ( CLKB_tmp == 1'b0)
  begin
    ADRB_pre = ADRB_mout;
  end // if of CLKB_tmp = 0
  if ( (^ADRB_mout) === 1'bx)
  begin
    flag_ADRB_x = 1'b1;
  end 
  else
  begin
    flag_ADRB_x = 1'b0;
  end 
end // end of always block blk_addrbuf_1

always @(DB_mout or negedge CLKB_tmp) 
begin : blk_dibuf_1
  #0;
  if ( CLKB_tmp == 1'b0)
  begin
    DB_pre = DB_mout;
  end // if of CLKB_tmp = 0
end // end of always block blk_dibuf_1


always @(TWEB_buf or negedge TCLKB_buf) 
begin : blk_twebuf_1
  if ( TCLKB_buf == 1'b0)
  begin
    TWEB_pre = TWEB_buf;
  end // if of TCLKB_buf = 0
end // end of always block blk_twebuf_1

always @(TMEB_buf or negedge TCLKB_buf)
begin : blk_tmebuf_1
  if ( TCLKB_buf == 1'b0)
  begin
    TMEB_pre = TMEB_buf;
  end // if of TCLKB_buf = 0
end // end of always block blk_tmebuf_1


// Setup/hold condition for BISTEB: BISTEB is : ENBISTEB
real ENBISTEB_timeB,ENTBISTEB_timeB;
reg  ENBISTEBIB,ENTBISTEBIB;
reg  ENBISTEB_regB,ENTBISTEB_regB;
wire ENBISTEB,ENTBISTEB;

always @( MEB_buf or TMEB_buf )
begin : blk_me_tmebuf_1
  if ( MEB_buf === 1'b0 && TMEB_buf === 1'b0 && ($realtime == ENBISTEB_timeB) )
     ENBISTEBIB = 1'b0;
  else if ((ENBISTEB_regB === 1'b0) & (CLKB_buf === 1'b0))
    ENBISTEB_regB = 1'b1;
  else
     ENBISTEBIB = 1'b1;
end // end of always block blk_me_tmebuf_1

always @(negedge CLKB_buf)
begin : blk_negclkbuf_1
  if ( ENBISTEBIB === 1'b0)
    ENBISTEB_regB = MEB_buf || TMEB_buf;
  else
    ENBISTEB_regB = 1'b1;
end // end of always block blk_clkbuf_1

always @(posedge CLKB_buf)
begin : blk_posclkbuf_1
  ENBISTEB_timeB = $realtime;
  ENBISTEBIB = MEB_buf || TMEB_buf;
end // end of always block blk_posclkbuf_1

always @( MEB_buf or TMEB_buf )
begin
  if ( MEB_buf === 1'b0 && TMEB_buf === 1'b0 && ($realtime == ENTBISTEB_timeB) )
    ENTBISTEBIB = 1'b0;
  else if ((ENTBISTEB_regB === 1'b0) & (TCLKB_buf === 1'b0))
    ENTBISTEB_regB = 1'b1;
  else
    ENTBISTEBIB = 1'b1;
end

always @(negedge TCLKB_buf)
begin
  if ( ENTBISTEBIB === 1'b0)
    ENTBISTEB_regB = MEB_buf || TMEB_buf;
  else
    ENTBISTEB_regB = 1'b1;
end

always @(posedge TCLKB_buf)
begin
  ENTBISTEB_timeB = $realtime;
  ENTBISTEBIB = MEB_buf || TMEB_buf;
end

assign ENTBISTEB = (((ENTBISTEB_regB && !DFTMASK_buf) || (DFTMASK_buf === 1'b1 && SE_INB_buf === 1'b0)) && (TCLKEB_buf === 1'b1) && (LS_buf === 1'b0)) ;
assign ENBISTEB = (((ENBISTEB_regB && !DFTMASK_buf) || (DFTMASK_buf === 1'b1 && SE_INB_buf === 1'b0)) && (TCLKEB_buf === 1'b0) && (LS_buf === 1'b0));
`ifdef VIRAGE_FAST_VERILOG
`else
// Setup/hold condition for Address: ADRB is : ENADRBCLKB
wire ENADRBCLKB;
assign ENADRBCLKB = ((((MEB_pre !== 1'b0 && DFTMASK_buf === 1'b0) || (DFTMASK_buf === 1'b1 && SE_INB_buf === 1'b0)) && BISTEB_buf === 1'b0 && (LS_buf === 1'b0) && (TCLKEB_buf === 1'b0)) ?1'b1:1'b0);
wire ENADRBTCLKB;
assign ENADRBTCLKB = ((((MEB_pre !== 1'b0 && DFTMASK_buf === 1'b0) || (DFTMASK_buf === 1'b1 && SE_INB_buf === 1'b0)) && BISTEB_buf === 1'b0 && (LS_buf === 1'b0) && (TCLKEB_buf === 1'b1)) ?1'b1:1'b0);

// Setup/hold condition for Memory Enable: MEB is : ENMEBCLKB
wire ENMEBCLKB;
assign ENMEBCLKB = ((((DFTMASK_buf === 1'b0 && (ADRB_valid || flag_ADRB_x)) || (DFTMASK_buf === 1'b1 && SE_INB_buf === 1'b0)) && BISTEB_buf === 1'b0  && (TCLKEB_buf === 1'b0)) ?1'b1:1'b0);
wire ENMEBTCLKB;
assign ENMEBTCLKB = ((((DFTMASK_buf === 1'b0 && (ADRB_valid || flag_ADRB_x)) || (DFTMASK_buf === 1'b1 && SE_INB_buf === 1'b0)) && BISTEB_buf === 1'b0  && (TCLKEB_buf === 1'b1)) ?1'b1:1'b0);
 
// Setup/hold condition for Write Enable: WEB is : ENWEBCLKB
wire ENWEBCLKB;
assign ENWEBCLKB = ((((MEB_pre !== 1'b0 && DFTMASK_buf === 1'b0 ) || (DFTMASK_buf === 1'b1 && SE_INB_buf === 1'b0)) && BISTEB_buf === 1'b0  && (LS_buf === 1'b0) && (TCLKEB_buf === 1'b0)) ?1'b1:1'b0);
wire ENWEBTCLKB;
assign ENWEBTCLKB = ((((MEB_pre !== 1'b0 && DFTMASK_buf === 1'b0 ) || (DFTMASK_buf === 1'b1 && SE_INB_buf === 1'b0)) && BISTEB_buf === 1'b0  && (LS_buf === 1'b0) && (TCLKEB_buf === 1'b1)) ?1'b1:1'b0);
 

// Setup/hold condition for Data In: DB is : ENDBCLKB
wire ENDBCLKB;
wire ENDBTCLKB;
assign ENDBCLKB = ((((MEB_pre !== 1'b0 && WEB_pre !== 1'b0 && DFTMASK_buf === 1'b0 && ADRB_valid) || (DFTMASK_buf === 1'b1 && SE_INB_buf === 1'b0)) && BISTEB_buf === 1'b0 && (LS_buf === 1'b0) && (TCLKEB_buf === 1'b0))?1'b1:1'b0);
assign ENDBTCLKB = ((((MEB_pre !== 1'b0 && WEB_pre !== 1'b0 && DFTMASK_buf === 1'b0 && ADRB_valid) || (DFTMASK_buf === 1'b1 && SE_INB_buf === 1'b0)) && BISTEB_buf === 1'b0 && (LS_buf === 1'b0) && (TCLKEB_buf === 1'b1))?1'b1:1'b0);

// Setup/hold condition for test1 Vector: TEST1B is : ENTEST1B
wire ENTEST1B;
assign ENTEST1B = ((((ADRB_valid && BISTEB_buf == 1'b0) || (TADRB_valid && BISTEB_buf == 1'b1)) && MEB_pre !== 1'b0 && DFTMASK_buf === 1'b0 && (LS_buf === 1'b0) && (TCLKEB_buf === 1'b0))?1'b1:1'b0);
wire ENTTEST1B;
assign ENTTEST1B = ((((ADRB_valid && BISTEB_buf == 1'b0) || (TADRB_valid && BISTEB_buf == 1'b1)) && MEB_pre !== 1'b0 && DFTMASK_buf === 1'b0 && (LS_buf === 1'b0) && (TCLKEB_buf === 1'b1))?1'b1:1'b0);
// Setup/hold condition for Read Margin Vector: RMB is : ENRMB
wire ENRMB;
assign ENRMB = ((((ADRB_valid && BISTEB_buf == 1'b0) || (TADRB_valid && BISTEB_buf == 1'b1)) && RMEB_buf === 1'b1 && MEB_pre !== 1'b0  && DFTMASK_buf === 1'b0 && (LS_buf === 1'b0) && (TCLKEB_buf === 1'b0))?1'b1:1'b0);
wire ENTRMB;
assign ENTRMB = ((((ADRB_valid && BISTEB_buf == 1'b0) || (TADRB_valid && BISTEB_buf == 1'b1)) && RMEB_buf === 1'b1 && MEB_pre !== 1'b0 && DFTMASK_buf === 1'b0 && (LS_buf === 1'b0) && (TCLKEB_buf === 1'b1))?1'b1:1'b0);
wire ENRMEB;
assign ENRMEB = ((((ADRB_valid && BISTEB_buf == 1'b0) || (TADRB_valid && BISTEB_buf == 1'b1)) && MEB_pre !== 1'b0 && DFTMASK_buf === 1'b0 && (LS_buf === 1'b0) && (TCLKEB_buf === 1'b0))?1'b1:1'b0);
wire ENTRMEB;
assign ENTRMEB = ((((ADRB_valid && BISTEB_buf == 1'b0) || (TADRB_valid && BISTEB_buf == 1'b1)) && MEB_pre !== 1'b0 && DFTMASK_buf === 1'b0 && (LS_buf === 1'b0) && (TCLKEB_buf === 1'b1))?1'b1:1'b0);
// Setup/hold condition for Address: TADRB is : ENTADRBTCLKB
wire ENTADRBTCLKB;
assign ENTADRBTCLKB = ((((MEB_pre !== 1'b0 && DFTMASK_buf === 1'b0) || (DFTMASK_buf === 1'b1 && SE_INB_buf === 1'b0)) && BISTEB_buf !== 1'b0 && (LS_buf === 1'b0) && (TCLKEB_buf === 1'b1)) ?1'b1:1'b0);
wire ENTADRBCLKB;
assign ENTADRBCLKB = ((((MEB_pre !== 1'b0 && DFTMASK_buf === 1'b0) || (DFTMASK_buf === 1'b1 && SE_INB_buf === 1'b0)) && BISTEB_buf !== 1'b0 && (LS_buf === 1'b0) && (TCLKEB_buf === 1'b0)) ?1'b1:1'b0);
 
// Setup/hold condition for Memory Enable: TMEB is : ENTMEBTCLKB
wire ENTMEBTCLKB;
assign ENTMEBTCLKB =  ((((DFTMASK_buf === 1'b0 && (TADRB_valid || flag_ADRB_x)) || (DFTMASK_buf === 1'b1 && SE_INB_buf === 1'b0)) && BISTEB_buf !== 1'b0 && (TCLKEB_buf === 1'b1))?1'b1:1'b0);
wire ENTMEBCLKB;
assign ENTMEBCLKB =  ((((DFTMASK_buf === 1'b0 && (TADRB_valid || flag_ADRB_x)) || (DFTMASK_buf === 1'b1 && SE_INB_buf === 1'b0)) && BISTEB_buf !== 1'b0 && (TCLKEB_buf === 1'b0))?1'b1:1'b0);
 
// Setup/hold condition for Write Enable: TWEB is : ENTWEBTCLKB
wire ENTWEBTCLKB;
assign ENTWEBTCLKB = ((((MEB_pre !== 1'b0 && DFTMASK_buf === 1'b0) || (DFTMASK_buf === 1'b1 && SE_INB_buf === 1'b0)) && BISTEB_buf !== 1'b0 && (LS_buf === 1'b0) && (TCLKEB_buf === 1'b1)) ?1'b1:1'b0);
wire ENTWEBCLKB;
assign ENTWEBCLKB = ((((MEB_pre !== 1'b0 && DFTMASK_buf === 1'b0) || (DFTMASK_buf === 1'b1 && SE_INB_buf === 1'b0)) && BISTEB_buf !== 1'b0 && (LS_buf === 1'b0) && (TCLKEB_buf === 1'b0)) ?1'b1:1'b0);
// Setup/hold condition for Data In: TDB is : ENTDBTCLKB
wire ENTDBTCLKB;
wire ENTDBCLKB;
assign ENTDBTCLKB = ((((MEB_pre !== 1'b0 && DFTMASK_buf === 1'b0 && TWEB_pre !== 1'b0 && TADRB_valid) || (DFTMASK_buf === 1'b1 && SE_INB_buf === 1'b0)) && BISTEB_buf !== 1'b0 && (LS_buf === 1'b0) && (TCLKEB_buf === 1'b1))?1'b1:1'b0) ;
assign ENTDBCLKB = ((((MEB_pre !== 1'b0 && DFTMASK_buf === 1'b0 && TWEB_pre !== 1'b0 && TADRB_valid) || (DFTMASK_buf === 1'b1 && SE_INB_buf === 1'b0)) && BISTEB_buf !== 1'b0 && (LS_buf === 1'b0) && (TCLKEB_buf === 1'b0))?1'b1:1'b0) ;

// Setup/hold condition for Light Sleep: LS is : ENLS_B
wire ENLS_B;
assign ENLS_B = ((MEB_pre !== 1'b0 && (TCLKEB_buf === 1'b0))?1'b1:1'b0);

// Setup/hold condition for Light Sleep: LS is : ENTLS_B
wire ENTLS_B;
assign ENTLS_B = ((MEB_pre !== 1'b0 && (TCLKEB_buf === 1'b1))?1'b1:1'b0);

wire ENCLKB;
wire ENCLKB_test1;
wire ENTCLKB;
wire ENTCLKB_test1;
assign ENTCLKB = (((TCLKEB_buf === 1'b1) && (TEST1B_buf === 1'b0))?1'b1:1'b0);
assign ENTCLKB_test1 = (((TCLKEB_buf === 1'b1) && (TEST1B_buf === 1'b1) && DFTMASK_buf === 1'b0)?1'b1:1'b0);
wire ENTCLKB_rmezo,ENTCLKB_vdm,ENTCLKB_slw,ENTCLKB_def,ENTCLKB_fst;
assign ENTCLKB_rmezo = ((RMEB_buf !== 1'b1 && (TCLKEB_buf === 1'b1))?1'b1:1'b0) ;
assign ENTCLKB_vdm = ((RMEB_buf === 1'b1  && ( (RMB_buf[0] !== 1'b1) && (RMB_buf[1] !== 1'b1) && (RMB_buf[2] !== 1'b1) && (RMB_buf[3] !== 1'b1) ) && (TCLKEB_buf === 1'b1) )?1'b1:1'b0) ;
assign ENTCLKB_slw = ((RMEB_buf === 1'b1  && ( (RMB_buf[0] !== 1'b0) && (RMB_buf[1] !== 1'b1) && (RMB_buf[2] !== 1'b1) && (RMB_buf[3] !== 1'b1) ) && (TCLKEB_buf === 1'b1) )?1'b1:1'b0) ;
assign ENTCLKB_def = ((RMEB_buf === 1'b1  && ( (RMB_buf[0] !== 1'b1) && (RMB_buf[1] !== 1'b0) && (RMB_buf[2] !== 1'b1) && (RMB_buf[3] !== 1'b1) ) && (TCLKEB_buf === 1'b1) )?1'b1:1'b0) ;
assign ENTCLKB_fst = ((RMEB_buf === 1'b1  && ( (RMB_buf[0] !== 1'b0) && (RMB_buf[1] !== 1'b0) && (RMB_buf[2] !== 1'b1) && (RMB_buf[3] !== 1'b1) ) && (TCLKEB_buf === 1'b1) )?1'b1:1'b0) ;
assign ENCLKB = (((TCLKEB_buf === 1'b0) && (TEST1B_buf === 1'b0))?1'b1:1'b0) ;
assign ENCLKB_test1 = (((TCLKEB_buf === 1'b0) && (TEST1B_buf === 1'b1) && DFTMASK_buf === 1'b0)?1'b1:1'b0);
wire ENCLKB_rmezo,ENCLKB_vdm,ENCLKB_slw,ENCLKB_def,ENCLKB_fst;
assign ENCLKB_rmezo = ((RMEB_buf !== 1'b1 && (TCLKEB_buf === 1'b0))?1'b1:1'b0) ;
assign ENCLKB_vdm = ((RMEB_buf === 1'b1  && ( (RMB_buf[0] !== 1'b1) && (RMB_buf[1] !== 1'b1) && (RMB_buf[2] !== 1'b1) && (RMB_buf[3] !== 1'b1) ) && (TCLKEB_buf === 1'b0))?1'b1:1'b0) ;
assign ENCLKB_slw = ((RMEB_buf === 1'b1  && ( (RMB_buf[0] !== 1'b0) && (RMB_buf[1] !== 1'b1) && (RMB_buf[2] !== 1'b1) && (RMB_buf[3] !== 1'b1) ) && (TCLKEB_buf === 1'b0))?1'b1:1'b0) ;
assign ENCLKB_def = ((RMEB_buf === 1'b1  && ( (RMB_buf[0] !== 1'b1) && (RMB_buf[1] !== 1'b0) && (RMB_buf[2] !== 1'b1) && (RMB_buf[3] !== 1'b1) ) && (TCLKEB_buf === 1'b0))?1'b1:1'b0) ;
assign ENCLKB_fst = ((RMEB_buf === 1'b1  && ( (RMB_buf[0] !== 1'b0) && (RMB_buf[1] !== 1'b0) && (RMB_buf[2] !== 1'b1) && (RMB_buf[3] !== 1'b1) ) && (TCLKEB_buf === 1'b0))?1'b1:1'b0) ;

// Setup/hold condition for Pipeline Memory enable pin: PIPEMEB is : ENPIPEMEBCLKB
wire ENPIPEMEBCLKB, ENPIPEMEBTCLKB, ENTPIPEMEBTCLKB, ENTPIPEMEBCLKB;
assign ENPIPEMEBCLKB = ((BISTEB_buf == 1'b0 && SE_INB_buf === 1'b0 && ADRB_valid && (TCLKEB_buf === 1'b0))?1'b1:1'b0);
assign ENTPIPEMEBTCLKB = ((BISTEB_buf == 1'b1 && SE_INB_buf === 1'b0 && TADRB_valid && (TCLKEB_buf === 1'b1))?1'b1:1'b0);
assign ENPIPEMEBTCLKB = ((BISTEB_buf == 1'b0 && SE_INB_buf === 1'b0 && ADRB_valid && (TCLKEB_buf === 1'b1))?1'b1:1'b0);
assign ENTPIPEMEBCLKB = ((BISTEB_buf == 1'b1 && SE_INB_buf === 1'b0 && TADRB_valid && (TCLKEB_buf === 1'b0))?1'b1:1'b0);

// Setup/hold condition for Synchronous Write enable pin: DFTCLKEN is : ENDFTCLKEN_B
wire ENDFTCLKEN_B, ENTDFTCLKEN_B;
assign ENDFTCLKEN_B = (( (LS_buf === 1'b0) && (TCLKEB_buf === 1'b0))?1'b1:1'b0);
assign ENTDFTCLKEN_B = (( (LS_buf === 1'b0) && (TCLKEB_buf === 1'b1))?1'b1:1'b0);

// Setup/hold condition for : DFTMASK is : ENDFTMASK_B
wire ENDFTMASK_B, ENTDFTMASK_B;
assign ENDFTMASK_B = (( (LS_buf === 1'b0) && (TCLKEB_buf === 1'b0) && ((MEB_pre !== 1'b0) || (SE_INB_buf === 1'b0)))?1'b1:1'b0);
assign ENTDFTMASK_B = (( (LS_buf === 1'b0) && (TCLKEB_buf === 1'b1) && ((MEB_pre !== 1'b0) || (SE_INB_buf === 1'b0)))?1'b1:1'b0);

// Setup/hold condition for : CAPTB is : ENCAPTB
wire ENCAPTB, ENTCAPTB;
assign ENCAPTB = (((TCLKEB_buf === 1'b0) && SE_INB_buf === 1'b0)?1'b1:1'b0);
assign ENTCAPTB = (((TCLKEB_buf === 1'b1) && SE_INB_buf === 1'b0)?1'b1:1'b0);

// Setup/hold condition for : CDB is : ENCDB
wire ENCDB, ENTCDB;
assign ENCDB = (((TCLKEB_buf === 1'b0) && SE_INB_buf === 1'b0)?1'b1:1'b0);
assign ENTCDB = (((TCLKEB_buf === 1'b1) && SE_INB_buf === 1'b0)?1'b1:1'b0);

// Setup/hold condition for : STICKYB is : ENSTICKYB
wire ENSTICKYB, ENTSTICKYB;
assign ENSTICKYB = (((TCLKEB_buf === 1'b0) && SE_INB_buf === 1'b0)?1'b1:1'b0);
assign ENTSTICKYB = (((TCLKEB_buf === 1'b1) && SE_INB_buf === 1'b0)?1'b1:1'b0);

// Setup/hold condition for : SI_QB is : ENSI_QB
wire ENSI_QB, ENTSI_QB;
assign ENSI_QB = (((TCLKEB_buf === 1'b0) && SE_QB_buf === 1'b1 && (((PIPEMEB_buf === 1'b1 && BISTEB_buf === 1'b0) || (TPIPEMEB_buf === 1'b1 && BISTEB_buf === 1'b1)) || DFTCLKEN_buf === 1'b1))?1'b1:1'b0);
assign ENTSI_QB = (((TCLKEB_buf === 1'b1) && SE_QB_buf === 1'b1 && (((PIPEMEB_buf === 1'b1 && BISTEB_buf === 1'b0) || (TPIPEMEB_buf === 1'b1 && BISTEB_buf === 1'b1)) || DFTCLKEN_buf === 1'b1))?1'b1:1'b0);

// Setup/hold condition for : SI_DB is : ENSI_DB
wire ENSI_DB, ENTSI_DB;
assign ENSI_DB = (( (LS_buf === 1'b0) && (TCLKEB_buf === 1'b0) && SE_INB_buf === 1'b1 && (MEB_pre !== 1'b0 || DFTCLKEN_buf === 1'b1))?1'b1:1'b0);
assign ENTSI_DB = (( (LS_buf === 1'b0) && (TCLKEB_buf === 1'b1) && SE_INB_buf === 1'b1 && (MEB_pre !== 1'b0 || DFTCLKEN_buf === 1'b1))?1'b1:1'b0);

// Setup/hold condition for : SI_CNTRB is : ENSI_CNTRB
wire ENSI_CNTRB, ENTSI_CNTRB;
assign ENSI_CNTRB = (( (LS_buf === 1'b0) && (TCLKEB_buf === 1'b0) && SE_INB_buf === 1'b1 && (MEB_pre !== 1'b0 || DFTCLKEN_buf === 1'b1))?1'b1:1'b0);
assign ENTSI_CNTRB = (( (LS_buf === 1'b0) && (TCLKEB_buf === 1'b1) && SE_INB_buf === 1'b1 && (MEB_pre !== 1'b0 || DFTCLKEN_buf === 1'b1))?1'b1:1'b0);

// Setup/hold condition for : SE_INB is : ENSE_INB
wire ENSE_INB, ENTSE_INB;
assign ENSE_INB = (( (LS_buf === 1'b0) && (TCLKEB_buf === 1'b0))?1'b1:1'b0);
assign ENTSE_INB = (( (LS_buf === 1'b0) && (TCLKEB_buf === 1'b1))?1'b1:1'b0);

// Setup/hold condition for : SE_QB, ENSE_QB
wire ENSE_QB, ENTSE_QB;
assign ENSE_QB = (((TCLKEB_buf === 1'b0) && (((PIPEMEB_buf === 1'b1 && BISTEB_buf === 1'b0) || (TPIPEMEB_buf === 1'b1 && BISTEB_buf === 1'b1)) || DFTCLKEN_buf === 1'b1))?1'b1:1'b0);
assign ENTSE_QB = (((TCLKEB_buf === 1'b1) && (((PIPEMEB_buf === 1'b1 && BISTEB_buf === 1'b0) || (TPIPEMEB_buf === 1'b1 && BISTEB_buf === 1'b1)) || DFTCLKEN_buf === 1'b1))?1'b1:1'b0);

`endif // endif of VIRAGE_FAST_VERILOG
// Setup/hold condition for Clock Select pin: TCLKEB is : ENTCLKEB
wire ENTCLKEB, ENTTCLKEB;
assign ENTCLKEB = ((((ENBISTEB_regB === 1'b1 && DFTMASK_buf === 1'b0 && ADRB_valid) || (DFTMASK_buf === 1'b1 && SE_INB_buf === 1'b0))  && (LS_buf === 1'b0))?1'b1:1'b0);
assign ENTTCLKEB = ((((ENTBISTEB_regB === 1'b1 && DFTMASK_buf === 1'b0 && TADRB_valid) || (DFTMASK_buf === 1'b1 && SE_INB_buf === 1'b0))  && (LS_buf === 1'b0))?1'b1:1'b0);


reg MEA_buf_L;
reg WEA_buf_L;
`ifdef VIRAGE_FAST_VERILOG
`else
`endif // endif of VIRAGE_FAST_VERILOG
reg MEB_buf_L;
reg WEB_buf_L;
`ifdef VIRAGE_FAST_VERILOG
`else
`endif // endif of VIRAGE_FAST_VERILOG
wire adr_same_a;
wire adr_valid_a;
`ifdef VIRAGE_FAST_VERILOG
`else
wire we_activeA;
wire me_activeA;
wire both_tclke_active; 
wire both_tclke_dactive;
wire tclkeA_active_tclkeB_dactive;
wire tclkeB_active_tclkeA_dactive;
wire ENCLKACLKBrec;
wire ENTCLKATCLKBrec;
wire ENCLKBCLKArec;
wire ENTCLKBTCLKArec;
wire ENCLKATCLKBrec;
wire ENTCLKBCLKArec;
wire ENCLKBTCLKArec;
wire ENTCLKACLKBrec;
assign adr_same_a = (((ADRA_old == ADRB_buf_L) && adr_valid_a) || (CLKA_tmp === 1'bx || CLKB_tmp === 1'bx) || ((ADRA_old^ADRA_old) !== 0) || ((ADRB_buf_L^ADRB_buf_L) !== 0)) ? 1'b1:1'b0;
`endif // endif of VIRAGE_FAST_VERILOG
assign adr_valid_a = ( ADRFLAGA && !BISTEA_buf ) || ( TADRFLAGA && BISTEA_buf );
`ifdef VIRAGE_FAST_VERILOG
`else
assign both_tclke_active = ( (TCLKEA_buf === 1'b1) && (TCLKEB_buf === 1'b1 ) && (DFTMASK_buf === 1'b0)) ?1'b1:1'b0;
assign both_tclke_dactive = ( (TCLKEA_buf === 1'b0) && (TCLKEB_buf === 1'b0 ) && (DFTMASK_buf === 1'b0)) ?1'b1:1'b0;
assign tclkeA_active_tclkeB_dactive = ( (TCLKEA_buf === 1'b1) && (TCLKEB_buf === 1'b0 ) && (DFTMASK_buf === 1'b0)) ?1'b1:1'b0;
assign tclkeB_active_tclkeA_dactive = ( (TCLKEA_buf === 1'b0) && (TCLKEB_buf === 1'b1 ) && (DFTMASK_buf === 1'b0)) ?1'b1:1'b0;
`endif // endif of VIRAGE_FAST_VERILOG
`ifdef VIRAGE_FAST_VERILOG
`else
assign we_activeA = ( ( WEA_old === 1'b0 ) && ( WEB_buf_L === 1'b0 ))?1'b0:1'b1;
assign me_activeA = ( ( MEA_old !== 1'b0 ) && ( MEB_buf_L !== 1'b0 ) && (LS_buf === 1'b0))?1'b1:1'b0;
and u_rec_0 ( ENCLKBCLKArec, rise_time_same, adr_same_a, me_activeA, we_activeA, both_tclke_dactive);
and u1_rec_0 ( ENTCLKBTCLKArec, rise_time_same, adr_same_a, me_activeA, we_activeA, both_tclke_active);
and u2_rec_0 ( ENTCLKBCLKArec, rise_time_same, adr_same_a, me_activeA, we_activeA, tclkeB_active_tclkeA_dactive);
and u3_rec_0 ( ENCLKBTCLKArec, rise_time_same, adr_same_a, me_activeA, we_activeA, tclkeA_active_tclkeB_dactive);
`endif // endif of VIRAGE_FAST_VERILOG
wire adr_same_b;
wire adr_valid_b;
`ifdef VIRAGE_FAST_VERILOG
`else
wire we_activeB;
wire me_activeB;
assign adr_same_b = (((ADRB_old == ADRA_buf_L) && adr_valid_b) || (CLKB_tmp === 1'bx || CLKA_tmp === 1'bx) || ((ADRB_old^ADRB_old) !== 0) || ((ADRA_buf_L^ADRA_buf_L) !== 0)) ? 1'b1:1'b0;
`endif // endif of VIRAGE_FAST_VERILOG
assign adr_valid_b = ( ADRFLAGB && !BISTEB_buf ) || ( TADRFLAGB && BISTEB_buf );
`ifdef VIRAGE_FAST_VERILOG
`else
assign we_activeB = ( ( WEB_old === 1'b0 ) && ( WEA_buf_L === 1'b0 ))?1'b0:1'b1;
assign me_activeB = ( ( MEB_old !== 1'b0 ) && ( MEA_buf_L !== 1'b0 ) && (LS_buf === 1'b0))?1'b1:1'b0;
and u_rec_1 ( ENCLKACLKBrec, rise_time_same, adr_same_b, me_activeB, we_activeB, both_tclke_dactive);
and u1_rec_1 ( ENTCLKATCLKBrec, rise_time_same, adr_same_b, me_activeB, we_activeB, both_tclke_active);
and u2_rec_1 ( ENTCLKACLKBrec, rise_time_same, adr_same_b, me_activeB, we_activeB, tclkeA_active_tclkeB_dactive);
and u3_rec_1 ( ENCLKATCLKBrec, rise_time_same, adr_same_b, me_activeB, we_activeB, tclkeB_active_tclkeA_dactive);
`endif // endif of VIRAGE_FAST_VERILOG
wire LS_old;
reg flag_tclke_clkA;
wire DFTMASK_old;
wire DFTCLKEN_old;
reg DFTMASK_latchedA;
reg DFTMASK_latchedB;
reg flag_tclke_clkB;

`ifdef VIRAGE_FAST_VERILOG
`else
specify
 
  specparam
    Tac = 0.372,
    Tcax = 0.195,
    Tdc = 0.280,
    Tcdx = 1.107,
    Twc = 0.600,
    Tcwx = 0.195,
    Tmc = 0.351,
    Tcmx = 0.257,
    Tcsep = 2.812,
    Tcl = 1.197,
    Tcltest1 = 1.542,
    Tch = 0.339,
    Tchtest1 = 2.554,
    Tcc = 2.815,
    Tccvddmin = 3.700,
    Tccslow = 3.426,
    Tccdef = 2.815,
    Tccfast = 2.787,
    Tbdc = 1.684,
    Tbcdx = 0.242,
    Tbc = 2.906,
    Tcbx = 1.107,
    TT1C = 0.600,
    TCT1X = 1.618,
    Trmec = 0.600,
    Tcrmex = 1.908,
    Trmc = 1.158,
    Tcrmx = 1.908,
    Tdatc = 0.115,
    Tcdatx = 0.195,
    Tcaptc = 0.115,
    Tcaptx = 0.195,
    Tpmec = 0.379,
    Tpmex = 0.148,
    Ttclkec = 0.306,
    Ttclkex = 0.339,
    Tstc = 0.115,
    Tstx = 0.195,
    Tsiqc = 0.226,
    Tsiqx = 0.420,
    Tsidc = 0.271,
    Tsidx = 0.429,
    Tseqc = 1.941,
    Tseqx = 0.420,
    Tseinc = 2.906,
    Tseinx = 0.195,
    Tsicc = 0.172,
    Tsicx = 0.195,
    Tswtc = 0.848,
    Tswtx = 0.339,
    Tdftc = 1.987,
    Tdftx = 2.815,
    Trlsc = 0.237,
    Tflsc = 2.698,
    Tlsx = 0.354,
    Tcq = 2.478,
    Tcqx = 1.920,
    Tcqvddmin = 3.256,
    Tcqvddminx = 2.658,
    Tcqslow = 2.554,
    Tcqslowx = 1.992,
    Tcqdef = 2.478,
    Tcqdefx = 1.920,
    Tcqfast = 2.435,
    Tcqfastx = 1.879,
    Tcqtest1x = 1.992,
    Tcqswt = 2.149,
    Tcqswtx = 1.690,
    Tcqtest1 = 1.542,
    Tswtq = 2.527,
    Tcqp = 1.095,
    Tcqpx = 0.514,
    Tcsq = 1.650,
    Tcsd = 1.848,
    Tcsc = 0.842;
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[159]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[158]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[157]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[156]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[155]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[154]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[153]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[152]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[151]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[150]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[149]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[148]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[147]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[146]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[145]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[144]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[143]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[142]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[141]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[140]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[139]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[138]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[137]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[136]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[135]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[134]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[133]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[132]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[131]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[130]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[129]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[128]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[127]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[126]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[125]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[124]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[123]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[122]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[121]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[120]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[119]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[118]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[117]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[116]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[115]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[114]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[113]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[112]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[111]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[110]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[109]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[108]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[107]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[106]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[105]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[104]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[103]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[102]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[101]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[100]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[99]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[98]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[97]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[96]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[95]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[94]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[93]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[92]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[91]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[90]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[89]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[88]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[87]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[86]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[85]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[84]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[83]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[82]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[81]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[80]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[79]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[78]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[77]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[76]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[75]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[74]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[73]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[72]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[71]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[70]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[69]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[68]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[67]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[66]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[65]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[64]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[63]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[62]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[61]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[60]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[59]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[58]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[57]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[56]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[55]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[54]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[53]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[52]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[51]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[50]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[49]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[48]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[47]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[46]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[45]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[44]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[43]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[42]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[41]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[40]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[39]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[38]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[37]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[36]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[35]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[34]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[33]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[32]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[31]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[30]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[29]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[28]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[27]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[26]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[25]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[24]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[23]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[22]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[21]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[20]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[19]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[18]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[17]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[16]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[15]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[14]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[13]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[12]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[11]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[10]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[9]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[8]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[7]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[6]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[5]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[4]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[3]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[2]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[1]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[0]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[159]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[158]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[157]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[156]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[155]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[154]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[153]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[152]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[151]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[150]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[149]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[148]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[147]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[146]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[145]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[144]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[143]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[142]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[141]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[140]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[139]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[138]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[137]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[136]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[135]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[134]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[133]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[132]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[131]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[130]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[129]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[128]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[127]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[126]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[125]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[124]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[123]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[122]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[121]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[120]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[119]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[118]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[117]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[116]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[115]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[114]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[113]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[112]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[111]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[110]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[109]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[108]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[107]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[106]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[105]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[104]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[103]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[102]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[101]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[100]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[99]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[98]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[97]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[96]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[95]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[94]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[93]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[92]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[91]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[90]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[89]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[88]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[87]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[86]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[85]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[84]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[83]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[82]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[81]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[80]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[79]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[78]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[77]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[76]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[75]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[74]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[73]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[72]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[71]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[70]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[69]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[68]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[67]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[66]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[65]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[64]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[63]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[62]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[61]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[60]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[59]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[58]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[57]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[56]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[55]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[54]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[53]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[52]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[51]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[50]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[49]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[48]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[47]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[46]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[45]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[44]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[43]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[42]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[41]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[40]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[39]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[38]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[37]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[36]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[35]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[34]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[33]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[32]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[31]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[30]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[29]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[28]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[27]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[26]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[25]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[24]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[23]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[22]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[21]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[20]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[19]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[18]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[17]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[16]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[15]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[14]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[13]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[12]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[11]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[10]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[9]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[8]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[7]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[6]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[5]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[4]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[3]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[2]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[1]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[0]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[159]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[158]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[157]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[156]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[155]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[154]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[153]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[152]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[151]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[150]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[149]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[148]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[147]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[146]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[145]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[144]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[143]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[142]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[141]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[140]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[139]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[138]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[137]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[136]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[135]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[134]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[133]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[132]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[131]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[130]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[129]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[128]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[127]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[126]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[125]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[124]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[123]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[122]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[121]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[120]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[119]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[118]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[117]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[116]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[115]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[114]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[113]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[112]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[111]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[110]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[109]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[108]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[107]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[106]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[105]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[104]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[103]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[102]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[101]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[100]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[99]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[98]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[97]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[96]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[95]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[94]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[93]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[92]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[91]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[90]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[89]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[88]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[87]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[86]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[85]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[84]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[83]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[82]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[81]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[80]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[79]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[78]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[77]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[76]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[75]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[74]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[73]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[72]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[71]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[70]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[69]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[68]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[67]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[66]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[65]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[64]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[63]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[62]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[61]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[60]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[59]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[58]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[57]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[56]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[55]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[54]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[53]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[52]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[51]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[50]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[49]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[48]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[47]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[46]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[45]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[44]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[43]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[42]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[41]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[40]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[39]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[38]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[37]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[36]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[35]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[34]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[33]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[32]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[31]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[30]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[29]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[28]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[27]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[26]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[25]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[24]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[23]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[22]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[21]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[20]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[19]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[18]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[17]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[16]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[15]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[14]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[13]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[12]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[11]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[10]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[9]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[8]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[7]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[6]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[5]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[4]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[3]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[2]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[1]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[0]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[159]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[158]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[157]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[156]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[155]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[154]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[153]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[152]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[151]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[150]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[149]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[148]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[147]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[146]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[145]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[144]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[143]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[142]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[141]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[140]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[139]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[138]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[137]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[136]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[135]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[134]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[133]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[132]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[131]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[130]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[129]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[128]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[127]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[126]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[125]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[124]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[123]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[122]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[121]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[120]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[119]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[118]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[117]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[116]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[115]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[114]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[113]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[112]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[111]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[110]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[109]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[108]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[107]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[106]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[105]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[104]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[103]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[102]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[101]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[100]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[99]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[98]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[97]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[96]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[95]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[94]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[93]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[92]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[91]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[90]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[89]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[88]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[87]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[86]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[85]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[84]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[83]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[82]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[81]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[80]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[79]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[78]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[77]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[76]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[75]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[74]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[73]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[72]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[71]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[70]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[69]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[68]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[67]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[66]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[65]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[64]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[63]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[62]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[61]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[60]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[59]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[58]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[57]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[56]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[55]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[54]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[53]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[52]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[51]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[50]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[49]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[48]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[47]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[46]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[45]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[44]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[43]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[42]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[41]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[40]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[39]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[38]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[37]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[36]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[35]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[34]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[33]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[32]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[31]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[30]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[29]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[28]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[27]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[26]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[25]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[24]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[23]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[22]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[21]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[20]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[19]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[18]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[17]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[16]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[15]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[14]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[13]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[12]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[11]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[10]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[9]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[8]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[7]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[6]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[5]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[4]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[3]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[2]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[1]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[0]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[159]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[158]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[157]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[156]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[155]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[154]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[153]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[152]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[151]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[150]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[149]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[148]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[147]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[146]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[145]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[144]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[143]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[142]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[141]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[140]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[139]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[138]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[137]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[136]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[135]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[134]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[133]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[132]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[131]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[130]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[129]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[128]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[127]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[126]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[125]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[124]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[123]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[122]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[121]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[120]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[119]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[118]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[117]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[116]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[115]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[114]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[113]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[112]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[111]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[110]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[109]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[108]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[107]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[106]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[105]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[104]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[103]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[102]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[101]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[100]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[99]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[98]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[97]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[96]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[95]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[94]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[93]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[92]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[91]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[90]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[89]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[88]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[87]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[86]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[85]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[84]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[83]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[82]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[81]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[80]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[79]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[78]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[77]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[76]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[75]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[74]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[73]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[72]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[71]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[70]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[69]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[68]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[67]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[66]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[65]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[64]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[63]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[62]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[61]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[60]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[59]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[58]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[57]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[56]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[55]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[54]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[53]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[52]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[51]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[50]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[49]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[48]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[47]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[46]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[45]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[44]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[43]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[42]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[41]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[40]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[39]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[38]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[37]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[36]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[35]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[34]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[33]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[32]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[31]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[30]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[29]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[28]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[27]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[26]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[25]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[24]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[23]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[22]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[21]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[20]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[19]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[18]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[17]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[16]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[15]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[14]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[13]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[12]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[11]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[10]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[9]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[8]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[7]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[6]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[5]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[4]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[3]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[2]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[1]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge CLKA => (  QA[0]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[159]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[158]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[157]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[156]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[155]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[154]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[153]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[152]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[151]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[150]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[149]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[148]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[147]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[146]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[145]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[144]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[143]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[142]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[141]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[140]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[139]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[138]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[137]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[136]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[135]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[134]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[133]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[132]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[131]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[130]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[129]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[128]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[127]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[126]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[125]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[124]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[123]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[122]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[121]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[120]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[119]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[118]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[117]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[116]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[115]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[114]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[113]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[112]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[111]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[110]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[109]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[108]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[107]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[106]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[105]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[104]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[103]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[102]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[101]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[100]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[99]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[98]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[97]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[96]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[95]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[94]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[93]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[92]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[91]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[90]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[89]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[88]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[87]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[86]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[85]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[84]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[83]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[82]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[81]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[80]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[79]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[78]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[77]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[76]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[75]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[74]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[73]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[72]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[71]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[70]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[69]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[68]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[67]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[66]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[65]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[64]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[63]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[62]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[61]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[60]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[59]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[58]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[57]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[56]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[55]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[54]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[53]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[52]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[51]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[50]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[49]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[48]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[47]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[46]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[45]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[44]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[43]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[42]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[41]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[40]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[39]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[38]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[37]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[36]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[35]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[34]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[33]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[32]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[31]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[30]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[29]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[28]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[27]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[26]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[25]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[24]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[23]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[22]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[21]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[20]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[19]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[18]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[17]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[16]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[15]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[14]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[13]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[12]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[11]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[10]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[9]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[8]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[7]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[6]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[5]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[4]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[3]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[2]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[1]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge CLKA => (  QA[0]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[159]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[158]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[157]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[156]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[155]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[154]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[153]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[152]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[151]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[150]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[149]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[148]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[147]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[146]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[145]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[144]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[143]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[142]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[141]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[140]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[139]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[138]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[137]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[136]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[135]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[134]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[133]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[132]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[131]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[130]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[129]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[128]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[127]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[126]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[125]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[124]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[123]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[122]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[121]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[120]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[119]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[118]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[117]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[116]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[115]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[114]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[113]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[112]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[111]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[110]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[109]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[108]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[107]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[106]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[105]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[104]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[103]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[102]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[101]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[100]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[99]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[98]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[97]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[96]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[95]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[94]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[93]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[92]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[91]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[90]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[89]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[88]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[87]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[86]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[85]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[84]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[83]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[82]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[81]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[80]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[79]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[78]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[77]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[76]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[75]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[74]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[73]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[72]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[71]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[70]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[69]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[68]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[67]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[66]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[65]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[64]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[63]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[62]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[61]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[60]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[59]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[58]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[57]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[56]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[55]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[54]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[53]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[52]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[51]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[50]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[49]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[48]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[47]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[46]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[45]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[44]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[43]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[42]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[41]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[40]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[39]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[38]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[37]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[36]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[35]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[34]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[33]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[32]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[31]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[30]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[29]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[28]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[27]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[26]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[25]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[24]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[23]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[22]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[21]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[20]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[19]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[18]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[17]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[16]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[15]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[14]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[13]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[12]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[11]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[10]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[9]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[8]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[7]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[6]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[5]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[4]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[3]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[2]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[1]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & DFTMASK )
       ( posedge CLKA => (  QA[0]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[159]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[158]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[157]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[156]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[155]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[154]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[153]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[152]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[151]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[150]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[149]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[148]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[147]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[146]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[145]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[144]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[143]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[142]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[141]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[140]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[139]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[138]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[137]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[136]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[135]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[134]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[133]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[132]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[131]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[130]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[129]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[128]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[127]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[126]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[125]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[124]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[123]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[122]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[121]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[120]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[119]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[118]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[117]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[116]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[115]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[114]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[113]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[112]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[111]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[110]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[109]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[108]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[107]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[106]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[105]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[104]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[103]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[102]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[101]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[100]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[99]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[98]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[97]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[96]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[95]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[94]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[93]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[92]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[91]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[90]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[89]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[88]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[87]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[86]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[85]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[84]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[83]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[82]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[81]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[80]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[79]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[78]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[77]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[76]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[75]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[74]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[73]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[72]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[71]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[70]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[69]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[68]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[67]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[66]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[65]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[64]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[63]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[62]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[61]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[60]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[59]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[58]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[57]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[56]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[55]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[54]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[53]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[52]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[51]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[50]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[49]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[48]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[47]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[46]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[45]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[44]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[43]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[42]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[41]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[40]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[39]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[38]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[37]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[36]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[35]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[34]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[33]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[32]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[31]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[30]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[29]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[28]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[27]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[26]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[25]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[24]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[23]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[22]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[21]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[20]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[19]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[18]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[17]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[16]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[15]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[14]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[13]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[12]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[11]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[10]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[9]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[8]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[7]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[6]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[5]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[4]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[3]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[2]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[1]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge CLKA => (  QA[0]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[159]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[158]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[157]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[156]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[155]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[154]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[153]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[152]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[151]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[150]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[149]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[148]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[147]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[146]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[145]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[144]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[143]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[142]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[141]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[140]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[139]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[138]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[137]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[136]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[135]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[134]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[133]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[132]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[131]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[130]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[129]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[128]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[127]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[126]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[125]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[124]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[123]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[122]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[121]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[120]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[119]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[118]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[117]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[116]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[115]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[114]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[113]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[112]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[111]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[110]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[109]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[108]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[107]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[106]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[105]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[104]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[103]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[102]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[101]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[100]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[99]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[98]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[97]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[96]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[95]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[94]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[93]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[92]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[91]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[90]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[89]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[88]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[87]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[86]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[85]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[84]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[83]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[82]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[81]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[80]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[79]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[78]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[77]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[76]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[75]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[74]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[73]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[72]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[71]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[70]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[69]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[68]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[67]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[66]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[65]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[64]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[63]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[62]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[61]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[60]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[59]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[58]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[57]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[56]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[55]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[54]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[53]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[52]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[51]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[50]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[49]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[48]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[47]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[46]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[45]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[44]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[43]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[42]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[41]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[40]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[39]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[38]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[37]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[36]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[35]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[34]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[33]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[32]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[31]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[30]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[29]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[28]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[27]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[26]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[25]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[24]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[23]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[22]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[21]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[20]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[19]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[18]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[17]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[16]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[15]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[14]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[13]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[12]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[11]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[10]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[9]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[8]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[7]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[6]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[5]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[4]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[3]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[2]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[1]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & !RMEA & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[0]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[159]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[158]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[157]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[156]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[155]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[154]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[153]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[152]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[151]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[150]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[149]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[148]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[147]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[146]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[145]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[144]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[143]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[142]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[141]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[140]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[139]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[138]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[137]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[136]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[135]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[134]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[133]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[132]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[131]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[130]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[129]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[128]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[127]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[126]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[125]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[124]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[123]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[122]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[121]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[120]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[119]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[118]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[117]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[116]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[115]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[114]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[113]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[112]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[111]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[110]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[109]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[108]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[107]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[106]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[105]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[104]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[103]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[102]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[101]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[100]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[99]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[98]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[97]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[96]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[95]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[94]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[93]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[92]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[91]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[90]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[89]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[88]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[87]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[86]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[85]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[84]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[83]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[82]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[81]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[80]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[79]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[78]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[77]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[76]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[75]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[74]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[73]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[72]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[71]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[70]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[69]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[68]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[67]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[66]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[65]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[64]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[63]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[62]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[61]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[60]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[59]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[58]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[57]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[56]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[55]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[54]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[53]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[52]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[51]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[50]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[49]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[48]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[47]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[46]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[45]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[44]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[43]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[42]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[41]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[40]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[39]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[38]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[37]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[36]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[35]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[34]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[33]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[32]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[31]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[30]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[29]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[28]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[27]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[26]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[25]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[24]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[23]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[22]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[21]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[20]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[19]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[18]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[17]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[16]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[15]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[14]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[13]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[12]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[11]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[10]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[9]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[8]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[7]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[6]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[5]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[4]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[3]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[2]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[1]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[0]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[159]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[158]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[157]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[156]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[155]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[154]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[153]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[152]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[151]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[150]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[149]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[148]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[147]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[146]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[145]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[144]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[143]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[142]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[141]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[140]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[139]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[138]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[137]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[136]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[135]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[134]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[133]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[132]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[131]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[130]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[129]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[128]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[127]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[126]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[125]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[124]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[123]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[122]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[121]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[120]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[119]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[118]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[117]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[116]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[115]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[114]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[113]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[112]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[111]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[110]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[109]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[108]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[107]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[106]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[105]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[104]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[103]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[102]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[101]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[100]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[99]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[98]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[97]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[96]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[95]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[94]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[93]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[92]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[91]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[90]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[89]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[88]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[87]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[86]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[85]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[84]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[83]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[82]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[81]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[80]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[79]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[78]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[77]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[76]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[75]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[74]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[73]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[72]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[71]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[70]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[69]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[68]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[67]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[66]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[65]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[64]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[63]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[62]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[61]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[60]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[59]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[58]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[57]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[56]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[55]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[54]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[53]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[52]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[51]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[50]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[49]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[48]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[47]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[46]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[45]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[44]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[43]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[42]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[41]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[40]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[39]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[38]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[37]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[36]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[35]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[34]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[33]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[32]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[31]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[30]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[29]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[28]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[27]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[26]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[25]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[24]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[23]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[22]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[21]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[20]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[19]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[18]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[17]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[16]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[15]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[14]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[13]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[12]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[11]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[10]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[9]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[8]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[7]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[6]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[5]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[4]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[3]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[2]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[1]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  RMA[0] & !RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[0]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[159]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[158]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[157]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[156]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[155]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[154]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[153]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[152]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[151]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[150]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[149]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[148]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[147]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[146]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[145]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[144]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[143]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[142]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[141]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[140]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[139]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[138]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[137]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[136]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[135]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[134]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[133]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[132]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[131]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[130]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[129]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[128]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[127]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[126]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[125]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[124]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[123]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[122]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[121]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[120]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[119]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[118]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[117]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[116]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[115]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[114]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[113]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[112]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[111]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[110]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[109]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[108]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[107]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[106]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[105]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[104]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[103]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[102]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[101]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[100]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[99]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[98]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[97]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[96]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[95]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[94]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[93]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[92]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[91]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[90]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[89]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[88]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[87]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[86]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[85]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[84]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[83]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[82]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[81]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[80]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[79]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[78]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[77]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[76]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[75]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[74]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[73]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[72]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[71]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[70]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[69]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[68]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[67]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[66]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[65]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[64]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[63]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[62]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[61]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[60]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[59]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[58]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[57]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[56]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[55]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[54]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[53]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[52]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[51]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[50]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[49]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[48]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[47]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[46]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[45]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[44]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[43]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[42]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[41]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[40]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[39]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[38]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[37]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[36]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[35]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[34]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[33]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[32]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[31]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[30]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[29]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[28]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[27]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[26]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[25]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[24]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[23]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[22]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[21]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[20]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[19]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[18]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[17]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[16]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[15]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[14]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[13]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[12]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[11]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[10]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[9]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[8]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[7]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[6]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[5]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[4]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[3]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[2]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[1]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  !RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[0]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[159]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[158]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[157]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[156]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[155]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[154]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[153]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[152]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[151]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[150]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[149]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[148]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[147]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[146]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[145]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[144]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[143]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[142]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[141]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[140]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[139]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[138]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[137]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[136]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[135]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[134]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[133]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[132]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[131]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[130]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[129]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[128]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[127]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[126]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[125]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[124]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[123]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[122]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[121]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[120]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[119]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[118]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[117]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[116]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[115]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[114]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[113]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[112]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[111]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[110]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[109]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[108]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[107]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[106]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[105]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[104]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[103]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[102]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[101]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[100]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[99]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[98]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[97]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[96]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[95]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[94]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[93]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[92]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[91]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[90]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[89]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[88]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[87]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[86]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[85]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[84]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[83]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[82]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[81]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[80]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[79]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[78]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[77]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[76]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[75]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[74]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[73]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[72]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[71]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[70]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[69]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[68]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[67]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[66]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[65]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[64]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[63]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[62]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[61]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[60]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[59]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[58]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[57]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[56]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[55]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[54]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[53]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[52]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[51]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[50]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[49]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[48]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[47]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[46]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[45]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[44]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[43]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[42]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[41]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[40]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[39]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[38]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[37]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[36]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[35]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[34]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[33]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[32]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[31]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[30]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[29]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[28]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[27]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[26]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[25]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[24]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[23]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[22]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[21]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[20]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[19]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[18]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[17]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[16]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[15]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[14]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[13]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[12]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[11]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[10]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[9]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[8]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[7]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[6]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[5]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[4]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[3]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[2]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[1]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & RMEA &  RMA[0] & RMA[1] & !RMA[2] & !RMA[3]  & !LS & !DFTMASK & !TEST1A )
       ( posedge TCLKA => (  QA[0]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[159]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[158]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[157]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[156]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[155]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[154]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[153]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[152]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[151]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[150]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[149]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[148]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[147]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[146]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[145]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[144]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[143]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[142]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[141]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[140]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[139]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[138]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[137]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[136]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[135]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[134]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[133]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[132]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[131]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[130]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[129]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[128]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[127]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[126]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[125]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[124]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[123]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[122]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[121]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[120]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[119]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[118]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[117]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[116]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[115]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[114]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[113]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[112]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[111]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[110]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[109]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[108]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[107]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[106]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[105]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[104]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[103]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[102]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[101]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[100]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[99]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[98]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[97]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[96]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[95]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[94]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[93]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[92]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[91]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[90]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[89]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[88]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[87]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[86]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[85]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[84]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[83]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[82]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[81]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[80]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[79]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[78]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[77]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[76]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[75]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[74]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[73]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[72]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[71]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[70]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[69]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[68]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[67]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[66]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[65]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[64]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[63]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[62]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[61]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[60]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[59]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[58]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[57]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[56]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[55]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[54]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[53]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[52]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[51]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[50]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[49]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[48]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[47]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[46]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[45]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[44]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[43]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[42]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[41]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[40]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[39]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[38]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[37]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[36]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[35]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[34]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[33]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[32]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[31]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[30]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[29]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[28]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[27]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[26]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[25]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[24]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[23]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[22]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[21]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[20]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[19]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[18]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[17]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[16]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[15]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[14]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[13]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[12]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[11]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[10]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[9]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[8]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[7]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[6]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[5]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[4]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[3]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[2]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[1]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( posedge TCLKA => (  QA[0]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[159]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[158]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[157]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[156]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[155]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[154]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[153]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[152]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[151]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[150]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[149]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[148]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[147]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[146]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[145]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[144]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[143]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[142]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[141]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[140]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[139]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[138]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[137]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[136]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[135]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[134]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[133]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[132]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[131]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[130]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[129]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[128]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[127]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[126]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[125]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[124]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[123]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[122]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[121]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[120]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[119]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[118]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[117]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[116]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[115]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[114]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[113]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[112]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[111]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[110]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[109]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[108]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[107]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[106]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[105]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[104]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[103]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[102]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[101]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[100]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[99]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[98]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[97]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[96]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[95]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[94]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[93]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[92]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[91]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[90]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[89]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[88]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[87]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[86]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[85]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[84]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[83]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[82]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[81]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[80]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[79]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[78]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[77]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[76]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[75]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[74]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[73]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[72]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[71]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[70]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[69]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[68]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[67]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[66]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[65]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[64]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[63]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[62]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[61]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[60]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[59]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[58]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[57]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[56]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[55]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[54]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[53]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[52]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[51]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[50]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[49]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[48]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[47]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[46]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[45]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[44]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[43]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[42]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[41]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[40]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[39]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[38]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[37]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[36]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[35]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[34]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[33]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[32]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[31]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[30]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[29]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[28]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[27]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[26]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[25]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[24]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[23]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[22]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[21]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[20]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[19]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[18]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[17]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[16]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[15]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[14]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[13]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[12]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[11]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[10]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[9]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[8]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[7]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[6]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[5]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[4]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[3]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[2]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[1]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & DFTMASK )
       ( posedge TCLKA => (  QA[0]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[159]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[158]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[157]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[156]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[155]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[154]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[153]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[152]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[151]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[150]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[149]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[148]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[147]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[146]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[145]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[144]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[143]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[142]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[141]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[140]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[139]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[138]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[137]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[136]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[135]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[134]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[133]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[132]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[131]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[130]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[129]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[128]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[127]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[126]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[125]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[124]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[123]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[122]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[121]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[120]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[119]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[118]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[117]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[116]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[115]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[114]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[113]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[112]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[111]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[110]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[109]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[108]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[107]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[106]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[105]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[104]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[103]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[102]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[101]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[100]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[99]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[98]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[97]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[96]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[95]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[94]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[93]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[92]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[91]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[90]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[89]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[88]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[87]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[86]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[85]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[84]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[83]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[82]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[81]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[80]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[79]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[78]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[77]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[76]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[75]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[74]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[73]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[72]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[71]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[70]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[69]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[68]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[67]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[66]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[65]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[64]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[63]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[62]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[61]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[60]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[59]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[58]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[57]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[56]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[55]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[54]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[53]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[52]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[51]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[50]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[49]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[48]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[47]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[46]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[45]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[44]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[43]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[42]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[41]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[40]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[39]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[38]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[37]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[36]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[35]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[34]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[33]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[32]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[31]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[30]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[29]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[28]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[27]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[26]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[25]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[24]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[23]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[22]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[21]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[20]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[19]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[18]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[17]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[16]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[15]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[14]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[13]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[12]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[11]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[10]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[9]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[8]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[7]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[6]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[5]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[4]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[3]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[2]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[1]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEA & !LS & !DFTMASK & TEST1A )
       ( negedge TCLKA => (  QA[0]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS )
       ( posedge DFTMASK => (  QA[159]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[158]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[157]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[156]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[155]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[154]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[153]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[152]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[151]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[150]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[149]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[148]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[147]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[146]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[145]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[144]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[143]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[142]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[141]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[140]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[139]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[138]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[137]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[136]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[135]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[134]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[133]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[132]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[131]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[130]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[129]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[128]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[127]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[126]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[125]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[124]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[123]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[122]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[121]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[120]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[119]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[118]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[117]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[116]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[115]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[114]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[113]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[112]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[111]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[110]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[109]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[108]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[107]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[106]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[105]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[104]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[103]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[102]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[101]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[100]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[99]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[98]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[97]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[96]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[95]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[94]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[93]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[92]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[91]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[90]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[89]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[88]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[87]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[86]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[85]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[84]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[83]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[82]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[81]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[80]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[79]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[78]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[77]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[76]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[75]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[74]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[73]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[72]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[71]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[70]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[69]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[68]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[67]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[66]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[65]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[64]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[63]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[62]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[61]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[60]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[59]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[58]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[57]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[56]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[55]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[54]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[53]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[52]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[51]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[50]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[49]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[48]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[47]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[46]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[45]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[44]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[43]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[42]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[41]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[40]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[39]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[38]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[37]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[36]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[35]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[34]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[33]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[32]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[31]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[30]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[29]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[28]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[27]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[26]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[25]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[24]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[23]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[22]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[21]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[20]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[19]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[18]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[17]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[16]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[15]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[14]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[13]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[12]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[11]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[10]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[9]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[8]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[7]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[6]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[5]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[4]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[3]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[2]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[1]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QA[0]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[159]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[158]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[157]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[156]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[155]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[154]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[153]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[152]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[151]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[150]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[149]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[148]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[147]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[146]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[145]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[144]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[143]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[142]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[141]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[140]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[139]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[138]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[137]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[136]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[135]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[134]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[133]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[132]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[131]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[130]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[129]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[128]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[127]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[126]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[125]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[124]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[123]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[122]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[121]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[120]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[119]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[118]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[117]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[116]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[115]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[114]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[113]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[112]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[111]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[110]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[109]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[108]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[107]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[106]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[105]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[104]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[103]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[102]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[101]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[100]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[99]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[98]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[97]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[96]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[95]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[94]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[93]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[92]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[91]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[90]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[89]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[88]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[87]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[86]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[85]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[84]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[83]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[82]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[81]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[80]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[79]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[78]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[77]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[76]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[75]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[74]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[73]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[72]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[71]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[70]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[69]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[68]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[67]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[66]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[65]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[64]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[63]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[62]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[61]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[60]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[59]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[58]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[57]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[56]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[55]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[54]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[53]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[52]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[51]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[50]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[49]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[48]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[47]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[46]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[45]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[44]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[43]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[42]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[41]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[40]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[39]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[38]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[37]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[36]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[35]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[34]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[33]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[32]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[31]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[30]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[29]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[28]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[27]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[26]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[25]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[24]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[23]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[22]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[21]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[20]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[19]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[18]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[17]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[16]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[15]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[14]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[13]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[12]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[11]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[10]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[9]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[8]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[7]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[6]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[5]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[4]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[3]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[2]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[1]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEA )
       ( posedge CLKA => (  QPA[0]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[159]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[158]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[157]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[156]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[155]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[154]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[153]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[152]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[151]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[150]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[149]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[148]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[147]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[146]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[145]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[144]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[143]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[142]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[141]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[140]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[139]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[138]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[137]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[136]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[135]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[134]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[133]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[132]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[131]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[130]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[129]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[128]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[127]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[126]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[125]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[124]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[123]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[122]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[121]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[120]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[119]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[118]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[117]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[116]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[115]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[114]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[113]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[112]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[111]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[110]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[109]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[108]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[107]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[106]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[105]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[104]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[103]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[102]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[101]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[100]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[99]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[98]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[97]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[96]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[95]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[94]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[93]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[92]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[91]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[90]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[89]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[88]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[87]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[86]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[85]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[84]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[83]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[82]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[81]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[80]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[79]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[78]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[77]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[76]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[75]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[74]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[73]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[72]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[71]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[70]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[69]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[68]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[67]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[66]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[65]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[64]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[63]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[62]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[61]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[60]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[59]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[58]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[57]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[56]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[55]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[54]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[53]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[52]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[51]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[50]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[49]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[48]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[47]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[46]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[45]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[44]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[43]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[42]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[41]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[40]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[39]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[38]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[37]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[36]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[35]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[34]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[33]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[32]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[31]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[30]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[29]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[28]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[27]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[26]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[25]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[24]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[23]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[22]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[21]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[20]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[19]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[18]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[17]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[16]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[15]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[14]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[13]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[12]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[11]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[10]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[9]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[8]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[7]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[6]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[5]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[4]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[3]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[2]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[1]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEA )
       ( posedge TCLKA => (  QPA[0]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !LS & !TCLKEA )
       ( posedge CLKA => (  SO_QA  : 1'bx )) = (  Tcsq, Tcsq );
     if ( !LS & TCLKEA )
       ( posedge TCLKA => (  SO_QA  : 1'bx )) = (  Tcsq, Tcsq );
     if ( !LS & !TCLKEA )
       ( posedge CLKA => (  SO_DA  : 1'bx )) = (  Tcsd, Tcsd );
     if ( !LS & TCLKEA )
       ( posedge TCLKA => (  SO_DA  : 1'bx )) = (  Tcsd, Tcsd );
     if ( !LS & !TCLKEA )
       ( posedge CLKA => (  SO_CNTRA  : 1'bx )) = (  Tcsc, Tcsc );
     if ( !LS & TCLKEA )
       ( posedge TCLKA => (  SO_CNTRA  : 1'bx )) = (  Tcsc, Tcsc );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[159]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[158]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[157]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[156]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[155]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[154]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[153]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[152]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[151]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[150]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[149]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[148]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[147]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[146]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[145]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[144]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[143]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[142]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[141]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[140]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[139]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[138]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[137]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[136]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[135]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[134]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[133]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[132]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[131]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[130]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[129]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[128]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[127]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[126]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[125]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[124]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[123]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[122]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[121]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[120]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[119]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[118]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[117]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[116]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[115]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[114]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[113]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[112]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[111]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[110]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[109]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[108]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[107]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[106]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[105]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[104]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[103]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[102]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[101]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[100]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[99]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[98]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[97]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[96]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[95]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[94]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[93]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[92]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[91]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[90]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[89]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[88]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[87]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[86]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[85]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[84]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[83]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[82]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[81]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[80]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[79]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[78]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[77]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[76]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[75]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[74]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[73]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[72]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[71]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[70]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[69]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[68]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[67]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[66]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[65]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[64]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[63]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[62]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[61]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[60]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[59]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[58]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[57]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[56]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[55]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[54]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[53]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[52]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[51]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[50]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[49]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[48]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[47]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[46]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[45]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[44]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[43]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[42]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[41]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[40]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[39]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[38]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[37]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[36]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[35]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[34]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[33]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[32]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[31]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[30]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[29]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[28]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[27]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[26]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[25]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[24]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[23]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[22]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[21]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[20]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[19]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[18]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[17]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[16]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[15]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[14]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[13]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[12]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[11]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[10]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[9]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[8]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[7]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[6]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[5]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[4]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[3]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[2]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[1]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[0]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[159]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[158]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[157]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[156]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[155]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[154]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[153]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[152]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[151]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[150]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[149]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[148]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[147]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[146]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[145]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[144]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[143]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[142]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[141]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[140]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[139]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[138]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[137]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[136]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[135]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[134]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[133]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[132]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[131]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[130]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[129]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[128]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[127]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[126]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[125]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[124]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[123]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[122]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[121]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[120]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[119]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[118]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[117]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[116]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[115]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[114]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[113]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[112]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[111]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[110]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[109]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[108]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[107]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[106]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[105]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[104]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[103]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[102]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[101]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[100]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[99]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[98]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[97]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[96]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[95]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[94]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[93]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[92]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[91]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[90]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[89]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[88]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[87]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[86]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[85]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[84]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[83]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[82]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[81]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[80]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[79]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[78]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[77]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[76]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[75]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[74]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[73]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[72]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[71]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[70]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[69]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[68]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[67]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[66]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[65]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[64]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[63]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[62]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[61]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[60]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[59]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[58]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[57]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[56]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[55]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[54]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[53]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[52]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[51]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[50]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[49]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[48]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[47]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[46]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[45]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[44]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[43]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[42]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[41]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[40]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[39]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[38]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[37]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[36]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[35]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[34]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[33]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[32]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[31]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[30]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[29]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[28]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[27]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[26]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[25]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[24]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[23]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[22]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[21]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[20]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[19]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[18]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[17]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[16]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[15]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[14]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[13]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[12]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[11]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[10]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[9]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[8]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[7]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[6]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[5]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[4]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[3]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[2]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[1]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[0]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[159]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[158]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[157]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[156]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[155]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[154]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[153]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[152]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[151]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[150]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[149]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[148]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[147]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[146]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[145]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[144]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[143]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[142]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[141]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[140]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[139]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[138]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[137]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[136]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[135]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[134]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[133]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[132]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[131]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[130]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[129]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[128]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[127]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[126]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[125]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[124]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[123]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[122]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[121]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[120]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[119]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[118]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[117]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[116]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[115]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[114]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[113]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[112]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[111]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[110]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[109]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[108]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[107]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[106]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[105]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[104]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[103]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[102]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[101]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[100]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[99]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[98]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[97]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[96]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[95]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[94]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[93]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[92]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[91]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[90]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[89]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[88]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[87]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[86]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[85]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[84]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[83]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[82]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[81]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[80]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[79]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[78]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[77]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[76]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[75]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[74]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[73]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[72]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[71]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[70]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[69]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[68]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[67]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[66]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[65]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[64]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[63]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[62]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[61]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[60]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[59]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[58]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[57]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[56]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[55]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[54]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[53]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[52]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[51]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[50]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[49]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[48]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[47]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[46]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[45]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[44]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[43]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[42]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[41]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[40]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[39]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[38]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[37]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[36]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[35]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[34]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[33]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[32]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[31]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[30]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[29]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[28]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[27]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[26]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[25]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[24]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[23]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[22]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[21]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[20]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[19]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[18]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[17]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[16]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[15]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[14]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[13]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[12]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[11]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[10]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[9]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[8]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[7]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[6]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[5]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[4]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[3]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[2]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[1]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[0]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[159]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[158]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[157]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[156]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[155]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[154]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[153]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[152]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[151]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[150]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[149]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[148]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[147]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[146]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[145]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[144]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[143]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[142]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[141]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[140]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[139]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[138]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[137]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[136]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[135]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[134]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[133]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[132]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[131]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[130]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[129]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[128]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[127]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[126]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[125]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[124]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[123]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[122]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[121]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[120]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[119]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[118]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[117]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[116]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[115]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[114]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[113]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[112]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[111]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[110]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[109]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[108]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[107]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[106]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[105]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[104]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[103]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[102]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[101]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[100]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[99]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[98]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[97]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[96]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[95]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[94]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[93]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[92]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[91]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[90]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[89]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[88]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[87]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[86]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[85]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[84]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[83]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[82]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[81]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[80]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[79]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[78]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[77]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[76]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[75]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[74]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[73]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[72]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[71]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[70]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[69]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[68]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[67]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[66]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[65]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[64]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[63]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[62]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[61]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[60]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[59]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[58]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[57]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[56]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[55]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[54]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[53]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[52]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[51]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[50]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[49]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[48]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[47]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[46]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[45]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[44]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[43]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[42]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[41]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[40]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[39]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[38]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[37]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[36]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[35]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[34]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[33]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[32]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[31]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[30]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[29]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[28]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[27]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[26]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[25]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[24]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[23]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[22]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[21]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[20]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[19]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[18]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[17]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[16]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[15]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[14]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[13]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[12]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[11]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[10]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[9]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[8]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[7]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[6]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[5]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[4]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[3]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[2]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[1]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[0]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[159]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[158]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[157]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[156]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[155]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[154]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[153]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[152]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[151]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[150]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[149]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[148]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[147]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[146]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[145]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[144]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[143]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[142]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[141]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[140]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[139]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[138]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[137]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[136]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[135]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[134]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[133]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[132]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[131]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[130]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[129]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[128]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[127]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[126]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[125]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[124]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[123]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[122]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[121]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[120]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[119]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[118]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[117]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[116]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[115]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[114]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[113]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[112]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[111]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[110]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[109]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[108]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[107]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[106]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[105]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[104]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[103]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[102]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[101]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[100]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[99]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[98]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[97]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[96]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[95]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[94]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[93]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[92]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[91]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[90]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[89]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[88]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[87]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[86]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[85]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[84]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[83]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[82]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[81]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[80]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[79]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[78]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[77]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[76]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[75]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[74]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[73]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[72]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[71]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[70]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[69]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[68]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[67]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[66]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[65]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[64]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[63]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[62]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[61]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[60]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[59]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[58]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[57]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[56]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[55]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[54]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[53]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[52]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[51]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[50]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[49]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[48]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[47]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[46]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[45]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[44]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[43]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[42]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[41]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[40]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[39]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[38]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[37]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[36]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[35]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[34]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[33]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[32]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[31]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[30]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[29]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[28]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[27]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[26]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[25]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[24]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[23]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[22]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[21]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[20]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[19]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[18]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[17]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[16]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[15]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[14]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[13]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[12]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[11]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[10]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[9]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[8]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[7]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[6]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[5]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[4]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[3]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[2]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[1]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge CLKB => (  QB[0]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[159]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[158]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[157]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[156]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[155]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[154]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[153]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[152]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[151]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[150]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[149]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[148]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[147]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[146]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[145]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[144]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[143]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[142]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[141]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[140]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[139]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[138]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[137]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[136]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[135]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[134]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[133]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[132]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[131]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[130]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[129]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[128]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[127]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[126]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[125]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[124]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[123]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[122]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[121]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[120]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[119]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[118]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[117]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[116]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[115]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[114]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[113]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[112]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[111]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[110]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[109]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[108]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[107]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[106]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[105]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[104]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[103]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[102]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[101]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[100]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[99]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[98]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[97]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[96]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[95]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[94]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[93]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[92]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[91]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[90]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[89]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[88]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[87]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[86]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[85]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[84]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[83]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[82]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[81]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[80]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[79]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[78]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[77]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[76]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[75]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[74]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[73]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[72]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[71]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[70]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[69]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[68]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[67]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[66]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[65]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[64]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[63]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[62]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[61]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[60]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[59]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[58]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[57]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[56]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[55]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[54]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[53]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[52]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[51]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[50]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[49]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[48]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[47]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[46]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[45]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[44]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[43]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[42]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[41]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[40]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[39]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[38]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[37]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[36]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[35]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[34]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[33]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[32]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[31]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[30]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[29]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[28]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[27]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[26]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[25]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[24]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[23]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[22]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[21]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[20]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[19]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[18]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[17]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[16]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[15]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[14]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[13]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[12]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[11]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[10]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[9]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[8]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[7]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[6]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[5]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[4]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[3]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[2]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[1]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge CLKB => (  QB[0]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[159]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[158]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[157]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[156]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[155]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[154]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[153]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[152]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[151]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[150]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[149]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[148]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[147]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[146]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[145]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[144]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[143]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[142]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[141]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[140]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[139]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[138]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[137]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[136]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[135]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[134]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[133]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[132]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[131]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[130]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[129]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[128]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[127]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[126]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[125]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[124]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[123]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[122]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[121]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[120]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[119]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[118]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[117]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[116]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[115]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[114]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[113]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[112]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[111]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[110]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[109]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[108]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[107]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[106]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[105]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[104]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[103]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[102]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[101]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[100]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[99]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[98]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[97]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[96]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[95]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[94]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[93]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[92]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[91]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[90]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[89]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[88]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[87]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[86]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[85]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[84]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[83]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[82]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[81]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[80]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[79]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[78]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[77]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[76]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[75]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[74]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[73]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[72]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[71]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[70]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[69]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[68]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[67]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[66]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[65]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[64]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[63]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[62]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[61]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[60]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[59]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[58]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[57]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[56]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[55]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[54]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[53]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[52]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[51]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[50]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[49]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[48]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[47]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[46]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[45]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[44]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[43]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[42]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[41]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[40]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[39]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[38]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[37]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[36]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[35]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[34]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[33]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[32]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[31]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[30]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[29]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[28]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[27]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[26]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[25]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[24]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[23]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[22]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[21]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[20]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[19]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[18]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[17]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[16]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[15]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[14]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[13]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[12]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[11]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[10]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[9]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[8]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[7]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[6]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[5]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[4]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[3]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[2]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[1]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & DFTMASK )
       ( posedge CLKB => (  QB[0]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[159]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[158]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[157]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[156]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[155]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[154]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[153]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[152]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[151]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[150]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[149]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[148]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[147]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[146]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[145]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[144]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[143]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[142]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[141]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[140]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[139]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[138]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[137]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[136]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[135]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[134]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[133]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[132]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[131]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[130]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[129]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[128]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[127]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[126]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[125]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[124]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[123]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[122]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[121]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[120]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[119]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[118]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[117]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[116]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[115]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[114]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[113]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[112]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[111]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[110]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[109]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[108]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[107]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[106]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[105]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[104]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[103]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[102]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[101]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[100]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[99]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[98]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[97]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[96]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[95]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[94]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[93]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[92]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[91]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[90]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[89]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[88]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[87]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[86]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[85]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[84]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[83]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[82]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[81]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[80]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[79]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[78]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[77]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[76]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[75]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[74]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[73]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[72]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[71]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[70]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[69]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[68]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[67]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[66]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[65]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[64]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[63]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[62]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[61]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[60]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[59]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[58]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[57]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[56]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[55]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[54]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[53]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[52]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[51]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[50]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[49]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[48]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[47]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[46]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[45]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[44]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[43]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[42]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[41]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[40]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[39]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[38]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[37]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[36]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[35]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[34]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[33]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[32]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[31]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[30]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[29]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[28]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[27]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[26]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[25]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[24]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[23]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[22]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[21]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[20]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[19]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[18]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[17]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[16]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[15]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[14]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[13]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[12]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[11]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[10]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[9]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[8]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[7]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[6]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[5]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[4]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[3]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[2]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[1]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge CLKB => (  QB[0]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[159]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[158]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[157]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[156]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[155]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[154]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[153]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[152]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[151]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[150]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[149]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[148]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[147]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[146]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[145]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[144]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[143]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[142]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[141]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[140]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[139]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[138]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[137]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[136]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[135]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[134]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[133]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[132]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[131]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[130]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[129]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[128]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[127]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[126]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[125]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[124]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[123]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[122]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[121]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[120]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[119]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[118]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[117]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[116]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[115]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[114]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[113]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[112]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[111]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[110]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[109]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[108]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[107]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[106]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[105]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[104]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[103]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[102]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[101]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[100]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[99]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[98]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[97]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[96]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[95]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[94]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[93]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[92]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[91]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[90]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[89]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[88]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[87]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[86]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[85]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[84]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[83]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[82]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[81]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[80]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[79]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[78]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[77]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[76]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[75]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[74]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[73]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[72]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[71]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[70]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[69]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[68]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[67]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[66]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[65]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[64]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[63]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[62]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[61]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[60]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[59]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[58]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[57]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[56]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[55]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[54]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[53]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[52]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[51]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[50]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[49]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[48]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[47]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[46]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[45]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[44]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[43]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[42]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[41]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[40]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[39]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[38]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[37]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[36]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[35]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[34]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[33]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[32]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[31]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[30]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[29]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[28]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[27]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[26]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[25]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[24]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[23]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[22]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[21]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[20]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[19]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[18]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[17]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[16]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[15]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[14]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[13]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[12]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[11]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[10]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[9]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[8]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[7]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[6]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[5]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[4]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[3]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[2]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[1]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & !RMEB & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[0]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[159]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[158]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[157]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[156]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[155]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[154]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[153]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[152]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[151]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[150]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[149]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[148]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[147]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[146]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[145]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[144]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[143]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[142]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[141]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[140]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[139]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[138]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[137]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[136]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[135]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[134]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[133]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[132]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[131]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[130]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[129]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[128]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[127]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[126]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[125]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[124]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[123]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[122]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[121]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[120]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[119]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[118]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[117]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[116]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[115]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[114]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[113]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[112]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[111]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[110]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[109]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[108]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[107]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[106]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[105]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[104]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[103]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[102]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[101]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[100]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[99]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[98]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[97]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[96]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[95]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[94]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[93]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[92]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[91]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[90]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[89]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[88]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[87]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[86]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[85]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[84]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[83]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[82]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[81]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[80]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[79]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[78]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[77]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[76]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[75]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[74]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[73]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[72]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[71]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[70]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[69]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[68]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[67]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[66]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[65]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[64]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[63]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[62]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[61]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[60]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[59]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[58]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[57]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[56]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[55]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[54]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[53]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[52]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[51]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[50]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[49]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[48]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[47]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[46]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[45]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[44]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[43]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[42]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[41]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[40]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[39]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[38]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[37]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[36]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[35]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[34]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[33]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[32]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[31]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[30]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[29]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[28]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[27]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[26]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[25]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[24]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[23]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[22]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[21]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[20]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[19]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[18]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[17]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[16]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[15]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[14]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[13]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[12]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[11]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[10]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[9]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[8]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[7]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[6]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[5]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[4]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[3]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[2]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[1]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[0]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[159]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[158]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[157]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[156]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[155]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[154]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[153]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[152]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[151]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[150]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[149]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[148]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[147]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[146]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[145]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[144]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[143]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[142]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[141]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[140]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[139]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[138]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[137]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[136]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[135]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[134]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[133]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[132]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[131]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[130]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[129]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[128]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[127]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[126]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[125]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[124]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[123]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[122]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[121]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[120]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[119]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[118]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[117]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[116]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[115]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[114]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[113]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[112]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[111]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[110]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[109]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[108]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[107]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[106]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[105]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[104]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[103]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[102]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[101]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[100]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[99]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[98]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[97]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[96]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[95]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[94]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[93]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[92]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[91]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[90]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[89]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[88]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[87]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[86]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[85]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[84]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[83]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[82]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[81]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[80]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[79]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[78]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[77]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[76]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[75]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[74]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[73]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[72]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[71]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[70]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[69]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[68]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[67]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[66]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[65]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[64]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[63]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[62]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[61]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[60]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[59]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[58]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[57]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[56]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[55]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[54]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[53]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[52]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[51]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[50]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[49]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[48]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[47]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[46]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[45]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[44]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[43]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[42]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[41]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[40]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[39]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[38]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[37]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[36]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[35]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[34]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[33]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[32]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[31]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[30]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[29]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[28]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[27]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[26]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[25]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[24]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[23]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[22]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[21]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[20]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[19]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[18]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[17]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[16]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[15]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[14]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[13]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[12]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[11]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[10]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[9]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[8]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[7]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[6]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[5]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[4]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[3]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[2]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[1]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  RMB[0] & !RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[0]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[159]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[158]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[157]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[156]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[155]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[154]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[153]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[152]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[151]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[150]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[149]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[148]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[147]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[146]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[145]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[144]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[143]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[142]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[141]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[140]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[139]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[138]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[137]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[136]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[135]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[134]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[133]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[132]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[131]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[130]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[129]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[128]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[127]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[126]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[125]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[124]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[123]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[122]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[121]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[120]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[119]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[118]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[117]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[116]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[115]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[114]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[113]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[112]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[111]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[110]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[109]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[108]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[107]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[106]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[105]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[104]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[103]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[102]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[101]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[100]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[99]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[98]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[97]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[96]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[95]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[94]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[93]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[92]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[91]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[90]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[89]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[88]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[87]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[86]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[85]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[84]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[83]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[82]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[81]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[80]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[79]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[78]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[77]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[76]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[75]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[74]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[73]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[72]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[71]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[70]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[69]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[68]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[67]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[66]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[65]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[64]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[63]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[62]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[61]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[60]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[59]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[58]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[57]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[56]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[55]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[54]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[53]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[52]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[51]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[50]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[49]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[48]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[47]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[46]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[45]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[44]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[43]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[42]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[41]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[40]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[39]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[38]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[37]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[36]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[35]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[34]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[33]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[32]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[31]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[30]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[29]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[28]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[27]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[26]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[25]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[24]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[23]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[22]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[21]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[20]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[19]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[18]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[17]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[16]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[15]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[14]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[13]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[12]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[11]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[10]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[9]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[8]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[7]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[6]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[5]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[4]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[3]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[2]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[1]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  !RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[0]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[159]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[158]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[157]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[156]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[155]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[154]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[153]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[152]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[151]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[150]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[149]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[148]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[147]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[146]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[145]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[144]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[143]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[142]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[141]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[140]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[139]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[138]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[137]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[136]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[135]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[134]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[133]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[132]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[131]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[130]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[129]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[128]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[127]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[126]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[125]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[124]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[123]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[122]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[121]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[120]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[119]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[118]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[117]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[116]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[115]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[114]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[113]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[112]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[111]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[110]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[109]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[108]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[107]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[106]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[105]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[104]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[103]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[102]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[101]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[100]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[99]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[98]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[97]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[96]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[95]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[94]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[93]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[92]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[91]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[90]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[89]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[88]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[87]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[86]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[85]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[84]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[83]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[82]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[81]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[80]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[79]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[78]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[77]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[76]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[75]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[74]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[73]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[72]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[71]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[70]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[69]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[68]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[67]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[66]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[65]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[64]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[63]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[62]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[61]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[60]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[59]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[58]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[57]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[56]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[55]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[54]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[53]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[52]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[51]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[50]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[49]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[48]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[47]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[46]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[45]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[44]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[43]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[42]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[41]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[40]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[39]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[38]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[37]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[36]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[35]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[34]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[33]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[32]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[31]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[30]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[29]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[28]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[27]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[26]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[25]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[24]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[23]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[22]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[21]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[20]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[19]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[18]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[17]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[16]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[15]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[14]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[13]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[12]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[11]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[10]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[9]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[8]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[7]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[6]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[5]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[4]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[3]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[2]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[1]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & RMEB &  RMB[0] & RMB[1] & !RMB[2] & !RMB[3]  & !LS & !DFTMASK & !TEST1B )
       ( posedge TCLKB => (  QB[0]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[159]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[158]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[157]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[156]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[155]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[154]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[153]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[152]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[151]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[150]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[149]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[148]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[147]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[146]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[145]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[144]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[143]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[142]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[141]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[140]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[139]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[138]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[137]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[136]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[135]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[134]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[133]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[132]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[131]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[130]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[129]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[128]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[127]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[126]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[125]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[124]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[123]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[122]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[121]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[120]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[119]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[118]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[117]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[116]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[115]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[114]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[113]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[112]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[111]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[110]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[109]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[108]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[107]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[106]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[105]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[104]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[103]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[102]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[101]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[100]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[99]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[98]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[97]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[96]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[95]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[94]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[93]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[92]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[91]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[90]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[89]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[88]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[87]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[86]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[85]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[84]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[83]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[82]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[81]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[80]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[79]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[78]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[77]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[76]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[75]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[74]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[73]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[72]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[71]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[70]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[69]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[68]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[67]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[66]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[65]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[64]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[63]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[62]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[61]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[60]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[59]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[58]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[57]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[56]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[55]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[54]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[53]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[52]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[51]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[50]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[49]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[48]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[47]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[46]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[45]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[44]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[43]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[42]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[41]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[40]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[39]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[38]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[37]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[36]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[35]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[34]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[33]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[32]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[31]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[30]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[29]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[28]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[27]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[26]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[25]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[24]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[23]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[22]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[21]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[20]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[19]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[18]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[17]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[16]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[15]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[14]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[13]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[12]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[11]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[10]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[9]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[8]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[7]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[6]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[5]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[4]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[3]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[2]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[1]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( posedge TCLKB => (  QB[0]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[159]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[158]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[157]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[156]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[155]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[154]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[153]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[152]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[151]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[150]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[149]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[148]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[147]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[146]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[145]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[144]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[143]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[142]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[141]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[140]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[139]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[138]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[137]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[136]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[135]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[134]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[133]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[132]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[131]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[130]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[129]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[128]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[127]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[126]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[125]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[124]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[123]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[122]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[121]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[120]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[119]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[118]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[117]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[116]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[115]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[114]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[113]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[112]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[111]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[110]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[109]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[108]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[107]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[106]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[105]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[104]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[103]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[102]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[101]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[100]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[99]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[98]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[97]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[96]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[95]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[94]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[93]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[92]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[91]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[90]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[89]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[88]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[87]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[86]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[85]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[84]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[83]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[82]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[81]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[80]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[79]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[78]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[77]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[76]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[75]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[74]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[73]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[72]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[71]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[70]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[69]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[68]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[67]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[66]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[65]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[64]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[63]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[62]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[61]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[60]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[59]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[58]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[57]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[56]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[55]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[54]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[53]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[52]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[51]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[50]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[49]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[48]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[47]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[46]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[45]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[44]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[43]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[42]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[41]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[40]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[39]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[38]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[37]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[36]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[35]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[34]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[33]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[32]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[31]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[30]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[29]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[28]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[27]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[26]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[25]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[24]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[23]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[22]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[21]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[20]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[19]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[18]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[17]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[16]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[15]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[14]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[13]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[12]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[11]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[10]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[9]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[8]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[7]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[6]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[5]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[4]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[3]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[2]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[1]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & DFTMASK )
       ( posedge TCLKB => (  QB[0]  : 1'bx )) = (  Tcqswt, Tcqswt, Tcqswtx, Tcqswt, Tcqswtx, Tcqswt );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[159]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[158]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[157]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[156]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[155]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[154]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[153]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[152]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[151]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[150]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[149]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[148]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[147]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[146]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[145]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[144]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[143]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[142]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[141]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[140]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[139]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[138]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[137]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[136]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[135]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[134]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[133]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[132]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[131]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[130]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[129]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[128]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[127]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[126]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[125]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[124]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[123]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[122]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[121]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[120]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[119]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[118]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[117]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[116]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[115]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[114]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[113]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[112]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[111]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[110]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[109]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[108]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[107]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[106]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[105]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[104]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[103]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[102]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[101]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[100]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[99]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[98]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[97]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[96]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[95]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[94]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[93]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[92]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[91]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[90]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[89]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[88]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[87]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[86]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[85]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[84]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[83]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[82]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[81]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[80]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[79]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[78]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[77]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[76]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[75]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[74]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[73]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[72]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[71]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[70]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[69]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[68]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[67]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[66]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[65]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[64]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[63]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[62]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[61]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[60]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[59]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[58]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[57]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[56]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[55]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[54]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[53]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[52]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[51]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[50]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[49]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[48]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[47]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[46]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[45]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[44]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[43]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[42]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[41]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[40]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[39]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[38]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[37]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[36]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[35]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[34]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[33]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[32]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[31]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[30]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[29]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[28]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[27]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[26]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[25]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[24]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[23]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[22]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[21]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[20]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[19]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[18]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[17]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[16]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[15]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[14]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[13]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[12]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[11]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[10]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[9]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[8]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[7]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[6]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[5]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[4]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[3]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[2]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[1]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( TCLKEB & !LS & !DFTMASK & TEST1B )
       ( negedge TCLKB => (  QB[0]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS )
       ( posedge DFTMASK => (  QB[159]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[158]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[157]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[156]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[155]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[154]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[153]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[152]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[151]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[150]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[149]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[148]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[147]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[146]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[145]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[144]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[143]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[142]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[141]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[140]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[139]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[138]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[137]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[136]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[135]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[134]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[133]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[132]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[131]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[130]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[129]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[128]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[127]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[126]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[125]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[124]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[123]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[122]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[121]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[120]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[119]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[118]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[117]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[116]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[115]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[114]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[113]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[112]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[111]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[110]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[109]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[108]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[107]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[106]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[105]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[104]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[103]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[102]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[101]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[100]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[99]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[98]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[97]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[96]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[95]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[94]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[93]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[92]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[91]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[90]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[89]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[88]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[87]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[86]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[85]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[84]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[83]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[82]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[81]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[80]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[79]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[78]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[77]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[76]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[75]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[74]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[73]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[72]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[71]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[70]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[69]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[68]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[67]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[66]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[65]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[64]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[63]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[62]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[61]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[60]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[59]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[58]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[57]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[56]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[55]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[54]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[53]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[52]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[51]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[50]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[49]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[48]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[47]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[46]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[45]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[44]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[43]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[42]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[41]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[40]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[39]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[38]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[37]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[36]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[35]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[34]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[33]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[32]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[31]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[30]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[29]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[28]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[27]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[26]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[25]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[24]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[23]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[22]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[21]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[20]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[19]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[18]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[17]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[16]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[15]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[14]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[13]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[12]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[11]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[10]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[9]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[8]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[7]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[6]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[5]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[4]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[3]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[2]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[1]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !LS )
       ( posedge DFTMASK => (  QB[0]  : 1'bx )) = (  Tswtq, Tswtq );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[159]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[158]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[157]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[156]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[155]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[154]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[153]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[152]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[151]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[150]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[149]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[148]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[147]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[146]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[145]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[144]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[143]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[142]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[141]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[140]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[139]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[138]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[137]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[136]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[135]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[134]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[133]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[132]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[131]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[130]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[129]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[128]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[127]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[126]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[125]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[124]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[123]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[122]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[121]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[120]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[119]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[118]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[117]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[116]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[115]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[114]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[113]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[112]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[111]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[110]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[109]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[108]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[107]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[106]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[105]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[104]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[103]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[102]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[101]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[100]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[99]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[98]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[97]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[96]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[95]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[94]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[93]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[92]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[91]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[90]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[89]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[88]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[87]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[86]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[85]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[84]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[83]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[82]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[81]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[80]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[79]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[78]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[77]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[76]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[75]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[74]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[73]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[72]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[71]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[70]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[69]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[68]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[67]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[66]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[65]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[64]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[63]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[62]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[61]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[60]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[59]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[58]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[57]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[56]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[55]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[54]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[53]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[52]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[51]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[50]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[49]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[48]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[47]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[46]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[45]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[44]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[43]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[42]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[41]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[40]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[39]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[38]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[37]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[36]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[35]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[34]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[33]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[32]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[31]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[30]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[29]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[28]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[27]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[26]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[25]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[24]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[23]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[22]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[21]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[20]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[19]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[18]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[17]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[16]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[15]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[14]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[13]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[12]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[11]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[10]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[9]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[8]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[7]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[6]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[5]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[4]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[3]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[2]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[1]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !TCLKEB )
       ( posedge CLKB => (  QPB[0]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[159]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[158]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[157]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[156]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[155]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[154]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[153]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[152]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[151]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[150]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[149]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[148]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[147]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[146]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[145]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[144]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[143]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[142]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[141]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[140]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[139]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[138]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[137]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[136]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[135]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[134]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[133]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[132]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[131]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[130]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[129]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[128]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[127]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[126]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[125]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[124]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[123]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[122]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[121]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[120]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[119]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[118]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[117]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[116]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[115]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[114]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[113]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[112]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[111]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[110]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[109]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[108]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[107]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[106]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[105]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[104]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[103]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[102]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[101]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[100]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[99]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[98]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[97]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[96]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[95]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[94]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[93]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[92]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[91]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[90]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[89]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[88]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[87]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[86]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[85]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[84]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[83]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[82]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[81]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[80]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[79]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[78]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[77]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[76]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[75]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[74]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[73]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[72]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[71]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[70]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[69]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[68]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[67]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[66]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[65]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[64]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[63]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[62]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[61]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[60]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[59]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[58]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[57]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[56]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[55]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[54]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[53]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[52]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[51]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[50]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[49]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[48]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[47]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[46]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[45]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[44]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[43]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[42]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[41]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[40]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[39]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[38]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[37]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[36]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[35]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[34]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[33]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[32]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[31]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[30]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[29]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[28]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[27]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[26]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[25]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[24]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[23]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[22]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[21]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[20]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[19]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[18]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[17]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[16]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[15]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[14]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[13]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[12]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[11]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[10]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[9]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[8]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[7]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[6]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[5]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[4]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[3]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[2]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[1]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( TCLKEB )
       ( posedge TCLKB => (  QPB[0]  : 1'bx )) = (  Tcqp, Tcqp, Tcqpx, Tcqp, Tcqpx, Tcqp );
     if ( !LS & !TCLKEB )
       ( posedge CLKB => (  SO_QB  : 1'bx )) = (  Tcsq, Tcsq );
     if ( !LS & TCLKEB )
       ( posedge TCLKB => (  SO_QB  : 1'bx )) = (  Tcsq, Tcsq );
     if ( !LS & !TCLKEB )
       ( posedge CLKB => (  SO_DB  : 1'bx )) = (  Tcsd, Tcsd );
     if ( !LS & TCLKEB )
       ( posedge TCLKB => (  SO_DB  : 1'bx )) = (  Tcsd, Tcsd );
     if ( !LS & !TCLKEB )
       ( posedge CLKB => (  SO_CNTRB  : 1'bx )) = (  Tcsc, Tcsc );
     if ( !LS & TCLKEB )
       ( posedge TCLKB => (  SO_CNTRB  : 1'bx )) = (  Tcsc, Tcsc );

// Timing Checks

  $width (negedge CLKA &&& ENCLKA, Tcl, 0, notif_clka);
  $width (negedge CLKA &&& ENCLKA_test1, Tcltest1, 0, notif_clka);
  $width (posedge CLKA &&& ENCLKA, Tch, 0, notif_clka);
  $width (posedge CLKA &&& ENCLKA_test1, Tchtest1, 0, notif_clka);
  $period (posedge CLKA &&& ENCLKA_rmezo, Tcc, notif_clka);
  $period (negedge CLKA &&& ENCLKA_rmezo, Tcc, notif_clka);
  $period (posedge CLKA &&& ENCLKA_vdm, Tccvddmin, notif_clka);
  $period (negedge CLKA &&& ENCLKA_vdm, Tccvddmin, notif_clka);
  $period (posedge CLKA &&& ENCLKA_slw, Tccslow, notif_clka);
  $period (negedge CLKA &&& ENCLKA_slw, Tccslow, notif_clka);
  $period (posedge CLKA &&& ENCLKA_def, Tccdef, notif_clka);
  $period (negedge CLKA &&& ENCLKA_def, Tccdef, notif_clka);
  $period (posedge CLKA &&& ENCLKA_fst, Tccfast, notif_clka);
  $period (negedge CLKA &&& ENCLKA_fst, Tccfast, notif_clka);
  $width (negedge TCLKA &&& ENTCLKA, Tcl, 0, notif_clka);
  $width (negedge TCLKA &&& ENTCLKA_test1, Tcltest1, 0, notif_clka);
  $width (posedge TCLKA &&& ENTCLKA, Tch, 0, notif_clka);
  $width (posedge TCLKA &&& ENTCLKA_test1, Tchtest1, 0, notif_clka);
  $period (posedge TCLKA &&& ENTCLKA_rmezo, Tcc, notif_clka);
  $period (negedge TCLKA &&& ENTCLKA_rmezo, Tcc, notif_clka);
  $period (posedge TCLKA &&& ENTCLKA_vdm, Tccvddmin, notif_clka);
  $period (negedge TCLKA &&& ENTCLKA_vdm, Tccvddmin, notif_clka);
  $period (posedge TCLKA &&& ENTCLKA_slw, Tccslow, notif_clka);
  $period (negedge TCLKA &&& ENTCLKA_slw, Tccslow, notif_clka);
  $period (posedge TCLKA &&& ENTCLKA_def, Tccdef, notif_clka);
  $period (negedge TCLKA &&& ENTCLKA_def, Tccdef, notif_clka);
  $period (posedge TCLKA &&& ENTCLKA_fst, Tccfast, notif_clka);
  $period (negedge TCLKA &&& ENTCLKA_fst, Tccfast, notif_clka);
  $width (negedge CLKB &&& ENCLKB, Tcl, 0, notif_clkb);
  $width (negedge CLKB &&& ENCLKB_test1, Tcltest1, 0, notif_clkb);
  $width (posedge CLKB &&& ENCLKB, Tch, 0, notif_clkb);
  $width (posedge CLKB &&& ENCLKB_test1, Tchtest1, 0, notif_clkb);
  $period (posedge CLKB &&& ENCLKB_rmezo, Tcc, notif_clkb);
  $period (negedge CLKB &&& ENCLKB_rmezo, Tcc, notif_clkb);
  $period (posedge CLKB &&& ENCLKB_vdm, Tccvddmin, notif_clkb);
  $period (negedge CLKB &&& ENCLKB_vdm, Tccvddmin, notif_clkb);
  $period (posedge CLKB &&& ENCLKB_slw, Tccslow, notif_clkb);
  $period (negedge CLKB &&& ENCLKB_slw, Tccslow, notif_clkb);
  $period (posedge CLKB &&& ENCLKB_def, Tccdef, notif_clkb);
  $period (negedge CLKB &&& ENCLKB_def, Tccdef, notif_clkb);
  $period (posedge CLKB &&& ENCLKB_fst, Tccfast, notif_clkb);
  $period (negedge CLKB &&& ENCLKB_fst, Tccfast, notif_clkb);
  $width (negedge TCLKB &&& ENTCLKB, Tcl, 0, notif_clkb);
  $width (negedge TCLKB &&& ENTCLKB_test1, Tcltest1, 0, notif_clkb);
  $width (posedge TCLKB &&& ENTCLKB, Tch, 0, notif_clkb);
  $width (posedge TCLKB &&& ENTCLKB_test1, Tchtest1, 0, notif_clkb);
  $period (posedge TCLKB &&& ENTCLKB_rmezo, Tcc, notif_clkb);
  $period (negedge TCLKB &&& ENTCLKB_rmezo, Tcc, notif_clkb);
  $period (posedge TCLKB &&& ENTCLKB_vdm, Tccvddmin, notif_clkb);
  $period (negedge TCLKB &&& ENTCLKB_vdm, Tccvddmin, notif_clkb);
  $period (posedge TCLKB &&& ENTCLKB_slw, Tccslow, notif_clkb);
  $period (negedge TCLKB &&& ENTCLKB_slw, Tccslow, notif_clkb);
  $period (posedge TCLKB &&& ENTCLKB_def, Tccdef, notif_clkb);
  $period (negedge TCLKB &&& ENTCLKB_def, Tccdef, notif_clkb);
  $period (posedge TCLKB &&& ENTCLKB_fst, Tccfast, notif_clkb);
  $period (negedge TCLKB &&& ENTCLKB_fst, Tccfast, notif_clkb);
  $setuphold (posedge CLKA  &&& ENADRACLKA, posedge ADRA[0], Tac, Tcax, notif_adra_0,,, delayed_CLKA, delayed_ADRA[0] );
  $setuphold (posedge CLKA  &&& ENADRACLKA, negedge ADRA[0], Tac, Tcax, notif_adra_0,,, delayed_CLKA, delayed_ADRA[0] );
  $setuphold (posedge CLKA  &&& ENADRACLKA, posedge ADRA[1], Tac, Tcax, notif_adra_1,,, delayed_CLKA, delayed_ADRA[1] );
  $setuphold (posedge CLKA  &&& ENADRACLKA, negedge ADRA[1], Tac, Tcax, notif_adra_1,,, delayed_CLKA, delayed_ADRA[1] );
  $setuphold (posedge CLKA  &&& ENADRACLKA, posedge ADRA[2], Tac, Tcax, notif_adra_2,,, delayed_CLKA, delayed_ADRA[2] );
  $setuphold (posedge CLKA  &&& ENADRACLKA, negedge ADRA[2], Tac, Tcax, notif_adra_2,,, delayed_CLKA, delayed_ADRA[2] );
  $setuphold (posedge CLKA  &&& ENADRACLKA, posedge ADRA[3], Tac, Tcax, notif_adra_3,,, delayed_CLKA, delayed_ADRA[3] );
  $setuphold (posedge CLKA  &&& ENADRACLKA, negedge ADRA[3], Tac, Tcax, notif_adra_3,,, delayed_CLKA, delayed_ADRA[3] );
  $setuphold (posedge CLKA  &&& ENADRACLKA, posedge ADRA[4], Tac, Tcax, notif_adra_4,,, delayed_CLKA, delayed_ADRA[4] );
  $setuphold (posedge CLKA  &&& ENADRACLKA, negedge ADRA[4], Tac, Tcax, notif_adra_4,,, delayed_CLKA, delayed_ADRA[4] );
  $setuphold (posedge CLKA  &&& ENADRACLKA, posedge ADRA[5], Tac, Tcax, notif_adra_5,,, delayed_CLKA, delayed_ADRA[5] );
  $setuphold (posedge CLKA  &&& ENADRACLKA, negedge ADRA[5], Tac, Tcax, notif_adra_5,,, delayed_CLKA, delayed_ADRA[5] );
  $setuphold (posedge CLKA  &&& ENADRACLKA, posedge ADRA[6], Tac, Tcax, notif_adra_6,,, delayed_CLKA, delayed_ADRA[6] );
  $setuphold (posedge CLKA  &&& ENADRACLKA, negedge ADRA[6], Tac, Tcax, notif_adra_6,,, delayed_CLKA, delayed_ADRA[6] );
  $setuphold (posedge CLKA  &&& ENADRACLKA, posedge ADRA[7], Tac, Tcax, notif_adra_7,,, delayed_CLKA, delayed_ADRA[7] );
  $setuphold (posedge CLKA  &&& ENADRACLKA, negedge ADRA[7], Tac, Tcax, notif_adra_7,,, delayed_CLKA, delayed_ADRA[7] );
  $setuphold (posedge CLKA  &&& ENADRACLKA, posedge ADRA[8], Tac, Tcax, notif_adra_8,,, delayed_CLKA, delayed_ADRA[8] );
  $setuphold (posedge CLKA  &&& ENADRACLKA, negedge ADRA[8], Tac, Tcax, notif_adra_8,,, delayed_CLKA, delayed_ADRA[8] );
  $setuphold (posedge CLKA  &&& ENADRACLKA, posedge ADRA[9], Tac, Tcax, notif_adra_9,,, delayed_CLKA, delayed_ADRA[9] );
  $setuphold (posedge CLKA  &&& ENADRACLKA, negedge ADRA[9], Tac, Tcax, notif_adra_9,,, delayed_CLKA, delayed_ADRA[9] );
  $setuphold (posedge CLKA  &&& ENADRACLKA, posedge ADRA[10], Tac, Tcax, notif_adra_10,,, delayed_CLKA, delayed_ADRA[10] );
  $setuphold (posedge CLKA  &&& ENADRACLKA, negedge ADRA[10], Tac, Tcax, notif_adra_10,,, delayed_CLKA, delayed_ADRA[10] );
  $setuphold (posedge TCLKA  &&& ENADRATCLKA, posedge ADRA[0], Tac, Tcax, notif_adra_0,,, delayed_TCLKA, delayed_ADRA[0] );
  $setuphold (posedge TCLKA  &&& ENADRATCLKA, negedge ADRA[0], Tac, Tcax, notif_adra_0,,, delayed_TCLKA, delayed_ADRA[0] );
  $setuphold (posedge TCLKA  &&& ENADRATCLKA, posedge ADRA[1], Tac, Tcax, notif_adra_1,,, delayed_TCLKA, delayed_ADRA[1] );
  $setuphold (posedge TCLKA  &&& ENADRATCLKA, negedge ADRA[1], Tac, Tcax, notif_adra_1,,, delayed_TCLKA, delayed_ADRA[1] );
  $setuphold (posedge TCLKA  &&& ENADRATCLKA, posedge ADRA[2], Tac, Tcax, notif_adra_2,,, delayed_TCLKA, delayed_ADRA[2] );
  $setuphold (posedge TCLKA  &&& ENADRATCLKA, negedge ADRA[2], Tac, Tcax, notif_adra_2,,, delayed_TCLKA, delayed_ADRA[2] );
  $setuphold (posedge TCLKA  &&& ENADRATCLKA, posedge ADRA[3], Tac, Tcax, notif_adra_3,,, delayed_TCLKA, delayed_ADRA[3] );
  $setuphold (posedge TCLKA  &&& ENADRATCLKA, negedge ADRA[3], Tac, Tcax, notif_adra_3,,, delayed_TCLKA, delayed_ADRA[3] );
  $setuphold (posedge TCLKA  &&& ENADRATCLKA, posedge ADRA[4], Tac, Tcax, notif_adra_4,,, delayed_TCLKA, delayed_ADRA[4] );
  $setuphold (posedge TCLKA  &&& ENADRATCLKA, negedge ADRA[4], Tac, Tcax, notif_adra_4,,, delayed_TCLKA, delayed_ADRA[4] );
  $setuphold (posedge TCLKA  &&& ENADRATCLKA, posedge ADRA[5], Tac, Tcax, notif_adra_5,,, delayed_TCLKA, delayed_ADRA[5] );
  $setuphold (posedge TCLKA  &&& ENADRATCLKA, negedge ADRA[5], Tac, Tcax, notif_adra_5,,, delayed_TCLKA, delayed_ADRA[5] );
  $setuphold (posedge TCLKA  &&& ENADRATCLKA, posedge ADRA[6], Tac, Tcax, notif_adra_6,,, delayed_TCLKA, delayed_ADRA[6] );
  $setuphold (posedge TCLKA  &&& ENADRATCLKA, negedge ADRA[6], Tac, Tcax, notif_adra_6,,, delayed_TCLKA, delayed_ADRA[6] );
  $setuphold (posedge TCLKA  &&& ENADRATCLKA, posedge ADRA[7], Tac, Tcax, notif_adra_7,,, delayed_TCLKA, delayed_ADRA[7] );
  $setuphold (posedge TCLKA  &&& ENADRATCLKA, negedge ADRA[7], Tac, Tcax, notif_adra_7,,, delayed_TCLKA, delayed_ADRA[7] );
  $setuphold (posedge TCLKA  &&& ENADRATCLKA, posedge ADRA[8], Tac, Tcax, notif_adra_8,,, delayed_TCLKA, delayed_ADRA[8] );
  $setuphold (posedge TCLKA  &&& ENADRATCLKA, negedge ADRA[8], Tac, Tcax, notif_adra_8,,, delayed_TCLKA, delayed_ADRA[8] );
  $setuphold (posedge TCLKA  &&& ENADRATCLKA, posedge ADRA[9], Tac, Tcax, notif_adra_9,,, delayed_TCLKA, delayed_ADRA[9] );
  $setuphold (posedge TCLKA  &&& ENADRATCLKA, negedge ADRA[9], Tac, Tcax, notif_adra_9,,, delayed_TCLKA, delayed_ADRA[9] );
  $setuphold (posedge TCLKA  &&& ENADRATCLKA, posedge ADRA[10], Tac, Tcax, notif_adra_10,,, delayed_TCLKA, delayed_ADRA[10] );
  $setuphold (posedge TCLKA  &&& ENADRATCLKA, negedge ADRA[10], Tac, Tcax, notif_adra_10,,, delayed_TCLKA, delayed_ADRA[10] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[0], Tdc, Tcdx, notif_da_0,,, delayed_CLKA, delayed_DA[0] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[0], Tdc, Tcdx, notif_da_0,,, delayed_CLKA, delayed_DA[0] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[1], Tdc, Tcdx, notif_da_1,,, delayed_CLKA, delayed_DA[1] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[1], Tdc, Tcdx, notif_da_1,,, delayed_CLKA, delayed_DA[1] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[2], Tdc, Tcdx, notif_da_2,,, delayed_CLKA, delayed_DA[2] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[2], Tdc, Tcdx, notif_da_2,,, delayed_CLKA, delayed_DA[2] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[3], Tdc, Tcdx, notif_da_3,,, delayed_CLKA, delayed_DA[3] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[3], Tdc, Tcdx, notif_da_3,,, delayed_CLKA, delayed_DA[3] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[4], Tdc, Tcdx, notif_da_4,,, delayed_CLKA, delayed_DA[4] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[4], Tdc, Tcdx, notif_da_4,,, delayed_CLKA, delayed_DA[4] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[5], Tdc, Tcdx, notif_da_5,,, delayed_CLKA, delayed_DA[5] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[5], Tdc, Tcdx, notif_da_5,,, delayed_CLKA, delayed_DA[5] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[6], Tdc, Tcdx, notif_da_6,,, delayed_CLKA, delayed_DA[6] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[6], Tdc, Tcdx, notif_da_6,,, delayed_CLKA, delayed_DA[6] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[7], Tdc, Tcdx, notif_da_7,,, delayed_CLKA, delayed_DA[7] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[7], Tdc, Tcdx, notif_da_7,,, delayed_CLKA, delayed_DA[7] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[8], Tdc, Tcdx, notif_da_8,,, delayed_CLKA, delayed_DA[8] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[8], Tdc, Tcdx, notif_da_8,,, delayed_CLKA, delayed_DA[8] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[9], Tdc, Tcdx, notif_da_9,,, delayed_CLKA, delayed_DA[9] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[9], Tdc, Tcdx, notif_da_9,,, delayed_CLKA, delayed_DA[9] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[10], Tdc, Tcdx, notif_da_10,,, delayed_CLKA, delayed_DA[10] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[10], Tdc, Tcdx, notif_da_10,,, delayed_CLKA, delayed_DA[10] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[11], Tdc, Tcdx, notif_da_11,,, delayed_CLKA, delayed_DA[11] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[11], Tdc, Tcdx, notif_da_11,,, delayed_CLKA, delayed_DA[11] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[12], Tdc, Tcdx, notif_da_12,,, delayed_CLKA, delayed_DA[12] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[12], Tdc, Tcdx, notif_da_12,,, delayed_CLKA, delayed_DA[12] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[13], Tdc, Tcdx, notif_da_13,,, delayed_CLKA, delayed_DA[13] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[13], Tdc, Tcdx, notif_da_13,,, delayed_CLKA, delayed_DA[13] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[14], Tdc, Tcdx, notif_da_14,,, delayed_CLKA, delayed_DA[14] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[14], Tdc, Tcdx, notif_da_14,,, delayed_CLKA, delayed_DA[14] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[15], Tdc, Tcdx, notif_da_15,,, delayed_CLKA, delayed_DA[15] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[15], Tdc, Tcdx, notif_da_15,,, delayed_CLKA, delayed_DA[15] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[16], Tdc, Tcdx, notif_da_16,,, delayed_CLKA, delayed_DA[16] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[16], Tdc, Tcdx, notif_da_16,,, delayed_CLKA, delayed_DA[16] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[17], Tdc, Tcdx, notif_da_17,,, delayed_CLKA, delayed_DA[17] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[17], Tdc, Tcdx, notif_da_17,,, delayed_CLKA, delayed_DA[17] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[18], Tdc, Tcdx, notif_da_18,,, delayed_CLKA, delayed_DA[18] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[18], Tdc, Tcdx, notif_da_18,,, delayed_CLKA, delayed_DA[18] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[19], Tdc, Tcdx, notif_da_19,,, delayed_CLKA, delayed_DA[19] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[19], Tdc, Tcdx, notif_da_19,,, delayed_CLKA, delayed_DA[19] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[20], Tdc, Tcdx, notif_da_20,,, delayed_CLKA, delayed_DA[20] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[20], Tdc, Tcdx, notif_da_20,,, delayed_CLKA, delayed_DA[20] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[21], Tdc, Tcdx, notif_da_21,,, delayed_CLKA, delayed_DA[21] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[21], Tdc, Tcdx, notif_da_21,,, delayed_CLKA, delayed_DA[21] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[22], Tdc, Tcdx, notif_da_22,,, delayed_CLKA, delayed_DA[22] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[22], Tdc, Tcdx, notif_da_22,,, delayed_CLKA, delayed_DA[22] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[23], Tdc, Tcdx, notif_da_23,,, delayed_CLKA, delayed_DA[23] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[23], Tdc, Tcdx, notif_da_23,,, delayed_CLKA, delayed_DA[23] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[24], Tdc, Tcdx, notif_da_24,,, delayed_CLKA, delayed_DA[24] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[24], Tdc, Tcdx, notif_da_24,,, delayed_CLKA, delayed_DA[24] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[25], Tdc, Tcdx, notif_da_25,,, delayed_CLKA, delayed_DA[25] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[25], Tdc, Tcdx, notif_da_25,,, delayed_CLKA, delayed_DA[25] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[26], Tdc, Tcdx, notif_da_26,,, delayed_CLKA, delayed_DA[26] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[26], Tdc, Tcdx, notif_da_26,,, delayed_CLKA, delayed_DA[26] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[27], Tdc, Tcdx, notif_da_27,,, delayed_CLKA, delayed_DA[27] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[27], Tdc, Tcdx, notif_da_27,,, delayed_CLKA, delayed_DA[27] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[28], Tdc, Tcdx, notif_da_28,,, delayed_CLKA, delayed_DA[28] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[28], Tdc, Tcdx, notif_da_28,,, delayed_CLKA, delayed_DA[28] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[29], Tdc, Tcdx, notif_da_29,,, delayed_CLKA, delayed_DA[29] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[29], Tdc, Tcdx, notif_da_29,,, delayed_CLKA, delayed_DA[29] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[30], Tdc, Tcdx, notif_da_30,,, delayed_CLKA, delayed_DA[30] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[30], Tdc, Tcdx, notif_da_30,,, delayed_CLKA, delayed_DA[30] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[31], Tdc, Tcdx, notif_da_31,,, delayed_CLKA, delayed_DA[31] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[31], Tdc, Tcdx, notif_da_31,,, delayed_CLKA, delayed_DA[31] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[32], Tdc, Tcdx, notif_da_32,,, delayed_CLKA, delayed_DA[32] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[32], Tdc, Tcdx, notif_da_32,,, delayed_CLKA, delayed_DA[32] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[33], Tdc, Tcdx, notif_da_33,,, delayed_CLKA, delayed_DA[33] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[33], Tdc, Tcdx, notif_da_33,,, delayed_CLKA, delayed_DA[33] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[34], Tdc, Tcdx, notif_da_34,,, delayed_CLKA, delayed_DA[34] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[34], Tdc, Tcdx, notif_da_34,,, delayed_CLKA, delayed_DA[34] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[35], Tdc, Tcdx, notif_da_35,,, delayed_CLKA, delayed_DA[35] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[35], Tdc, Tcdx, notif_da_35,,, delayed_CLKA, delayed_DA[35] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[36], Tdc, Tcdx, notif_da_36,,, delayed_CLKA, delayed_DA[36] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[36], Tdc, Tcdx, notif_da_36,,, delayed_CLKA, delayed_DA[36] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[37], Tdc, Tcdx, notif_da_37,,, delayed_CLKA, delayed_DA[37] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[37], Tdc, Tcdx, notif_da_37,,, delayed_CLKA, delayed_DA[37] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[38], Tdc, Tcdx, notif_da_38,,, delayed_CLKA, delayed_DA[38] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[38], Tdc, Tcdx, notif_da_38,,, delayed_CLKA, delayed_DA[38] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[39], Tdc, Tcdx, notif_da_39,,, delayed_CLKA, delayed_DA[39] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[39], Tdc, Tcdx, notif_da_39,,, delayed_CLKA, delayed_DA[39] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[40], Tdc, Tcdx, notif_da_40,,, delayed_CLKA, delayed_DA[40] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[40], Tdc, Tcdx, notif_da_40,,, delayed_CLKA, delayed_DA[40] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[41], Tdc, Tcdx, notif_da_41,,, delayed_CLKA, delayed_DA[41] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[41], Tdc, Tcdx, notif_da_41,,, delayed_CLKA, delayed_DA[41] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[42], Tdc, Tcdx, notif_da_42,,, delayed_CLKA, delayed_DA[42] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[42], Tdc, Tcdx, notif_da_42,,, delayed_CLKA, delayed_DA[42] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[43], Tdc, Tcdx, notif_da_43,,, delayed_CLKA, delayed_DA[43] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[43], Tdc, Tcdx, notif_da_43,,, delayed_CLKA, delayed_DA[43] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[44], Tdc, Tcdx, notif_da_44,,, delayed_CLKA, delayed_DA[44] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[44], Tdc, Tcdx, notif_da_44,,, delayed_CLKA, delayed_DA[44] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[45], Tdc, Tcdx, notif_da_45,,, delayed_CLKA, delayed_DA[45] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[45], Tdc, Tcdx, notif_da_45,,, delayed_CLKA, delayed_DA[45] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[46], Tdc, Tcdx, notif_da_46,,, delayed_CLKA, delayed_DA[46] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[46], Tdc, Tcdx, notif_da_46,,, delayed_CLKA, delayed_DA[46] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[47], Tdc, Tcdx, notif_da_47,,, delayed_CLKA, delayed_DA[47] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[47], Tdc, Tcdx, notif_da_47,,, delayed_CLKA, delayed_DA[47] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[48], Tdc, Tcdx, notif_da_48,,, delayed_CLKA, delayed_DA[48] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[48], Tdc, Tcdx, notif_da_48,,, delayed_CLKA, delayed_DA[48] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[49], Tdc, Tcdx, notif_da_49,,, delayed_CLKA, delayed_DA[49] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[49], Tdc, Tcdx, notif_da_49,,, delayed_CLKA, delayed_DA[49] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[50], Tdc, Tcdx, notif_da_50,,, delayed_CLKA, delayed_DA[50] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[50], Tdc, Tcdx, notif_da_50,,, delayed_CLKA, delayed_DA[50] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[51], Tdc, Tcdx, notif_da_51,,, delayed_CLKA, delayed_DA[51] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[51], Tdc, Tcdx, notif_da_51,,, delayed_CLKA, delayed_DA[51] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[52], Tdc, Tcdx, notif_da_52,,, delayed_CLKA, delayed_DA[52] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[52], Tdc, Tcdx, notif_da_52,,, delayed_CLKA, delayed_DA[52] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[53], Tdc, Tcdx, notif_da_53,,, delayed_CLKA, delayed_DA[53] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[53], Tdc, Tcdx, notif_da_53,,, delayed_CLKA, delayed_DA[53] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[54], Tdc, Tcdx, notif_da_54,,, delayed_CLKA, delayed_DA[54] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[54], Tdc, Tcdx, notif_da_54,,, delayed_CLKA, delayed_DA[54] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[55], Tdc, Tcdx, notif_da_55,,, delayed_CLKA, delayed_DA[55] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[55], Tdc, Tcdx, notif_da_55,,, delayed_CLKA, delayed_DA[55] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[56], Tdc, Tcdx, notif_da_56,,, delayed_CLKA, delayed_DA[56] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[56], Tdc, Tcdx, notif_da_56,,, delayed_CLKA, delayed_DA[56] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[57], Tdc, Tcdx, notif_da_57,,, delayed_CLKA, delayed_DA[57] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[57], Tdc, Tcdx, notif_da_57,,, delayed_CLKA, delayed_DA[57] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[58], Tdc, Tcdx, notif_da_58,,, delayed_CLKA, delayed_DA[58] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[58], Tdc, Tcdx, notif_da_58,,, delayed_CLKA, delayed_DA[58] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[59], Tdc, Tcdx, notif_da_59,,, delayed_CLKA, delayed_DA[59] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[59], Tdc, Tcdx, notif_da_59,,, delayed_CLKA, delayed_DA[59] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[60], Tdc, Tcdx, notif_da_60,,, delayed_CLKA, delayed_DA[60] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[60], Tdc, Tcdx, notif_da_60,,, delayed_CLKA, delayed_DA[60] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[61], Tdc, Tcdx, notif_da_61,,, delayed_CLKA, delayed_DA[61] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[61], Tdc, Tcdx, notif_da_61,,, delayed_CLKA, delayed_DA[61] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[62], Tdc, Tcdx, notif_da_62,,, delayed_CLKA, delayed_DA[62] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[62], Tdc, Tcdx, notif_da_62,,, delayed_CLKA, delayed_DA[62] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[63], Tdc, Tcdx, notif_da_63,,, delayed_CLKA, delayed_DA[63] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[63], Tdc, Tcdx, notif_da_63,,, delayed_CLKA, delayed_DA[63] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[64], Tdc, Tcdx, notif_da_64,,, delayed_CLKA, delayed_DA[64] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[64], Tdc, Tcdx, notif_da_64,,, delayed_CLKA, delayed_DA[64] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[65], Tdc, Tcdx, notif_da_65,,, delayed_CLKA, delayed_DA[65] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[65], Tdc, Tcdx, notif_da_65,,, delayed_CLKA, delayed_DA[65] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[66], Tdc, Tcdx, notif_da_66,,, delayed_CLKA, delayed_DA[66] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[66], Tdc, Tcdx, notif_da_66,,, delayed_CLKA, delayed_DA[66] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[67], Tdc, Tcdx, notif_da_67,,, delayed_CLKA, delayed_DA[67] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[67], Tdc, Tcdx, notif_da_67,,, delayed_CLKA, delayed_DA[67] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[68], Tdc, Tcdx, notif_da_68,,, delayed_CLKA, delayed_DA[68] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[68], Tdc, Tcdx, notif_da_68,,, delayed_CLKA, delayed_DA[68] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[69], Tdc, Tcdx, notif_da_69,,, delayed_CLKA, delayed_DA[69] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[69], Tdc, Tcdx, notif_da_69,,, delayed_CLKA, delayed_DA[69] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[70], Tdc, Tcdx, notif_da_70,,, delayed_CLKA, delayed_DA[70] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[70], Tdc, Tcdx, notif_da_70,,, delayed_CLKA, delayed_DA[70] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[71], Tdc, Tcdx, notif_da_71,,, delayed_CLKA, delayed_DA[71] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[71], Tdc, Tcdx, notif_da_71,,, delayed_CLKA, delayed_DA[71] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[72], Tdc, Tcdx, notif_da_72,,, delayed_CLKA, delayed_DA[72] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[72], Tdc, Tcdx, notif_da_72,,, delayed_CLKA, delayed_DA[72] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[73], Tdc, Tcdx, notif_da_73,,, delayed_CLKA, delayed_DA[73] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[73], Tdc, Tcdx, notif_da_73,,, delayed_CLKA, delayed_DA[73] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[74], Tdc, Tcdx, notif_da_74,,, delayed_CLKA, delayed_DA[74] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[74], Tdc, Tcdx, notif_da_74,,, delayed_CLKA, delayed_DA[74] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[75], Tdc, Tcdx, notif_da_75,,, delayed_CLKA, delayed_DA[75] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[75], Tdc, Tcdx, notif_da_75,,, delayed_CLKA, delayed_DA[75] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[76], Tdc, Tcdx, notif_da_76,,, delayed_CLKA, delayed_DA[76] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[76], Tdc, Tcdx, notif_da_76,,, delayed_CLKA, delayed_DA[76] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[77], Tdc, Tcdx, notif_da_77,,, delayed_CLKA, delayed_DA[77] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[77], Tdc, Tcdx, notif_da_77,,, delayed_CLKA, delayed_DA[77] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[78], Tdc, Tcdx, notif_da_78,,, delayed_CLKA, delayed_DA[78] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[78], Tdc, Tcdx, notif_da_78,,, delayed_CLKA, delayed_DA[78] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[79], Tdc, Tcdx, notif_da_79,,, delayed_CLKA, delayed_DA[79] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[79], Tdc, Tcdx, notif_da_79,,, delayed_CLKA, delayed_DA[79] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[80], Tdc, Tcdx, notif_da_80,,, delayed_CLKA, delayed_DA[80] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[80], Tdc, Tcdx, notif_da_80,,, delayed_CLKA, delayed_DA[80] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[81], Tdc, Tcdx, notif_da_81,,, delayed_CLKA, delayed_DA[81] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[81], Tdc, Tcdx, notif_da_81,,, delayed_CLKA, delayed_DA[81] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[82], Tdc, Tcdx, notif_da_82,,, delayed_CLKA, delayed_DA[82] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[82], Tdc, Tcdx, notif_da_82,,, delayed_CLKA, delayed_DA[82] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[83], Tdc, Tcdx, notif_da_83,,, delayed_CLKA, delayed_DA[83] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[83], Tdc, Tcdx, notif_da_83,,, delayed_CLKA, delayed_DA[83] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[84], Tdc, Tcdx, notif_da_84,,, delayed_CLKA, delayed_DA[84] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[84], Tdc, Tcdx, notif_da_84,,, delayed_CLKA, delayed_DA[84] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[85], Tdc, Tcdx, notif_da_85,,, delayed_CLKA, delayed_DA[85] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[85], Tdc, Tcdx, notif_da_85,,, delayed_CLKA, delayed_DA[85] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[86], Tdc, Tcdx, notif_da_86,,, delayed_CLKA, delayed_DA[86] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[86], Tdc, Tcdx, notif_da_86,,, delayed_CLKA, delayed_DA[86] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[87], Tdc, Tcdx, notif_da_87,,, delayed_CLKA, delayed_DA[87] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[87], Tdc, Tcdx, notif_da_87,,, delayed_CLKA, delayed_DA[87] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[88], Tdc, Tcdx, notif_da_88,,, delayed_CLKA, delayed_DA[88] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[88], Tdc, Tcdx, notif_da_88,,, delayed_CLKA, delayed_DA[88] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[89], Tdc, Tcdx, notif_da_89,,, delayed_CLKA, delayed_DA[89] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[89], Tdc, Tcdx, notif_da_89,,, delayed_CLKA, delayed_DA[89] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[90], Tdc, Tcdx, notif_da_90,,, delayed_CLKA, delayed_DA[90] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[90], Tdc, Tcdx, notif_da_90,,, delayed_CLKA, delayed_DA[90] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[91], Tdc, Tcdx, notif_da_91,,, delayed_CLKA, delayed_DA[91] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[91], Tdc, Tcdx, notif_da_91,,, delayed_CLKA, delayed_DA[91] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[92], Tdc, Tcdx, notif_da_92,,, delayed_CLKA, delayed_DA[92] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[92], Tdc, Tcdx, notif_da_92,,, delayed_CLKA, delayed_DA[92] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[93], Tdc, Tcdx, notif_da_93,,, delayed_CLKA, delayed_DA[93] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[93], Tdc, Tcdx, notif_da_93,,, delayed_CLKA, delayed_DA[93] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[94], Tdc, Tcdx, notif_da_94,,, delayed_CLKA, delayed_DA[94] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[94], Tdc, Tcdx, notif_da_94,,, delayed_CLKA, delayed_DA[94] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[95], Tdc, Tcdx, notif_da_95,,, delayed_CLKA, delayed_DA[95] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[95], Tdc, Tcdx, notif_da_95,,, delayed_CLKA, delayed_DA[95] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[96], Tdc, Tcdx, notif_da_96,,, delayed_CLKA, delayed_DA[96] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[96], Tdc, Tcdx, notif_da_96,,, delayed_CLKA, delayed_DA[96] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[97], Tdc, Tcdx, notif_da_97,,, delayed_CLKA, delayed_DA[97] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[97], Tdc, Tcdx, notif_da_97,,, delayed_CLKA, delayed_DA[97] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[98], Tdc, Tcdx, notif_da_98,,, delayed_CLKA, delayed_DA[98] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[98], Tdc, Tcdx, notif_da_98,,, delayed_CLKA, delayed_DA[98] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[99], Tdc, Tcdx, notif_da_99,,, delayed_CLKA, delayed_DA[99] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[99], Tdc, Tcdx, notif_da_99,,, delayed_CLKA, delayed_DA[99] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[100], Tdc, Tcdx, notif_da_100,,, delayed_CLKA, delayed_DA[100] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[100], Tdc, Tcdx, notif_da_100,,, delayed_CLKA, delayed_DA[100] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[101], Tdc, Tcdx, notif_da_101,,, delayed_CLKA, delayed_DA[101] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[101], Tdc, Tcdx, notif_da_101,,, delayed_CLKA, delayed_DA[101] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[102], Tdc, Tcdx, notif_da_102,,, delayed_CLKA, delayed_DA[102] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[102], Tdc, Tcdx, notif_da_102,,, delayed_CLKA, delayed_DA[102] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[103], Tdc, Tcdx, notif_da_103,,, delayed_CLKA, delayed_DA[103] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[103], Tdc, Tcdx, notif_da_103,,, delayed_CLKA, delayed_DA[103] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[104], Tdc, Tcdx, notif_da_104,,, delayed_CLKA, delayed_DA[104] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[104], Tdc, Tcdx, notif_da_104,,, delayed_CLKA, delayed_DA[104] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[105], Tdc, Tcdx, notif_da_105,,, delayed_CLKA, delayed_DA[105] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[105], Tdc, Tcdx, notif_da_105,,, delayed_CLKA, delayed_DA[105] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[106], Tdc, Tcdx, notif_da_106,,, delayed_CLKA, delayed_DA[106] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[106], Tdc, Tcdx, notif_da_106,,, delayed_CLKA, delayed_DA[106] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[107], Tdc, Tcdx, notif_da_107,,, delayed_CLKA, delayed_DA[107] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[107], Tdc, Tcdx, notif_da_107,,, delayed_CLKA, delayed_DA[107] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[108], Tdc, Tcdx, notif_da_108,,, delayed_CLKA, delayed_DA[108] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[108], Tdc, Tcdx, notif_da_108,,, delayed_CLKA, delayed_DA[108] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[109], Tdc, Tcdx, notif_da_109,,, delayed_CLKA, delayed_DA[109] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[109], Tdc, Tcdx, notif_da_109,,, delayed_CLKA, delayed_DA[109] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[110], Tdc, Tcdx, notif_da_110,,, delayed_CLKA, delayed_DA[110] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[110], Tdc, Tcdx, notif_da_110,,, delayed_CLKA, delayed_DA[110] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[111], Tdc, Tcdx, notif_da_111,,, delayed_CLKA, delayed_DA[111] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[111], Tdc, Tcdx, notif_da_111,,, delayed_CLKA, delayed_DA[111] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[112], Tdc, Tcdx, notif_da_112,,, delayed_CLKA, delayed_DA[112] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[112], Tdc, Tcdx, notif_da_112,,, delayed_CLKA, delayed_DA[112] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[113], Tdc, Tcdx, notif_da_113,,, delayed_CLKA, delayed_DA[113] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[113], Tdc, Tcdx, notif_da_113,,, delayed_CLKA, delayed_DA[113] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[114], Tdc, Tcdx, notif_da_114,,, delayed_CLKA, delayed_DA[114] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[114], Tdc, Tcdx, notif_da_114,,, delayed_CLKA, delayed_DA[114] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[115], Tdc, Tcdx, notif_da_115,,, delayed_CLKA, delayed_DA[115] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[115], Tdc, Tcdx, notif_da_115,,, delayed_CLKA, delayed_DA[115] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[116], Tdc, Tcdx, notif_da_116,,, delayed_CLKA, delayed_DA[116] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[116], Tdc, Tcdx, notif_da_116,,, delayed_CLKA, delayed_DA[116] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[117], Tdc, Tcdx, notif_da_117,,, delayed_CLKA, delayed_DA[117] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[117], Tdc, Tcdx, notif_da_117,,, delayed_CLKA, delayed_DA[117] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[118], Tdc, Tcdx, notif_da_118,,, delayed_CLKA, delayed_DA[118] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[118], Tdc, Tcdx, notif_da_118,,, delayed_CLKA, delayed_DA[118] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[119], Tdc, Tcdx, notif_da_119,,, delayed_CLKA, delayed_DA[119] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[119], Tdc, Tcdx, notif_da_119,,, delayed_CLKA, delayed_DA[119] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[120], Tdc, Tcdx, notif_da_120,,, delayed_CLKA, delayed_DA[120] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[120], Tdc, Tcdx, notif_da_120,,, delayed_CLKA, delayed_DA[120] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[121], Tdc, Tcdx, notif_da_121,,, delayed_CLKA, delayed_DA[121] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[121], Tdc, Tcdx, notif_da_121,,, delayed_CLKA, delayed_DA[121] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[122], Tdc, Tcdx, notif_da_122,,, delayed_CLKA, delayed_DA[122] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[122], Tdc, Tcdx, notif_da_122,,, delayed_CLKA, delayed_DA[122] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[123], Tdc, Tcdx, notif_da_123,,, delayed_CLKA, delayed_DA[123] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[123], Tdc, Tcdx, notif_da_123,,, delayed_CLKA, delayed_DA[123] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[124], Tdc, Tcdx, notif_da_124,,, delayed_CLKA, delayed_DA[124] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[124], Tdc, Tcdx, notif_da_124,,, delayed_CLKA, delayed_DA[124] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[125], Tdc, Tcdx, notif_da_125,,, delayed_CLKA, delayed_DA[125] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[125], Tdc, Tcdx, notif_da_125,,, delayed_CLKA, delayed_DA[125] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[126], Tdc, Tcdx, notif_da_126,,, delayed_CLKA, delayed_DA[126] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[126], Tdc, Tcdx, notif_da_126,,, delayed_CLKA, delayed_DA[126] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[127], Tdc, Tcdx, notif_da_127,,, delayed_CLKA, delayed_DA[127] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[127], Tdc, Tcdx, notif_da_127,,, delayed_CLKA, delayed_DA[127] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[128], Tdc, Tcdx, notif_da_128,,, delayed_CLKA, delayed_DA[128] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[128], Tdc, Tcdx, notif_da_128,,, delayed_CLKA, delayed_DA[128] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[129], Tdc, Tcdx, notif_da_129,,, delayed_CLKA, delayed_DA[129] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[129], Tdc, Tcdx, notif_da_129,,, delayed_CLKA, delayed_DA[129] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[130], Tdc, Tcdx, notif_da_130,,, delayed_CLKA, delayed_DA[130] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[130], Tdc, Tcdx, notif_da_130,,, delayed_CLKA, delayed_DA[130] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[131], Tdc, Tcdx, notif_da_131,,, delayed_CLKA, delayed_DA[131] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[131], Tdc, Tcdx, notif_da_131,,, delayed_CLKA, delayed_DA[131] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[132], Tdc, Tcdx, notif_da_132,,, delayed_CLKA, delayed_DA[132] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[132], Tdc, Tcdx, notif_da_132,,, delayed_CLKA, delayed_DA[132] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[133], Tdc, Tcdx, notif_da_133,,, delayed_CLKA, delayed_DA[133] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[133], Tdc, Tcdx, notif_da_133,,, delayed_CLKA, delayed_DA[133] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[134], Tdc, Tcdx, notif_da_134,,, delayed_CLKA, delayed_DA[134] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[134], Tdc, Tcdx, notif_da_134,,, delayed_CLKA, delayed_DA[134] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[135], Tdc, Tcdx, notif_da_135,,, delayed_CLKA, delayed_DA[135] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[135], Tdc, Tcdx, notif_da_135,,, delayed_CLKA, delayed_DA[135] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[136], Tdc, Tcdx, notif_da_136,,, delayed_CLKA, delayed_DA[136] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[136], Tdc, Tcdx, notif_da_136,,, delayed_CLKA, delayed_DA[136] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[137], Tdc, Tcdx, notif_da_137,,, delayed_CLKA, delayed_DA[137] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[137], Tdc, Tcdx, notif_da_137,,, delayed_CLKA, delayed_DA[137] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[138], Tdc, Tcdx, notif_da_138,,, delayed_CLKA, delayed_DA[138] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[138], Tdc, Tcdx, notif_da_138,,, delayed_CLKA, delayed_DA[138] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[139], Tdc, Tcdx, notif_da_139,,, delayed_CLKA, delayed_DA[139] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[139], Tdc, Tcdx, notif_da_139,,, delayed_CLKA, delayed_DA[139] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[140], Tdc, Tcdx, notif_da_140,,, delayed_CLKA, delayed_DA[140] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[140], Tdc, Tcdx, notif_da_140,,, delayed_CLKA, delayed_DA[140] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[141], Tdc, Tcdx, notif_da_141,,, delayed_CLKA, delayed_DA[141] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[141], Tdc, Tcdx, notif_da_141,,, delayed_CLKA, delayed_DA[141] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[142], Tdc, Tcdx, notif_da_142,,, delayed_CLKA, delayed_DA[142] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[142], Tdc, Tcdx, notif_da_142,,, delayed_CLKA, delayed_DA[142] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[143], Tdc, Tcdx, notif_da_143,,, delayed_CLKA, delayed_DA[143] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[143], Tdc, Tcdx, notif_da_143,,, delayed_CLKA, delayed_DA[143] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[144], Tdc, Tcdx, notif_da_144,,, delayed_CLKA, delayed_DA[144] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[144], Tdc, Tcdx, notif_da_144,,, delayed_CLKA, delayed_DA[144] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[145], Tdc, Tcdx, notif_da_145,,, delayed_CLKA, delayed_DA[145] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[145], Tdc, Tcdx, notif_da_145,,, delayed_CLKA, delayed_DA[145] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[146], Tdc, Tcdx, notif_da_146,,, delayed_CLKA, delayed_DA[146] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[146], Tdc, Tcdx, notif_da_146,,, delayed_CLKA, delayed_DA[146] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[147], Tdc, Tcdx, notif_da_147,,, delayed_CLKA, delayed_DA[147] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[147], Tdc, Tcdx, notif_da_147,,, delayed_CLKA, delayed_DA[147] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[148], Tdc, Tcdx, notif_da_148,,, delayed_CLKA, delayed_DA[148] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[148], Tdc, Tcdx, notif_da_148,,, delayed_CLKA, delayed_DA[148] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[149], Tdc, Tcdx, notif_da_149,,, delayed_CLKA, delayed_DA[149] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[149], Tdc, Tcdx, notif_da_149,,, delayed_CLKA, delayed_DA[149] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[150], Tdc, Tcdx, notif_da_150,,, delayed_CLKA, delayed_DA[150] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[150], Tdc, Tcdx, notif_da_150,,, delayed_CLKA, delayed_DA[150] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[151], Tdc, Tcdx, notif_da_151,,, delayed_CLKA, delayed_DA[151] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[151], Tdc, Tcdx, notif_da_151,,, delayed_CLKA, delayed_DA[151] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[152], Tdc, Tcdx, notif_da_152,,, delayed_CLKA, delayed_DA[152] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[152], Tdc, Tcdx, notif_da_152,,, delayed_CLKA, delayed_DA[152] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[153], Tdc, Tcdx, notif_da_153,,, delayed_CLKA, delayed_DA[153] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[153], Tdc, Tcdx, notif_da_153,,, delayed_CLKA, delayed_DA[153] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[154], Tdc, Tcdx, notif_da_154,,, delayed_CLKA, delayed_DA[154] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[154], Tdc, Tcdx, notif_da_154,,, delayed_CLKA, delayed_DA[154] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[155], Tdc, Tcdx, notif_da_155,,, delayed_CLKA, delayed_DA[155] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[155], Tdc, Tcdx, notif_da_155,,, delayed_CLKA, delayed_DA[155] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[156], Tdc, Tcdx, notif_da_156,,, delayed_CLKA, delayed_DA[156] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[156], Tdc, Tcdx, notif_da_156,,, delayed_CLKA, delayed_DA[156] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[157], Tdc, Tcdx, notif_da_157,,, delayed_CLKA, delayed_DA[157] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[157], Tdc, Tcdx, notif_da_157,,, delayed_CLKA, delayed_DA[157] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[158], Tdc, Tcdx, notif_da_158,,, delayed_CLKA, delayed_DA[158] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[158], Tdc, Tcdx, notif_da_158,,, delayed_CLKA, delayed_DA[158] );
  $setuphold (posedge CLKA  &&& ENDACLKA, posedge DA[159], Tdc, Tcdx, notif_da_159,,, delayed_CLKA, delayed_DA[159] );
  $setuphold (posedge CLKA  &&& ENDACLKA, negedge DA[159], Tdc, Tcdx, notif_da_159,,, delayed_CLKA, delayed_DA[159] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[0], Tdc, Tcdx, notif_da_0,,, delayed_TCLKA, delayed_DA[0] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[0], Tdc, Tcdx, notif_da_0,,, delayed_TCLKA, delayed_DA[0] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[1], Tdc, Tcdx, notif_da_1,,, delayed_TCLKA, delayed_DA[1] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[1], Tdc, Tcdx, notif_da_1,,, delayed_TCLKA, delayed_DA[1] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[2], Tdc, Tcdx, notif_da_2,,, delayed_TCLKA, delayed_DA[2] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[2], Tdc, Tcdx, notif_da_2,,, delayed_TCLKA, delayed_DA[2] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[3], Tdc, Tcdx, notif_da_3,,, delayed_TCLKA, delayed_DA[3] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[3], Tdc, Tcdx, notif_da_3,,, delayed_TCLKA, delayed_DA[3] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[4], Tdc, Tcdx, notif_da_4,,, delayed_TCLKA, delayed_DA[4] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[4], Tdc, Tcdx, notif_da_4,,, delayed_TCLKA, delayed_DA[4] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[5], Tdc, Tcdx, notif_da_5,,, delayed_TCLKA, delayed_DA[5] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[5], Tdc, Tcdx, notif_da_5,,, delayed_TCLKA, delayed_DA[5] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[6], Tdc, Tcdx, notif_da_6,,, delayed_TCLKA, delayed_DA[6] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[6], Tdc, Tcdx, notif_da_6,,, delayed_TCLKA, delayed_DA[6] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[7], Tdc, Tcdx, notif_da_7,,, delayed_TCLKA, delayed_DA[7] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[7], Tdc, Tcdx, notif_da_7,,, delayed_TCLKA, delayed_DA[7] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[8], Tdc, Tcdx, notif_da_8,,, delayed_TCLKA, delayed_DA[8] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[8], Tdc, Tcdx, notif_da_8,,, delayed_TCLKA, delayed_DA[8] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[9], Tdc, Tcdx, notif_da_9,,, delayed_TCLKA, delayed_DA[9] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[9], Tdc, Tcdx, notif_da_9,,, delayed_TCLKA, delayed_DA[9] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[10], Tdc, Tcdx, notif_da_10,,, delayed_TCLKA, delayed_DA[10] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[10], Tdc, Tcdx, notif_da_10,,, delayed_TCLKA, delayed_DA[10] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[11], Tdc, Tcdx, notif_da_11,,, delayed_TCLKA, delayed_DA[11] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[11], Tdc, Tcdx, notif_da_11,,, delayed_TCLKA, delayed_DA[11] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[12], Tdc, Tcdx, notif_da_12,,, delayed_TCLKA, delayed_DA[12] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[12], Tdc, Tcdx, notif_da_12,,, delayed_TCLKA, delayed_DA[12] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[13], Tdc, Tcdx, notif_da_13,,, delayed_TCLKA, delayed_DA[13] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[13], Tdc, Tcdx, notif_da_13,,, delayed_TCLKA, delayed_DA[13] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[14], Tdc, Tcdx, notif_da_14,,, delayed_TCLKA, delayed_DA[14] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[14], Tdc, Tcdx, notif_da_14,,, delayed_TCLKA, delayed_DA[14] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[15], Tdc, Tcdx, notif_da_15,,, delayed_TCLKA, delayed_DA[15] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[15], Tdc, Tcdx, notif_da_15,,, delayed_TCLKA, delayed_DA[15] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[16], Tdc, Tcdx, notif_da_16,,, delayed_TCLKA, delayed_DA[16] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[16], Tdc, Tcdx, notif_da_16,,, delayed_TCLKA, delayed_DA[16] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[17], Tdc, Tcdx, notif_da_17,,, delayed_TCLKA, delayed_DA[17] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[17], Tdc, Tcdx, notif_da_17,,, delayed_TCLKA, delayed_DA[17] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[18], Tdc, Tcdx, notif_da_18,,, delayed_TCLKA, delayed_DA[18] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[18], Tdc, Tcdx, notif_da_18,,, delayed_TCLKA, delayed_DA[18] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[19], Tdc, Tcdx, notif_da_19,,, delayed_TCLKA, delayed_DA[19] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[19], Tdc, Tcdx, notif_da_19,,, delayed_TCLKA, delayed_DA[19] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[20], Tdc, Tcdx, notif_da_20,,, delayed_TCLKA, delayed_DA[20] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[20], Tdc, Tcdx, notif_da_20,,, delayed_TCLKA, delayed_DA[20] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[21], Tdc, Tcdx, notif_da_21,,, delayed_TCLKA, delayed_DA[21] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[21], Tdc, Tcdx, notif_da_21,,, delayed_TCLKA, delayed_DA[21] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[22], Tdc, Tcdx, notif_da_22,,, delayed_TCLKA, delayed_DA[22] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[22], Tdc, Tcdx, notif_da_22,,, delayed_TCLKA, delayed_DA[22] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[23], Tdc, Tcdx, notif_da_23,,, delayed_TCLKA, delayed_DA[23] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[23], Tdc, Tcdx, notif_da_23,,, delayed_TCLKA, delayed_DA[23] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[24], Tdc, Tcdx, notif_da_24,,, delayed_TCLKA, delayed_DA[24] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[24], Tdc, Tcdx, notif_da_24,,, delayed_TCLKA, delayed_DA[24] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[25], Tdc, Tcdx, notif_da_25,,, delayed_TCLKA, delayed_DA[25] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[25], Tdc, Tcdx, notif_da_25,,, delayed_TCLKA, delayed_DA[25] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[26], Tdc, Tcdx, notif_da_26,,, delayed_TCLKA, delayed_DA[26] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[26], Tdc, Tcdx, notif_da_26,,, delayed_TCLKA, delayed_DA[26] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[27], Tdc, Tcdx, notif_da_27,,, delayed_TCLKA, delayed_DA[27] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[27], Tdc, Tcdx, notif_da_27,,, delayed_TCLKA, delayed_DA[27] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[28], Tdc, Tcdx, notif_da_28,,, delayed_TCLKA, delayed_DA[28] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[28], Tdc, Tcdx, notif_da_28,,, delayed_TCLKA, delayed_DA[28] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[29], Tdc, Tcdx, notif_da_29,,, delayed_TCLKA, delayed_DA[29] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[29], Tdc, Tcdx, notif_da_29,,, delayed_TCLKA, delayed_DA[29] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[30], Tdc, Tcdx, notif_da_30,,, delayed_TCLKA, delayed_DA[30] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[30], Tdc, Tcdx, notif_da_30,,, delayed_TCLKA, delayed_DA[30] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[31], Tdc, Tcdx, notif_da_31,,, delayed_TCLKA, delayed_DA[31] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[31], Tdc, Tcdx, notif_da_31,,, delayed_TCLKA, delayed_DA[31] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[32], Tdc, Tcdx, notif_da_32,,, delayed_TCLKA, delayed_DA[32] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[32], Tdc, Tcdx, notif_da_32,,, delayed_TCLKA, delayed_DA[32] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[33], Tdc, Tcdx, notif_da_33,,, delayed_TCLKA, delayed_DA[33] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[33], Tdc, Tcdx, notif_da_33,,, delayed_TCLKA, delayed_DA[33] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[34], Tdc, Tcdx, notif_da_34,,, delayed_TCLKA, delayed_DA[34] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[34], Tdc, Tcdx, notif_da_34,,, delayed_TCLKA, delayed_DA[34] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[35], Tdc, Tcdx, notif_da_35,,, delayed_TCLKA, delayed_DA[35] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[35], Tdc, Tcdx, notif_da_35,,, delayed_TCLKA, delayed_DA[35] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[36], Tdc, Tcdx, notif_da_36,,, delayed_TCLKA, delayed_DA[36] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[36], Tdc, Tcdx, notif_da_36,,, delayed_TCLKA, delayed_DA[36] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[37], Tdc, Tcdx, notif_da_37,,, delayed_TCLKA, delayed_DA[37] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[37], Tdc, Tcdx, notif_da_37,,, delayed_TCLKA, delayed_DA[37] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[38], Tdc, Tcdx, notif_da_38,,, delayed_TCLKA, delayed_DA[38] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[38], Tdc, Tcdx, notif_da_38,,, delayed_TCLKA, delayed_DA[38] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[39], Tdc, Tcdx, notif_da_39,,, delayed_TCLKA, delayed_DA[39] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[39], Tdc, Tcdx, notif_da_39,,, delayed_TCLKA, delayed_DA[39] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[40], Tdc, Tcdx, notif_da_40,,, delayed_TCLKA, delayed_DA[40] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[40], Tdc, Tcdx, notif_da_40,,, delayed_TCLKA, delayed_DA[40] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[41], Tdc, Tcdx, notif_da_41,,, delayed_TCLKA, delayed_DA[41] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[41], Tdc, Tcdx, notif_da_41,,, delayed_TCLKA, delayed_DA[41] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[42], Tdc, Tcdx, notif_da_42,,, delayed_TCLKA, delayed_DA[42] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[42], Tdc, Tcdx, notif_da_42,,, delayed_TCLKA, delayed_DA[42] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[43], Tdc, Tcdx, notif_da_43,,, delayed_TCLKA, delayed_DA[43] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[43], Tdc, Tcdx, notif_da_43,,, delayed_TCLKA, delayed_DA[43] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[44], Tdc, Tcdx, notif_da_44,,, delayed_TCLKA, delayed_DA[44] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[44], Tdc, Tcdx, notif_da_44,,, delayed_TCLKA, delayed_DA[44] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[45], Tdc, Tcdx, notif_da_45,,, delayed_TCLKA, delayed_DA[45] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[45], Tdc, Tcdx, notif_da_45,,, delayed_TCLKA, delayed_DA[45] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[46], Tdc, Tcdx, notif_da_46,,, delayed_TCLKA, delayed_DA[46] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[46], Tdc, Tcdx, notif_da_46,,, delayed_TCLKA, delayed_DA[46] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[47], Tdc, Tcdx, notif_da_47,,, delayed_TCLKA, delayed_DA[47] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[47], Tdc, Tcdx, notif_da_47,,, delayed_TCLKA, delayed_DA[47] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[48], Tdc, Tcdx, notif_da_48,,, delayed_TCLKA, delayed_DA[48] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[48], Tdc, Tcdx, notif_da_48,,, delayed_TCLKA, delayed_DA[48] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[49], Tdc, Tcdx, notif_da_49,,, delayed_TCLKA, delayed_DA[49] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[49], Tdc, Tcdx, notif_da_49,,, delayed_TCLKA, delayed_DA[49] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[50], Tdc, Tcdx, notif_da_50,,, delayed_TCLKA, delayed_DA[50] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[50], Tdc, Tcdx, notif_da_50,,, delayed_TCLKA, delayed_DA[50] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[51], Tdc, Tcdx, notif_da_51,,, delayed_TCLKA, delayed_DA[51] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[51], Tdc, Tcdx, notif_da_51,,, delayed_TCLKA, delayed_DA[51] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[52], Tdc, Tcdx, notif_da_52,,, delayed_TCLKA, delayed_DA[52] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[52], Tdc, Tcdx, notif_da_52,,, delayed_TCLKA, delayed_DA[52] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[53], Tdc, Tcdx, notif_da_53,,, delayed_TCLKA, delayed_DA[53] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[53], Tdc, Tcdx, notif_da_53,,, delayed_TCLKA, delayed_DA[53] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[54], Tdc, Tcdx, notif_da_54,,, delayed_TCLKA, delayed_DA[54] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[54], Tdc, Tcdx, notif_da_54,,, delayed_TCLKA, delayed_DA[54] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[55], Tdc, Tcdx, notif_da_55,,, delayed_TCLKA, delayed_DA[55] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[55], Tdc, Tcdx, notif_da_55,,, delayed_TCLKA, delayed_DA[55] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[56], Tdc, Tcdx, notif_da_56,,, delayed_TCLKA, delayed_DA[56] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[56], Tdc, Tcdx, notif_da_56,,, delayed_TCLKA, delayed_DA[56] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[57], Tdc, Tcdx, notif_da_57,,, delayed_TCLKA, delayed_DA[57] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[57], Tdc, Tcdx, notif_da_57,,, delayed_TCLKA, delayed_DA[57] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[58], Tdc, Tcdx, notif_da_58,,, delayed_TCLKA, delayed_DA[58] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[58], Tdc, Tcdx, notif_da_58,,, delayed_TCLKA, delayed_DA[58] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[59], Tdc, Tcdx, notif_da_59,,, delayed_TCLKA, delayed_DA[59] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[59], Tdc, Tcdx, notif_da_59,,, delayed_TCLKA, delayed_DA[59] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[60], Tdc, Tcdx, notif_da_60,,, delayed_TCLKA, delayed_DA[60] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[60], Tdc, Tcdx, notif_da_60,,, delayed_TCLKA, delayed_DA[60] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[61], Tdc, Tcdx, notif_da_61,,, delayed_TCLKA, delayed_DA[61] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[61], Tdc, Tcdx, notif_da_61,,, delayed_TCLKA, delayed_DA[61] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[62], Tdc, Tcdx, notif_da_62,,, delayed_TCLKA, delayed_DA[62] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[62], Tdc, Tcdx, notif_da_62,,, delayed_TCLKA, delayed_DA[62] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[63], Tdc, Tcdx, notif_da_63,,, delayed_TCLKA, delayed_DA[63] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[63], Tdc, Tcdx, notif_da_63,,, delayed_TCLKA, delayed_DA[63] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[64], Tdc, Tcdx, notif_da_64,,, delayed_TCLKA, delayed_DA[64] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[64], Tdc, Tcdx, notif_da_64,,, delayed_TCLKA, delayed_DA[64] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[65], Tdc, Tcdx, notif_da_65,,, delayed_TCLKA, delayed_DA[65] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[65], Tdc, Tcdx, notif_da_65,,, delayed_TCLKA, delayed_DA[65] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[66], Tdc, Tcdx, notif_da_66,,, delayed_TCLKA, delayed_DA[66] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[66], Tdc, Tcdx, notif_da_66,,, delayed_TCLKA, delayed_DA[66] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[67], Tdc, Tcdx, notif_da_67,,, delayed_TCLKA, delayed_DA[67] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[67], Tdc, Tcdx, notif_da_67,,, delayed_TCLKA, delayed_DA[67] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[68], Tdc, Tcdx, notif_da_68,,, delayed_TCLKA, delayed_DA[68] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[68], Tdc, Tcdx, notif_da_68,,, delayed_TCLKA, delayed_DA[68] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[69], Tdc, Tcdx, notif_da_69,,, delayed_TCLKA, delayed_DA[69] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[69], Tdc, Tcdx, notif_da_69,,, delayed_TCLKA, delayed_DA[69] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[70], Tdc, Tcdx, notif_da_70,,, delayed_TCLKA, delayed_DA[70] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[70], Tdc, Tcdx, notif_da_70,,, delayed_TCLKA, delayed_DA[70] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[71], Tdc, Tcdx, notif_da_71,,, delayed_TCLKA, delayed_DA[71] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[71], Tdc, Tcdx, notif_da_71,,, delayed_TCLKA, delayed_DA[71] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[72], Tdc, Tcdx, notif_da_72,,, delayed_TCLKA, delayed_DA[72] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[72], Tdc, Tcdx, notif_da_72,,, delayed_TCLKA, delayed_DA[72] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[73], Tdc, Tcdx, notif_da_73,,, delayed_TCLKA, delayed_DA[73] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[73], Tdc, Tcdx, notif_da_73,,, delayed_TCLKA, delayed_DA[73] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[74], Tdc, Tcdx, notif_da_74,,, delayed_TCLKA, delayed_DA[74] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[74], Tdc, Tcdx, notif_da_74,,, delayed_TCLKA, delayed_DA[74] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[75], Tdc, Tcdx, notif_da_75,,, delayed_TCLKA, delayed_DA[75] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[75], Tdc, Tcdx, notif_da_75,,, delayed_TCLKA, delayed_DA[75] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[76], Tdc, Tcdx, notif_da_76,,, delayed_TCLKA, delayed_DA[76] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[76], Tdc, Tcdx, notif_da_76,,, delayed_TCLKA, delayed_DA[76] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[77], Tdc, Tcdx, notif_da_77,,, delayed_TCLKA, delayed_DA[77] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[77], Tdc, Tcdx, notif_da_77,,, delayed_TCLKA, delayed_DA[77] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[78], Tdc, Tcdx, notif_da_78,,, delayed_TCLKA, delayed_DA[78] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[78], Tdc, Tcdx, notif_da_78,,, delayed_TCLKA, delayed_DA[78] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[79], Tdc, Tcdx, notif_da_79,,, delayed_TCLKA, delayed_DA[79] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[79], Tdc, Tcdx, notif_da_79,,, delayed_TCLKA, delayed_DA[79] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[80], Tdc, Tcdx, notif_da_80,,, delayed_TCLKA, delayed_DA[80] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[80], Tdc, Tcdx, notif_da_80,,, delayed_TCLKA, delayed_DA[80] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[81], Tdc, Tcdx, notif_da_81,,, delayed_TCLKA, delayed_DA[81] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[81], Tdc, Tcdx, notif_da_81,,, delayed_TCLKA, delayed_DA[81] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[82], Tdc, Tcdx, notif_da_82,,, delayed_TCLKA, delayed_DA[82] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[82], Tdc, Tcdx, notif_da_82,,, delayed_TCLKA, delayed_DA[82] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[83], Tdc, Tcdx, notif_da_83,,, delayed_TCLKA, delayed_DA[83] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[83], Tdc, Tcdx, notif_da_83,,, delayed_TCLKA, delayed_DA[83] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[84], Tdc, Tcdx, notif_da_84,,, delayed_TCLKA, delayed_DA[84] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[84], Tdc, Tcdx, notif_da_84,,, delayed_TCLKA, delayed_DA[84] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[85], Tdc, Tcdx, notif_da_85,,, delayed_TCLKA, delayed_DA[85] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[85], Tdc, Tcdx, notif_da_85,,, delayed_TCLKA, delayed_DA[85] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[86], Tdc, Tcdx, notif_da_86,,, delayed_TCLKA, delayed_DA[86] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[86], Tdc, Tcdx, notif_da_86,,, delayed_TCLKA, delayed_DA[86] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[87], Tdc, Tcdx, notif_da_87,,, delayed_TCLKA, delayed_DA[87] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[87], Tdc, Tcdx, notif_da_87,,, delayed_TCLKA, delayed_DA[87] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[88], Tdc, Tcdx, notif_da_88,,, delayed_TCLKA, delayed_DA[88] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[88], Tdc, Tcdx, notif_da_88,,, delayed_TCLKA, delayed_DA[88] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[89], Tdc, Tcdx, notif_da_89,,, delayed_TCLKA, delayed_DA[89] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[89], Tdc, Tcdx, notif_da_89,,, delayed_TCLKA, delayed_DA[89] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[90], Tdc, Tcdx, notif_da_90,,, delayed_TCLKA, delayed_DA[90] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[90], Tdc, Tcdx, notif_da_90,,, delayed_TCLKA, delayed_DA[90] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[91], Tdc, Tcdx, notif_da_91,,, delayed_TCLKA, delayed_DA[91] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[91], Tdc, Tcdx, notif_da_91,,, delayed_TCLKA, delayed_DA[91] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[92], Tdc, Tcdx, notif_da_92,,, delayed_TCLKA, delayed_DA[92] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[92], Tdc, Tcdx, notif_da_92,,, delayed_TCLKA, delayed_DA[92] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[93], Tdc, Tcdx, notif_da_93,,, delayed_TCLKA, delayed_DA[93] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[93], Tdc, Tcdx, notif_da_93,,, delayed_TCLKA, delayed_DA[93] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[94], Tdc, Tcdx, notif_da_94,,, delayed_TCLKA, delayed_DA[94] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[94], Tdc, Tcdx, notif_da_94,,, delayed_TCLKA, delayed_DA[94] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[95], Tdc, Tcdx, notif_da_95,,, delayed_TCLKA, delayed_DA[95] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[95], Tdc, Tcdx, notif_da_95,,, delayed_TCLKA, delayed_DA[95] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[96], Tdc, Tcdx, notif_da_96,,, delayed_TCLKA, delayed_DA[96] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[96], Tdc, Tcdx, notif_da_96,,, delayed_TCLKA, delayed_DA[96] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[97], Tdc, Tcdx, notif_da_97,,, delayed_TCLKA, delayed_DA[97] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[97], Tdc, Tcdx, notif_da_97,,, delayed_TCLKA, delayed_DA[97] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[98], Tdc, Tcdx, notif_da_98,,, delayed_TCLKA, delayed_DA[98] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[98], Tdc, Tcdx, notif_da_98,,, delayed_TCLKA, delayed_DA[98] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[99], Tdc, Tcdx, notif_da_99,,, delayed_TCLKA, delayed_DA[99] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[99], Tdc, Tcdx, notif_da_99,,, delayed_TCLKA, delayed_DA[99] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[100], Tdc, Tcdx, notif_da_100,,, delayed_TCLKA, delayed_DA[100] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[100], Tdc, Tcdx, notif_da_100,,, delayed_TCLKA, delayed_DA[100] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[101], Tdc, Tcdx, notif_da_101,,, delayed_TCLKA, delayed_DA[101] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[101], Tdc, Tcdx, notif_da_101,,, delayed_TCLKA, delayed_DA[101] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[102], Tdc, Tcdx, notif_da_102,,, delayed_TCLKA, delayed_DA[102] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[102], Tdc, Tcdx, notif_da_102,,, delayed_TCLKA, delayed_DA[102] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[103], Tdc, Tcdx, notif_da_103,,, delayed_TCLKA, delayed_DA[103] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[103], Tdc, Tcdx, notif_da_103,,, delayed_TCLKA, delayed_DA[103] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[104], Tdc, Tcdx, notif_da_104,,, delayed_TCLKA, delayed_DA[104] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[104], Tdc, Tcdx, notif_da_104,,, delayed_TCLKA, delayed_DA[104] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[105], Tdc, Tcdx, notif_da_105,,, delayed_TCLKA, delayed_DA[105] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[105], Tdc, Tcdx, notif_da_105,,, delayed_TCLKA, delayed_DA[105] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[106], Tdc, Tcdx, notif_da_106,,, delayed_TCLKA, delayed_DA[106] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[106], Tdc, Tcdx, notif_da_106,,, delayed_TCLKA, delayed_DA[106] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[107], Tdc, Tcdx, notif_da_107,,, delayed_TCLKA, delayed_DA[107] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[107], Tdc, Tcdx, notif_da_107,,, delayed_TCLKA, delayed_DA[107] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[108], Tdc, Tcdx, notif_da_108,,, delayed_TCLKA, delayed_DA[108] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[108], Tdc, Tcdx, notif_da_108,,, delayed_TCLKA, delayed_DA[108] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[109], Tdc, Tcdx, notif_da_109,,, delayed_TCLKA, delayed_DA[109] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[109], Tdc, Tcdx, notif_da_109,,, delayed_TCLKA, delayed_DA[109] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[110], Tdc, Tcdx, notif_da_110,,, delayed_TCLKA, delayed_DA[110] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[110], Tdc, Tcdx, notif_da_110,,, delayed_TCLKA, delayed_DA[110] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[111], Tdc, Tcdx, notif_da_111,,, delayed_TCLKA, delayed_DA[111] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[111], Tdc, Tcdx, notif_da_111,,, delayed_TCLKA, delayed_DA[111] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[112], Tdc, Tcdx, notif_da_112,,, delayed_TCLKA, delayed_DA[112] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[112], Tdc, Tcdx, notif_da_112,,, delayed_TCLKA, delayed_DA[112] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[113], Tdc, Tcdx, notif_da_113,,, delayed_TCLKA, delayed_DA[113] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[113], Tdc, Tcdx, notif_da_113,,, delayed_TCLKA, delayed_DA[113] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[114], Tdc, Tcdx, notif_da_114,,, delayed_TCLKA, delayed_DA[114] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[114], Tdc, Tcdx, notif_da_114,,, delayed_TCLKA, delayed_DA[114] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[115], Tdc, Tcdx, notif_da_115,,, delayed_TCLKA, delayed_DA[115] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[115], Tdc, Tcdx, notif_da_115,,, delayed_TCLKA, delayed_DA[115] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[116], Tdc, Tcdx, notif_da_116,,, delayed_TCLKA, delayed_DA[116] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[116], Tdc, Tcdx, notif_da_116,,, delayed_TCLKA, delayed_DA[116] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[117], Tdc, Tcdx, notif_da_117,,, delayed_TCLKA, delayed_DA[117] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[117], Tdc, Tcdx, notif_da_117,,, delayed_TCLKA, delayed_DA[117] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[118], Tdc, Tcdx, notif_da_118,,, delayed_TCLKA, delayed_DA[118] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[118], Tdc, Tcdx, notif_da_118,,, delayed_TCLKA, delayed_DA[118] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[119], Tdc, Tcdx, notif_da_119,,, delayed_TCLKA, delayed_DA[119] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[119], Tdc, Tcdx, notif_da_119,,, delayed_TCLKA, delayed_DA[119] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[120], Tdc, Tcdx, notif_da_120,,, delayed_TCLKA, delayed_DA[120] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[120], Tdc, Tcdx, notif_da_120,,, delayed_TCLKA, delayed_DA[120] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[121], Tdc, Tcdx, notif_da_121,,, delayed_TCLKA, delayed_DA[121] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[121], Tdc, Tcdx, notif_da_121,,, delayed_TCLKA, delayed_DA[121] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[122], Tdc, Tcdx, notif_da_122,,, delayed_TCLKA, delayed_DA[122] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[122], Tdc, Tcdx, notif_da_122,,, delayed_TCLKA, delayed_DA[122] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[123], Tdc, Tcdx, notif_da_123,,, delayed_TCLKA, delayed_DA[123] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[123], Tdc, Tcdx, notif_da_123,,, delayed_TCLKA, delayed_DA[123] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[124], Tdc, Tcdx, notif_da_124,,, delayed_TCLKA, delayed_DA[124] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[124], Tdc, Tcdx, notif_da_124,,, delayed_TCLKA, delayed_DA[124] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[125], Tdc, Tcdx, notif_da_125,,, delayed_TCLKA, delayed_DA[125] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[125], Tdc, Tcdx, notif_da_125,,, delayed_TCLKA, delayed_DA[125] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[126], Tdc, Tcdx, notif_da_126,,, delayed_TCLKA, delayed_DA[126] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[126], Tdc, Tcdx, notif_da_126,,, delayed_TCLKA, delayed_DA[126] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[127], Tdc, Tcdx, notif_da_127,,, delayed_TCLKA, delayed_DA[127] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[127], Tdc, Tcdx, notif_da_127,,, delayed_TCLKA, delayed_DA[127] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[128], Tdc, Tcdx, notif_da_128,,, delayed_TCLKA, delayed_DA[128] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[128], Tdc, Tcdx, notif_da_128,,, delayed_TCLKA, delayed_DA[128] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[129], Tdc, Tcdx, notif_da_129,,, delayed_TCLKA, delayed_DA[129] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[129], Tdc, Tcdx, notif_da_129,,, delayed_TCLKA, delayed_DA[129] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[130], Tdc, Tcdx, notif_da_130,,, delayed_TCLKA, delayed_DA[130] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[130], Tdc, Tcdx, notif_da_130,,, delayed_TCLKA, delayed_DA[130] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[131], Tdc, Tcdx, notif_da_131,,, delayed_TCLKA, delayed_DA[131] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[131], Tdc, Tcdx, notif_da_131,,, delayed_TCLKA, delayed_DA[131] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[132], Tdc, Tcdx, notif_da_132,,, delayed_TCLKA, delayed_DA[132] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[132], Tdc, Tcdx, notif_da_132,,, delayed_TCLKA, delayed_DA[132] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[133], Tdc, Tcdx, notif_da_133,,, delayed_TCLKA, delayed_DA[133] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[133], Tdc, Tcdx, notif_da_133,,, delayed_TCLKA, delayed_DA[133] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[134], Tdc, Tcdx, notif_da_134,,, delayed_TCLKA, delayed_DA[134] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[134], Tdc, Tcdx, notif_da_134,,, delayed_TCLKA, delayed_DA[134] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[135], Tdc, Tcdx, notif_da_135,,, delayed_TCLKA, delayed_DA[135] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[135], Tdc, Tcdx, notif_da_135,,, delayed_TCLKA, delayed_DA[135] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[136], Tdc, Tcdx, notif_da_136,,, delayed_TCLKA, delayed_DA[136] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[136], Tdc, Tcdx, notif_da_136,,, delayed_TCLKA, delayed_DA[136] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[137], Tdc, Tcdx, notif_da_137,,, delayed_TCLKA, delayed_DA[137] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[137], Tdc, Tcdx, notif_da_137,,, delayed_TCLKA, delayed_DA[137] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[138], Tdc, Tcdx, notif_da_138,,, delayed_TCLKA, delayed_DA[138] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[138], Tdc, Tcdx, notif_da_138,,, delayed_TCLKA, delayed_DA[138] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[139], Tdc, Tcdx, notif_da_139,,, delayed_TCLKA, delayed_DA[139] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[139], Tdc, Tcdx, notif_da_139,,, delayed_TCLKA, delayed_DA[139] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[140], Tdc, Tcdx, notif_da_140,,, delayed_TCLKA, delayed_DA[140] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[140], Tdc, Tcdx, notif_da_140,,, delayed_TCLKA, delayed_DA[140] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[141], Tdc, Tcdx, notif_da_141,,, delayed_TCLKA, delayed_DA[141] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[141], Tdc, Tcdx, notif_da_141,,, delayed_TCLKA, delayed_DA[141] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[142], Tdc, Tcdx, notif_da_142,,, delayed_TCLKA, delayed_DA[142] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[142], Tdc, Tcdx, notif_da_142,,, delayed_TCLKA, delayed_DA[142] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[143], Tdc, Tcdx, notif_da_143,,, delayed_TCLKA, delayed_DA[143] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[143], Tdc, Tcdx, notif_da_143,,, delayed_TCLKA, delayed_DA[143] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[144], Tdc, Tcdx, notif_da_144,,, delayed_TCLKA, delayed_DA[144] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[144], Tdc, Tcdx, notif_da_144,,, delayed_TCLKA, delayed_DA[144] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[145], Tdc, Tcdx, notif_da_145,,, delayed_TCLKA, delayed_DA[145] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[145], Tdc, Tcdx, notif_da_145,,, delayed_TCLKA, delayed_DA[145] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[146], Tdc, Tcdx, notif_da_146,,, delayed_TCLKA, delayed_DA[146] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[146], Tdc, Tcdx, notif_da_146,,, delayed_TCLKA, delayed_DA[146] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[147], Tdc, Tcdx, notif_da_147,,, delayed_TCLKA, delayed_DA[147] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[147], Tdc, Tcdx, notif_da_147,,, delayed_TCLKA, delayed_DA[147] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[148], Tdc, Tcdx, notif_da_148,,, delayed_TCLKA, delayed_DA[148] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[148], Tdc, Tcdx, notif_da_148,,, delayed_TCLKA, delayed_DA[148] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[149], Tdc, Tcdx, notif_da_149,,, delayed_TCLKA, delayed_DA[149] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[149], Tdc, Tcdx, notif_da_149,,, delayed_TCLKA, delayed_DA[149] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[150], Tdc, Tcdx, notif_da_150,,, delayed_TCLKA, delayed_DA[150] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[150], Tdc, Tcdx, notif_da_150,,, delayed_TCLKA, delayed_DA[150] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[151], Tdc, Tcdx, notif_da_151,,, delayed_TCLKA, delayed_DA[151] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[151], Tdc, Tcdx, notif_da_151,,, delayed_TCLKA, delayed_DA[151] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[152], Tdc, Tcdx, notif_da_152,,, delayed_TCLKA, delayed_DA[152] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[152], Tdc, Tcdx, notif_da_152,,, delayed_TCLKA, delayed_DA[152] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[153], Tdc, Tcdx, notif_da_153,,, delayed_TCLKA, delayed_DA[153] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[153], Tdc, Tcdx, notif_da_153,,, delayed_TCLKA, delayed_DA[153] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[154], Tdc, Tcdx, notif_da_154,,, delayed_TCLKA, delayed_DA[154] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[154], Tdc, Tcdx, notif_da_154,,, delayed_TCLKA, delayed_DA[154] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[155], Tdc, Tcdx, notif_da_155,,, delayed_TCLKA, delayed_DA[155] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[155], Tdc, Tcdx, notif_da_155,,, delayed_TCLKA, delayed_DA[155] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[156], Tdc, Tcdx, notif_da_156,,, delayed_TCLKA, delayed_DA[156] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[156], Tdc, Tcdx, notif_da_156,,, delayed_TCLKA, delayed_DA[156] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[157], Tdc, Tcdx, notif_da_157,,, delayed_TCLKA, delayed_DA[157] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[157], Tdc, Tcdx, notif_da_157,,, delayed_TCLKA, delayed_DA[157] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[158], Tdc, Tcdx, notif_da_158,,, delayed_TCLKA, delayed_DA[158] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[158], Tdc, Tcdx, notif_da_158,,, delayed_TCLKA, delayed_DA[158] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, posedge DA[159], Tdc, Tcdx, notif_da_159,,, delayed_TCLKA, delayed_DA[159] );
  $setuphold (posedge TCLKA  &&& ENDATCLKA, negedge DA[159], Tdc, Tcdx, notif_da_159,,, delayed_TCLKA, delayed_DA[159] );
  $setuphold (posedge CLKA  &&& ENWEACLKA, posedge WEA,Twc, Tcwx, notif_wea,,, delayed_CLKA, delayed_WEA );
  $setuphold (posedge CLKA  &&& ENWEACLKA, negedge WEA,Twc, Tcwx, notif_wea,,, delayed_CLKA, delayed_WEA );
  $setuphold (posedge TCLKA  &&& ENWEATCLKA, posedge WEA,Twc, Tcwx, notif_wea,,, delayed_TCLKA, delayed_WEA );
  $setuphold (posedge TCLKA  &&& ENWEATCLKA, negedge WEA,Twc, Tcwx, notif_wea,,, delayed_TCLKA, delayed_WEA );
  $setuphold (posedge CLKA  &&& ENMEACLKA, posedge MEA,Tmc, Tcmx, notif_mea,,, delayed_CLKA, delayed_MEA );
  $setuphold (posedge CLKA  &&& ENMEACLKA, negedge MEA,Tmc, Tcmx, notif_mea,,, delayed_CLKA, delayed_MEA );
  $setuphold (posedge TCLKA  &&& ENMEATCLKA, posedge MEA,Tmc, Tcmx, notif_mea,,, delayed_TCLKA, delayed_MEA );
  $setuphold (posedge TCLKA  &&& ENMEATCLKA, negedge MEA,Tmc, Tcmx, notif_mea,,, delayed_TCLKA, delayed_MEA );
  $setuphold (posedge TCLKA  &&& ENTADRATCLKA, posedge TADRA[0], Tac, Tcax, notif_adra_0,,, delayed_TCLKA, delayed_TADRA[0] );
  $setuphold (posedge TCLKA  &&& ENTADRATCLKA, negedge TADRA[0], Tac, Tcax, notif_adra_0,,, delayed_TCLKA, delayed_TADRA[0] );
  $setuphold (posedge TCLKA  &&& ENTADRATCLKA, posedge TADRA[1], Tac, Tcax, notif_adra_1,,, delayed_TCLKA, delayed_TADRA[1] );
  $setuphold (posedge TCLKA  &&& ENTADRATCLKA, negedge TADRA[1], Tac, Tcax, notif_adra_1,,, delayed_TCLKA, delayed_TADRA[1] );
  $setuphold (posedge TCLKA  &&& ENTADRATCLKA, posedge TADRA[2], Tac, Tcax, notif_adra_2,,, delayed_TCLKA, delayed_TADRA[2] );
  $setuphold (posedge TCLKA  &&& ENTADRATCLKA, negedge TADRA[2], Tac, Tcax, notif_adra_2,,, delayed_TCLKA, delayed_TADRA[2] );
  $setuphold (posedge TCLKA  &&& ENTADRATCLKA, posedge TADRA[3], Tac, Tcax, notif_adra_3,,, delayed_TCLKA, delayed_TADRA[3] );
  $setuphold (posedge TCLKA  &&& ENTADRATCLKA, negedge TADRA[3], Tac, Tcax, notif_adra_3,,, delayed_TCLKA, delayed_TADRA[3] );
  $setuphold (posedge TCLKA  &&& ENTADRATCLKA, posedge TADRA[4], Tac, Tcax, notif_adra_4,,, delayed_TCLKA, delayed_TADRA[4] );
  $setuphold (posedge TCLKA  &&& ENTADRATCLKA, negedge TADRA[4], Tac, Tcax, notif_adra_4,,, delayed_TCLKA, delayed_TADRA[4] );
  $setuphold (posedge TCLKA  &&& ENTADRATCLKA, posedge TADRA[5], Tac, Tcax, notif_adra_5,,, delayed_TCLKA, delayed_TADRA[5] );
  $setuphold (posedge TCLKA  &&& ENTADRATCLKA, negedge TADRA[5], Tac, Tcax, notif_adra_5,,, delayed_TCLKA, delayed_TADRA[5] );
  $setuphold (posedge TCLKA  &&& ENTADRATCLKA, posedge TADRA[6], Tac, Tcax, notif_adra_6,,, delayed_TCLKA, delayed_TADRA[6] );
  $setuphold (posedge TCLKA  &&& ENTADRATCLKA, negedge TADRA[6], Tac, Tcax, notif_adra_6,,, delayed_TCLKA, delayed_TADRA[6] );
  $setuphold (posedge TCLKA  &&& ENTADRATCLKA, posedge TADRA[7], Tac, Tcax, notif_adra_7,,, delayed_TCLKA, delayed_TADRA[7] );
  $setuphold (posedge TCLKA  &&& ENTADRATCLKA, negedge TADRA[7], Tac, Tcax, notif_adra_7,,, delayed_TCLKA, delayed_TADRA[7] );
  $setuphold (posedge TCLKA  &&& ENTADRATCLKA, posedge TADRA[8], Tac, Tcax, notif_adra_8,,, delayed_TCLKA, delayed_TADRA[8] );
  $setuphold (posedge TCLKA  &&& ENTADRATCLKA, negedge TADRA[8], Tac, Tcax, notif_adra_8,,, delayed_TCLKA, delayed_TADRA[8] );
  $setuphold (posedge TCLKA  &&& ENTADRATCLKA, posedge TADRA[9], Tac, Tcax, notif_adra_9,,, delayed_TCLKA, delayed_TADRA[9] );
  $setuphold (posedge TCLKA  &&& ENTADRATCLKA, negedge TADRA[9], Tac, Tcax, notif_adra_9,,, delayed_TCLKA, delayed_TADRA[9] );
  $setuphold (posedge TCLKA  &&& ENTADRATCLKA, posedge TADRA[10], Tac, Tcax, notif_adra_10,,, delayed_TCLKA, delayed_TADRA[10] );
  $setuphold (posedge TCLKA  &&& ENTADRATCLKA, negedge TADRA[10], Tac, Tcax, notif_adra_10,,, delayed_TCLKA, delayed_TADRA[10] );
  $setuphold (posedge CLKA  &&& ENTADRACLKA, posedge TADRA[0], Tac, Tcax, notif_adra_0,,, delayed_CLKA, delayed_TADRA[0] );
  $setuphold (posedge CLKA  &&& ENTADRACLKA, negedge TADRA[0], Tac, Tcax, notif_adra_0,,, delayed_CLKA, delayed_TADRA[0] );
  $setuphold (posedge CLKA  &&& ENTADRACLKA, posedge TADRA[1], Tac, Tcax, notif_adra_1,,, delayed_CLKA, delayed_TADRA[1] );
  $setuphold (posedge CLKA  &&& ENTADRACLKA, negedge TADRA[1], Tac, Tcax, notif_adra_1,,, delayed_CLKA, delayed_TADRA[1] );
  $setuphold (posedge CLKA  &&& ENTADRACLKA, posedge TADRA[2], Tac, Tcax, notif_adra_2,,, delayed_CLKA, delayed_TADRA[2] );
  $setuphold (posedge CLKA  &&& ENTADRACLKA, negedge TADRA[2], Tac, Tcax, notif_adra_2,,, delayed_CLKA, delayed_TADRA[2] );
  $setuphold (posedge CLKA  &&& ENTADRACLKA, posedge TADRA[3], Tac, Tcax, notif_adra_3,,, delayed_CLKA, delayed_TADRA[3] );
  $setuphold (posedge CLKA  &&& ENTADRACLKA, negedge TADRA[3], Tac, Tcax, notif_adra_3,,, delayed_CLKA, delayed_TADRA[3] );
  $setuphold (posedge CLKA  &&& ENTADRACLKA, posedge TADRA[4], Tac, Tcax, notif_adra_4,,, delayed_CLKA, delayed_TADRA[4] );
  $setuphold (posedge CLKA  &&& ENTADRACLKA, negedge TADRA[4], Tac, Tcax, notif_adra_4,,, delayed_CLKA, delayed_TADRA[4] );
  $setuphold (posedge CLKA  &&& ENTADRACLKA, posedge TADRA[5], Tac, Tcax, notif_adra_5,,, delayed_CLKA, delayed_TADRA[5] );
  $setuphold (posedge CLKA  &&& ENTADRACLKA, negedge TADRA[5], Tac, Tcax, notif_adra_5,,, delayed_CLKA, delayed_TADRA[5] );
  $setuphold (posedge CLKA  &&& ENTADRACLKA, posedge TADRA[6], Tac, Tcax, notif_adra_6,,, delayed_CLKA, delayed_TADRA[6] );
  $setuphold (posedge CLKA  &&& ENTADRACLKA, negedge TADRA[6], Tac, Tcax, notif_adra_6,,, delayed_CLKA, delayed_TADRA[6] );
  $setuphold (posedge CLKA  &&& ENTADRACLKA, posedge TADRA[7], Tac, Tcax, notif_adra_7,,, delayed_CLKA, delayed_TADRA[7] );
  $setuphold (posedge CLKA  &&& ENTADRACLKA, negedge TADRA[7], Tac, Tcax, notif_adra_7,,, delayed_CLKA, delayed_TADRA[7] );
  $setuphold (posedge CLKA  &&& ENTADRACLKA, posedge TADRA[8], Tac, Tcax, notif_adra_8,,, delayed_CLKA, delayed_TADRA[8] );
  $setuphold (posedge CLKA  &&& ENTADRACLKA, negedge TADRA[8], Tac, Tcax, notif_adra_8,,, delayed_CLKA, delayed_TADRA[8] );
  $setuphold (posedge CLKA  &&& ENTADRACLKA, posedge TADRA[9], Tac, Tcax, notif_adra_9,,, delayed_CLKA, delayed_TADRA[9] );
  $setuphold (posedge CLKA  &&& ENTADRACLKA, negedge TADRA[9], Tac, Tcax, notif_adra_9,,, delayed_CLKA, delayed_TADRA[9] );
  $setuphold (posedge CLKA  &&& ENTADRACLKA, posedge TADRA[10], Tac, Tcax, notif_adra_10,,, delayed_CLKA, delayed_TADRA[10] );
  $setuphold (posedge CLKA  &&& ENTADRACLKA, negedge TADRA[10], Tac, Tcax, notif_adra_10,,, delayed_CLKA, delayed_TADRA[10] );
  $setuphold (posedge TCLKA  &&& ENTDATCLKA, posedge TDA[0], Tbdc, Tbcdx, notif_tda_0,,, delayed_TCLKA, delayed_TDA[0] );
  $setuphold (posedge TCLKA  &&& ENTDATCLKA, negedge TDA[0], Tbdc, Tbcdx, notif_tda_0,,, delayed_TCLKA, delayed_TDA[0] );
  $setuphold (posedge TCLKA  &&& ENTDATCLKA, posedge TDA[1], Tbdc, Tbcdx, notif_tda_1,,, delayed_TCLKA, delayed_TDA[1] );
  $setuphold (posedge TCLKA  &&& ENTDATCLKA, negedge TDA[1], Tbdc, Tbcdx, notif_tda_1,,, delayed_TCLKA, delayed_TDA[1] );
  $setuphold (posedge TCLKA  &&& ENTDATCLKA, posedge TDA[2], Tbdc, Tbcdx, notif_tda_2,,, delayed_TCLKA, delayed_TDA[2] );
  $setuphold (posedge TCLKA  &&& ENTDATCLKA, negedge TDA[2], Tbdc, Tbcdx, notif_tda_2,,, delayed_TCLKA, delayed_TDA[2] );
  $setuphold (posedge TCLKA  &&& ENTDATCLKA, posedge TDA[3], Tbdc, Tbcdx, notif_tda_3,,, delayed_TCLKA, delayed_TDA[3] );
  $setuphold (posedge TCLKA  &&& ENTDATCLKA, negedge TDA[3], Tbdc, Tbcdx, notif_tda_3,,, delayed_TCLKA, delayed_TDA[3] );
  $setuphold (posedge CLKA  &&& ENTDACLKA, posedge TDA[0], Tbdc, Tbcdx, notif_tda_0,,, delayed_CLKA, delayed_TDA[0] );
  $setuphold (posedge CLKA  &&& ENTDACLKA, negedge TDA[0], Tbdc, Tbcdx, notif_tda_0,,, delayed_CLKA, delayed_TDA[0] );
  $setuphold (posedge CLKA  &&& ENTDACLKA, posedge TDA[1], Tbdc, Tbcdx, notif_tda_1,,, delayed_CLKA, delayed_TDA[1] );
  $setuphold (posedge CLKA  &&& ENTDACLKA, negedge TDA[1], Tbdc, Tbcdx, notif_tda_1,,, delayed_CLKA, delayed_TDA[1] );
  $setuphold (posedge CLKA  &&& ENTDACLKA, posedge TDA[2], Tbdc, Tbcdx, notif_tda_2,,, delayed_CLKA, delayed_TDA[2] );
  $setuphold (posedge CLKA  &&& ENTDACLKA, negedge TDA[2], Tbdc, Tbcdx, notif_tda_2,,, delayed_CLKA, delayed_TDA[2] );
  $setuphold (posedge CLKA  &&& ENTDACLKA, posedge TDA[3], Tbdc, Tbcdx, notif_tda_3,,, delayed_CLKA, delayed_TDA[3] );
  $setuphold (posedge CLKA  &&& ENTDACLKA, negedge TDA[3], Tbdc, Tbcdx, notif_tda_3,,, delayed_CLKA, delayed_TDA[3] );
  $setuphold (posedge TCLKA  &&& ENTWEATCLKA, posedge TWEA,Twc, Tcwx, notif_wea,,, delayed_TCLKA, delayed_TWEA );
  $setuphold (posedge TCLKA  &&& ENTWEATCLKA, negedge TWEA,Twc, Tcwx, notif_wea,,, delayed_TCLKA, delayed_TWEA );
  $setuphold (posedge CLKA  &&& ENTWEACLKA, posedge TWEA,Twc, Tcwx, notif_wea,,, delayed_CLKA, delayed_TWEA );
  $setuphold (posedge CLKA  &&& ENTWEACLKA, negedge TWEA,Twc, Tcwx, notif_wea,,, delayed_CLKA, delayed_TWEA );
  $setuphold (posedge TCLKA  &&& ENTMEATCLKA, posedge TMEA,Tmc, Tcmx, notif_mea,,, delayed_TCLKA, delayed_TMEA );
  $setuphold (posedge TCLKA  &&& ENTMEATCLKA, negedge TMEA,Tmc, Tcmx, notif_mea,,, delayed_TCLKA, delayed_TMEA );
  $setuphold (posedge CLKA  &&& ENTMEACLKA, posedge TMEA,Tmc, Tcmx, notif_mea,,, delayed_CLKA, delayed_TMEA );
  $setuphold (posedge CLKA  &&& ENTMEACLKA, negedge TMEA,Tmc, Tcmx, notif_mea,,, delayed_CLKA, delayed_TMEA );
  $setuphold (posedge CLKA  &&& ENBISTEA, posedge BISTEA,Tbc, Tcbx, notif_bistea,,, delayed_CLKA, delayed_BISTEA );
  $setuphold (posedge CLKA  &&& ENBISTEA, negedge BISTEA,Tbc, Tcbx, notif_bistea,,, delayed_CLKA, delayed_BISTEA );
  $setuphold (posedge TCLKA  &&& ENTBISTEA, posedge BISTEA,Tbc, Tcbx, notif_bistea,,, delayed_TCLKA, delayed_BISTEA );
  $setuphold (posedge TCLKA  &&& ENTBISTEA, negedge BISTEA,Tbc, Tcbx, notif_bistea,,, delayed_TCLKA, delayed_BISTEA );
  $setuphold (posedge CLKA  &&& ENTEST1A, posedge TEST1A,TT1C, 0, notif_test1a,,, delayed_CLKA, delayed_TEST1A );
  $setuphold (posedge CLKA  &&& ENTEST1A, negedge TEST1A,TT1C, 0, notif_test1a,,, delayed_CLKA, delayed_TEST1A );
  $setuphold (negedge CLKA  &&& ENTEST1A, posedge TEST1A,0, TCT1X, notif_test1a,,, delayed_CLKA, delayed_TEST1A );
  $setuphold (negedge CLKA  &&& ENTEST1A, negedge TEST1A,0, TCT1X, notif_test1a,,, delayed_CLKA, delayed_TEST1A );
  $setuphold (posedge TCLKA  &&& ENTTEST1A, posedge TEST1A,TT1C, 0, notif_test1a,,, delayed_TCLKA, delayed_TEST1A );
  $setuphold (posedge TCLKA  &&& ENTTEST1A, negedge TEST1A,TT1C, 0, notif_test1a,,, delayed_TCLKA, delayed_TEST1A );
  $setuphold (negedge TCLKA  &&& ENTTEST1A, posedge TEST1A,0, TCT1X, notif_test1a,,, delayed_TCLKA, delayed_TEST1A );
  $setuphold (negedge TCLKA  &&& ENTTEST1A, negedge TEST1A,0, TCT1X, notif_test1a,,, delayed_TCLKA, delayed_TEST1A );
  $setuphold (posedge CLKA  &&& ENRMEA, posedge RMEA,Trmec, Tcrmex, notif_rmea,,, delayed_CLKA, delayed_RMEA );
  $setuphold (posedge CLKA  &&& ENRMEA, negedge RMEA,Trmec, Tcrmex, notif_rmea,,, delayed_CLKA, delayed_RMEA );
  $setuphold (posedge TCLKA  &&& ENTRMEA, posedge RMEA,Trmec, Tcrmex, notif_rmea,,, delayed_TCLKA, delayed_RMEA );
  $setuphold (posedge TCLKA  &&& ENTRMEA, negedge RMEA,Trmec, Tcrmex, notif_rmea,,, delayed_TCLKA, delayed_RMEA );
  $setuphold (posedge CLKA  &&& ENRMA, posedge RMA[0], Trmc, Tcrmx, notif_rma,,, delayed_CLKA, delayed_RMA[0] );
  $setuphold (posedge CLKA  &&& ENRMA, negedge RMA[0], Trmc, Tcrmx, notif_rma,,, delayed_CLKA, delayed_RMA[0] );
  $setuphold (posedge CLKA  &&& ENRMA, posedge RMA[1], Trmc, Tcrmx, notif_rma,,, delayed_CLKA, delayed_RMA[1] );
  $setuphold (posedge CLKA  &&& ENRMA, negedge RMA[1], Trmc, Tcrmx, notif_rma,,, delayed_CLKA, delayed_RMA[1] );
  $setuphold (posedge CLKA  &&& ENRMA, posedge RMA[2], Trmc, Tcrmx, notif_rma,,, delayed_CLKA, delayed_RMA[2] );
  $setuphold (posedge CLKA  &&& ENRMA, negedge RMA[2], Trmc, Tcrmx, notif_rma,,, delayed_CLKA, delayed_RMA[2] );
  $setuphold (posedge CLKA  &&& ENRMA, posedge RMA[3], Trmc, Tcrmx, notif_rma,,, delayed_CLKA, delayed_RMA[3] );
  $setuphold (posedge CLKA  &&& ENRMA, negedge RMA[3], Trmc, Tcrmx, notif_rma,,, delayed_CLKA, delayed_RMA[3] );
  $setuphold (posedge TCLKA  &&& ENTRMA, posedge RMA[0], Trmc, Tcrmx, notif_rma,,, delayed_TCLKA, delayed_RMA[0] );
  $setuphold (posedge TCLKA  &&& ENTRMA, negedge RMA[0], Trmc, Tcrmx, notif_rma,,, delayed_TCLKA, delayed_RMA[0] );
  $setuphold (posedge TCLKA  &&& ENTRMA, posedge RMA[1], Trmc, Tcrmx, notif_rma,,, delayed_TCLKA, delayed_RMA[1] );
  $setuphold (posedge TCLKA  &&& ENTRMA, negedge RMA[1], Trmc, Tcrmx, notif_rma,,, delayed_TCLKA, delayed_RMA[1] );
  $setuphold (posedge TCLKA  &&& ENTRMA, posedge RMA[2], Trmc, Tcrmx, notif_rma,,, delayed_TCLKA, delayed_RMA[2] );
  $setuphold (posedge TCLKA  &&& ENTRMA, negedge RMA[2], Trmc, Tcrmx, notif_rma,,, delayed_TCLKA, delayed_RMA[2] );
  $setuphold (posedge TCLKA  &&& ENTRMA, posedge RMA[3], Trmc, Tcrmx, notif_rma,,, delayed_TCLKA, delayed_RMA[3] );
  $setuphold (posedge TCLKA  &&& ENTRMA, negedge RMA[3], Trmc, Tcrmx, notif_rma,,, delayed_TCLKA, delayed_RMA[3] );
  $setuphold (posedge CLKA  &&& ENCDA, posedge CDA[0], Tdatc, Tcdatx, notif_cda_0,,, delayed_CLKA, delayed_CDA[0] );
  $setuphold (posedge CLKA  &&& ENCDA, negedge CDA[0], Tdatc, Tcdatx, notif_cda_0,,, delayed_CLKA, delayed_CDA[0] );
  $setuphold (posedge CLKA  &&& ENCDA, posedge CDA[1], Tdatc, Tcdatx, notif_cda_1,,, delayed_CLKA, delayed_CDA[1] );
  $setuphold (posedge CLKA  &&& ENCDA, negedge CDA[1], Tdatc, Tcdatx, notif_cda_1,,, delayed_CLKA, delayed_CDA[1] );
  $setuphold (posedge CLKA  &&& ENCDA, posedge CDA[2], Tdatc, Tcdatx, notif_cda_2,,, delayed_CLKA, delayed_CDA[2] );
  $setuphold (posedge CLKA  &&& ENCDA, negedge CDA[2], Tdatc, Tcdatx, notif_cda_2,,, delayed_CLKA, delayed_CDA[2] );
  $setuphold (posedge CLKA  &&& ENCDA, posedge CDA[3], Tdatc, Tcdatx, notif_cda_3,,, delayed_CLKA, delayed_CDA[3] );
  $setuphold (posedge CLKA  &&& ENCDA, negedge CDA[3], Tdatc, Tcdatx, notif_cda_3,,, delayed_CLKA, delayed_CDA[3] );
  $setuphold (posedge TCLKA  &&& ENTCDA, posedge CDA[0], Tdatc, Tcdatx, notif_cda_0,,, delayed_TCLKA, delayed_CDA[0] );
  $setuphold (posedge TCLKA  &&& ENTCDA, negedge CDA[0], Tdatc, Tcdatx, notif_cda_0,,, delayed_TCLKA, delayed_CDA[0] );
  $setuphold (posedge TCLKA  &&& ENTCDA, posedge CDA[1], Tdatc, Tcdatx, notif_cda_1,,, delayed_TCLKA, delayed_CDA[1] );
  $setuphold (posedge TCLKA  &&& ENTCDA, negedge CDA[1], Tdatc, Tcdatx, notif_cda_1,,, delayed_TCLKA, delayed_CDA[1] );
  $setuphold (posedge TCLKA  &&& ENTCDA, posedge CDA[2], Tdatc, Tcdatx, notif_cda_2,,, delayed_TCLKA, delayed_CDA[2] );
  $setuphold (posedge TCLKA  &&& ENTCDA, negedge CDA[2], Tdatc, Tcdatx, notif_cda_2,,, delayed_TCLKA, delayed_CDA[2] );
  $setuphold (posedge TCLKA  &&& ENTCDA, posedge CDA[3], Tdatc, Tcdatx, notif_cda_3,,, delayed_TCLKA, delayed_CDA[3] );
  $setuphold (posedge TCLKA  &&& ENTCDA, negedge CDA[3], Tdatc, Tcdatx, notif_cda_3,,, delayed_TCLKA, delayed_CDA[3] );
  $setuphold (posedge CLKA  &&& ENCAPTA, posedge CAPTA,Tcaptc, Tcaptx, notif_capta,,, delayed_CLKA, delayed_CAPTA );
  $setuphold (posedge CLKA  &&& ENCAPTA, negedge CAPTA,Tcaptc, Tcaptx, notif_capta,,, delayed_CLKA, delayed_CAPTA );
  $setuphold (posedge TCLKA  &&& ENTCAPTA, posedge CAPTA,Tcaptc, Tcaptx, notif_capta,,, delayed_TCLKA, delayed_CAPTA );
  $setuphold (posedge TCLKA  &&& ENTCAPTA, negedge CAPTA,Tcaptc, Tcaptx, notif_capta,,, delayed_TCLKA, delayed_CAPTA );
  $setuphold (posedge CLKA  &&& ENPIPEMEACLKA, posedge PIPEMEA,Tpmec, Tpmex, notif_pipemea,,, delayed_CLKA, delayed_PIPEMEA );
  $setuphold (posedge CLKA  &&& ENPIPEMEACLKA, negedge PIPEMEA,Tpmec, Tpmex, notif_pipemea,,, delayed_CLKA, delayed_PIPEMEA );
  $setuphold (posedge TCLKA  &&& ENPIPEMEATCLKA, posedge PIPEMEA,Tpmec, Tpmex, notif_pipemea,,, delayed_TCLKA, delayed_PIPEMEA );
  $setuphold (posedge TCLKA  &&& ENPIPEMEATCLKA, negedge PIPEMEA,Tpmec, Tpmex, notif_pipemea,,, delayed_TCLKA, delayed_PIPEMEA );
  $setuphold (posedge TCLKA  &&& ENTPIPEMEATCLKA, posedge TPIPEMEA,Tpmec, Tpmex, notif_pipemea,,, delayed_TCLKA, delayed_TPIPEMEA );
  $setuphold (posedge TCLKA  &&& ENTPIPEMEATCLKA, negedge TPIPEMEA,Tpmec, Tpmex, notif_pipemea,,, delayed_TCLKA, delayed_TPIPEMEA );
  $setuphold (posedge CLKA  &&& ENTPIPEMEACLKA, posedge TPIPEMEA,Tpmec, Tpmex, notif_pipemea,,, delayed_CLKA, delayed_TPIPEMEA );
  $setuphold (posedge CLKA  &&& ENTPIPEMEACLKA, negedge TPIPEMEA,Tpmec, Tpmex, notif_pipemea,,, delayed_CLKA, delayed_TPIPEMEA );
  $setuphold (posedge CLKA  &&& ENTCLKEA, posedge TCLKEA,Ttclkec, 0, notif_tclkea,,, delayed_CLKA, delayed_TCLKEA );
  $setuphold (posedge CLKA  &&& ENTCLKEA, negedge TCLKEA,Ttclkec, 0, notif_tclkea,,, delayed_CLKA, delayed_TCLKEA );
  $setuphold (negedge CLKA  &&& ENTCLKEA, posedge TCLKEA,0, Ttclkex, notif_tclkea,,, delayed_CLKA, delayed_TCLKEA );
  $setuphold (negedge CLKA  &&& ENTCLKEA, negedge TCLKEA,0, Ttclkex, notif_tclkea,,, delayed_CLKA, delayed_TCLKEA );
  $setuphold (posedge TCLKA  &&& ENTTCLKEA, posedge TCLKEA,Ttclkec, 0, notif_tclkea,,, delayed_TCLKA, delayed_TCLKEA );
  $setuphold (posedge TCLKA  &&& ENTTCLKEA, negedge TCLKEA,Ttclkec, 0, notif_tclkea,,, delayed_TCLKA, delayed_TCLKEA );
  $setuphold (negedge TCLKA  &&& ENTTCLKEA, posedge TCLKEA,0, Ttclkex, notif_tclkea,,, delayed_TCLKA, delayed_TCLKEA );
  $setuphold (negedge TCLKA  &&& ENTTCLKEA, negedge TCLKEA,0, Ttclkex, notif_tclkea,,, delayed_TCLKA, delayed_TCLKEA );
  $setuphold (posedge CLKA  &&& ENSTICKYA, posedge STICKYA,Tstc, Tstx, notif_stickya,,, delayed_CLKA, delayed_STICKYA );
  $setuphold (posedge CLKA  &&& ENSTICKYA, negedge STICKYA,Tstc, Tstx, notif_stickya,,, delayed_CLKA, delayed_STICKYA );
  $setuphold (posedge TCLKA  &&& ENTSTICKYA, posedge STICKYA,Tstc, Tstx, notif_stickya,,, delayed_TCLKA, delayed_STICKYA );
  $setuphold (posedge TCLKA  &&& ENTSTICKYA, negedge STICKYA,Tstc, Tstx, notif_stickya,,, delayed_TCLKA, delayed_STICKYA );
  $setuphold (posedge CLKA  &&& ENSI_QA, posedge SI_QA,Tsiqc, Tsiqx, notif_si_qa,,, delayed_CLKA, delayed_SI_QA );
  $setuphold (posedge CLKA  &&& ENSI_QA, negedge SI_QA,Tsiqc, Tsiqx, notif_si_qa,,, delayed_CLKA, delayed_SI_QA );
  $setuphold (posedge TCLKA  &&& ENTSI_QA, posedge SI_QA,Tsiqc, Tsiqx, notif_si_qa,,, delayed_TCLKA, delayed_SI_QA );
  $setuphold (posedge TCLKA  &&& ENTSI_QA, negedge SI_QA,Tsiqc, Tsiqx, notif_si_qa,,, delayed_TCLKA, delayed_SI_QA );
  $setuphold (posedge CLKA  &&& ENSI_DA, posedge SI_DA,Tsidc, Tsidx, notif_si_da,,, delayed_CLKA, delayed_SI_DA );
  $setuphold (posedge CLKA  &&& ENSI_DA, negedge SI_DA,Tsidc, Tsidx, notif_si_da,,, delayed_CLKA, delayed_SI_DA );
  $setuphold (posedge TCLKA  &&& ENTSI_DA, posedge SI_DA,Tsidc, Tsidx, notif_si_da,,, delayed_TCLKA, delayed_SI_DA );
  $setuphold (posedge TCLKA  &&& ENTSI_DA, negedge SI_DA,Tsidc, Tsidx, notif_si_da,,, delayed_TCLKA, delayed_SI_DA );
  $setuphold (posedge CLKA  &&& ENSE_QA, posedge SE_QA,Tseqc, Tseqx, notif_se_qa,,, delayed_CLKA, delayed_SE_QA );
  $setuphold (posedge CLKA  &&& ENSE_QA, negedge SE_QA,Tseqc, Tseqx, notif_se_qa,,, delayed_CLKA, delayed_SE_QA );
  $setuphold (posedge TCLKA  &&& ENTSE_QA, posedge SE_QA,Tseqc, Tseqx, notif_se_qa,,, delayed_TCLKA, delayed_SE_QA );
  $setuphold (posedge TCLKA  &&& ENTSE_QA, negedge SE_QA,Tseqc, Tseqx, notif_se_qa,,, delayed_TCLKA, delayed_SE_QA );
  $setuphold (posedge CLKA  &&& ENSE_INA, posedge SE_INA,Tseinc, Tseinx, notif_se_ina,,, delayed_CLKA, delayed_SE_INA );
  $setuphold (posedge CLKA  &&& ENSE_INA, negedge SE_INA,Tseinc, Tseinx, notif_se_ina,,, delayed_CLKA, delayed_SE_INA );
  $setuphold (posedge TCLKA  &&& ENTSE_INA, posedge SE_INA,Tseinc, Tseinx, notif_se_ina,,, delayed_TCLKA, delayed_SE_INA );
  $setuphold (posedge TCLKA  &&& ENTSE_INA, negedge SE_INA,Tseinc, Tseinx, notif_se_ina,,, delayed_TCLKA, delayed_SE_INA );
  $setuphold (posedge CLKA  &&& ENSI_CNTRA, posedge SI_CNTRA,Tsicc, Tsicx, notif_si_cntra,,, delayed_CLKA, delayed_SI_CNTRA );
  $setuphold (posedge CLKA  &&& ENSI_CNTRA, negedge SI_CNTRA,Tsicc, Tsicx, notif_si_cntra,,, delayed_CLKA, delayed_SI_CNTRA );
  $setuphold (posedge TCLKA  &&& ENTSI_CNTRA, posedge SI_CNTRA,Tsicc, Tsicx, notif_si_cntra,,, delayed_TCLKA, delayed_SI_CNTRA );
  $setuphold (posedge TCLKA  &&& ENTSI_CNTRA, negedge SI_CNTRA,Tsicc, Tsicx, notif_si_cntra,,, delayed_TCLKA, delayed_SI_CNTRA );
  $setuphold (posedge CLKA  &&& ENDFTCLKEN_A, posedge DFTCLKEN,Tswtc, Tswtx, notif_dftclken,,, delayed_CLKA, delayed_DFTCLKEN );
  $setuphold (posedge CLKA  &&& ENDFTCLKEN_A, negedge DFTCLKEN,Tswtc, Tswtx, notif_dftclken,,, delayed_CLKA, delayed_DFTCLKEN );
  $setuphold (posedge TCLKA  &&& ENTDFTCLKEN_A, posedge DFTCLKEN,Tswtc, Tswtx, notif_dftclken,,, delayed_TCLKA, delayed_DFTCLKEN );
  $setuphold (posedge TCLKA  &&& ENTDFTCLKEN_A, negedge DFTCLKEN,Tswtc, Tswtx, notif_dftclken,,, delayed_TCLKA, delayed_DFTCLKEN );
  $setuphold (posedge CLKB  &&& ENDFTCLKEN_B, posedge DFTCLKEN,Tswtc, Tswtx, notif_dftclken_b,,, delayed_CLKB, delayed_DFTCLKEN );
  $setuphold (posedge CLKB  &&& ENDFTCLKEN_B, negedge DFTCLKEN,Tswtc, Tswtx, notif_dftclken_b,,, delayed_CLKB, delayed_DFTCLKEN );
  $setuphold (posedge TCLKB  &&& ENTDFTCLKEN_B, posedge DFTCLKEN,Tswtc, Tswtx, notif_dftclken_b,,, delayed_TCLKB, delayed_DFTCLKEN );
  $setuphold (posedge TCLKB  &&& ENTDFTCLKEN_B, negedge DFTCLKEN,Tswtc, Tswtx, notif_dftclken_b,,, delayed_TCLKB, delayed_DFTCLKEN );
  $setuphold (posedge CLKA  &&& ENDFTMASK_A, posedge DFTMASK,Tdftc, Tdftx, notif_dftmask,,, delayed_CLKA, delayed_DFTMASK );
  $setuphold (posedge CLKA  &&& ENDFTMASK_A, negedge DFTMASK,Tdftc, Tdftx, notif_dftmask,,, delayed_CLKA, delayed_DFTMASK );
  $setuphold (posedge TCLKA  &&& ENTDFTMASK_A, posedge DFTMASK,Tdftc, Tdftx, notif_dftmask,,, delayed_TCLKA, delayed_DFTMASK );
  $setuphold (posedge TCLKA  &&& ENTDFTMASK_A, negedge DFTMASK,Tdftc, Tdftx, notif_dftmask,,, delayed_TCLKA, delayed_DFTMASK );
  $setuphold (posedge CLKB  &&& ENDFTMASK_B, posedge DFTMASK,Tdftc, Tdftx, notif_dftmask_b,,, delayed_CLKB, delayed_DFTMASK );
  $setuphold (posedge CLKB  &&& ENDFTMASK_B, negedge DFTMASK,Tdftc, Tdftx, notif_dftmask_b,,, delayed_CLKB, delayed_DFTMASK );
  $setuphold (posedge TCLKB  &&& ENTDFTMASK_B, posedge DFTMASK,Tdftc, Tdftx, notif_dftmask_b,,, delayed_TCLKB, delayed_DFTMASK );
  $setuphold (posedge TCLKB  &&& ENTDFTMASK_B, negedge DFTMASK,Tdftc, Tdftx, notif_dftmask_b,,, delayed_TCLKB, delayed_DFTMASK );
  $setuphold (posedge CLKA  &&& ENLS_A, posedge LS,Trlsc, Tlsx, notif_ls,,, delayed_CLKA, delayed_LS );
  $setuphold (posedge CLKA  &&& ENLS_A, negedge LS,Tflsc, Tlsx, notif_ls,,, delayed_CLKA, delayed_LS );
  $setuphold (posedge TCLKA  &&& ENTLS_A, posedge LS,Trlsc, Tlsx, notif_ls,,, delayed_TCLKA, delayed_LS );
  $setuphold (posedge TCLKA  &&& ENTLS_A, negedge LS,Tflsc, Tlsx, notif_ls,,, delayed_TCLKA, delayed_LS );
  $setuphold (posedge CLKB  &&& ENLS_B, posedge LS,Trlsc, Tlsx, notif_ls_b,,, delayed_CLKB, delayed_LS );
  $setuphold (posedge CLKB  &&& ENLS_B, negedge LS,Tflsc, Tlsx, notif_ls_b,,, delayed_CLKB, delayed_LS );
  $setuphold (posedge TCLKB  &&& ENTLS_B, posedge LS,Trlsc, Tlsx, notif_ls_b,,, delayed_TCLKB, delayed_LS );
  $setuphold (posedge TCLKB  &&& ENTLS_B, negedge LS,Tflsc, Tlsx, notif_ls_b,,, delayed_TCLKB, delayed_LS );
  $setuphold (posedge CLKB  &&& ENADRBCLKB, posedge ADRB[0], Tac, Tcax, notif_adrb_0,,, delayed_CLKB, delayed_ADRB[0] );
  $setuphold (posedge CLKB  &&& ENADRBCLKB, negedge ADRB[0], Tac, Tcax, notif_adrb_0,,, delayed_CLKB, delayed_ADRB[0] );
  $setuphold (posedge CLKB  &&& ENADRBCLKB, posedge ADRB[1], Tac, Tcax, notif_adrb_1,,, delayed_CLKB, delayed_ADRB[1] );
  $setuphold (posedge CLKB  &&& ENADRBCLKB, negedge ADRB[1], Tac, Tcax, notif_adrb_1,,, delayed_CLKB, delayed_ADRB[1] );
  $setuphold (posedge CLKB  &&& ENADRBCLKB, posedge ADRB[2], Tac, Tcax, notif_adrb_2,,, delayed_CLKB, delayed_ADRB[2] );
  $setuphold (posedge CLKB  &&& ENADRBCLKB, negedge ADRB[2], Tac, Tcax, notif_adrb_2,,, delayed_CLKB, delayed_ADRB[2] );
  $setuphold (posedge CLKB  &&& ENADRBCLKB, posedge ADRB[3], Tac, Tcax, notif_adrb_3,,, delayed_CLKB, delayed_ADRB[3] );
  $setuphold (posedge CLKB  &&& ENADRBCLKB, negedge ADRB[3], Tac, Tcax, notif_adrb_3,,, delayed_CLKB, delayed_ADRB[3] );
  $setuphold (posedge CLKB  &&& ENADRBCLKB, posedge ADRB[4], Tac, Tcax, notif_adrb_4,,, delayed_CLKB, delayed_ADRB[4] );
  $setuphold (posedge CLKB  &&& ENADRBCLKB, negedge ADRB[4], Tac, Tcax, notif_adrb_4,,, delayed_CLKB, delayed_ADRB[4] );
  $setuphold (posedge CLKB  &&& ENADRBCLKB, posedge ADRB[5], Tac, Tcax, notif_adrb_5,,, delayed_CLKB, delayed_ADRB[5] );
  $setuphold (posedge CLKB  &&& ENADRBCLKB, negedge ADRB[5], Tac, Tcax, notif_adrb_5,,, delayed_CLKB, delayed_ADRB[5] );
  $setuphold (posedge CLKB  &&& ENADRBCLKB, posedge ADRB[6], Tac, Tcax, notif_adrb_6,,, delayed_CLKB, delayed_ADRB[6] );
  $setuphold (posedge CLKB  &&& ENADRBCLKB, negedge ADRB[6], Tac, Tcax, notif_adrb_6,,, delayed_CLKB, delayed_ADRB[6] );
  $setuphold (posedge CLKB  &&& ENADRBCLKB, posedge ADRB[7], Tac, Tcax, notif_adrb_7,,, delayed_CLKB, delayed_ADRB[7] );
  $setuphold (posedge CLKB  &&& ENADRBCLKB, negedge ADRB[7], Tac, Tcax, notif_adrb_7,,, delayed_CLKB, delayed_ADRB[7] );
  $setuphold (posedge CLKB  &&& ENADRBCLKB, posedge ADRB[8], Tac, Tcax, notif_adrb_8,,, delayed_CLKB, delayed_ADRB[8] );
  $setuphold (posedge CLKB  &&& ENADRBCLKB, negedge ADRB[8], Tac, Tcax, notif_adrb_8,,, delayed_CLKB, delayed_ADRB[8] );
  $setuphold (posedge CLKB  &&& ENADRBCLKB, posedge ADRB[9], Tac, Tcax, notif_adrb_9,,, delayed_CLKB, delayed_ADRB[9] );
  $setuphold (posedge CLKB  &&& ENADRBCLKB, negedge ADRB[9], Tac, Tcax, notif_adrb_9,,, delayed_CLKB, delayed_ADRB[9] );
  $setuphold (posedge CLKB  &&& ENADRBCLKB, posedge ADRB[10], Tac, Tcax, notif_adrb_10,,, delayed_CLKB, delayed_ADRB[10] );
  $setuphold (posedge CLKB  &&& ENADRBCLKB, negedge ADRB[10], Tac, Tcax, notif_adrb_10,,, delayed_CLKB, delayed_ADRB[10] );
  $setuphold (posedge TCLKB  &&& ENADRBTCLKB, posedge ADRB[0], Tac, Tcax, notif_adrb_0,,, delayed_TCLKB, delayed_ADRB[0] );
  $setuphold (posedge TCLKB  &&& ENADRBTCLKB, negedge ADRB[0], Tac, Tcax, notif_adrb_0,,, delayed_TCLKB, delayed_ADRB[0] );
  $setuphold (posedge TCLKB  &&& ENADRBTCLKB, posedge ADRB[1], Tac, Tcax, notif_adrb_1,,, delayed_TCLKB, delayed_ADRB[1] );
  $setuphold (posedge TCLKB  &&& ENADRBTCLKB, negedge ADRB[1], Tac, Tcax, notif_adrb_1,,, delayed_TCLKB, delayed_ADRB[1] );
  $setuphold (posedge TCLKB  &&& ENADRBTCLKB, posedge ADRB[2], Tac, Tcax, notif_adrb_2,,, delayed_TCLKB, delayed_ADRB[2] );
  $setuphold (posedge TCLKB  &&& ENADRBTCLKB, negedge ADRB[2], Tac, Tcax, notif_adrb_2,,, delayed_TCLKB, delayed_ADRB[2] );
  $setuphold (posedge TCLKB  &&& ENADRBTCLKB, posedge ADRB[3], Tac, Tcax, notif_adrb_3,,, delayed_TCLKB, delayed_ADRB[3] );
  $setuphold (posedge TCLKB  &&& ENADRBTCLKB, negedge ADRB[3], Tac, Tcax, notif_adrb_3,,, delayed_TCLKB, delayed_ADRB[3] );
  $setuphold (posedge TCLKB  &&& ENADRBTCLKB, posedge ADRB[4], Tac, Tcax, notif_adrb_4,,, delayed_TCLKB, delayed_ADRB[4] );
  $setuphold (posedge TCLKB  &&& ENADRBTCLKB, negedge ADRB[4], Tac, Tcax, notif_adrb_4,,, delayed_TCLKB, delayed_ADRB[4] );
  $setuphold (posedge TCLKB  &&& ENADRBTCLKB, posedge ADRB[5], Tac, Tcax, notif_adrb_5,,, delayed_TCLKB, delayed_ADRB[5] );
  $setuphold (posedge TCLKB  &&& ENADRBTCLKB, negedge ADRB[5], Tac, Tcax, notif_adrb_5,,, delayed_TCLKB, delayed_ADRB[5] );
  $setuphold (posedge TCLKB  &&& ENADRBTCLKB, posedge ADRB[6], Tac, Tcax, notif_adrb_6,,, delayed_TCLKB, delayed_ADRB[6] );
  $setuphold (posedge TCLKB  &&& ENADRBTCLKB, negedge ADRB[6], Tac, Tcax, notif_adrb_6,,, delayed_TCLKB, delayed_ADRB[6] );
  $setuphold (posedge TCLKB  &&& ENADRBTCLKB, posedge ADRB[7], Tac, Tcax, notif_adrb_7,,, delayed_TCLKB, delayed_ADRB[7] );
  $setuphold (posedge TCLKB  &&& ENADRBTCLKB, negedge ADRB[7], Tac, Tcax, notif_adrb_7,,, delayed_TCLKB, delayed_ADRB[7] );
  $setuphold (posedge TCLKB  &&& ENADRBTCLKB, posedge ADRB[8], Tac, Tcax, notif_adrb_8,,, delayed_TCLKB, delayed_ADRB[8] );
  $setuphold (posedge TCLKB  &&& ENADRBTCLKB, negedge ADRB[8], Tac, Tcax, notif_adrb_8,,, delayed_TCLKB, delayed_ADRB[8] );
  $setuphold (posedge TCLKB  &&& ENADRBTCLKB, posedge ADRB[9], Tac, Tcax, notif_adrb_9,,, delayed_TCLKB, delayed_ADRB[9] );
  $setuphold (posedge TCLKB  &&& ENADRBTCLKB, negedge ADRB[9], Tac, Tcax, notif_adrb_9,,, delayed_TCLKB, delayed_ADRB[9] );
  $setuphold (posedge TCLKB  &&& ENADRBTCLKB, posedge ADRB[10], Tac, Tcax, notif_adrb_10,,, delayed_TCLKB, delayed_ADRB[10] );
  $setuphold (posedge TCLKB  &&& ENADRBTCLKB, negedge ADRB[10], Tac, Tcax, notif_adrb_10,,, delayed_TCLKB, delayed_ADRB[10] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[0], Tdc, Tcdx, notif_db_0,,, delayed_CLKB, delayed_DB[0] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[0], Tdc, Tcdx, notif_db_0,,, delayed_CLKB, delayed_DB[0] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[1], Tdc, Tcdx, notif_db_1,,, delayed_CLKB, delayed_DB[1] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[1], Tdc, Tcdx, notif_db_1,,, delayed_CLKB, delayed_DB[1] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[2], Tdc, Tcdx, notif_db_2,,, delayed_CLKB, delayed_DB[2] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[2], Tdc, Tcdx, notif_db_2,,, delayed_CLKB, delayed_DB[2] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[3], Tdc, Tcdx, notif_db_3,,, delayed_CLKB, delayed_DB[3] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[3], Tdc, Tcdx, notif_db_3,,, delayed_CLKB, delayed_DB[3] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[4], Tdc, Tcdx, notif_db_4,,, delayed_CLKB, delayed_DB[4] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[4], Tdc, Tcdx, notif_db_4,,, delayed_CLKB, delayed_DB[4] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[5], Tdc, Tcdx, notif_db_5,,, delayed_CLKB, delayed_DB[5] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[5], Tdc, Tcdx, notif_db_5,,, delayed_CLKB, delayed_DB[5] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[6], Tdc, Tcdx, notif_db_6,,, delayed_CLKB, delayed_DB[6] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[6], Tdc, Tcdx, notif_db_6,,, delayed_CLKB, delayed_DB[6] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[7], Tdc, Tcdx, notif_db_7,,, delayed_CLKB, delayed_DB[7] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[7], Tdc, Tcdx, notif_db_7,,, delayed_CLKB, delayed_DB[7] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[8], Tdc, Tcdx, notif_db_8,,, delayed_CLKB, delayed_DB[8] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[8], Tdc, Tcdx, notif_db_8,,, delayed_CLKB, delayed_DB[8] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[9], Tdc, Tcdx, notif_db_9,,, delayed_CLKB, delayed_DB[9] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[9], Tdc, Tcdx, notif_db_9,,, delayed_CLKB, delayed_DB[9] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[10], Tdc, Tcdx, notif_db_10,,, delayed_CLKB, delayed_DB[10] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[10], Tdc, Tcdx, notif_db_10,,, delayed_CLKB, delayed_DB[10] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[11], Tdc, Tcdx, notif_db_11,,, delayed_CLKB, delayed_DB[11] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[11], Tdc, Tcdx, notif_db_11,,, delayed_CLKB, delayed_DB[11] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[12], Tdc, Tcdx, notif_db_12,,, delayed_CLKB, delayed_DB[12] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[12], Tdc, Tcdx, notif_db_12,,, delayed_CLKB, delayed_DB[12] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[13], Tdc, Tcdx, notif_db_13,,, delayed_CLKB, delayed_DB[13] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[13], Tdc, Tcdx, notif_db_13,,, delayed_CLKB, delayed_DB[13] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[14], Tdc, Tcdx, notif_db_14,,, delayed_CLKB, delayed_DB[14] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[14], Tdc, Tcdx, notif_db_14,,, delayed_CLKB, delayed_DB[14] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[15], Tdc, Tcdx, notif_db_15,,, delayed_CLKB, delayed_DB[15] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[15], Tdc, Tcdx, notif_db_15,,, delayed_CLKB, delayed_DB[15] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[16], Tdc, Tcdx, notif_db_16,,, delayed_CLKB, delayed_DB[16] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[16], Tdc, Tcdx, notif_db_16,,, delayed_CLKB, delayed_DB[16] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[17], Tdc, Tcdx, notif_db_17,,, delayed_CLKB, delayed_DB[17] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[17], Tdc, Tcdx, notif_db_17,,, delayed_CLKB, delayed_DB[17] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[18], Tdc, Tcdx, notif_db_18,,, delayed_CLKB, delayed_DB[18] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[18], Tdc, Tcdx, notif_db_18,,, delayed_CLKB, delayed_DB[18] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[19], Tdc, Tcdx, notif_db_19,,, delayed_CLKB, delayed_DB[19] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[19], Tdc, Tcdx, notif_db_19,,, delayed_CLKB, delayed_DB[19] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[20], Tdc, Tcdx, notif_db_20,,, delayed_CLKB, delayed_DB[20] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[20], Tdc, Tcdx, notif_db_20,,, delayed_CLKB, delayed_DB[20] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[21], Tdc, Tcdx, notif_db_21,,, delayed_CLKB, delayed_DB[21] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[21], Tdc, Tcdx, notif_db_21,,, delayed_CLKB, delayed_DB[21] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[22], Tdc, Tcdx, notif_db_22,,, delayed_CLKB, delayed_DB[22] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[22], Tdc, Tcdx, notif_db_22,,, delayed_CLKB, delayed_DB[22] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[23], Tdc, Tcdx, notif_db_23,,, delayed_CLKB, delayed_DB[23] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[23], Tdc, Tcdx, notif_db_23,,, delayed_CLKB, delayed_DB[23] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[24], Tdc, Tcdx, notif_db_24,,, delayed_CLKB, delayed_DB[24] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[24], Tdc, Tcdx, notif_db_24,,, delayed_CLKB, delayed_DB[24] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[25], Tdc, Tcdx, notif_db_25,,, delayed_CLKB, delayed_DB[25] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[25], Tdc, Tcdx, notif_db_25,,, delayed_CLKB, delayed_DB[25] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[26], Tdc, Tcdx, notif_db_26,,, delayed_CLKB, delayed_DB[26] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[26], Tdc, Tcdx, notif_db_26,,, delayed_CLKB, delayed_DB[26] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[27], Tdc, Tcdx, notif_db_27,,, delayed_CLKB, delayed_DB[27] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[27], Tdc, Tcdx, notif_db_27,,, delayed_CLKB, delayed_DB[27] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[28], Tdc, Tcdx, notif_db_28,,, delayed_CLKB, delayed_DB[28] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[28], Tdc, Tcdx, notif_db_28,,, delayed_CLKB, delayed_DB[28] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[29], Tdc, Tcdx, notif_db_29,,, delayed_CLKB, delayed_DB[29] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[29], Tdc, Tcdx, notif_db_29,,, delayed_CLKB, delayed_DB[29] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[30], Tdc, Tcdx, notif_db_30,,, delayed_CLKB, delayed_DB[30] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[30], Tdc, Tcdx, notif_db_30,,, delayed_CLKB, delayed_DB[30] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[31], Tdc, Tcdx, notif_db_31,,, delayed_CLKB, delayed_DB[31] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[31], Tdc, Tcdx, notif_db_31,,, delayed_CLKB, delayed_DB[31] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[32], Tdc, Tcdx, notif_db_32,,, delayed_CLKB, delayed_DB[32] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[32], Tdc, Tcdx, notif_db_32,,, delayed_CLKB, delayed_DB[32] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[33], Tdc, Tcdx, notif_db_33,,, delayed_CLKB, delayed_DB[33] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[33], Tdc, Tcdx, notif_db_33,,, delayed_CLKB, delayed_DB[33] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[34], Tdc, Tcdx, notif_db_34,,, delayed_CLKB, delayed_DB[34] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[34], Tdc, Tcdx, notif_db_34,,, delayed_CLKB, delayed_DB[34] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[35], Tdc, Tcdx, notif_db_35,,, delayed_CLKB, delayed_DB[35] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[35], Tdc, Tcdx, notif_db_35,,, delayed_CLKB, delayed_DB[35] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[36], Tdc, Tcdx, notif_db_36,,, delayed_CLKB, delayed_DB[36] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[36], Tdc, Tcdx, notif_db_36,,, delayed_CLKB, delayed_DB[36] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[37], Tdc, Tcdx, notif_db_37,,, delayed_CLKB, delayed_DB[37] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[37], Tdc, Tcdx, notif_db_37,,, delayed_CLKB, delayed_DB[37] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[38], Tdc, Tcdx, notif_db_38,,, delayed_CLKB, delayed_DB[38] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[38], Tdc, Tcdx, notif_db_38,,, delayed_CLKB, delayed_DB[38] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[39], Tdc, Tcdx, notif_db_39,,, delayed_CLKB, delayed_DB[39] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[39], Tdc, Tcdx, notif_db_39,,, delayed_CLKB, delayed_DB[39] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[40], Tdc, Tcdx, notif_db_40,,, delayed_CLKB, delayed_DB[40] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[40], Tdc, Tcdx, notif_db_40,,, delayed_CLKB, delayed_DB[40] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[41], Tdc, Tcdx, notif_db_41,,, delayed_CLKB, delayed_DB[41] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[41], Tdc, Tcdx, notif_db_41,,, delayed_CLKB, delayed_DB[41] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[42], Tdc, Tcdx, notif_db_42,,, delayed_CLKB, delayed_DB[42] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[42], Tdc, Tcdx, notif_db_42,,, delayed_CLKB, delayed_DB[42] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[43], Tdc, Tcdx, notif_db_43,,, delayed_CLKB, delayed_DB[43] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[43], Tdc, Tcdx, notif_db_43,,, delayed_CLKB, delayed_DB[43] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[44], Tdc, Tcdx, notif_db_44,,, delayed_CLKB, delayed_DB[44] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[44], Tdc, Tcdx, notif_db_44,,, delayed_CLKB, delayed_DB[44] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[45], Tdc, Tcdx, notif_db_45,,, delayed_CLKB, delayed_DB[45] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[45], Tdc, Tcdx, notif_db_45,,, delayed_CLKB, delayed_DB[45] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[46], Tdc, Tcdx, notif_db_46,,, delayed_CLKB, delayed_DB[46] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[46], Tdc, Tcdx, notif_db_46,,, delayed_CLKB, delayed_DB[46] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[47], Tdc, Tcdx, notif_db_47,,, delayed_CLKB, delayed_DB[47] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[47], Tdc, Tcdx, notif_db_47,,, delayed_CLKB, delayed_DB[47] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[48], Tdc, Tcdx, notif_db_48,,, delayed_CLKB, delayed_DB[48] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[48], Tdc, Tcdx, notif_db_48,,, delayed_CLKB, delayed_DB[48] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[49], Tdc, Tcdx, notif_db_49,,, delayed_CLKB, delayed_DB[49] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[49], Tdc, Tcdx, notif_db_49,,, delayed_CLKB, delayed_DB[49] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[50], Tdc, Tcdx, notif_db_50,,, delayed_CLKB, delayed_DB[50] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[50], Tdc, Tcdx, notif_db_50,,, delayed_CLKB, delayed_DB[50] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[51], Tdc, Tcdx, notif_db_51,,, delayed_CLKB, delayed_DB[51] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[51], Tdc, Tcdx, notif_db_51,,, delayed_CLKB, delayed_DB[51] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[52], Tdc, Tcdx, notif_db_52,,, delayed_CLKB, delayed_DB[52] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[52], Tdc, Tcdx, notif_db_52,,, delayed_CLKB, delayed_DB[52] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[53], Tdc, Tcdx, notif_db_53,,, delayed_CLKB, delayed_DB[53] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[53], Tdc, Tcdx, notif_db_53,,, delayed_CLKB, delayed_DB[53] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[54], Tdc, Tcdx, notif_db_54,,, delayed_CLKB, delayed_DB[54] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[54], Tdc, Tcdx, notif_db_54,,, delayed_CLKB, delayed_DB[54] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[55], Tdc, Tcdx, notif_db_55,,, delayed_CLKB, delayed_DB[55] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[55], Tdc, Tcdx, notif_db_55,,, delayed_CLKB, delayed_DB[55] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[56], Tdc, Tcdx, notif_db_56,,, delayed_CLKB, delayed_DB[56] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[56], Tdc, Tcdx, notif_db_56,,, delayed_CLKB, delayed_DB[56] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[57], Tdc, Tcdx, notif_db_57,,, delayed_CLKB, delayed_DB[57] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[57], Tdc, Tcdx, notif_db_57,,, delayed_CLKB, delayed_DB[57] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[58], Tdc, Tcdx, notif_db_58,,, delayed_CLKB, delayed_DB[58] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[58], Tdc, Tcdx, notif_db_58,,, delayed_CLKB, delayed_DB[58] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[59], Tdc, Tcdx, notif_db_59,,, delayed_CLKB, delayed_DB[59] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[59], Tdc, Tcdx, notif_db_59,,, delayed_CLKB, delayed_DB[59] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[60], Tdc, Tcdx, notif_db_60,,, delayed_CLKB, delayed_DB[60] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[60], Tdc, Tcdx, notif_db_60,,, delayed_CLKB, delayed_DB[60] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[61], Tdc, Tcdx, notif_db_61,,, delayed_CLKB, delayed_DB[61] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[61], Tdc, Tcdx, notif_db_61,,, delayed_CLKB, delayed_DB[61] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[62], Tdc, Tcdx, notif_db_62,,, delayed_CLKB, delayed_DB[62] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[62], Tdc, Tcdx, notif_db_62,,, delayed_CLKB, delayed_DB[62] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[63], Tdc, Tcdx, notif_db_63,,, delayed_CLKB, delayed_DB[63] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[63], Tdc, Tcdx, notif_db_63,,, delayed_CLKB, delayed_DB[63] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[64], Tdc, Tcdx, notif_db_64,,, delayed_CLKB, delayed_DB[64] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[64], Tdc, Tcdx, notif_db_64,,, delayed_CLKB, delayed_DB[64] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[65], Tdc, Tcdx, notif_db_65,,, delayed_CLKB, delayed_DB[65] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[65], Tdc, Tcdx, notif_db_65,,, delayed_CLKB, delayed_DB[65] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[66], Tdc, Tcdx, notif_db_66,,, delayed_CLKB, delayed_DB[66] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[66], Tdc, Tcdx, notif_db_66,,, delayed_CLKB, delayed_DB[66] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[67], Tdc, Tcdx, notif_db_67,,, delayed_CLKB, delayed_DB[67] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[67], Tdc, Tcdx, notif_db_67,,, delayed_CLKB, delayed_DB[67] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[68], Tdc, Tcdx, notif_db_68,,, delayed_CLKB, delayed_DB[68] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[68], Tdc, Tcdx, notif_db_68,,, delayed_CLKB, delayed_DB[68] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[69], Tdc, Tcdx, notif_db_69,,, delayed_CLKB, delayed_DB[69] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[69], Tdc, Tcdx, notif_db_69,,, delayed_CLKB, delayed_DB[69] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[70], Tdc, Tcdx, notif_db_70,,, delayed_CLKB, delayed_DB[70] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[70], Tdc, Tcdx, notif_db_70,,, delayed_CLKB, delayed_DB[70] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[71], Tdc, Tcdx, notif_db_71,,, delayed_CLKB, delayed_DB[71] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[71], Tdc, Tcdx, notif_db_71,,, delayed_CLKB, delayed_DB[71] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[72], Tdc, Tcdx, notif_db_72,,, delayed_CLKB, delayed_DB[72] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[72], Tdc, Tcdx, notif_db_72,,, delayed_CLKB, delayed_DB[72] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[73], Tdc, Tcdx, notif_db_73,,, delayed_CLKB, delayed_DB[73] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[73], Tdc, Tcdx, notif_db_73,,, delayed_CLKB, delayed_DB[73] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[74], Tdc, Tcdx, notif_db_74,,, delayed_CLKB, delayed_DB[74] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[74], Tdc, Tcdx, notif_db_74,,, delayed_CLKB, delayed_DB[74] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[75], Tdc, Tcdx, notif_db_75,,, delayed_CLKB, delayed_DB[75] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[75], Tdc, Tcdx, notif_db_75,,, delayed_CLKB, delayed_DB[75] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[76], Tdc, Tcdx, notif_db_76,,, delayed_CLKB, delayed_DB[76] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[76], Tdc, Tcdx, notif_db_76,,, delayed_CLKB, delayed_DB[76] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[77], Tdc, Tcdx, notif_db_77,,, delayed_CLKB, delayed_DB[77] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[77], Tdc, Tcdx, notif_db_77,,, delayed_CLKB, delayed_DB[77] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[78], Tdc, Tcdx, notif_db_78,,, delayed_CLKB, delayed_DB[78] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[78], Tdc, Tcdx, notif_db_78,,, delayed_CLKB, delayed_DB[78] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[79], Tdc, Tcdx, notif_db_79,,, delayed_CLKB, delayed_DB[79] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[79], Tdc, Tcdx, notif_db_79,,, delayed_CLKB, delayed_DB[79] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[80], Tdc, Tcdx, notif_db_80,,, delayed_CLKB, delayed_DB[80] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[80], Tdc, Tcdx, notif_db_80,,, delayed_CLKB, delayed_DB[80] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[81], Tdc, Tcdx, notif_db_81,,, delayed_CLKB, delayed_DB[81] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[81], Tdc, Tcdx, notif_db_81,,, delayed_CLKB, delayed_DB[81] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[82], Tdc, Tcdx, notif_db_82,,, delayed_CLKB, delayed_DB[82] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[82], Tdc, Tcdx, notif_db_82,,, delayed_CLKB, delayed_DB[82] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[83], Tdc, Tcdx, notif_db_83,,, delayed_CLKB, delayed_DB[83] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[83], Tdc, Tcdx, notif_db_83,,, delayed_CLKB, delayed_DB[83] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[84], Tdc, Tcdx, notif_db_84,,, delayed_CLKB, delayed_DB[84] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[84], Tdc, Tcdx, notif_db_84,,, delayed_CLKB, delayed_DB[84] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[85], Tdc, Tcdx, notif_db_85,,, delayed_CLKB, delayed_DB[85] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[85], Tdc, Tcdx, notif_db_85,,, delayed_CLKB, delayed_DB[85] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[86], Tdc, Tcdx, notif_db_86,,, delayed_CLKB, delayed_DB[86] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[86], Tdc, Tcdx, notif_db_86,,, delayed_CLKB, delayed_DB[86] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[87], Tdc, Tcdx, notif_db_87,,, delayed_CLKB, delayed_DB[87] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[87], Tdc, Tcdx, notif_db_87,,, delayed_CLKB, delayed_DB[87] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[88], Tdc, Tcdx, notif_db_88,,, delayed_CLKB, delayed_DB[88] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[88], Tdc, Tcdx, notif_db_88,,, delayed_CLKB, delayed_DB[88] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[89], Tdc, Tcdx, notif_db_89,,, delayed_CLKB, delayed_DB[89] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[89], Tdc, Tcdx, notif_db_89,,, delayed_CLKB, delayed_DB[89] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[90], Tdc, Tcdx, notif_db_90,,, delayed_CLKB, delayed_DB[90] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[90], Tdc, Tcdx, notif_db_90,,, delayed_CLKB, delayed_DB[90] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[91], Tdc, Tcdx, notif_db_91,,, delayed_CLKB, delayed_DB[91] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[91], Tdc, Tcdx, notif_db_91,,, delayed_CLKB, delayed_DB[91] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[92], Tdc, Tcdx, notif_db_92,,, delayed_CLKB, delayed_DB[92] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[92], Tdc, Tcdx, notif_db_92,,, delayed_CLKB, delayed_DB[92] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[93], Tdc, Tcdx, notif_db_93,,, delayed_CLKB, delayed_DB[93] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[93], Tdc, Tcdx, notif_db_93,,, delayed_CLKB, delayed_DB[93] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[94], Tdc, Tcdx, notif_db_94,,, delayed_CLKB, delayed_DB[94] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[94], Tdc, Tcdx, notif_db_94,,, delayed_CLKB, delayed_DB[94] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[95], Tdc, Tcdx, notif_db_95,,, delayed_CLKB, delayed_DB[95] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[95], Tdc, Tcdx, notif_db_95,,, delayed_CLKB, delayed_DB[95] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[96], Tdc, Tcdx, notif_db_96,,, delayed_CLKB, delayed_DB[96] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[96], Tdc, Tcdx, notif_db_96,,, delayed_CLKB, delayed_DB[96] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[97], Tdc, Tcdx, notif_db_97,,, delayed_CLKB, delayed_DB[97] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[97], Tdc, Tcdx, notif_db_97,,, delayed_CLKB, delayed_DB[97] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[98], Tdc, Tcdx, notif_db_98,,, delayed_CLKB, delayed_DB[98] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[98], Tdc, Tcdx, notif_db_98,,, delayed_CLKB, delayed_DB[98] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[99], Tdc, Tcdx, notif_db_99,,, delayed_CLKB, delayed_DB[99] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[99], Tdc, Tcdx, notif_db_99,,, delayed_CLKB, delayed_DB[99] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[100], Tdc, Tcdx, notif_db_100,,, delayed_CLKB, delayed_DB[100] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[100], Tdc, Tcdx, notif_db_100,,, delayed_CLKB, delayed_DB[100] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[101], Tdc, Tcdx, notif_db_101,,, delayed_CLKB, delayed_DB[101] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[101], Tdc, Tcdx, notif_db_101,,, delayed_CLKB, delayed_DB[101] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[102], Tdc, Tcdx, notif_db_102,,, delayed_CLKB, delayed_DB[102] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[102], Tdc, Tcdx, notif_db_102,,, delayed_CLKB, delayed_DB[102] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[103], Tdc, Tcdx, notif_db_103,,, delayed_CLKB, delayed_DB[103] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[103], Tdc, Tcdx, notif_db_103,,, delayed_CLKB, delayed_DB[103] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[104], Tdc, Tcdx, notif_db_104,,, delayed_CLKB, delayed_DB[104] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[104], Tdc, Tcdx, notif_db_104,,, delayed_CLKB, delayed_DB[104] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[105], Tdc, Tcdx, notif_db_105,,, delayed_CLKB, delayed_DB[105] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[105], Tdc, Tcdx, notif_db_105,,, delayed_CLKB, delayed_DB[105] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[106], Tdc, Tcdx, notif_db_106,,, delayed_CLKB, delayed_DB[106] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[106], Tdc, Tcdx, notif_db_106,,, delayed_CLKB, delayed_DB[106] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[107], Tdc, Tcdx, notif_db_107,,, delayed_CLKB, delayed_DB[107] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[107], Tdc, Tcdx, notif_db_107,,, delayed_CLKB, delayed_DB[107] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[108], Tdc, Tcdx, notif_db_108,,, delayed_CLKB, delayed_DB[108] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[108], Tdc, Tcdx, notif_db_108,,, delayed_CLKB, delayed_DB[108] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[109], Tdc, Tcdx, notif_db_109,,, delayed_CLKB, delayed_DB[109] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[109], Tdc, Tcdx, notif_db_109,,, delayed_CLKB, delayed_DB[109] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[110], Tdc, Tcdx, notif_db_110,,, delayed_CLKB, delayed_DB[110] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[110], Tdc, Tcdx, notif_db_110,,, delayed_CLKB, delayed_DB[110] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[111], Tdc, Tcdx, notif_db_111,,, delayed_CLKB, delayed_DB[111] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[111], Tdc, Tcdx, notif_db_111,,, delayed_CLKB, delayed_DB[111] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[112], Tdc, Tcdx, notif_db_112,,, delayed_CLKB, delayed_DB[112] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[112], Tdc, Tcdx, notif_db_112,,, delayed_CLKB, delayed_DB[112] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[113], Tdc, Tcdx, notif_db_113,,, delayed_CLKB, delayed_DB[113] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[113], Tdc, Tcdx, notif_db_113,,, delayed_CLKB, delayed_DB[113] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[114], Tdc, Tcdx, notif_db_114,,, delayed_CLKB, delayed_DB[114] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[114], Tdc, Tcdx, notif_db_114,,, delayed_CLKB, delayed_DB[114] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[115], Tdc, Tcdx, notif_db_115,,, delayed_CLKB, delayed_DB[115] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[115], Tdc, Tcdx, notif_db_115,,, delayed_CLKB, delayed_DB[115] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[116], Tdc, Tcdx, notif_db_116,,, delayed_CLKB, delayed_DB[116] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[116], Tdc, Tcdx, notif_db_116,,, delayed_CLKB, delayed_DB[116] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[117], Tdc, Tcdx, notif_db_117,,, delayed_CLKB, delayed_DB[117] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[117], Tdc, Tcdx, notif_db_117,,, delayed_CLKB, delayed_DB[117] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[118], Tdc, Tcdx, notif_db_118,,, delayed_CLKB, delayed_DB[118] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[118], Tdc, Tcdx, notif_db_118,,, delayed_CLKB, delayed_DB[118] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[119], Tdc, Tcdx, notif_db_119,,, delayed_CLKB, delayed_DB[119] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[119], Tdc, Tcdx, notif_db_119,,, delayed_CLKB, delayed_DB[119] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[120], Tdc, Tcdx, notif_db_120,,, delayed_CLKB, delayed_DB[120] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[120], Tdc, Tcdx, notif_db_120,,, delayed_CLKB, delayed_DB[120] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[121], Tdc, Tcdx, notif_db_121,,, delayed_CLKB, delayed_DB[121] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[121], Tdc, Tcdx, notif_db_121,,, delayed_CLKB, delayed_DB[121] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[122], Tdc, Tcdx, notif_db_122,,, delayed_CLKB, delayed_DB[122] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[122], Tdc, Tcdx, notif_db_122,,, delayed_CLKB, delayed_DB[122] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[123], Tdc, Tcdx, notif_db_123,,, delayed_CLKB, delayed_DB[123] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[123], Tdc, Tcdx, notif_db_123,,, delayed_CLKB, delayed_DB[123] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[124], Tdc, Tcdx, notif_db_124,,, delayed_CLKB, delayed_DB[124] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[124], Tdc, Tcdx, notif_db_124,,, delayed_CLKB, delayed_DB[124] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[125], Tdc, Tcdx, notif_db_125,,, delayed_CLKB, delayed_DB[125] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[125], Tdc, Tcdx, notif_db_125,,, delayed_CLKB, delayed_DB[125] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[126], Tdc, Tcdx, notif_db_126,,, delayed_CLKB, delayed_DB[126] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[126], Tdc, Tcdx, notif_db_126,,, delayed_CLKB, delayed_DB[126] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[127], Tdc, Tcdx, notif_db_127,,, delayed_CLKB, delayed_DB[127] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[127], Tdc, Tcdx, notif_db_127,,, delayed_CLKB, delayed_DB[127] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[128], Tdc, Tcdx, notif_db_128,,, delayed_CLKB, delayed_DB[128] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[128], Tdc, Tcdx, notif_db_128,,, delayed_CLKB, delayed_DB[128] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[129], Tdc, Tcdx, notif_db_129,,, delayed_CLKB, delayed_DB[129] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[129], Tdc, Tcdx, notif_db_129,,, delayed_CLKB, delayed_DB[129] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[130], Tdc, Tcdx, notif_db_130,,, delayed_CLKB, delayed_DB[130] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[130], Tdc, Tcdx, notif_db_130,,, delayed_CLKB, delayed_DB[130] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[131], Tdc, Tcdx, notif_db_131,,, delayed_CLKB, delayed_DB[131] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[131], Tdc, Tcdx, notif_db_131,,, delayed_CLKB, delayed_DB[131] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[132], Tdc, Tcdx, notif_db_132,,, delayed_CLKB, delayed_DB[132] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[132], Tdc, Tcdx, notif_db_132,,, delayed_CLKB, delayed_DB[132] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[133], Tdc, Tcdx, notif_db_133,,, delayed_CLKB, delayed_DB[133] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[133], Tdc, Tcdx, notif_db_133,,, delayed_CLKB, delayed_DB[133] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[134], Tdc, Tcdx, notif_db_134,,, delayed_CLKB, delayed_DB[134] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[134], Tdc, Tcdx, notif_db_134,,, delayed_CLKB, delayed_DB[134] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[135], Tdc, Tcdx, notif_db_135,,, delayed_CLKB, delayed_DB[135] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[135], Tdc, Tcdx, notif_db_135,,, delayed_CLKB, delayed_DB[135] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[136], Tdc, Tcdx, notif_db_136,,, delayed_CLKB, delayed_DB[136] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[136], Tdc, Tcdx, notif_db_136,,, delayed_CLKB, delayed_DB[136] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[137], Tdc, Tcdx, notif_db_137,,, delayed_CLKB, delayed_DB[137] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[137], Tdc, Tcdx, notif_db_137,,, delayed_CLKB, delayed_DB[137] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[138], Tdc, Tcdx, notif_db_138,,, delayed_CLKB, delayed_DB[138] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[138], Tdc, Tcdx, notif_db_138,,, delayed_CLKB, delayed_DB[138] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[139], Tdc, Tcdx, notif_db_139,,, delayed_CLKB, delayed_DB[139] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[139], Tdc, Tcdx, notif_db_139,,, delayed_CLKB, delayed_DB[139] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[140], Tdc, Tcdx, notif_db_140,,, delayed_CLKB, delayed_DB[140] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[140], Tdc, Tcdx, notif_db_140,,, delayed_CLKB, delayed_DB[140] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[141], Tdc, Tcdx, notif_db_141,,, delayed_CLKB, delayed_DB[141] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[141], Tdc, Tcdx, notif_db_141,,, delayed_CLKB, delayed_DB[141] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[142], Tdc, Tcdx, notif_db_142,,, delayed_CLKB, delayed_DB[142] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[142], Tdc, Tcdx, notif_db_142,,, delayed_CLKB, delayed_DB[142] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[143], Tdc, Tcdx, notif_db_143,,, delayed_CLKB, delayed_DB[143] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[143], Tdc, Tcdx, notif_db_143,,, delayed_CLKB, delayed_DB[143] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[144], Tdc, Tcdx, notif_db_144,,, delayed_CLKB, delayed_DB[144] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[144], Tdc, Tcdx, notif_db_144,,, delayed_CLKB, delayed_DB[144] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[145], Tdc, Tcdx, notif_db_145,,, delayed_CLKB, delayed_DB[145] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[145], Tdc, Tcdx, notif_db_145,,, delayed_CLKB, delayed_DB[145] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[146], Tdc, Tcdx, notif_db_146,,, delayed_CLKB, delayed_DB[146] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[146], Tdc, Tcdx, notif_db_146,,, delayed_CLKB, delayed_DB[146] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[147], Tdc, Tcdx, notif_db_147,,, delayed_CLKB, delayed_DB[147] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[147], Tdc, Tcdx, notif_db_147,,, delayed_CLKB, delayed_DB[147] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[148], Tdc, Tcdx, notif_db_148,,, delayed_CLKB, delayed_DB[148] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[148], Tdc, Tcdx, notif_db_148,,, delayed_CLKB, delayed_DB[148] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[149], Tdc, Tcdx, notif_db_149,,, delayed_CLKB, delayed_DB[149] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[149], Tdc, Tcdx, notif_db_149,,, delayed_CLKB, delayed_DB[149] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[150], Tdc, Tcdx, notif_db_150,,, delayed_CLKB, delayed_DB[150] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[150], Tdc, Tcdx, notif_db_150,,, delayed_CLKB, delayed_DB[150] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[151], Tdc, Tcdx, notif_db_151,,, delayed_CLKB, delayed_DB[151] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[151], Tdc, Tcdx, notif_db_151,,, delayed_CLKB, delayed_DB[151] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[152], Tdc, Tcdx, notif_db_152,,, delayed_CLKB, delayed_DB[152] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[152], Tdc, Tcdx, notif_db_152,,, delayed_CLKB, delayed_DB[152] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[153], Tdc, Tcdx, notif_db_153,,, delayed_CLKB, delayed_DB[153] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[153], Tdc, Tcdx, notif_db_153,,, delayed_CLKB, delayed_DB[153] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[154], Tdc, Tcdx, notif_db_154,,, delayed_CLKB, delayed_DB[154] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[154], Tdc, Tcdx, notif_db_154,,, delayed_CLKB, delayed_DB[154] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[155], Tdc, Tcdx, notif_db_155,,, delayed_CLKB, delayed_DB[155] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[155], Tdc, Tcdx, notif_db_155,,, delayed_CLKB, delayed_DB[155] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[156], Tdc, Tcdx, notif_db_156,,, delayed_CLKB, delayed_DB[156] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[156], Tdc, Tcdx, notif_db_156,,, delayed_CLKB, delayed_DB[156] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[157], Tdc, Tcdx, notif_db_157,,, delayed_CLKB, delayed_DB[157] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[157], Tdc, Tcdx, notif_db_157,,, delayed_CLKB, delayed_DB[157] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[158], Tdc, Tcdx, notif_db_158,,, delayed_CLKB, delayed_DB[158] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[158], Tdc, Tcdx, notif_db_158,,, delayed_CLKB, delayed_DB[158] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, posedge DB[159], Tdc, Tcdx, notif_db_159,,, delayed_CLKB, delayed_DB[159] );
  $setuphold (posedge CLKB  &&& ENDBCLKB, negedge DB[159], Tdc, Tcdx, notif_db_159,,, delayed_CLKB, delayed_DB[159] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[0], Tdc, Tcdx, notif_db_0,,, delayed_TCLKB, delayed_DB[0] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[0], Tdc, Tcdx, notif_db_0,,, delayed_TCLKB, delayed_DB[0] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[1], Tdc, Tcdx, notif_db_1,,, delayed_TCLKB, delayed_DB[1] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[1], Tdc, Tcdx, notif_db_1,,, delayed_TCLKB, delayed_DB[1] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[2], Tdc, Tcdx, notif_db_2,,, delayed_TCLKB, delayed_DB[2] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[2], Tdc, Tcdx, notif_db_2,,, delayed_TCLKB, delayed_DB[2] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[3], Tdc, Tcdx, notif_db_3,,, delayed_TCLKB, delayed_DB[3] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[3], Tdc, Tcdx, notif_db_3,,, delayed_TCLKB, delayed_DB[3] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[4], Tdc, Tcdx, notif_db_4,,, delayed_TCLKB, delayed_DB[4] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[4], Tdc, Tcdx, notif_db_4,,, delayed_TCLKB, delayed_DB[4] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[5], Tdc, Tcdx, notif_db_5,,, delayed_TCLKB, delayed_DB[5] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[5], Tdc, Tcdx, notif_db_5,,, delayed_TCLKB, delayed_DB[5] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[6], Tdc, Tcdx, notif_db_6,,, delayed_TCLKB, delayed_DB[6] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[6], Tdc, Tcdx, notif_db_6,,, delayed_TCLKB, delayed_DB[6] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[7], Tdc, Tcdx, notif_db_7,,, delayed_TCLKB, delayed_DB[7] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[7], Tdc, Tcdx, notif_db_7,,, delayed_TCLKB, delayed_DB[7] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[8], Tdc, Tcdx, notif_db_8,,, delayed_TCLKB, delayed_DB[8] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[8], Tdc, Tcdx, notif_db_8,,, delayed_TCLKB, delayed_DB[8] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[9], Tdc, Tcdx, notif_db_9,,, delayed_TCLKB, delayed_DB[9] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[9], Tdc, Tcdx, notif_db_9,,, delayed_TCLKB, delayed_DB[9] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[10], Tdc, Tcdx, notif_db_10,,, delayed_TCLKB, delayed_DB[10] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[10], Tdc, Tcdx, notif_db_10,,, delayed_TCLKB, delayed_DB[10] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[11], Tdc, Tcdx, notif_db_11,,, delayed_TCLKB, delayed_DB[11] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[11], Tdc, Tcdx, notif_db_11,,, delayed_TCLKB, delayed_DB[11] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[12], Tdc, Tcdx, notif_db_12,,, delayed_TCLKB, delayed_DB[12] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[12], Tdc, Tcdx, notif_db_12,,, delayed_TCLKB, delayed_DB[12] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[13], Tdc, Tcdx, notif_db_13,,, delayed_TCLKB, delayed_DB[13] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[13], Tdc, Tcdx, notif_db_13,,, delayed_TCLKB, delayed_DB[13] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[14], Tdc, Tcdx, notif_db_14,,, delayed_TCLKB, delayed_DB[14] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[14], Tdc, Tcdx, notif_db_14,,, delayed_TCLKB, delayed_DB[14] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[15], Tdc, Tcdx, notif_db_15,,, delayed_TCLKB, delayed_DB[15] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[15], Tdc, Tcdx, notif_db_15,,, delayed_TCLKB, delayed_DB[15] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[16], Tdc, Tcdx, notif_db_16,,, delayed_TCLKB, delayed_DB[16] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[16], Tdc, Tcdx, notif_db_16,,, delayed_TCLKB, delayed_DB[16] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[17], Tdc, Tcdx, notif_db_17,,, delayed_TCLKB, delayed_DB[17] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[17], Tdc, Tcdx, notif_db_17,,, delayed_TCLKB, delayed_DB[17] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[18], Tdc, Tcdx, notif_db_18,,, delayed_TCLKB, delayed_DB[18] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[18], Tdc, Tcdx, notif_db_18,,, delayed_TCLKB, delayed_DB[18] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[19], Tdc, Tcdx, notif_db_19,,, delayed_TCLKB, delayed_DB[19] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[19], Tdc, Tcdx, notif_db_19,,, delayed_TCLKB, delayed_DB[19] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[20], Tdc, Tcdx, notif_db_20,,, delayed_TCLKB, delayed_DB[20] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[20], Tdc, Tcdx, notif_db_20,,, delayed_TCLKB, delayed_DB[20] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[21], Tdc, Tcdx, notif_db_21,,, delayed_TCLKB, delayed_DB[21] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[21], Tdc, Tcdx, notif_db_21,,, delayed_TCLKB, delayed_DB[21] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[22], Tdc, Tcdx, notif_db_22,,, delayed_TCLKB, delayed_DB[22] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[22], Tdc, Tcdx, notif_db_22,,, delayed_TCLKB, delayed_DB[22] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[23], Tdc, Tcdx, notif_db_23,,, delayed_TCLKB, delayed_DB[23] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[23], Tdc, Tcdx, notif_db_23,,, delayed_TCLKB, delayed_DB[23] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[24], Tdc, Tcdx, notif_db_24,,, delayed_TCLKB, delayed_DB[24] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[24], Tdc, Tcdx, notif_db_24,,, delayed_TCLKB, delayed_DB[24] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[25], Tdc, Tcdx, notif_db_25,,, delayed_TCLKB, delayed_DB[25] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[25], Tdc, Tcdx, notif_db_25,,, delayed_TCLKB, delayed_DB[25] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[26], Tdc, Tcdx, notif_db_26,,, delayed_TCLKB, delayed_DB[26] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[26], Tdc, Tcdx, notif_db_26,,, delayed_TCLKB, delayed_DB[26] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[27], Tdc, Tcdx, notif_db_27,,, delayed_TCLKB, delayed_DB[27] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[27], Tdc, Tcdx, notif_db_27,,, delayed_TCLKB, delayed_DB[27] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[28], Tdc, Tcdx, notif_db_28,,, delayed_TCLKB, delayed_DB[28] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[28], Tdc, Tcdx, notif_db_28,,, delayed_TCLKB, delayed_DB[28] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[29], Tdc, Tcdx, notif_db_29,,, delayed_TCLKB, delayed_DB[29] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[29], Tdc, Tcdx, notif_db_29,,, delayed_TCLKB, delayed_DB[29] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[30], Tdc, Tcdx, notif_db_30,,, delayed_TCLKB, delayed_DB[30] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[30], Tdc, Tcdx, notif_db_30,,, delayed_TCLKB, delayed_DB[30] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[31], Tdc, Tcdx, notif_db_31,,, delayed_TCLKB, delayed_DB[31] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[31], Tdc, Tcdx, notif_db_31,,, delayed_TCLKB, delayed_DB[31] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[32], Tdc, Tcdx, notif_db_32,,, delayed_TCLKB, delayed_DB[32] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[32], Tdc, Tcdx, notif_db_32,,, delayed_TCLKB, delayed_DB[32] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[33], Tdc, Tcdx, notif_db_33,,, delayed_TCLKB, delayed_DB[33] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[33], Tdc, Tcdx, notif_db_33,,, delayed_TCLKB, delayed_DB[33] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[34], Tdc, Tcdx, notif_db_34,,, delayed_TCLKB, delayed_DB[34] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[34], Tdc, Tcdx, notif_db_34,,, delayed_TCLKB, delayed_DB[34] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[35], Tdc, Tcdx, notif_db_35,,, delayed_TCLKB, delayed_DB[35] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[35], Tdc, Tcdx, notif_db_35,,, delayed_TCLKB, delayed_DB[35] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[36], Tdc, Tcdx, notif_db_36,,, delayed_TCLKB, delayed_DB[36] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[36], Tdc, Tcdx, notif_db_36,,, delayed_TCLKB, delayed_DB[36] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[37], Tdc, Tcdx, notif_db_37,,, delayed_TCLKB, delayed_DB[37] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[37], Tdc, Tcdx, notif_db_37,,, delayed_TCLKB, delayed_DB[37] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[38], Tdc, Tcdx, notif_db_38,,, delayed_TCLKB, delayed_DB[38] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[38], Tdc, Tcdx, notif_db_38,,, delayed_TCLKB, delayed_DB[38] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[39], Tdc, Tcdx, notif_db_39,,, delayed_TCLKB, delayed_DB[39] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[39], Tdc, Tcdx, notif_db_39,,, delayed_TCLKB, delayed_DB[39] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[40], Tdc, Tcdx, notif_db_40,,, delayed_TCLKB, delayed_DB[40] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[40], Tdc, Tcdx, notif_db_40,,, delayed_TCLKB, delayed_DB[40] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[41], Tdc, Tcdx, notif_db_41,,, delayed_TCLKB, delayed_DB[41] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[41], Tdc, Tcdx, notif_db_41,,, delayed_TCLKB, delayed_DB[41] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[42], Tdc, Tcdx, notif_db_42,,, delayed_TCLKB, delayed_DB[42] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[42], Tdc, Tcdx, notif_db_42,,, delayed_TCLKB, delayed_DB[42] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[43], Tdc, Tcdx, notif_db_43,,, delayed_TCLKB, delayed_DB[43] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[43], Tdc, Tcdx, notif_db_43,,, delayed_TCLKB, delayed_DB[43] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[44], Tdc, Tcdx, notif_db_44,,, delayed_TCLKB, delayed_DB[44] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[44], Tdc, Tcdx, notif_db_44,,, delayed_TCLKB, delayed_DB[44] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[45], Tdc, Tcdx, notif_db_45,,, delayed_TCLKB, delayed_DB[45] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[45], Tdc, Tcdx, notif_db_45,,, delayed_TCLKB, delayed_DB[45] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[46], Tdc, Tcdx, notif_db_46,,, delayed_TCLKB, delayed_DB[46] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[46], Tdc, Tcdx, notif_db_46,,, delayed_TCLKB, delayed_DB[46] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[47], Tdc, Tcdx, notif_db_47,,, delayed_TCLKB, delayed_DB[47] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[47], Tdc, Tcdx, notif_db_47,,, delayed_TCLKB, delayed_DB[47] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[48], Tdc, Tcdx, notif_db_48,,, delayed_TCLKB, delayed_DB[48] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[48], Tdc, Tcdx, notif_db_48,,, delayed_TCLKB, delayed_DB[48] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[49], Tdc, Tcdx, notif_db_49,,, delayed_TCLKB, delayed_DB[49] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[49], Tdc, Tcdx, notif_db_49,,, delayed_TCLKB, delayed_DB[49] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[50], Tdc, Tcdx, notif_db_50,,, delayed_TCLKB, delayed_DB[50] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[50], Tdc, Tcdx, notif_db_50,,, delayed_TCLKB, delayed_DB[50] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[51], Tdc, Tcdx, notif_db_51,,, delayed_TCLKB, delayed_DB[51] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[51], Tdc, Tcdx, notif_db_51,,, delayed_TCLKB, delayed_DB[51] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[52], Tdc, Tcdx, notif_db_52,,, delayed_TCLKB, delayed_DB[52] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[52], Tdc, Tcdx, notif_db_52,,, delayed_TCLKB, delayed_DB[52] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[53], Tdc, Tcdx, notif_db_53,,, delayed_TCLKB, delayed_DB[53] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[53], Tdc, Tcdx, notif_db_53,,, delayed_TCLKB, delayed_DB[53] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[54], Tdc, Tcdx, notif_db_54,,, delayed_TCLKB, delayed_DB[54] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[54], Tdc, Tcdx, notif_db_54,,, delayed_TCLKB, delayed_DB[54] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[55], Tdc, Tcdx, notif_db_55,,, delayed_TCLKB, delayed_DB[55] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[55], Tdc, Tcdx, notif_db_55,,, delayed_TCLKB, delayed_DB[55] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[56], Tdc, Tcdx, notif_db_56,,, delayed_TCLKB, delayed_DB[56] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[56], Tdc, Tcdx, notif_db_56,,, delayed_TCLKB, delayed_DB[56] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[57], Tdc, Tcdx, notif_db_57,,, delayed_TCLKB, delayed_DB[57] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[57], Tdc, Tcdx, notif_db_57,,, delayed_TCLKB, delayed_DB[57] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[58], Tdc, Tcdx, notif_db_58,,, delayed_TCLKB, delayed_DB[58] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[58], Tdc, Tcdx, notif_db_58,,, delayed_TCLKB, delayed_DB[58] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[59], Tdc, Tcdx, notif_db_59,,, delayed_TCLKB, delayed_DB[59] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[59], Tdc, Tcdx, notif_db_59,,, delayed_TCLKB, delayed_DB[59] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[60], Tdc, Tcdx, notif_db_60,,, delayed_TCLKB, delayed_DB[60] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[60], Tdc, Tcdx, notif_db_60,,, delayed_TCLKB, delayed_DB[60] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[61], Tdc, Tcdx, notif_db_61,,, delayed_TCLKB, delayed_DB[61] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[61], Tdc, Tcdx, notif_db_61,,, delayed_TCLKB, delayed_DB[61] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[62], Tdc, Tcdx, notif_db_62,,, delayed_TCLKB, delayed_DB[62] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[62], Tdc, Tcdx, notif_db_62,,, delayed_TCLKB, delayed_DB[62] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[63], Tdc, Tcdx, notif_db_63,,, delayed_TCLKB, delayed_DB[63] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[63], Tdc, Tcdx, notif_db_63,,, delayed_TCLKB, delayed_DB[63] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[64], Tdc, Tcdx, notif_db_64,,, delayed_TCLKB, delayed_DB[64] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[64], Tdc, Tcdx, notif_db_64,,, delayed_TCLKB, delayed_DB[64] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[65], Tdc, Tcdx, notif_db_65,,, delayed_TCLKB, delayed_DB[65] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[65], Tdc, Tcdx, notif_db_65,,, delayed_TCLKB, delayed_DB[65] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[66], Tdc, Tcdx, notif_db_66,,, delayed_TCLKB, delayed_DB[66] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[66], Tdc, Tcdx, notif_db_66,,, delayed_TCLKB, delayed_DB[66] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[67], Tdc, Tcdx, notif_db_67,,, delayed_TCLKB, delayed_DB[67] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[67], Tdc, Tcdx, notif_db_67,,, delayed_TCLKB, delayed_DB[67] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[68], Tdc, Tcdx, notif_db_68,,, delayed_TCLKB, delayed_DB[68] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[68], Tdc, Tcdx, notif_db_68,,, delayed_TCLKB, delayed_DB[68] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[69], Tdc, Tcdx, notif_db_69,,, delayed_TCLKB, delayed_DB[69] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[69], Tdc, Tcdx, notif_db_69,,, delayed_TCLKB, delayed_DB[69] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[70], Tdc, Tcdx, notif_db_70,,, delayed_TCLKB, delayed_DB[70] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[70], Tdc, Tcdx, notif_db_70,,, delayed_TCLKB, delayed_DB[70] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[71], Tdc, Tcdx, notif_db_71,,, delayed_TCLKB, delayed_DB[71] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[71], Tdc, Tcdx, notif_db_71,,, delayed_TCLKB, delayed_DB[71] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[72], Tdc, Tcdx, notif_db_72,,, delayed_TCLKB, delayed_DB[72] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[72], Tdc, Tcdx, notif_db_72,,, delayed_TCLKB, delayed_DB[72] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[73], Tdc, Tcdx, notif_db_73,,, delayed_TCLKB, delayed_DB[73] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[73], Tdc, Tcdx, notif_db_73,,, delayed_TCLKB, delayed_DB[73] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[74], Tdc, Tcdx, notif_db_74,,, delayed_TCLKB, delayed_DB[74] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[74], Tdc, Tcdx, notif_db_74,,, delayed_TCLKB, delayed_DB[74] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[75], Tdc, Tcdx, notif_db_75,,, delayed_TCLKB, delayed_DB[75] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[75], Tdc, Tcdx, notif_db_75,,, delayed_TCLKB, delayed_DB[75] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[76], Tdc, Tcdx, notif_db_76,,, delayed_TCLKB, delayed_DB[76] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[76], Tdc, Tcdx, notif_db_76,,, delayed_TCLKB, delayed_DB[76] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[77], Tdc, Tcdx, notif_db_77,,, delayed_TCLKB, delayed_DB[77] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[77], Tdc, Tcdx, notif_db_77,,, delayed_TCLKB, delayed_DB[77] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[78], Tdc, Tcdx, notif_db_78,,, delayed_TCLKB, delayed_DB[78] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[78], Tdc, Tcdx, notif_db_78,,, delayed_TCLKB, delayed_DB[78] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[79], Tdc, Tcdx, notif_db_79,,, delayed_TCLKB, delayed_DB[79] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[79], Tdc, Tcdx, notif_db_79,,, delayed_TCLKB, delayed_DB[79] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[80], Tdc, Tcdx, notif_db_80,,, delayed_TCLKB, delayed_DB[80] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[80], Tdc, Tcdx, notif_db_80,,, delayed_TCLKB, delayed_DB[80] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[81], Tdc, Tcdx, notif_db_81,,, delayed_TCLKB, delayed_DB[81] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[81], Tdc, Tcdx, notif_db_81,,, delayed_TCLKB, delayed_DB[81] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[82], Tdc, Tcdx, notif_db_82,,, delayed_TCLKB, delayed_DB[82] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[82], Tdc, Tcdx, notif_db_82,,, delayed_TCLKB, delayed_DB[82] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[83], Tdc, Tcdx, notif_db_83,,, delayed_TCLKB, delayed_DB[83] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[83], Tdc, Tcdx, notif_db_83,,, delayed_TCLKB, delayed_DB[83] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[84], Tdc, Tcdx, notif_db_84,,, delayed_TCLKB, delayed_DB[84] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[84], Tdc, Tcdx, notif_db_84,,, delayed_TCLKB, delayed_DB[84] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[85], Tdc, Tcdx, notif_db_85,,, delayed_TCLKB, delayed_DB[85] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[85], Tdc, Tcdx, notif_db_85,,, delayed_TCLKB, delayed_DB[85] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[86], Tdc, Tcdx, notif_db_86,,, delayed_TCLKB, delayed_DB[86] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[86], Tdc, Tcdx, notif_db_86,,, delayed_TCLKB, delayed_DB[86] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[87], Tdc, Tcdx, notif_db_87,,, delayed_TCLKB, delayed_DB[87] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[87], Tdc, Tcdx, notif_db_87,,, delayed_TCLKB, delayed_DB[87] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[88], Tdc, Tcdx, notif_db_88,,, delayed_TCLKB, delayed_DB[88] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[88], Tdc, Tcdx, notif_db_88,,, delayed_TCLKB, delayed_DB[88] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[89], Tdc, Tcdx, notif_db_89,,, delayed_TCLKB, delayed_DB[89] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[89], Tdc, Tcdx, notif_db_89,,, delayed_TCLKB, delayed_DB[89] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[90], Tdc, Tcdx, notif_db_90,,, delayed_TCLKB, delayed_DB[90] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[90], Tdc, Tcdx, notif_db_90,,, delayed_TCLKB, delayed_DB[90] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[91], Tdc, Tcdx, notif_db_91,,, delayed_TCLKB, delayed_DB[91] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[91], Tdc, Tcdx, notif_db_91,,, delayed_TCLKB, delayed_DB[91] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[92], Tdc, Tcdx, notif_db_92,,, delayed_TCLKB, delayed_DB[92] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[92], Tdc, Tcdx, notif_db_92,,, delayed_TCLKB, delayed_DB[92] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[93], Tdc, Tcdx, notif_db_93,,, delayed_TCLKB, delayed_DB[93] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[93], Tdc, Tcdx, notif_db_93,,, delayed_TCLKB, delayed_DB[93] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[94], Tdc, Tcdx, notif_db_94,,, delayed_TCLKB, delayed_DB[94] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[94], Tdc, Tcdx, notif_db_94,,, delayed_TCLKB, delayed_DB[94] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[95], Tdc, Tcdx, notif_db_95,,, delayed_TCLKB, delayed_DB[95] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[95], Tdc, Tcdx, notif_db_95,,, delayed_TCLKB, delayed_DB[95] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[96], Tdc, Tcdx, notif_db_96,,, delayed_TCLKB, delayed_DB[96] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[96], Tdc, Tcdx, notif_db_96,,, delayed_TCLKB, delayed_DB[96] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[97], Tdc, Tcdx, notif_db_97,,, delayed_TCLKB, delayed_DB[97] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[97], Tdc, Tcdx, notif_db_97,,, delayed_TCLKB, delayed_DB[97] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[98], Tdc, Tcdx, notif_db_98,,, delayed_TCLKB, delayed_DB[98] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[98], Tdc, Tcdx, notif_db_98,,, delayed_TCLKB, delayed_DB[98] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[99], Tdc, Tcdx, notif_db_99,,, delayed_TCLKB, delayed_DB[99] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[99], Tdc, Tcdx, notif_db_99,,, delayed_TCLKB, delayed_DB[99] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[100], Tdc, Tcdx, notif_db_100,,, delayed_TCLKB, delayed_DB[100] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[100], Tdc, Tcdx, notif_db_100,,, delayed_TCLKB, delayed_DB[100] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[101], Tdc, Tcdx, notif_db_101,,, delayed_TCLKB, delayed_DB[101] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[101], Tdc, Tcdx, notif_db_101,,, delayed_TCLKB, delayed_DB[101] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[102], Tdc, Tcdx, notif_db_102,,, delayed_TCLKB, delayed_DB[102] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[102], Tdc, Tcdx, notif_db_102,,, delayed_TCLKB, delayed_DB[102] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[103], Tdc, Tcdx, notif_db_103,,, delayed_TCLKB, delayed_DB[103] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[103], Tdc, Tcdx, notif_db_103,,, delayed_TCLKB, delayed_DB[103] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[104], Tdc, Tcdx, notif_db_104,,, delayed_TCLKB, delayed_DB[104] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[104], Tdc, Tcdx, notif_db_104,,, delayed_TCLKB, delayed_DB[104] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[105], Tdc, Tcdx, notif_db_105,,, delayed_TCLKB, delayed_DB[105] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[105], Tdc, Tcdx, notif_db_105,,, delayed_TCLKB, delayed_DB[105] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[106], Tdc, Tcdx, notif_db_106,,, delayed_TCLKB, delayed_DB[106] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[106], Tdc, Tcdx, notif_db_106,,, delayed_TCLKB, delayed_DB[106] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[107], Tdc, Tcdx, notif_db_107,,, delayed_TCLKB, delayed_DB[107] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[107], Tdc, Tcdx, notif_db_107,,, delayed_TCLKB, delayed_DB[107] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[108], Tdc, Tcdx, notif_db_108,,, delayed_TCLKB, delayed_DB[108] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[108], Tdc, Tcdx, notif_db_108,,, delayed_TCLKB, delayed_DB[108] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[109], Tdc, Tcdx, notif_db_109,,, delayed_TCLKB, delayed_DB[109] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[109], Tdc, Tcdx, notif_db_109,,, delayed_TCLKB, delayed_DB[109] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[110], Tdc, Tcdx, notif_db_110,,, delayed_TCLKB, delayed_DB[110] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[110], Tdc, Tcdx, notif_db_110,,, delayed_TCLKB, delayed_DB[110] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[111], Tdc, Tcdx, notif_db_111,,, delayed_TCLKB, delayed_DB[111] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[111], Tdc, Tcdx, notif_db_111,,, delayed_TCLKB, delayed_DB[111] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[112], Tdc, Tcdx, notif_db_112,,, delayed_TCLKB, delayed_DB[112] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[112], Tdc, Tcdx, notif_db_112,,, delayed_TCLKB, delayed_DB[112] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[113], Tdc, Tcdx, notif_db_113,,, delayed_TCLKB, delayed_DB[113] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[113], Tdc, Tcdx, notif_db_113,,, delayed_TCLKB, delayed_DB[113] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[114], Tdc, Tcdx, notif_db_114,,, delayed_TCLKB, delayed_DB[114] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[114], Tdc, Tcdx, notif_db_114,,, delayed_TCLKB, delayed_DB[114] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[115], Tdc, Tcdx, notif_db_115,,, delayed_TCLKB, delayed_DB[115] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[115], Tdc, Tcdx, notif_db_115,,, delayed_TCLKB, delayed_DB[115] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[116], Tdc, Tcdx, notif_db_116,,, delayed_TCLKB, delayed_DB[116] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[116], Tdc, Tcdx, notif_db_116,,, delayed_TCLKB, delayed_DB[116] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[117], Tdc, Tcdx, notif_db_117,,, delayed_TCLKB, delayed_DB[117] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[117], Tdc, Tcdx, notif_db_117,,, delayed_TCLKB, delayed_DB[117] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[118], Tdc, Tcdx, notif_db_118,,, delayed_TCLKB, delayed_DB[118] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[118], Tdc, Tcdx, notif_db_118,,, delayed_TCLKB, delayed_DB[118] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[119], Tdc, Tcdx, notif_db_119,,, delayed_TCLKB, delayed_DB[119] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[119], Tdc, Tcdx, notif_db_119,,, delayed_TCLKB, delayed_DB[119] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[120], Tdc, Tcdx, notif_db_120,,, delayed_TCLKB, delayed_DB[120] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[120], Tdc, Tcdx, notif_db_120,,, delayed_TCLKB, delayed_DB[120] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[121], Tdc, Tcdx, notif_db_121,,, delayed_TCLKB, delayed_DB[121] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[121], Tdc, Tcdx, notif_db_121,,, delayed_TCLKB, delayed_DB[121] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[122], Tdc, Tcdx, notif_db_122,,, delayed_TCLKB, delayed_DB[122] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[122], Tdc, Tcdx, notif_db_122,,, delayed_TCLKB, delayed_DB[122] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[123], Tdc, Tcdx, notif_db_123,,, delayed_TCLKB, delayed_DB[123] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[123], Tdc, Tcdx, notif_db_123,,, delayed_TCLKB, delayed_DB[123] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[124], Tdc, Tcdx, notif_db_124,,, delayed_TCLKB, delayed_DB[124] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[124], Tdc, Tcdx, notif_db_124,,, delayed_TCLKB, delayed_DB[124] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[125], Tdc, Tcdx, notif_db_125,,, delayed_TCLKB, delayed_DB[125] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[125], Tdc, Tcdx, notif_db_125,,, delayed_TCLKB, delayed_DB[125] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[126], Tdc, Tcdx, notif_db_126,,, delayed_TCLKB, delayed_DB[126] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[126], Tdc, Tcdx, notif_db_126,,, delayed_TCLKB, delayed_DB[126] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[127], Tdc, Tcdx, notif_db_127,,, delayed_TCLKB, delayed_DB[127] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[127], Tdc, Tcdx, notif_db_127,,, delayed_TCLKB, delayed_DB[127] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[128], Tdc, Tcdx, notif_db_128,,, delayed_TCLKB, delayed_DB[128] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[128], Tdc, Tcdx, notif_db_128,,, delayed_TCLKB, delayed_DB[128] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[129], Tdc, Tcdx, notif_db_129,,, delayed_TCLKB, delayed_DB[129] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[129], Tdc, Tcdx, notif_db_129,,, delayed_TCLKB, delayed_DB[129] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[130], Tdc, Tcdx, notif_db_130,,, delayed_TCLKB, delayed_DB[130] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[130], Tdc, Tcdx, notif_db_130,,, delayed_TCLKB, delayed_DB[130] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[131], Tdc, Tcdx, notif_db_131,,, delayed_TCLKB, delayed_DB[131] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[131], Tdc, Tcdx, notif_db_131,,, delayed_TCLKB, delayed_DB[131] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[132], Tdc, Tcdx, notif_db_132,,, delayed_TCLKB, delayed_DB[132] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[132], Tdc, Tcdx, notif_db_132,,, delayed_TCLKB, delayed_DB[132] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[133], Tdc, Tcdx, notif_db_133,,, delayed_TCLKB, delayed_DB[133] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[133], Tdc, Tcdx, notif_db_133,,, delayed_TCLKB, delayed_DB[133] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[134], Tdc, Tcdx, notif_db_134,,, delayed_TCLKB, delayed_DB[134] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[134], Tdc, Tcdx, notif_db_134,,, delayed_TCLKB, delayed_DB[134] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[135], Tdc, Tcdx, notif_db_135,,, delayed_TCLKB, delayed_DB[135] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[135], Tdc, Tcdx, notif_db_135,,, delayed_TCLKB, delayed_DB[135] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[136], Tdc, Tcdx, notif_db_136,,, delayed_TCLKB, delayed_DB[136] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[136], Tdc, Tcdx, notif_db_136,,, delayed_TCLKB, delayed_DB[136] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[137], Tdc, Tcdx, notif_db_137,,, delayed_TCLKB, delayed_DB[137] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[137], Tdc, Tcdx, notif_db_137,,, delayed_TCLKB, delayed_DB[137] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[138], Tdc, Tcdx, notif_db_138,,, delayed_TCLKB, delayed_DB[138] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[138], Tdc, Tcdx, notif_db_138,,, delayed_TCLKB, delayed_DB[138] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[139], Tdc, Tcdx, notif_db_139,,, delayed_TCLKB, delayed_DB[139] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[139], Tdc, Tcdx, notif_db_139,,, delayed_TCLKB, delayed_DB[139] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[140], Tdc, Tcdx, notif_db_140,,, delayed_TCLKB, delayed_DB[140] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[140], Tdc, Tcdx, notif_db_140,,, delayed_TCLKB, delayed_DB[140] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[141], Tdc, Tcdx, notif_db_141,,, delayed_TCLKB, delayed_DB[141] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[141], Tdc, Tcdx, notif_db_141,,, delayed_TCLKB, delayed_DB[141] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[142], Tdc, Tcdx, notif_db_142,,, delayed_TCLKB, delayed_DB[142] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[142], Tdc, Tcdx, notif_db_142,,, delayed_TCLKB, delayed_DB[142] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[143], Tdc, Tcdx, notif_db_143,,, delayed_TCLKB, delayed_DB[143] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[143], Tdc, Tcdx, notif_db_143,,, delayed_TCLKB, delayed_DB[143] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[144], Tdc, Tcdx, notif_db_144,,, delayed_TCLKB, delayed_DB[144] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[144], Tdc, Tcdx, notif_db_144,,, delayed_TCLKB, delayed_DB[144] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[145], Tdc, Tcdx, notif_db_145,,, delayed_TCLKB, delayed_DB[145] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[145], Tdc, Tcdx, notif_db_145,,, delayed_TCLKB, delayed_DB[145] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[146], Tdc, Tcdx, notif_db_146,,, delayed_TCLKB, delayed_DB[146] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[146], Tdc, Tcdx, notif_db_146,,, delayed_TCLKB, delayed_DB[146] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[147], Tdc, Tcdx, notif_db_147,,, delayed_TCLKB, delayed_DB[147] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[147], Tdc, Tcdx, notif_db_147,,, delayed_TCLKB, delayed_DB[147] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[148], Tdc, Tcdx, notif_db_148,,, delayed_TCLKB, delayed_DB[148] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[148], Tdc, Tcdx, notif_db_148,,, delayed_TCLKB, delayed_DB[148] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[149], Tdc, Tcdx, notif_db_149,,, delayed_TCLKB, delayed_DB[149] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[149], Tdc, Tcdx, notif_db_149,,, delayed_TCLKB, delayed_DB[149] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[150], Tdc, Tcdx, notif_db_150,,, delayed_TCLKB, delayed_DB[150] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[150], Tdc, Tcdx, notif_db_150,,, delayed_TCLKB, delayed_DB[150] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[151], Tdc, Tcdx, notif_db_151,,, delayed_TCLKB, delayed_DB[151] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[151], Tdc, Tcdx, notif_db_151,,, delayed_TCLKB, delayed_DB[151] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[152], Tdc, Tcdx, notif_db_152,,, delayed_TCLKB, delayed_DB[152] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[152], Tdc, Tcdx, notif_db_152,,, delayed_TCLKB, delayed_DB[152] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[153], Tdc, Tcdx, notif_db_153,,, delayed_TCLKB, delayed_DB[153] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[153], Tdc, Tcdx, notif_db_153,,, delayed_TCLKB, delayed_DB[153] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[154], Tdc, Tcdx, notif_db_154,,, delayed_TCLKB, delayed_DB[154] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[154], Tdc, Tcdx, notif_db_154,,, delayed_TCLKB, delayed_DB[154] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[155], Tdc, Tcdx, notif_db_155,,, delayed_TCLKB, delayed_DB[155] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[155], Tdc, Tcdx, notif_db_155,,, delayed_TCLKB, delayed_DB[155] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[156], Tdc, Tcdx, notif_db_156,,, delayed_TCLKB, delayed_DB[156] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[156], Tdc, Tcdx, notif_db_156,,, delayed_TCLKB, delayed_DB[156] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[157], Tdc, Tcdx, notif_db_157,,, delayed_TCLKB, delayed_DB[157] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[157], Tdc, Tcdx, notif_db_157,,, delayed_TCLKB, delayed_DB[157] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[158], Tdc, Tcdx, notif_db_158,,, delayed_TCLKB, delayed_DB[158] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[158], Tdc, Tcdx, notif_db_158,,, delayed_TCLKB, delayed_DB[158] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, posedge DB[159], Tdc, Tcdx, notif_db_159,,, delayed_TCLKB, delayed_DB[159] );
  $setuphold (posedge TCLKB  &&& ENDBTCLKB, negedge DB[159], Tdc, Tcdx, notif_db_159,,, delayed_TCLKB, delayed_DB[159] );
  $setuphold (posedge CLKB  &&& ENWEBCLKB, posedge WEB,Twc, Tcwx, notif_web,,, delayed_CLKB, delayed_WEB );
  $setuphold (posedge CLKB  &&& ENWEBCLKB, negedge WEB,Twc, Tcwx, notif_web,,, delayed_CLKB, delayed_WEB );
  $setuphold (posedge TCLKB  &&& ENWEBTCLKB, posedge WEB,Twc, Tcwx, notif_web,,, delayed_TCLKB, delayed_WEB );
  $setuphold (posedge TCLKB  &&& ENWEBTCLKB, negedge WEB,Twc, Tcwx, notif_web,,, delayed_TCLKB, delayed_WEB );
  $setuphold (posedge CLKB  &&& ENMEBCLKB, posedge MEB,Tmc, Tcmx, notif_meb,,, delayed_CLKB, delayed_MEB );
  $setuphold (posedge CLKB  &&& ENMEBCLKB, negedge MEB,Tmc, Tcmx, notif_meb,,, delayed_CLKB, delayed_MEB );
  $setuphold (posedge TCLKB  &&& ENMEBTCLKB, posedge MEB,Tmc, Tcmx, notif_meb,,, delayed_TCLKB, delayed_MEB );
  $setuphold (posedge TCLKB  &&& ENMEBTCLKB, negedge MEB,Tmc, Tcmx, notif_meb,,, delayed_TCLKB, delayed_MEB );
  $setuphold (posedge TCLKB  &&& ENTADRBTCLKB, posedge TADRB[0], Tac, Tcax, notif_adrb_0,,, delayed_TCLKB, delayed_TADRB[0] );
  $setuphold (posedge TCLKB  &&& ENTADRBTCLKB, negedge TADRB[0], Tac, Tcax, notif_adrb_0,,, delayed_TCLKB, delayed_TADRB[0] );
  $setuphold (posedge TCLKB  &&& ENTADRBTCLKB, posedge TADRB[1], Tac, Tcax, notif_adrb_1,,, delayed_TCLKB, delayed_TADRB[1] );
  $setuphold (posedge TCLKB  &&& ENTADRBTCLKB, negedge TADRB[1], Tac, Tcax, notif_adrb_1,,, delayed_TCLKB, delayed_TADRB[1] );
  $setuphold (posedge TCLKB  &&& ENTADRBTCLKB, posedge TADRB[2], Tac, Tcax, notif_adrb_2,,, delayed_TCLKB, delayed_TADRB[2] );
  $setuphold (posedge TCLKB  &&& ENTADRBTCLKB, negedge TADRB[2], Tac, Tcax, notif_adrb_2,,, delayed_TCLKB, delayed_TADRB[2] );
  $setuphold (posedge TCLKB  &&& ENTADRBTCLKB, posedge TADRB[3], Tac, Tcax, notif_adrb_3,,, delayed_TCLKB, delayed_TADRB[3] );
  $setuphold (posedge TCLKB  &&& ENTADRBTCLKB, negedge TADRB[3], Tac, Tcax, notif_adrb_3,,, delayed_TCLKB, delayed_TADRB[3] );
  $setuphold (posedge TCLKB  &&& ENTADRBTCLKB, posedge TADRB[4], Tac, Tcax, notif_adrb_4,,, delayed_TCLKB, delayed_TADRB[4] );
  $setuphold (posedge TCLKB  &&& ENTADRBTCLKB, negedge TADRB[4], Tac, Tcax, notif_adrb_4,,, delayed_TCLKB, delayed_TADRB[4] );
  $setuphold (posedge TCLKB  &&& ENTADRBTCLKB, posedge TADRB[5], Tac, Tcax, notif_adrb_5,,, delayed_TCLKB, delayed_TADRB[5] );
  $setuphold (posedge TCLKB  &&& ENTADRBTCLKB, negedge TADRB[5], Tac, Tcax, notif_adrb_5,,, delayed_TCLKB, delayed_TADRB[5] );
  $setuphold (posedge TCLKB  &&& ENTADRBTCLKB, posedge TADRB[6], Tac, Tcax, notif_adrb_6,,, delayed_TCLKB, delayed_TADRB[6] );
  $setuphold (posedge TCLKB  &&& ENTADRBTCLKB, negedge TADRB[6], Tac, Tcax, notif_adrb_6,,, delayed_TCLKB, delayed_TADRB[6] );
  $setuphold (posedge TCLKB  &&& ENTADRBTCLKB, posedge TADRB[7], Tac, Tcax, notif_adrb_7,,, delayed_TCLKB, delayed_TADRB[7] );
  $setuphold (posedge TCLKB  &&& ENTADRBTCLKB, negedge TADRB[7], Tac, Tcax, notif_adrb_7,,, delayed_TCLKB, delayed_TADRB[7] );
  $setuphold (posedge TCLKB  &&& ENTADRBTCLKB, posedge TADRB[8], Tac, Tcax, notif_adrb_8,,, delayed_TCLKB, delayed_TADRB[8] );
  $setuphold (posedge TCLKB  &&& ENTADRBTCLKB, negedge TADRB[8], Tac, Tcax, notif_adrb_8,,, delayed_TCLKB, delayed_TADRB[8] );
  $setuphold (posedge TCLKB  &&& ENTADRBTCLKB, posedge TADRB[9], Tac, Tcax, notif_adrb_9,,, delayed_TCLKB, delayed_TADRB[9] );
  $setuphold (posedge TCLKB  &&& ENTADRBTCLKB, negedge TADRB[9], Tac, Tcax, notif_adrb_9,,, delayed_TCLKB, delayed_TADRB[9] );
  $setuphold (posedge TCLKB  &&& ENTADRBTCLKB, posedge TADRB[10], Tac, Tcax, notif_adrb_10,,, delayed_TCLKB, delayed_TADRB[10] );
  $setuphold (posedge TCLKB  &&& ENTADRBTCLKB, negedge TADRB[10], Tac, Tcax, notif_adrb_10,,, delayed_TCLKB, delayed_TADRB[10] );
  $setuphold (posedge CLKB  &&& ENTADRBCLKB, posedge TADRB[0], Tac, Tcax, notif_adrb_0,,, delayed_CLKB, delayed_TADRB[0] );
  $setuphold (posedge CLKB  &&& ENTADRBCLKB, negedge TADRB[0], Tac, Tcax, notif_adrb_0,,, delayed_CLKB, delayed_TADRB[0] );
  $setuphold (posedge CLKB  &&& ENTADRBCLKB, posedge TADRB[1], Tac, Tcax, notif_adrb_1,,, delayed_CLKB, delayed_TADRB[1] );
  $setuphold (posedge CLKB  &&& ENTADRBCLKB, negedge TADRB[1], Tac, Tcax, notif_adrb_1,,, delayed_CLKB, delayed_TADRB[1] );
  $setuphold (posedge CLKB  &&& ENTADRBCLKB, posedge TADRB[2], Tac, Tcax, notif_adrb_2,,, delayed_CLKB, delayed_TADRB[2] );
  $setuphold (posedge CLKB  &&& ENTADRBCLKB, negedge TADRB[2], Tac, Tcax, notif_adrb_2,,, delayed_CLKB, delayed_TADRB[2] );
  $setuphold (posedge CLKB  &&& ENTADRBCLKB, posedge TADRB[3], Tac, Tcax, notif_adrb_3,,, delayed_CLKB, delayed_TADRB[3] );
  $setuphold (posedge CLKB  &&& ENTADRBCLKB, negedge TADRB[3], Tac, Tcax, notif_adrb_3,,, delayed_CLKB, delayed_TADRB[3] );
  $setuphold (posedge CLKB  &&& ENTADRBCLKB, posedge TADRB[4], Tac, Tcax, notif_adrb_4,,, delayed_CLKB, delayed_TADRB[4] );
  $setuphold (posedge CLKB  &&& ENTADRBCLKB, negedge TADRB[4], Tac, Tcax, notif_adrb_4,,, delayed_CLKB, delayed_TADRB[4] );
  $setuphold (posedge CLKB  &&& ENTADRBCLKB, posedge TADRB[5], Tac, Tcax, notif_adrb_5,,, delayed_CLKB, delayed_TADRB[5] );
  $setuphold (posedge CLKB  &&& ENTADRBCLKB, negedge TADRB[5], Tac, Tcax, notif_adrb_5,,, delayed_CLKB, delayed_TADRB[5] );
  $setuphold (posedge CLKB  &&& ENTADRBCLKB, posedge TADRB[6], Tac, Tcax, notif_adrb_6,,, delayed_CLKB, delayed_TADRB[6] );
  $setuphold (posedge CLKB  &&& ENTADRBCLKB, negedge TADRB[6], Tac, Tcax, notif_adrb_6,,, delayed_CLKB, delayed_TADRB[6] );
  $setuphold (posedge CLKB  &&& ENTADRBCLKB, posedge TADRB[7], Tac, Tcax, notif_adrb_7,,, delayed_CLKB, delayed_TADRB[7] );
  $setuphold (posedge CLKB  &&& ENTADRBCLKB, negedge TADRB[7], Tac, Tcax, notif_adrb_7,,, delayed_CLKB, delayed_TADRB[7] );
  $setuphold (posedge CLKB  &&& ENTADRBCLKB, posedge TADRB[8], Tac, Tcax, notif_adrb_8,,, delayed_CLKB, delayed_TADRB[8] );
  $setuphold (posedge CLKB  &&& ENTADRBCLKB, negedge TADRB[8], Tac, Tcax, notif_adrb_8,,, delayed_CLKB, delayed_TADRB[8] );
  $setuphold (posedge CLKB  &&& ENTADRBCLKB, posedge TADRB[9], Tac, Tcax, notif_adrb_9,,, delayed_CLKB, delayed_TADRB[9] );
  $setuphold (posedge CLKB  &&& ENTADRBCLKB, negedge TADRB[9], Tac, Tcax, notif_adrb_9,,, delayed_CLKB, delayed_TADRB[9] );
  $setuphold (posedge CLKB  &&& ENTADRBCLKB, posedge TADRB[10], Tac, Tcax, notif_adrb_10,,, delayed_CLKB, delayed_TADRB[10] );
  $setuphold (posedge CLKB  &&& ENTADRBCLKB, negedge TADRB[10], Tac, Tcax, notif_adrb_10,,, delayed_CLKB, delayed_TADRB[10] );
  $setuphold (posedge TCLKB  &&& ENTDBTCLKB, posedge TDB[0], Tbdc, Tbcdx, notif_tdb_0,,, delayed_TCLKB, delayed_TDB[0] );
  $setuphold (posedge TCLKB  &&& ENTDBTCLKB, negedge TDB[0], Tbdc, Tbcdx, notif_tdb_0,,, delayed_TCLKB, delayed_TDB[0] );
  $setuphold (posedge TCLKB  &&& ENTDBTCLKB, posedge TDB[1], Tbdc, Tbcdx, notif_tdb_1,,, delayed_TCLKB, delayed_TDB[1] );
  $setuphold (posedge TCLKB  &&& ENTDBTCLKB, negedge TDB[1], Tbdc, Tbcdx, notif_tdb_1,,, delayed_TCLKB, delayed_TDB[1] );
  $setuphold (posedge TCLKB  &&& ENTDBTCLKB, posedge TDB[2], Tbdc, Tbcdx, notif_tdb_2,,, delayed_TCLKB, delayed_TDB[2] );
  $setuphold (posedge TCLKB  &&& ENTDBTCLKB, negedge TDB[2], Tbdc, Tbcdx, notif_tdb_2,,, delayed_TCLKB, delayed_TDB[2] );
  $setuphold (posedge TCLKB  &&& ENTDBTCLKB, posedge TDB[3], Tbdc, Tbcdx, notif_tdb_3,,, delayed_TCLKB, delayed_TDB[3] );
  $setuphold (posedge TCLKB  &&& ENTDBTCLKB, negedge TDB[3], Tbdc, Tbcdx, notif_tdb_3,,, delayed_TCLKB, delayed_TDB[3] );
  $setuphold (posedge CLKB  &&& ENTDBCLKB, posedge TDB[0], Tbdc, Tbcdx, notif_tdb_0,,, delayed_CLKB, delayed_TDB[0] );
  $setuphold (posedge CLKB  &&& ENTDBCLKB, negedge TDB[0], Tbdc, Tbcdx, notif_tdb_0,,, delayed_CLKB, delayed_TDB[0] );
  $setuphold (posedge CLKB  &&& ENTDBCLKB, posedge TDB[1], Tbdc, Tbcdx, notif_tdb_1,,, delayed_CLKB, delayed_TDB[1] );
  $setuphold (posedge CLKB  &&& ENTDBCLKB, negedge TDB[1], Tbdc, Tbcdx, notif_tdb_1,,, delayed_CLKB, delayed_TDB[1] );
  $setuphold (posedge CLKB  &&& ENTDBCLKB, posedge TDB[2], Tbdc, Tbcdx, notif_tdb_2,,, delayed_CLKB, delayed_TDB[2] );
  $setuphold (posedge CLKB  &&& ENTDBCLKB, negedge TDB[2], Tbdc, Tbcdx, notif_tdb_2,,, delayed_CLKB, delayed_TDB[2] );
  $setuphold (posedge CLKB  &&& ENTDBCLKB, posedge TDB[3], Tbdc, Tbcdx, notif_tdb_3,,, delayed_CLKB, delayed_TDB[3] );
  $setuphold (posedge CLKB  &&& ENTDBCLKB, negedge TDB[3], Tbdc, Tbcdx, notif_tdb_3,,, delayed_CLKB, delayed_TDB[3] );
  $setuphold (posedge TCLKB  &&& ENTWEBTCLKB, posedge TWEB,Twc, Tcwx, notif_web,,, delayed_TCLKB, delayed_TWEB );
  $setuphold (posedge TCLKB  &&& ENTWEBTCLKB, negedge TWEB,Twc, Tcwx, notif_web,,, delayed_TCLKB, delayed_TWEB );
  $setuphold (posedge CLKB  &&& ENTWEBCLKB, posedge TWEB,Twc, Tcwx, notif_web,,, delayed_CLKB, delayed_TWEB );
  $setuphold (posedge CLKB  &&& ENTWEBCLKB, negedge TWEB,Twc, Tcwx, notif_web,,, delayed_CLKB, delayed_TWEB );
  $setuphold (posedge TCLKB  &&& ENTMEBTCLKB, posedge TMEB,Tmc, Tcmx, notif_meb,,, delayed_TCLKB, delayed_TMEB );
  $setuphold (posedge TCLKB  &&& ENTMEBTCLKB, negedge TMEB,Tmc, Tcmx, notif_meb,,, delayed_TCLKB, delayed_TMEB );
  $setuphold (posedge CLKB  &&& ENTMEBCLKB, posedge TMEB,Tmc, Tcmx, notif_meb,,, delayed_CLKB, delayed_TMEB );
  $setuphold (posedge CLKB  &&& ENTMEBCLKB, negedge TMEB,Tmc, Tcmx, notif_meb,,, delayed_CLKB, delayed_TMEB );
  $setuphold (posedge CLKB  &&& ENBISTEB, posedge BISTEB,Tbc, Tcbx, notif_bisteb,,, delayed_CLKB, delayed_BISTEB );
  $setuphold (posedge CLKB  &&& ENBISTEB, negedge BISTEB,Tbc, Tcbx, notif_bisteb,,, delayed_CLKB, delayed_BISTEB );
  $setuphold (posedge TCLKB  &&& ENTBISTEB, posedge BISTEB,Tbc, Tcbx, notif_bisteb,,, delayed_TCLKB, delayed_BISTEB );
  $setuphold (posedge TCLKB  &&& ENTBISTEB, negedge BISTEB,Tbc, Tcbx, notif_bisteb,,, delayed_TCLKB, delayed_BISTEB );
  $setuphold (posedge CLKB  &&& ENTEST1B, posedge TEST1B,TT1C, 0, notif_test1b,,, delayed_CLKB, delayed_TEST1B );
  $setuphold (posedge CLKB  &&& ENTEST1B, negedge TEST1B,TT1C, 0, notif_test1b,,, delayed_CLKB, delayed_TEST1B );
  $setuphold (negedge CLKB  &&& ENTEST1B, posedge TEST1B,0, TCT1X, notif_test1b,,, delayed_CLKB, delayed_TEST1B );
  $setuphold (negedge CLKB  &&& ENTEST1B, negedge TEST1B,0, TCT1X, notif_test1b,,, delayed_CLKB, delayed_TEST1B );
  $setuphold (posedge TCLKB  &&& ENTTEST1B, posedge TEST1B,TT1C, 0, notif_test1b,,, delayed_TCLKB, delayed_TEST1B );
  $setuphold (posedge TCLKB  &&& ENTTEST1B, negedge TEST1B,TT1C, 0, notif_test1b,,, delayed_TCLKB, delayed_TEST1B );
  $setuphold (negedge TCLKB  &&& ENTTEST1B, posedge TEST1B,0, TCT1X, notif_test1b,,, delayed_TCLKB, delayed_TEST1B );
  $setuphold (negedge TCLKB  &&& ENTTEST1B, negedge TEST1B,0, TCT1X, notif_test1b,,, delayed_TCLKB, delayed_TEST1B );
  $setuphold (posedge CLKB  &&& ENRMEB, posedge RMEB,Trmec, Tcrmex, notif_rmeb,,, delayed_CLKB, delayed_RMEB );
  $setuphold (posedge CLKB  &&& ENRMEB, negedge RMEB,Trmec, Tcrmex, notif_rmeb,,, delayed_CLKB, delayed_RMEB );
  $setuphold (posedge TCLKB  &&& ENTRMEB, posedge RMEB,Trmec, Tcrmex, notif_rmeb,,, delayed_TCLKB, delayed_RMEB );
  $setuphold (posedge TCLKB  &&& ENTRMEB, negedge RMEB,Trmec, Tcrmex, notif_rmeb,,, delayed_TCLKB, delayed_RMEB );
  $setuphold (posedge CLKB  &&& ENRMB, posedge RMB[0], Trmc, Tcrmx, notif_rmb,,, delayed_CLKB, delayed_RMB[0] );
  $setuphold (posedge CLKB  &&& ENRMB, negedge RMB[0], Trmc, Tcrmx, notif_rmb,,, delayed_CLKB, delayed_RMB[0] );
  $setuphold (posedge CLKB  &&& ENRMB, posedge RMB[1], Trmc, Tcrmx, notif_rmb,,, delayed_CLKB, delayed_RMB[1] );
  $setuphold (posedge CLKB  &&& ENRMB, negedge RMB[1], Trmc, Tcrmx, notif_rmb,,, delayed_CLKB, delayed_RMB[1] );
  $setuphold (posedge CLKB  &&& ENRMB, posedge RMB[2], Trmc, Tcrmx, notif_rmb,,, delayed_CLKB, delayed_RMB[2] );
  $setuphold (posedge CLKB  &&& ENRMB, negedge RMB[2], Trmc, Tcrmx, notif_rmb,,, delayed_CLKB, delayed_RMB[2] );
  $setuphold (posedge CLKB  &&& ENRMB, posedge RMB[3], Trmc, Tcrmx, notif_rmb,,, delayed_CLKB, delayed_RMB[3] );
  $setuphold (posedge CLKB  &&& ENRMB, negedge RMB[3], Trmc, Tcrmx, notif_rmb,,, delayed_CLKB, delayed_RMB[3] );
  $setuphold (posedge TCLKB  &&& ENTRMB, posedge RMB[0], Trmc, Tcrmx, notif_rmb,,, delayed_TCLKB, delayed_RMB[0] );
  $setuphold (posedge TCLKB  &&& ENTRMB, negedge RMB[0], Trmc, Tcrmx, notif_rmb,,, delayed_TCLKB, delayed_RMB[0] );
  $setuphold (posedge TCLKB  &&& ENTRMB, posedge RMB[1], Trmc, Tcrmx, notif_rmb,,, delayed_TCLKB, delayed_RMB[1] );
  $setuphold (posedge TCLKB  &&& ENTRMB, negedge RMB[1], Trmc, Tcrmx, notif_rmb,,, delayed_TCLKB, delayed_RMB[1] );
  $setuphold (posedge TCLKB  &&& ENTRMB, posedge RMB[2], Trmc, Tcrmx, notif_rmb,,, delayed_TCLKB, delayed_RMB[2] );
  $setuphold (posedge TCLKB  &&& ENTRMB, negedge RMB[2], Trmc, Tcrmx, notif_rmb,,, delayed_TCLKB, delayed_RMB[2] );
  $setuphold (posedge TCLKB  &&& ENTRMB, posedge RMB[3], Trmc, Tcrmx, notif_rmb,,, delayed_TCLKB, delayed_RMB[3] );
  $setuphold (posedge TCLKB  &&& ENTRMB, negedge RMB[3], Trmc, Tcrmx, notif_rmb,,, delayed_TCLKB, delayed_RMB[3] );
  $setuphold (posedge CLKB  &&& ENCDB, posedge CDB[0], Tdatc, Tcdatx, notif_cdb_0,,, delayed_CLKB, delayed_CDB[0] );
  $setuphold (posedge CLKB  &&& ENCDB, negedge CDB[0], Tdatc, Tcdatx, notif_cdb_0,,, delayed_CLKB, delayed_CDB[0] );
  $setuphold (posedge CLKB  &&& ENCDB, posedge CDB[1], Tdatc, Tcdatx, notif_cdb_1,,, delayed_CLKB, delayed_CDB[1] );
  $setuphold (posedge CLKB  &&& ENCDB, negedge CDB[1], Tdatc, Tcdatx, notif_cdb_1,,, delayed_CLKB, delayed_CDB[1] );
  $setuphold (posedge CLKB  &&& ENCDB, posedge CDB[2], Tdatc, Tcdatx, notif_cdb_2,,, delayed_CLKB, delayed_CDB[2] );
  $setuphold (posedge CLKB  &&& ENCDB, negedge CDB[2], Tdatc, Tcdatx, notif_cdb_2,,, delayed_CLKB, delayed_CDB[2] );
  $setuphold (posedge CLKB  &&& ENCDB, posedge CDB[3], Tdatc, Tcdatx, notif_cdb_3,,, delayed_CLKB, delayed_CDB[3] );
  $setuphold (posedge CLKB  &&& ENCDB, negedge CDB[3], Tdatc, Tcdatx, notif_cdb_3,,, delayed_CLKB, delayed_CDB[3] );
  $setuphold (posedge TCLKB  &&& ENTCDB, posedge CDB[0], Tdatc, Tcdatx, notif_cdb_0,,, delayed_TCLKB, delayed_CDB[0] );
  $setuphold (posedge TCLKB  &&& ENTCDB, negedge CDB[0], Tdatc, Tcdatx, notif_cdb_0,,, delayed_TCLKB, delayed_CDB[0] );
  $setuphold (posedge TCLKB  &&& ENTCDB, posedge CDB[1], Tdatc, Tcdatx, notif_cdb_1,,, delayed_TCLKB, delayed_CDB[1] );
  $setuphold (posedge TCLKB  &&& ENTCDB, negedge CDB[1], Tdatc, Tcdatx, notif_cdb_1,,, delayed_TCLKB, delayed_CDB[1] );
  $setuphold (posedge TCLKB  &&& ENTCDB, posedge CDB[2], Tdatc, Tcdatx, notif_cdb_2,,, delayed_TCLKB, delayed_CDB[2] );
  $setuphold (posedge TCLKB  &&& ENTCDB, negedge CDB[2], Tdatc, Tcdatx, notif_cdb_2,,, delayed_TCLKB, delayed_CDB[2] );
  $setuphold (posedge TCLKB  &&& ENTCDB, posedge CDB[3], Tdatc, Tcdatx, notif_cdb_3,,, delayed_TCLKB, delayed_CDB[3] );
  $setuphold (posedge TCLKB  &&& ENTCDB, negedge CDB[3], Tdatc, Tcdatx, notif_cdb_3,,, delayed_TCLKB, delayed_CDB[3] );
  $setuphold (posedge CLKB  &&& ENCAPTB, posedge CAPTB,Tcaptc, Tcaptx, notif_captb,,, delayed_CLKB, delayed_CAPTB );
  $setuphold (posedge CLKB  &&& ENCAPTB, negedge CAPTB,Tcaptc, Tcaptx, notif_captb,,, delayed_CLKB, delayed_CAPTB );
  $setuphold (posedge TCLKB  &&& ENTCAPTB, posedge CAPTB,Tcaptc, Tcaptx, notif_captb,,, delayed_TCLKB, delayed_CAPTB );
  $setuphold (posedge TCLKB  &&& ENTCAPTB, negedge CAPTB,Tcaptc, Tcaptx, notif_captb,,, delayed_TCLKB, delayed_CAPTB );
  $setuphold (posedge CLKB  &&& ENPIPEMEBCLKB, posedge PIPEMEB,Tpmec, Tpmex, notif_pipemeb,,, delayed_CLKB, delayed_PIPEMEB );
  $setuphold (posedge CLKB  &&& ENPIPEMEBCLKB, negedge PIPEMEB,Tpmec, Tpmex, notif_pipemeb,,, delayed_CLKB, delayed_PIPEMEB );
  $setuphold (posedge TCLKB  &&& ENPIPEMEBTCLKB, posedge PIPEMEB,Tpmec, Tpmex, notif_pipemeb,,, delayed_TCLKB, delayed_PIPEMEB );
  $setuphold (posedge TCLKB  &&& ENPIPEMEBTCLKB, negedge PIPEMEB,Tpmec, Tpmex, notif_pipemeb,,, delayed_TCLKB, delayed_PIPEMEB );
  $setuphold (posedge TCLKB  &&& ENTPIPEMEBTCLKB, posedge TPIPEMEB,Tpmec, Tpmex, notif_pipemeb,,, delayed_TCLKB, delayed_TPIPEMEB );
  $setuphold (posedge TCLKB  &&& ENTPIPEMEBTCLKB, negedge TPIPEMEB,Tpmec, Tpmex, notif_pipemeb,,, delayed_TCLKB, delayed_TPIPEMEB );
  $setuphold (posedge CLKB  &&& ENTPIPEMEBCLKB, posedge TPIPEMEB,Tpmec, Tpmex, notif_pipemeb,,, delayed_CLKB, delayed_TPIPEMEB );
  $setuphold (posedge CLKB  &&& ENTPIPEMEBCLKB, negedge TPIPEMEB,Tpmec, Tpmex, notif_pipemeb,,, delayed_CLKB, delayed_TPIPEMEB );
  $setuphold (posedge CLKB  &&& ENTCLKEB, posedge TCLKEB,Ttclkec, 0, notif_tclkeb,,, delayed_CLKB, delayed_TCLKEB );
  $setuphold (posedge CLKB  &&& ENTCLKEB, negedge TCLKEB,Ttclkec, 0, notif_tclkeb,,, delayed_CLKB, delayed_TCLKEB );
  $setuphold (negedge CLKB  &&& ENTCLKEB, posedge TCLKEB,0, Ttclkex, notif_tclkeb,,, delayed_CLKB, delayed_TCLKEB );
  $setuphold (negedge CLKB  &&& ENTCLKEB, negedge TCLKEB,0, Ttclkex, notif_tclkeb,,, delayed_CLKB, delayed_TCLKEB );
  $setuphold (posedge TCLKB  &&& ENTTCLKEB, posedge TCLKEB,Ttclkec, 0, notif_tclkeb,,, delayed_TCLKB, delayed_TCLKEB );
  $setuphold (posedge TCLKB  &&& ENTTCLKEB, negedge TCLKEB,Ttclkec, 0, notif_tclkeb,,, delayed_TCLKB, delayed_TCLKEB );
  $setuphold (negedge TCLKB  &&& ENTTCLKEB, posedge TCLKEB,0, Ttclkex, notif_tclkeb,,, delayed_TCLKB, delayed_TCLKEB );
  $setuphold (negedge TCLKB  &&& ENTTCLKEB, negedge TCLKEB,0, Ttclkex, notif_tclkeb,,, delayed_TCLKB, delayed_TCLKEB );
  $setuphold (posedge CLKB  &&& ENSTICKYB, posedge STICKYB,Tstc, Tstx, notif_stickyb,,, delayed_CLKB, delayed_STICKYB );
  $setuphold (posedge CLKB  &&& ENSTICKYB, negedge STICKYB,Tstc, Tstx, notif_stickyb,,, delayed_CLKB, delayed_STICKYB );
  $setuphold (posedge TCLKB  &&& ENTSTICKYB, posedge STICKYB,Tstc, Tstx, notif_stickyb,,, delayed_TCLKB, delayed_STICKYB );
  $setuphold (posedge TCLKB  &&& ENTSTICKYB, negedge STICKYB,Tstc, Tstx, notif_stickyb,,, delayed_TCLKB, delayed_STICKYB );
  $setuphold (posedge CLKB  &&& ENSI_QB, posedge SI_QB,Tsiqc, Tsiqx, notif_si_qb,,, delayed_CLKB, delayed_SI_QB );
  $setuphold (posedge CLKB  &&& ENSI_QB, negedge SI_QB,Tsiqc, Tsiqx, notif_si_qb,,, delayed_CLKB, delayed_SI_QB );
  $setuphold (posedge TCLKB  &&& ENTSI_QB, posedge SI_QB,Tsiqc, Tsiqx, notif_si_qb,,, delayed_TCLKB, delayed_SI_QB );
  $setuphold (posedge TCLKB  &&& ENTSI_QB, negedge SI_QB,Tsiqc, Tsiqx, notif_si_qb,,, delayed_TCLKB, delayed_SI_QB );
  $setuphold (posedge CLKB  &&& ENSI_DB, posedge SI_DB,Tsidc, Tsidx, notif_si_db,,, delayed_CLKB, delayed_SI_DB );
  $setuphold (posedge CLKB  &&& ENSI_DB, negedge SI_DB,Tsidc, Tsidx, notif_si_db,,, delayed_CLKB, delayed_SI_DB );
  $setuphold (posedge TCLKB  &&& ENTSI_DB, posedge SI_DB,Tsidc, Tsidx, notif_si_db,,, delayed_TCLKB, delayed_SI_DB );
  $setuphold (posedge TCLKB  &&& ENTSI_DB, negedge SI_DB,Tsidc, Tsidx, notif_si_db,,, delayed_TCLKB, delayed_SI_DB );
  $setuphold (posedge CLKB  &&& ENSE_QB, posedge SE_QB,Tseqc, Tseqx, notif_se_qb,,, delayed_CLKB, delayed_SE_QB );
  $setuphold (posedge CLKB  &&& ENSE_QB, negedge SE_QB,Tseqc, Tseqx, notif_se_qb,,, delayed_CLKB, delayed_SE_QB );
  $setuphold (posedge TCLKB  &&& ENTSE_QB, posedge SE_QB,Tseqc, Tseqx, notif_se_qb,,, delayed_TCLKB, delayed_SE_QB );
  $setuphold (posedge TCLKB  &&& ENTSE_QB, negedge SE_QB,Tseqc, Tseqx, notif_se_qb,,, delayed_TCLKB, delayed_SE_QB );
  $setuphold (posedge CLKB  &&& ENSE_INB, posedge SE_INB,Tseinc, Tseinx, notif_se_inb,,, delayed_CLKB, delayed_SE_INB );
  $setuphold (posedge CLKB  &&& ENSE_INB, negedge SE_INB,Tseinc, Tseinx, notif_se_inb,,, delayed_CLKB, delayed_SE_INB );
  $setuphold (posedge TCLKB  &&& ENTSE_INB, posedge SE_INB,Tseinc, Tseinx, notif_se_inb,,, delayed_TCLKB, delayed_SE_INB );
  $setuphold (posedge TCLKB  &&& ENTSE_INB, negedge SE_INB,Tseinc, Tseinx, notif_se_inb,,, delayed_TCLKB, delayed_SE_INB );
  $setuphold (posedge CLKB  &&& ENSI_CNTRB, posedge SI_CNTRB,Tsicc, Tsicx, notif_si_cntrb,,, delayed_CLKB, delayed_SI_CNTRB );
  $setuphold (posedge CLKB  &&& ENSI_CNTRB, negedge SI_CNTRB,Tsicc, Tsicx, notif_si_cntrb,,, delayed_CLKB, delayed_SI_CNTRB );
  $setuphold (posedge TCLKB  &&& ENTSI_CNTRB, posedge SI_CNTRB,Tsicc, Tsicx, notif_si_cntrb,,, delayed_TCLKB, delayed_SI_CNTRB );
  $setuphold (posedge TCLKB  &&& ENTSI_CNTRB, negedge SI_CNTRB,Tsicc, Tsicx, notif_si_cntrb,,, delayed_TCLKB, delayed_SI_CNTRB );
  $recrem ( posedge CLKA ,posedge CLKB  &&& ENCLKACLKBrec, Tcsep, 0, notif_clka_CLKB_rise_rise_rec,,, delayed_CLKA, delayed_CLKB);
  $recrem ( posedge CLKA ,posedge TCLKB  &&& ENCLKATCLKBrec, Tcsep, 0, notif_clka_TCLKB_rise_rise_rec,,, delayed_CLKA, delayed_TCLKB);
  $recrem ( posedge TCLKA ,posedge TCLKB  &&& ENTCLKATCLKBrec, Tcsep, 0, notif_clka_TCLKB_rise_rise_rec,,, delayed_TCLKA, delayed_TCLKB);
  $recrem ( posedge TCLKA ,posedge CLKB  &&& ENTCLKACLKBrec, Tcsep, 0, notif_clka_CLKB_rise_rise_rec,,, delayed_TCLKA, delayed_CLKB);
  $recrem ( posedge CLKB ,posedge CLKA  &&& ENCLKBCLKArec, Tcsep, 0, notif_clkb_CLKA_rise_rise_rec,,, delayed_CLKB, delayed_CLKA);
  $recrem ( posedge CLKB ,posedge TCLKA  &&& ENCLKBTCLKArec, Tcsep, 0, notif_clkb_TCLKA_rise_rise_rec,,, delayed_CLKB, delayed_TCLKA);
  $recrem ( posedge TCLKB ,posedge TCLKA  &&& ENTCLKBTCLKArec, Tcsep, 0, notif_clkb_TCLKA_rise_rise_rec,,, delayed_TCLKB, delayed_TCLKA);
  $recrem ( posedge TCLKB ,posedge CLKA  &&& ENTCLKBCLKArec, Tcsep, 0, notif_clkb_CLKA_rise_rise_rec,,, delayed_TCLKB, delayed_CLKA);

endspecify
`endif // endif of VIRAGE_FAST_VERILOG




wire CLKA_mem;
wire CLKB_mem;

`ifdef VIRAGE_FAST_VERILOG
generic_behav_SRAMDP_1920x160 #( MES_CNTRL, MemFault_Inj) uut (  .QA (QA_mem), .QB (QB_mem), .ADRA (ADRA_pre), .DA (DA_pre), .WEA(WEA_pre), .MEA(MEA_pre), .CLKA(CLKA_mem), .TCLKA(TCLKA_buf), .BISTEA(BISTEA_buf), .TEST1A(TEST1A_buf), .RMEA(RMEA_buf), .RMA (RMA_int), .TCLKEA(TCLKEA_buf), .DFTMASK(DFTMASK_buf), .LS(LS_buf), .ADRB (ADRB_pre), .DB (DB_pre), .WEB(WEB_pre), .MEB(MEB_pre), .CLKB(CLKB_mem), .TCLKB(TCLKB_buf), .BISTEB(BISTEB_buf), .TEST1B(TEST1B_buf), .RMEB(RMEB_buf), .RMB (RMB_int), .TCLKEB(TCLKEB_buf), .sim_check_A (sim_check_A), .sim_check_B (sim_check_B) );
`else
generic_behav_SRAMDP_1920x160 #( MES_CNTRL, MemFault_Inj) uut (  .QA (QA_mem), .QB (QB_mem), .ADRA (ADRA_pre), .DA (DA_pre), .WEA(WEA_pre), .MEA(MEA_pre), .CLKA(CLKA_mem), .TCLKA(TCLKA_buf), .BISTEA(BISTEA_buf), .TEST1A(TEST1A_buf), .RMEA(RMEA_buf), .RMA (RMA_int), .TCLKEA(TCLKEA_buf), .DFTMASK(DFTMASK_buf), .LS(LS_buf), .ADRB (ADRB_pre), .DB (DB_pre), .WEB(WEB_pre), .MEB(MEB_pre), .CLKB(CLKB_mem), .TCLKB(TCLKB_buf), .BISTEB(BISTEB_buf), .TEST1B(TEST1B_buf), .RMEB(RMEB_buf), .RMB (RMB_int), .TCLKEB(TCLKEB_buf), .EVENT_TCQ_A (EVENT_TCQ_A), .EVENT_TCQ_B (EVENT_TCQ_B),.notif_adra(notif_adra), .notif_da(notif_da), .notif_wea(notif_wea), .notif_mea(notif_mea), .notif_clka(notif_clka), .notif_clka_CLKB_rise_rise_rec(notif_clka_CLKB_rise_rise_rec), .notif_clka_TCLKB_rise_rise_rec(notif_clka_TCLKB_rise_rise_rec), .notif_bistea(notif_bistea), .notif_test1a(notif_test1a), .notif_rmea(notif_rmea), .notif_rma(notif_rma), .notif_tclkea(notif_tclkea), .notif_dftmask(notif_dftmask), .notif_dftmask_b(notif_dftmask_b), 
.notif_ls(notif_ls), .notif_ls_b(notif_ls_b), .notif_adrb(notif_adrb), .notif_db(notif_db), .notif_web(notif_web), .notif_meb(notif_meb), .notif_clkb(notif_clkb), .notif_clkb_CLKA_rise_rise_rec(notif_clkb_CLKA_rise_rise_rec), .notif_clkb_TCLKA_rise_rise_rec(notif_clkb_TCLKA_rise_rise_rec), .notif_bisteb(notif_bisteb), .notif_test1b(notif_test1b), .notif_rmeb(notif_rmeb), .notif_rmb(notif_rmb), .notif_tclkeb(notif_tclkeb) );
`endif // endif of VIRAGE_FAST_VERILOG

initial
begin
    flag_tclke_clkA = 1'b0;
    flag_tclke_clkB = 1'b0;
  ADRFLAGA = 1;
  TADRFLAGA = 1;
  ADRFLAGB = 1;
  TADRFLAGB = 1;
end // end of initial block
wire ls_mclkA;
always @( negedge ls_mclkA or ADRA_mout )
begin : blk_addrhold_0
  if ( ls_mclkA === 1'b0 )
  begin
    ADRA_old <= ADRA_mout;
  end // if of ls_mclkA = 0
end // if of always block blk_addrhold_0

always @( negedge ls_mclkA or MEA_mout )
begin : blk_mehold_0
  if ( ls_mclkA === 1'b0 )
  begin
    MEA_old <= MEA_mout;
  end // if of ls_mclkA = 0
end // if of always block blk_mehold_0

always @( negedge ls_mclkA or WEA_mout )
begin : blk_wehold_0
  if ( ls_mclkA === 1'b0 )
  begin
    WEA_old <= WEA_mout;
  end // if of ls_mclkA = 0
end // if of always block blk_wehold_0


always @( posedge mclkA)
begin : blk_posclock_0
  MEA_buf_L = MEA_old;
  WEA_buf_L = WEA_old;
  CLK_T_A = $realtime;
  if (DFTMASK_buf ===  1'b1 || LS_buf ===  1'b1 || SE_INA_buf ===  1'b1 || SE_INB_buf ===  1'b1)
  begin
   MEA_buf_L = 1'b0;
  end
`ifdef VIRAGE_FAST_VERILOG
`else
  EVENT_TCQ_A = 1'b1;
`endif
  ADRA_buf_L = ADRA_old;
  #0;
  if (CLK_T_A == CLK_T_B)
  begin
     if (DFTMASK_buf ===  1'b0 && (SE_INA_buf ===  1'b1 || SE_INB_buf))
     begin
      uut.QA_local_tmp <= 160'bx;
      uut.flaga_read_ok = `False;
      ->uut.ev_read_out_a_port;
      uut.QB_local_tmp <= 160'bx;
      uut.flagb_read_ok = `False;
      ->uut.ev_read_out_b_port;
     end
    if ( ((ADRA_buf_L === ADRB_buf_L) && adr_valid_a) || (CLKA_tmp === 1'bx || CLKB_tmp === 1'bx) || (( ADRA_buf_L^ADRA_buf_L) !== 0) || (( ADRB_buf_L^ADRB_buf_L) !== 0))
    begin
      if ( (MEA_buf_L !== 1'b0 && MEB_buf_L !== 1'b0 ) && ((WEA_buf_L !== 1'b0) || (WEB_buf_L !== 1'b0) || ((WEA_buf_L !== 1'b0) && ( WEB_buf_L !== 1'b0 ))))
      begin
        `ifdef VIRAGE_FAST_VERILOG
        `else
        if( (MES_CNTRL=="ON" || MES_CNTRL=="ERR")&& $realtime != 0 && uut.mes_all_valid)
        begin
          $display("\n<<VIRL_MEM_ERR: Recovery Timing Violation on posedge CLKA wrt posedge CLKB>> at time=%t; instance=%m (RAMS1H)",$realtime);
        end // if of message display is enabled
        `endif // endif of VIRAGE_FAST_VERILOG
        `ifdef VIRAGE_FAST_VERILOG
        if( sim_check_A === 1'bx)
          #0 sim_check_A = 1'b0;
        else
          #0 sim_check_A = !sim_check_A;
        `else
        if(notif_clka_CLKB_rise_rise_rec === 1'bx)
          #0 notif_clka_CLKB_rise_rise_rec = 1'b0;
        else
         #0 notif_clka_CLKB_rise_rise_rec = !notif_clka_CLKB_rise_rise_rec;
        `endif // endif of VIRAGE_FAST_VERILOG
      end
    end
  end
end
wire ls_mclkB;
always @( negedge ls_mclkB or ADRB_mout )
begin : blk_addrhold_1
  if ( ls_mclkB === 1'b0 )
  begin
    ADRB_old <= ADRB_mout;
  end // if of ls_mclkB = 0
end // if of always block blk_addrhold_1

always @( negedge ls_mclkB or MEB_mout )
begin : blk_mehold_1
  if ( ls_mclkB === 1'b0 )
  begin
    MEB_old <= MEB_mout;
  end // if of ls_mclkB = 0
end // if of always block blk_mehold_1

always @( negedge ls_mclkB or WEB_mout )
begin : blk_wehold_1
  if ( ls_mclkB === 1'b0 )
  begin
    WEB_old <= WEB_mout;
  end // if of ls_mclkB = 0
end // if of always block blk_wehold_1


always @( posedge mclkB)
begin : blk_posclock_1
  MEB_buf_L = MEB_old;
  WEB_buf_L = WEB_old;
  CLK_T_B = $realtime;
  if (DFTMASK_buf ===  1'b1 || LS_buf ===  1'b1 || SE_INB_buf ===  1'b1 || SE_INA_buf ===  1'b1)
  begin
   MEB_buf_L = 1'b0;
  end
`ifdef VIRAGE_FAST_VERILOG
`else
  EVENT_TCQ_B = 1'b1;
`endif
  ADRB_buf_L = ADRB_old;
  #0;
  if (CLK_T_B == CLK_T_A)
  begin
     if (DFTMASK_buf ===  1'b0 && (SE_INB_buf ===  1'b1 || SE_INA_buf))
     begin
      uut.QB_local_tmp <= 160'bx;
      uut.flagb_read_ok = `False;
      ->uut.ev_read_out_b_port;
      uut.QA_local_tmp <= 160'bx;
      uut.flaga_read_ok = `False;
      ->uut.ev_read_out_a_port;
     end
    if ( ((ADRB_buf_L === ADRA_buf_L) && adr_valid_b) || (CLKB_tmp === 1'bx || CLKA_tmp === 1'bx) || (( ADRB_buf_L^ADRB_buf_L) !== 0) || (( ADRA_buf_L^ADRA_buf_L) !== 0))
    begin
      if ( (MEB_buf_L !== 1'b0 && MEA_buf_L !== 1'b0 ) && ((WEA_buf_L !== 1'b0) || (WEB_buf_L !== 1'b0) || ((WEA_buf_L !== 1'b0) && ( WEB_buf_L !== 1'b0 ))))
      begin
        `ifdef VIRAGE_FAST_VERILOG
        `else
        if( (MES_CNTRL=="ON" || MES_CNTRL=="ERR")&& $realtime != 0 && uut.mes_all_valid)
        begin
          $display("\n<<VIRL_MEM_ERR: Recovery Timing Violation on posedge CLKB wrt posedge CLKA>> at time=%t; instance=%m (RAMS1H)",$realtime);
        end // if of message display is enabled
        `endif // endif of VIRAGE_FAST_VERILOG
        `ifdef VIRAGE_FAST_VERILOG
        if( sim_check_B === 1'bx)
          #0 sim_check_B = 1'b0;
        else
          #0 sim_check_B = !sim_check_B;
        `else
        if(notif_clkb_CLKA_rise_rise_rec === 1'bx)
          #0 notif_clkb_CLKA_rise_rise_rec = 1'b0;
        else
         #0 notif_clkb_CLKA_rise_rise_rec = !notif_clkb_CLKA_rise_rise_rec;
        `endif // endif of VIRAGE_FAST_VERILOG
      end
    end
  end
end
`ifdef VIRAGE_FAST_VERILOG
`else
assign rise_time_same = ( CLK_T_A == CLK_T_B )? 1'b0:1'b1;
`endif

always @( BISTEA_buf )
begin:latch_bisteA
  if ( BISTEA_buf === 1'bX )
  begin 
    uut.report_unknown("BISTEA","","");
  end // if of  BISTEA_buf = X
end


always @(TCLKEA_buf)
begin : blk_tclkebuf_0
  if ( ((ENTCLKEA && CLKA_buf) || (ENTTCLKEA && TCLKA_buf)) === 1'b1 )
  begin
    if( (MES_CNTRL =="ON" || MES_CNTRL =="ERR") && $realtime != 0 && uut.mes_all_valid)
    begin
      $display("<<VIRL_MEM_ERR:TCLKEA Transition during active Clock>> at time=%t; instance=%m (SRAMDP_1920x160_core)",$realtime);
    end // if of message display is enabled
    uut.corrupt_all_loc(`True);
    uut.QA = 160'bx;
    uut.QA_local_tmp <= 160'bx;
    uut.flaga_read_ok = `False;
    uut.flaga_we_ok = `False;
    ->uut.ev_read_out_a_port;
    #0.001;
    uut.flaga_we_ok  = `True;
  end // if of Tclke transition during active clock
end // end of always block blk_tclkebuf_0


always @( BISTEB_buf )
begin:latch_bisteB
  if ( BISTEB_buf === 1'bX )
  begin 
    uut.report_unknown("BISTEB","","");
  end // if of  BISTEB_buf = X
end


always @(TCLKEB_buf)
begin : blk_tclkebuf_1
  if ( ((ENTCLKEB && CLKB_buf) || (ENTTCLKEB && TCLKB_buf)) === 1'b1 )
  begin
    if( (MES_CNTRL =="ON" || MES_CNTRL =="ERR") && $realtime != 0 && uut.mes_all_valid)
    begin
      $display("<<VIRL_MEM_ERR:TCLKEB Transition during active Clock>> at time=%t; instance=%m (SRAMDP_1920x160_core)",$realtime);
    end // if of message display is enabled
    uut.corrupt_all_loc(`True);
    uut.QB = 160'bx;
    uut.QB_local_tmp <= 160'bx;
    uut.flagb_read_ok = `False;
    uut.flagb_we_ok = `False;
    ->uut.ev_read_out_b_port;
    #0.001;
    uut.flagb_we_ok  = `True;
  end // if of Tclke transition during active clock
end // end of always block blk_tclkebuf_1

always @ ( ADRA_buf )
begin : blk_address_0
  if ( $realtime != 0)
  begin
    if ( ADRA_buf > 11'b11101111111) 
    begin
      ADRFLAGA = 0;
    end // if of address is out of range
    else
    begin
      ADRFLAGA = 1;
    end // else of if address is out of range
  end // if of $realtime != 0
end // end of blk_address_0

always @ ( ADRB_buf )
begin : blk_address_1
  if ( $realtime != 0)
  begin
    if ( ADRB_buf > 11'b11101111111) 
    begin
      ADRFLAGB = 0;
    end // if of address is out of range
    else
    begin
      ADRFLAGB = 1;
    end // else of if address is out of range
  end // if of $realtime != 0
end // end of blk_address_1

always @ ( TADRA_buf )
begin : blk_testaddress_0
  if ( $realtime != 0)
  begin
    if ( TADRA_buf > 11'b11101111111) 
    begin
      TADRFLAGA = 0;
    end // if of address is out of range
    else
    begin
      TADRFLAGA = 1;
    end // else of if address is out of range
  end // if of $realtime != 0
end // end of always block blk_testaddress_0
always @ ( TADRB_buf )
begin : blk_testaddress_1
  if ( $realtime != 0)
  begin
    if ( TADRB_buf > 11'b11101111111) 
    begin
      TADRFLAGB = 0;
    end // if of address is out of range
    else
    begin
      TADRFLAGB = 1;
    end // else of if address is out of range
  end // if of $realtime != 0
end // end of always block blk_testaddress_1
reg [159:0] QA_dftclken;
reg [159:0] QPA_dftclken;
wire [159:0] dt_intA, XorA, sticky_outA;
wire [159:0] tmp_QPA_int, QPA_int, er_styA;
reg [159:0] QB_dftclken;
reg [159:0] QPB_dftclken;
wire [159:0] dt_intB, XorB, sticky_outB;
wire [159:0] tmp_QPB_int, QPB_int, er_styB;
wire [14:0] ADRA_int;
wire [159:0] dtA, DA_int;
wire [14:0] ADRB_int;
wire [159:0] dtB, DB_int;
reg [159:0] flag_dA_viol;
reg [3:0] flag_cdA_viol;
reg [10:0] flag_addrA_viol;
reg [159:0] flag_dB_viol;
reg [3:0] flag_cdB_viol;
reg [10:0] flag_addrB_viol;

reg flag_qA, flag_si_qA, flag_dA, flag_si_dA, flag_stickyA, flag_si_cntrA, flag_captA, flag_cdA, flag_pipemeA, flag_meA, flag_weA, flag_addrA, flag_qB, flag_si_qB, flag_dB, flag_si_dB, flag_stickyB, flag_si_cntrB, flag_captB, flag_cdB, flag_pipemeB, flag_meB, flag_weB, flag_addrB;

reg flag_cntrAadr;

reg flag_cntrBadr;


initial
begin
  #0.0;
  if(DFTCLKEN_buf !== 1'b1)
  begin
    flag_dA = 1'bX;
    flag_si_dA = 1'bX;
    flag_si_cntrA = 1'bX;
    flag_weA = 1'bX;
    flag_addrA = 1'bX;
    flag_dB = 1'bX;
    flag_si_dB = 1'bX;
    flag_si_cntrB = 1'bX;
    flag_weB = 1'bX;
    flag_addrB = 1'bX;
  end
    flag_qA <= 1'b1;
    flag_si_qA <= 1'b1;
    flag_stickyA <= 1'b1;
    flag_captA <= 1'b1;
    flag_cdA <= 1'b1;
    flag_pipemeA <= 1'b1;
    flag_meA <= 1'b1;
    flag_qB <= 1'b1;
    flag_si_qB <= 1'b1;
    flag_stickyB <= 1'b1;
    flag_captB <= 1'b1;
    flag_cdB <= 1'b1;
    flag_pipemeB <= 1'b1;
    flag_meB <= 1'b1;
    flag_dA_viol = {160{1'b1}};
    flag_cdA_viol = {4{1'b1}};
    flag_addrA_viol = {11{1'b1}};
    flag_dB_viol = {160{1'b1}};
    flag_cdB_viol = {4{1'b1}};
    flag_addrB_viol = {11{1'b1}};
end




always @( TCLKEA_buf )
begin:latch_tclkeA
  if ( CLKA_buf === 1'b1 || TCLKA_buf === 1'b1 )
  begin
    flag_tclke_clkA = 1'b1;
    if (LS_buf !== 1'b1)
    begin
      flag_dA = 1'bX;
      flag_si_dA = 1'bX;
      flag_si_cntrA = 1'bX;
      flag_weA = 1'bX;
      flag_addrA = 1'bX;
    end
      flag_qA = 1'bX;
      flag_si_qA = 1'bX;
      flag_stickyA = 1'bX;
      flag_captA = 1'bX;
      flag_cdA = 1'bX;
      flag_pipemeA = 1'bX;
      flag_meA = 1'bX;
    #0.001;
    flag_tclke_clkA = 1'b0;
  end
  if ( TCLKEA_buf === 1'bX )
  begin 
    uut.report_unknown("TCLKEA","","");
  end // if of  TCLKEA_buf = X
end
always @( TCLKEB_buf )
begin:latch_tclkeB
  if ( CLKB_buf === 1'b1 || TCLKB_buf === 1'b1 )
  begin
    flag_tclke_clkB = 1'b1;
    if (LS_buf !== 1'b1)
    begin
      flag_dB = 1'bX;
      flag_si_dB = 1'bX;
      flag_si_cntrB = 1'bX;
      flag_weB = 1'bX;
      flag_addrB = 1'bX;
    end
      flag_qB = 1'bX;
      flag_si_qB = 1'bX;
      flag_stickyB = 1'bX;
      flag_captB = 1'bX;
      flag_cdB = 1'bX;
      flag_pipemeB = 1'bX;
      flag_meB = 1'bX;
    #0.001;
    flag_tclke_clkB = 1'b0;
  end
  if ( TCLKEB_buf === 1'bX )
  begin 
    uut.report_unknown("TCLKEB","","");
  end // if of  TCLKEB_buf = X
end

VIRL_SDN_MUX2_1 mux_adA_0 (.X(ADRA_mout[0]), .D0(ADRA_buf[0]), .D1(TADRA_buf[0]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_adA_1 (.X(ADRA_mout[1]), .D0(ADRA_buf[1]), .D1(TADRA_buf[1]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_adA_2 (.X(ADRA_mout[2]), .D0(ADRA_buf[2]), .D1(TADRA_buf[2]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_adA_3 (.X(ADRA_mout[3]), .D0(ADRA_buf[3]), .D1(TADRA_buf[3]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_adA_4 (.X(ADRA_mout[4]), .D0(ADRA_buf[4]), .D1(TADRA_buf[4]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_adA_5 (.X(ADRA_mout[5]), .D0(ADRA_buf[5]), .D1(TADRA_buf[5]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_adA_6 (.X(ADRA_mout[6]), .D0(ADRA_buf[6]), .D1(TADRA_buf[6]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_adA_7 (.X(ADRA_mout[7]), .D0(ADRA_buf[7]), .D1(TADRA_buf[7]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_adA_8 (.X(ADRA_mout[8]), .D0(ADRA_buf[8]), .D1(TADRA_buf[8]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_adA_9 (.X(ADRA_mout[9]), .D0(ADRA_buf[9]), .D1(TADRA_buf[9]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_adA_10 (.X(ADRA_mout[10]), .D0(ADRA_buf[10]), .D1(TADRA_buf[10]), .S(BISTEA_buf));

VIRL_SDN_MUX2_1 mux_diA_0 (.X(DA_mout[0]), .D0(DA_buf[0]), .D1(TDA_buf[0]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_1 (.X(DA_mout[1]), .D0(DA_buf[1]), .D1(TDA_buf[1]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_2 (.X(DA_mout[2]), .D0(DA_buf[2]), .D1(TDA_buf[2]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_3 (.X(DA_mout[3]), .D0(DA_buf[3]), .D1(TDA_buf[3]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_4 (.X(DA_mout[4]), .D0(DA_buf[4]), .D1(TDA_buf[4]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_5 (.X(DA_mout[5]), .D0(DA_buf[5]), .D1(TDA_buf[5]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_6 (.X(DA_mout[6]), .D0(DA_buf[6]), .D1(TDA_buf[6]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_7 (.X(DA_mout[7]), .D0(DA_buf[7]), .D1(TDA_buf[7]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_8 (.X(DA_mout[8]), .D0(DA_buf[8]), .D1(TDA_buf[8]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_9 (.X(DA_mout[9]), .D0(DA_buf[9]), .D1(TDA_buf[9]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_10 (.X(DA_mout[10]), .D0(DA_buf[10]), .D1(TDA_buf[10]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_11 (.X(DA_mout[11]), .D0(DA_buf[11]), .D1(TDA_buf[11]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_12 (.X(DA_mout[12]), .D0(DA_buf[12]), .D1(TDA_buf[12]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_13 (.X(DA_mout[13]), .D0(DA_buf[13]), .D1(TDA_buf[13]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_14 (.X(DA_mout[14]), .D0(DA_buf[14]), .D1(TDA_buf[14]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_15 (.X(DA_mout[15]), .D0(DA_buf[15]), .D1(TDA_buf[15]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_16 (.X(DA_mout[16]), .D0(DA_buf[16]), .D1(TDA_buf[16]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_17 (.X(DA_mout[17]), .D0(DA_buf[17]), .D1(TDA_buf[17]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_18 (.X(DA_mout[18]), .D0(DA_buf[18]), .D1(TDA_buf[18]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_19 (.X(DA_mout[19]), .D0(DA_buf[19]), .D1(TDA_buf[19]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_20 (.X(DA_mout[20]), .D0(DA_buf[20]), .D1(TDA_buf[20]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_21 (.X(DA_mout[21]), .D0(DA_buf[21]), .D1(TDA_buf[21]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_22 (.X(DA_mout[22]), .D0(DA_buf[22]), .D1(TDA_buf[22]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_23 (.X(DA_mout[23]), .D0(DA_buf[23]), .D1(TDA_buf[23]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_24 (.X(DA_mout[24]), .D0(DA_buf[24]), .D1(TDA_buf[24]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_25 (.X(DA_mout[25]), .D0(DA_buf[25]), .D1(TDA_buf[25]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_26 (.X(DA_mout[26]), .D0(DA_buf[26]), .D1(TDA_buf[26]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_27 (.X(DA_mout[27]), .D0(DA_buf[27]), .D1(TDA_buf[27]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_28 (.X(DA_mout[28]), .D0(DA_buf[28]), .D1(TDA_buf[28]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_29 (.X(DA_mout[29]), .D0(DA_buf[29]), .D1(TDA_buf[29]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_30 (.X(DA_mout[30]), .D0(DA_buf[30]), .D1(TDA_buf[30]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_31 (.X(DA_mout[31]), .D0(DA_buf[31]), .D1(TDA_buf[31]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_32 (.X(DA_mout[32]), .D0(DA_buf[32]), .D1(TDA_buf[32]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_33 (.X(DA_mout[33]), .D0(DA_buf[33]), .D1(TDA_buf[33]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_34 (.X(DA_mout[34]), .D0(DA_buf[34]), .D1(TDA_buf[34]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_35 (.X(DA_mout[35]), .D0(DA_buf[35]), .D1(TDA_buf[35]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_36 (.X(DA_mout[36]), .D0(DA_buf[36]), .D1(TDA_buf[36]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_37 (.X(DA_mout[37]), .D0(DA_buf[37]), .D1(TDA_buf[37]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_38 (.X(DA_mout[38]), .D0(DA_buf[38]), .D1(TDA_buf[38]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_39 (.X(DA_mout[39]), .D0(DA_buf[39]), .D1(TDA_buf[39]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_40 (.X(DA_mout[40]), .D0(DA_buf[40]), .D1(TDA_buf[40]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_41 (.X(DA_mout[41]), .D0(DA_buf[41]), .D1(TDA_buf[41]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_42 (.X(DA_mout[42]), .D0(DA_buf[42]), .D1(TDA_buf[42]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_43 (.X(DA_mout[43]), .D0(DA_buf[43]), .D1(TDA_buf[43]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_44 (.X(DA_mout[44]), .D0(DA_buf[44]), .D1(TDA_buf[44]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_45 (.X(DA_mout[45]), .D0(DA_buf[45]), .D1(TDA_buf[45]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_46 (.X(DA_mout[46]), .D0(DA_buf[46]), .D1(TDA_buf[46]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_47 (.X(DA_mout[47]), .D0(DA_buf[47]), .D1(TDA_buf[47]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_48 (.X(DA_mout[48]), .D0(DA_buf[48]), .D1(TDA_buf[48]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_49 (.X(DA_mout[49]), .D0(DA_buf[49]), .D1(TDA_buf[49]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_50 (.X(DA_mout[50]), .D0(DA_buf[50]), .D1(TDA_buf[50]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_51 (.X(DA_mout[51]), .D0(DA_buf[51]), .D1(TDA_buf[51]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_52 (.X(DA_mout[52]), .D0(DA_buf[52]), .D1(TDA_buf[52]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_53 (.X(DA_mout[53]), .D0(DA_buf[53]), .D1(TDA_buf[53]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_54 (.X(DA_mout[54]), .D0(DA_buf[54]), .D1(TDA_buf[54]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_55 (.X(DA_mout[55]), .D0(DA_buf[55]), .D1(TDA_buf[55]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_56 (.X(DA_mout[56]), .D0(DA_buf[56]), .D1(TDA_buf[56]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_57 (.X(DA_mout[57]), .D0(DA_buf[57]), .D1(TDA_buf[57]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_58 (.X(DA_mout[58]), .D0(DA_buf[58]), .D1(TDA_buf[58]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_59 (.X(DA_mout[59]), .D0(DA_buf[59]), .D1(TDA_buf[59]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_60 (.X(DA_mout[60]), .D0(DA_buf[60]), .D1(TDA_buf[60]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_61 (.X(DA_mout[61]), .D0(DA_buf[61]), .D1(TDA_buf[61]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_62 (.X(DA_mout[62]), .D0(DA_buf[62]), .D1(TDA_buf[62]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_63 (.X(DA_mout[63]), .D0(DA_buf[63]), .D1(TDA_buf[63]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_64 (.X(DA_mout[64]), .D0(DA_buf[64]), .D1(TDA_buf[64]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_65 (.X(DA_mout[65]), .D0(DA_buf[65]), .D1(TDA_buf[65]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_66 (.X(DA_mout[66]), .D0(DA_buf[66]), .D1(TDA_buf[66]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_67 (.X(DA_mout[67]), .D0(DA_buf[67]), .D1(TDA_buf[67]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_68 (.X(DA_mout[68]), .D0(DA_buf[68]), .D1(TDA_buf[68]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_69 (.X(DA_mout[69]), .D0(DA_buf[69]), .D1(TDA_buf[69]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_70 (.X(DA_mout[70]), .D0(DA_buf[70]), .D1(TDA_buf[70]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_71 (.X(DA_mout[71]), .D0(DA_buf[71]), .D1(TDA_buf[71]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_72 (.X(DA_mout[72]), .D0(DA_buf[72]), .D1(TDA_buf[72]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_73 (.X(DA_mout[73]), .D0(DA_buf[73]), .D1(TDA_buf[73]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_74 (.X(DA_mout[74]), .D0(DA_buf[74]), .D1(TDA_buf[74]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_75 (.X(DA_mout[75]), .D0(DA_buf[75]), .D1(TDA_buf[75]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_76 (.X(DA_mout[76]), .D0(DA_buf[76]), .D1(TDA_buf[76]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_77 (.X(DA_mout[77]), .D0(DA_buf[77]), .D1(TDA_buf[77]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_78 (.X(DA_mout[78]), .D0(DA_buf[78]), .D1(TDA_buf[78]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_79 (.X(DA_mout[79]), .D0(DA_buf[79]), .D1(TDA_buf[79]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_80 (.X(DA_mout[80]), .D0(DA_buf[80]), .D1(TDA_buf[80]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_81 (.X(DA_mout[81]), .D0(DA_buf[81]), .D1(TDA_buf[81]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_82 (.X(DA_mout[82]), .D0(DA_buf[82]), .D1(TDA_buf[82]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_83 (.X(DA_mout[83]), .D0(DA_buf[83]), .D1(TDA_buf[83]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_84 (.X(DA_mout[84]), .D0(DA_buf[84]), .D1(TDA_buf[84]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_85 (.X(DA_mout[85]), .D0(DA_buf[85]), .D1(TDA_buf[85]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_86 (.X(DA_mout[86]), .D0(DA_buf[86]), .D1(TDA_buf[86]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_87 (.X(DA_mout[87]), .D0(DA_buf[87]), .D1(TDA_buf[87]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_88 (.X(DA_mout[88]), .D0(DA_buf[88]), .D1(TDA_buf[88]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_89 (.X(DA_mout[89]), .D0(DA_buf[89]), .D1(TDA_buf[89]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_90 (.X(DA_mout[90]), .D0(DA_buf[90]), .D1(TDA_buf[90]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_91 (.X(DA_mout[91]), .D0(DA_buf[91]), .D1(TDA_buf[91]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_92 (.X(DA_mout[92]), .D0(DA_buf[92]), .D1(TDA_buf[92]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_93 (.X(DA_mout[93]), .D0(DA_buf[93]), .D1(TDA_buf[93]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_94 (.X(DA_mout[94]), .D0(DA_buf[94]), .D1(TDA_buf[94]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_95 (.X(DA_mout[95]), .D0(DA_buf[95]), .D1(TDA_buf[95]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_96 (.X(DA_mout[96]), .D0(DA_buf[96]), .D1(TDA_buf[96]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_97 (.X(DA_mout[97]), .D0(DA_buf[97]), .D1(TDA_buf[97]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_98 (.X(DA_mout[98]), .D0(DA_buf[98]), .D1(TDA_buf[98]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_99 (.X(DA_mout[99]), .D0(DA_buf[99]), .D1(TDA_buf[99]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_100 (.X(DA_mout[100]), .D0(DA_buf[100]), .D1(TDA_buf[100]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_101 (.X(DA_mout[101]), .D0(DA_buf[101]), .D1(TDA_buf[101]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_102 (.X(DA_mout[102]), .D0(DA_buf[102]), .D1(TDA_buf[102]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_103 (.X(DA_mout[103]), .D0(DA_buf[103]), .D1(TDA_buf[103]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_104 (.X(DA_mout[104]), .D0(DA_buf[104]), .D1(TDA_buf[104]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_105 (.X(DA_mout[105]), .D0(DA_buf[105]), .D1(TDA_buf[105]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_106 (.X(DA_mout[106]), .D0(DA_buf[106]), .D1(TDA_buf[106]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_107 (.X(DA_mout[107]), .D0(DA_buf[107]), .D1(TDA_buf[107]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_108 (.X(DA_mout[108]), .D0(DA_buf[108]), .D1(TDA_buf[108]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_109 (.X(DA_mout[109]), .D0(DA_buf[109]), .D1(TDA_buf[109]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_110 (.X(DA_mout[110]), .D0(DA_buf[110]), .D1(TDA_buf[110]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_111 (.X(DA_mout[111]), .D0(DA_buf[111]), .D1(TDA_buf[111]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_112 (.X(DA_mout[112]), .D0(DA_buf[112]), .D1(TDA_buf[112]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_113 (.X(DA_mout[113]), .D0(DA_buf[113]), .D1(TDA_buf[113]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_114 (.X(DA_mout[114]), .D0(DA_buf[114]), .D1(TDA_buf[114]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_115 (.X(DA_mout[115]), .D0(DA_buf[115]), .D1(TDA_buf[115]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_116 (.X(DA_mout[116]), .D0(DA_buf[116]), .D1(TDA_buf[116]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_117 (.X(DA_mout[117]), .D0(DA_buf[117]), .D1(TDA_buf[117]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_118 (.X(DA_mout[118]), .D0(DA_buf[118]), .D1(TDA_buf[118]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_119 (.X(DA_mout[119]), .D0(DA_buf[119]), .D1(TDA_buf[119]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_120 (.X(DA_mout[120]), .D0(DA_buf[120]), .D1(TDA_buf[120]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_121 (.X(DA_mout[121]), .D0(DA_buf[121]), .D1(TDA_buf[121]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_122 (.X(DA_mout[122]), .D0(DA_buf[122]), .D1(TDA_buf[122]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_123 (.X(DA_mout[123]), .D0(DA_buf[123]), .D1(TDA_buf[123]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_124 (.X(DA_mout[124]), .D0(DA_buf[124]), .D1(TDA_buf[124]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_125 (.X(DA_mout[125]), .D0(DA_buf[125]), .D1(TDA_buf[125]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_126 (.X(DA_mout[126]), .D0(DA_buf[126]), .D1(TDA_buf[126]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_127 (.X(DA_mout[127]), .D0(DA_buf[127]), .D1(TDA_buf[127]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_128 (.X(DA_mout[128]), .D0(DA_buf[128]), .D1(TDA_buf[128]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_129 (.X(DA_mout[129]), .D0(DA_buf[129]), .D1(TDA_buf[129]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_130 (.X(DA_mout[130]), .D0(DA_buf[130]), .D1(TDA_buf[130]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_131 (.X(DA_mout[131]), .D0(DA_buf[131]), .D1(TDA_buf[131]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_132 (.X(DA_mout[132]), .D0(DA_buf[132]), .D1(TDA_buf[132]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_133 (.X(DA_mout[133]), .D0(DA_buf[133]), .D1(TDA_buf[133]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_134 (.X(DA_mout[134]), .D0(DA_buf[134]), .D1(TDA_buf[134]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_135 (.X(DA_mout[135]), .D0(DA_buf[135]), .D1(TDA_buf[135]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_136 (.X(DA_mout[136]), .D0(DA_buf[136]), .D1(TDA_buf[136]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_137 (.X(DA_mout[137]), .D0(DA_buf[137]), .D1(TDA_buf[137]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_138 (.X(DA_mout[138]), .D0(DA_buf[138]), .D1(TDA_buf[138]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_139 (.X(DA_mout[139]), .D0(DA_buf[139]), .D1(TDA_buf[139]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_140 (.X(DA_mout[140]), .D0(DA_buf[140]), .D1(TDA_buf[140]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_141 (.X(DA_mout[141]), .D0(DA_buf[141]), .D1(TDA_buf[141]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_142 (.X(DA_mout[142]), .D0(DA_buf[142]), .D1(TDA_buf[142]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_143 (.X(DA_mout[143]), .D0(DA_buf[143]), .D1(TDA_buf[143]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_144 (.X(DA_mout[144]), .D0(DA_buf[144]), .D1(TDA_buf[144]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_145 (.X(DA_mout[145]), .D0(DA_buf[145]), .D1(TDA_buf[145]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_146 (.X(DA_mout[146]), .D0(DA_buf[146]), .D1(TDA_buf[146]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_147 (.X(DA_mout[147]), .D0(DA_buf[147]), .D1(TDA_buf[147]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_148 (.X(DA_mout[148]), .D0(DA_buf[148]), .D1(TDA_buf[148]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_149 (.X(DA_mout[149]), .D0(DA_buf[149]), .D1(TDA_buf[149]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_150 (.X(DA_mout[150]), .D0(DA_buf[150]), .D1(TDA_buf[150]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_151 (.X(DA_mout[151]), .D0(DA_buf[151]), .D1(TDA_buf[151]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_152 (.X(DA_mout[152]), .D0(DA_buf[152]), .D1(TDA_buf[152]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_153 (.X(DA_mout[153]), .D0(DA_buf[153]), .D1(TDA_buf[153]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_154 (.X(DA_mout[154]), .D0(DA_buf[154]), .D1(TDA_buf[154]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_155 (.X(DA_mout[155]), .D0(DA_buf[155]), .D1(TDA_buf[155]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_156 (.X(DA_mout[156]), .D0(DA_buf[156]), .D1(TDA_buf[156]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_157 (.X(DA_mout[157]), .D0(DA_buf[157]), .D1(TDA_buf[157]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_158 (.X(DA_mout[158]), .D0(DA_buf[158]), .D1(TDA_buf[158]), .S(BISTEA_buf));
VIRL_SDN_MUX2_1 mux_diA_159 (.X(DA_mout[159]), .D0(DA_buf[159]), .D1(TDA_buf[159]), .S(BISTEA_buf));

VIRL_SDN_MUX2_1 mux_weA ( .X(WEA_mout), .D0(WEA_buf), .D1(TWEA_buf), .S(BISTEA_buf));

VIRL_SDN_MUX2_1 mux_meA ( .X(MEA_mout), .D0(MEA_buf), .D1(TMEA_buf), .S(BISTEA_buf));

VIRL_SDN_LDNRB_1 lat_MEA (.Q(MEAlatch), .CK(mclkA), .D(MEA_mout));

VIRL_SDN_OR2_1 or_sel1A ( .X(sel1A), .A1(MEAlatch), .A2(DFTCLKEN_old) );
reg clk_memA_int;
always @(mclkA)
begin
  clk_memA_int = sel1A && mclkA;
end
VIRL_SDN_BUF_1 buf_clk_memA_int ( .X(clk_memA), .A(clk_memA_int) );

reg ls_clk_memA_int;
always@(clk_memA)
begin
  ls_clk_memA_int = clk_memA && !LS_old;
end
VIRL_SDN_BUF_1 buf_ls_clk_memA ( .X(ls_clk_memA), .A(ls_clk_memA_int) );

VIRL_SDN_BUF_1 buf_ls_mclkA ( .X(ls_mclkA), .A(mclkA) );

VIRL_SDN_MUX2_1 mux_clk_A ( .X(mclkA), .D0(CLKA_buf), .D1(TCLKA_buf), .S(TCLKEA_buf) );


VIRL_SDN_MUX2_1 mux_rmA_0 ( .X(RMA_int[0]), .D0(1'b0), .D1(RMA_buf[0]), .S(RMEA_buf) );
VIRL_SDN_MUX2_1 mux_rmA_1 ( .X(RMA_int[1]), .D0(1'b1), .D1(RMA_buf[1]), .S(RMEA_buf) );
VIRL_SDN_MUX2_1 mux_rmA_2 ( .X(RMA_int[2]), .D0(1'b0), .D1(RMA_buf[2]), .S(RMEA_buf) );

VIRL_SDN_MUX2_1 mux_pipemeA ( .X(PIPEMEA_mout), .D0(PIPEMEA_buf), .D1(TPIPEMEA_buf), .S(BISTEA_buf));

VIRL_SDN_MUX2_1 mux_pipemeA_me_intA ( .X(in_PIPEMEAlatch), .D0(PIPEMEA_mout), .D1(MEA_int), .S(SE_INA_buf));

VIRL_SDN_LDNRB_1 lat_PIPEMEA (.Q(PIPEMEAlatch), .CK(mclkA), .D(in_PIPEMEAlatch));

VIRL_SDN_OR2_1 or_sel3A ( .X(sel3A), .A1(PIPEMEAlatch), .A2(DFTCLKEN_old) );

VIRL_SDN_AN2_1 and_clk_pipA ( .X(ls_clk_pipA), .A1(sel3A), .A2(mclkA) );

VIRL_SDN_MUX2_1 mux_adB_0 (.X(ADRB_mout[0]), .D0(ADRB_buf[0]), .D1(TADRB_buf[0]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_adB_1 (.X(ADRB_mout[1]), .D0(ADRB_buf[1]), .D1(TADRB_buf[1]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_adB_2 (.X(ADRB_mout[2]), .D0(ADRB_buf[2]), .D1(TADRB_buf[2]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_adB_3 (.X(ADRB_mout[3]), .D0(ADRB_buf[3]), .D1(TADRB_buf[3]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_adB_4 (.X(ADRB_mout[4]), .D0(ADRB_buf[4]), .D1(TADRB_buf[4]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_adB_5 (.X(ADRB_mout[5]), .D0(ADRB_buf[5]), .D1(TADRB_buf[5]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_adB_6 (.X(ADRB_mout[6]), .D0(ADRB_buf[6]), .D1(TADRB_buf[6]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_adB_7 (.X(ADRB_mout[7]), .D0(ADRB_buf[7]), .D1(TADRB_buf[7]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_adB_8 (.X(ADRB_mout[8]), .D0(ADRB_buf[8]), .D1(TADRB_buf[8]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_adB_9 (.X(ADRB_mout[9]), .D0(ADRB_buf[9]), .D1(TADRB_buf[9]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_adB_10 (.X(ADRB_mout[10]), .D0(ADRB_buf[10]), .D1(TADRB_buf[10]), .S(BISTEB_buf));

VIRL_SDN_MUX2_1 mux_diB_0 (.X(DB_mout[0]), .D0(DB_buf[0]), .D1(TDB_buf[0]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_1 (.X(DB_mout[1]), .D0(DB_buf[1]), .D1(TDB_buf[1]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_2 (.X(DB_mout[2]), .D0(DB_buf[2]), .D1(TDB_buf[2]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_3 (.X(DB_mout[3]), .D0(DB_buf[3]), .D1(TDB_buf[3]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_4 (.X(DB_mout[4]), .D0(DB_buf[4]), .D1(TDB_buf[4]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_5 (.X(DB_mout[5]), .D0(DB_buf[5]), .D1(TDB_buf[5]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_6 (.X(DB_mout[6]), .D0(DB_buf[6]), .D1(TDB_buf[6]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_7 (.X(DB_mout[7]), .D0(DB_buf[7]), .D1(TDB_buf[7]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_8 (.X(DB_mout[8]), .D0(DB_buf[8]), .D1(TDB_buf[8]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_9 (.X(DB_mout[9]), .D0(DB_buf[9]), .D1(TDB_buf[9]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_10 (.X(DB_mout[10]), .D0(DB_buf[10]), .D1(TDB_buf[10]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_11 (.X(DB_mout[11]), .D0(DB_buf[11]), .D1(TDB_buf[11]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_12 (.X(DB_mout[12]), .D0(DB_buf[12]), .D1(TDB_buf[12]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_13 (.X(DB_mout[13]), .D0(DB_buf[13]), .D1(TDB_buf[13]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_14 (.X(DB_mout[14]), .D0(DB_buf[14]), .D1(TDB_buf[14]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_15 (.X(DB_mout[15]), .D0(DB_buf[15]), .D1(TDB_buf[15]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_16 (.X(DB_mout[16]), .D0(DB_buf[16]), .D1(TDB_buf[16]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_17 (.X(DB_mout[17]), .D0(DB_buf[17]), .D1(TDB_buf[17]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_18 (.X(DB_mout[18]), .D0(DB_buf[18]), .D1(TDB_buf[18]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_19 (.X(DB_mout[19]), .D0(DB_buf[19]), .D1(TDB_buf[19]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_20 (.X(DB_mout[20]), .D0(DB_buf[20]), .D1(TDB_buf[20]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_21 (.X(DB_mout[21]), .D0(DB_buf[21]), .D1(TDB_buf[21]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_22 (.X(DB_mout[22]), .D0(DB_buf[22]), .D1(TDB_buf[22]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_23 (.X(DB_mout[23]), .D0(DB_buf[23]), .D1(TDB_buf[23]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_24 (.X(DB_mout[24]), .D0(DB_buf[24]), .D1(TDB_buf[24]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_25 (.X(DB_mout[25]), .D0(DB_buf[25]), .D1(TDB_buf[25]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_26 (.X(DB_mout[26]), .D0(DB_buf[26]), .D1(TDB_buf[26]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_27 (.X(DB_mout[27]), .D0(DB_buf[27]), .D1(TDB_buf[27]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_28 (.X(DB_mout[28]), .D0(DB_buf[28]), .D1(TDB_buf[28]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_29 (.X(DB_mout[29]), .D0(DB_buf[29]), .D1(TDB_buf[29]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_30 (.X(DB_mout[30]), .D0(DB_buf[30]), .D1(TDB_buf[30]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_31 (.X(DB_mout[31]), .D0(DB_buf[31]), .D1(TDB_buf[31]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_32 (.X(DB_mout[32]), .D0(DB_buf[32]), .D1(TDB_buf[32]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_33 (.X(DB_mout[33]), .D0(DB_buf[33]), .D1(TDB_buf[33]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_34 (.X(DB_mout[34]), .D0(DB_buf[34]), .D1(TDB_buf[34]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_35 (.X(DB_mout[35]), .D0(DB_buf[35]), .D1(TDB_buf[35]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_36 (.X(DB_mout[36]), .D0(DB_buf[36]), .D1(TDB_buf[36]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_37 (.X(DB_mout[37]), .D0(DB_buf[37]), .D1(TDB_buf[37]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_38 (.X(DB_mout[38]), .D0(DB_buf[38]), .D1(TDB_buf[38]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_39 (.X(DB_mout[39]), .D0(DB_buf[39]), .D1(TDB_buf[39]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_40 (.X(DB_mout[40]), .D0(DB_buf[40]), .D1(TDB_buf[40]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_41 (.X(DB_mout[41]), .D0(DB_buf[41]), .D1(TDB_buf[41]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_42 (.X(DB_mout[42]), .D0(DB_buf[42]), .D1(TDB_buf[42]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_43 (.X(DB_mout[43]), .D0(DB_buf[43]), .D1(TDB_buf[43]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_44 (.X(DB_mout[44]), .D0(DB_buf[44]), .D1(TDB_buf[44]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_45 (.X(DB_mout[45]), .D0(DB_buf[45]), .D1(TDB_buf[45]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_46 (.X(DB_mout[46]), .D0(DB_buf[46]), .D1(TDB_buf[46]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_47 (.X(DB_mout[47]), .D0(DB_buf[47]), .D1(TDB_buf[47]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_48 (.X(DB_mout[48]), .D0(DB_buf[48]), .D1(TDB_buf[48]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_49 (.X(DB_mout[49]), .D0(DB_buf[49]), .D1(TDB_buf[49]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_50 (.X(DB_mout[50]), .D0(DB_buf[50]), .D1(TDB_buf[50]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_51 (.X(DB_mout[51]), .D0(DB_buf[51]), .D1(TDB_buf[51]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_52 (.X(DB_mout[52]), .D0(DB_buf[52]), .D1(TDB_buf[52]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_53 (.X(DB_mout[53]), .D0(DB_buf[53]), .D1(TDB_buf[53]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_54 (.X(DB_mout[54]), .D0(DB_buf[54]), .D1(TDB_buf[54]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_55 (.X(DB_mout[55]), .D0(DB_buf[55]), .D1(TDB_buf[55]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_56 (.X(DB_mout[56]), .D0(DB_buf[56]), .D1(TDB_buf[56]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_57 (.X(DB_mout[57]), .D0(DB_buf[57]), .D1(TDB_buf[57]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_58 (.X(DB_mout[58]), .D0(DB_buf[58]), .D1(TDB_buf[58]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_59 (.X(DB_mout[59]), .D0(DB_buf[59]), .D1(TDB_buf[59]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_60 (.X(DB_mout[60]), .D0(DB_buf[60]), .D1(TDB_buf[60]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_61 (.X(DB_mout[61]), .D0(DB_buf[61]), .D1(TDB_buf[61]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_62 (.X(DB_mout[62]), .D0(DB_buf[62]), .D1(TDB_buf[62]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_63 (.X(DB_mout[63]), .D0(DB_buf[63]), .D1(TDB_buf[63]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_64 (.X(DB_mout[64]), .D0(DB_buf[64]), .D1(TDB_buf[64]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_65 (.X(DB_mout[65]), .D0(DB_buf[65]), .D1(TDB_buf[65]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_66 (.X(DB_mout[66]), .D0(DB_buf[66]), .D1(TDB_buf[66]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_67 (.X(DB_mout[67]), .D0(DB_buf[67]), .D1(TDB_buf[67]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_68 (.X(DB_mout[68]), .D0(DB_buf[68]), .D1(TDB_buf[68]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_69 (.X(DB_mout[69]), .D0(DB_buf[69]), .D1(TDB_buf[69]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_70 (.X(DB_mout[70]), .D0(DB_buf[70]), .D1(TDB_buf[70]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_71 (.X(DB_mout[71]), .D0(DB_buf[71]), .D1(TDB_buf[71]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_72 (.X(DB_mout[72]), .D0(DB_buf[72]), .D1(TDB_buf[72]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_73 (.X(DB_mout[73]), .D0(DB_buf[73]), .D1(TDB_buf[73]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_74 (.X(DB_mout[74]), .D0(DB_buf[74]), .D1(TDB_buf[74]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_75 (.X(DB_mout[75]), .D0(DB_buf[75]), .D1(TDB_buf[75]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_76 (.X(DB_mout[76]), .D0(DB_buf[76]), .D1(TDB_buf[76]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_77 (.X(DB_mout[77]), .D0(DB_buf[77]), .D1(TDB_buf[77]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_78 (.X(DB_mout[78]), .D0(DB_buf[78]), .D1(TDB_buf[78]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_79 (.X(DB_mout[79]), .D0(DB_buf[79]), .D1(TDB_buf[79]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_80 (.X(DB_mout[80]), .D0(DB_buf[80]), .D1(TDB_buf[80]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_81 (.X(DB_mout[81]), .D0(DB_buf[81]), .D1(TDB_buf[81]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_82 (.X(DB_mout[82]), .D0(DB_buf[82]), .D1(TDB_buf[82]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_83 (.X(DB_mout[83]), .D0(DB_buf[83]), .D1(TDB_buf[83]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_84 (.X(DB_mout[84]), .D0(DB_buf[84]), .D1(TDB_buf[84]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_85 (.X(DB_mout[85]), .D0(DB_buf[85]), .D1(TDB_buf[85]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_86 (.X(DB_mout[86]), .D0(DB_buf[86]), .D1(TDB_buf[86]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_87 (.X(DB_mout[87]), .D0(DB_buf[87]), .D1(TDB_buf[87]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_88 (.X(DB_mout[88]), .D0(DB_buf[88]), .D1(TDB_buf[88]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_89 (.X(DB_mout[89]), .D0(DB_buf[89]), .D1(TDB_buf[89]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_90 (.X(DB_mout[90]), .D0(DB_buf[90]), .D1(TDB_buf[90]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_91 (.X(DB_mout[91]), .D0(DB_buf[91]), .D1(TDB_buf[91]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_92 (.X(DB_mout[92]), .D0(DB_buf[92]), .D1(TDB_buf[92]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_93 (.X(DB_mout[93]), .D0(DB_buf[93]), .D1(TDB_buf[93]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_94 (.X(DB_mout[94]), .D0(DB_buf[94]), .D1(TDB_buf[94]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_95 (.X(DB_mout[95]), .D0(DB_buf[95]), .D1(TDB_buf[95]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_96 (.X(DB_mout[96]), .D0(DB_buf[96]), .D1(TDB_buf[96]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_97 (.X(DB_mout[97]), .D0(DB_buf[97]), .D1(TDB_buf[97]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_98 (.X(DB_mout[98]), .D0(DB_buf[98]), .D1(TDB_buf[98]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_99 (.X(DB_mout[99]), .D0(DB_buf[99]), .D1(TDB_buf[99]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_100 (.X(DB_mout[100]), .D0(DB_buf[100]), .D1(TDB_buf[100]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_101 (.X(DB_mout[101]), .D0(DB_buf[101]), .D1(TDB_buf[101]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_102 (.X(DB_mout[102]), .D0(DB_buf[102]), .D1(TDB_buf[102]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_103 (.X(DB_mout[103]), .D0(DB_buf[103]), .D1(TDB_buf[103]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_104 (.X(DB_mout[104]), .D0(DB_buf[104]), .D1(TDB_buf[104]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_105 (.X(DB_mout[105]), .D0(DB_buf[105]), .D1(TDB_buf[105]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_106 (.X(DB_mout[106]), .D0(DB_buf[106]), .D1(TDB_buf[106]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_107 (.X(DB_mout[107]), .D0(DB_buf[107]), .D1(TDB_buf[107]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_108 (.X(DB_mout[108]), .D0(DB_buf[108]), .D1(TDB_buf[108]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_109 (.X(DB_mout[109]), .D0(DB_buf[109]), .D1(TDB_buf[109]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_110 (.X(DB_mout[110]), .D0(DB_buf[110]), .D1(TDB_buf[110]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_111 (.X(DB_mout[111]), .D0(DB_buf[111]), .D1(TDB_buf[111]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_112 (.X(DB_mout[112]), .D0(DB_buf[112]), .D1(TDB_buf[112]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_113 (.X(DB_mout[113]), .D0(DB_buf[113]), .D1(TDB_buf[113]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_114 (.X(DB_mout[114]), .D0(DB_buf[114]), .D1(TDB_buf[114]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_115 (.X(DB_mout[115]), .D0(DB_buf[115]), .D1(TDB_buf[115]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_116 (.X(DB_mout[116]), .D0(DB_buf[116]), .D1(TDB_buf[116]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_117 (.X(DB_mout[117]), .D0(DB_buf[117]), .D1(TDB_buf[117]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_118 (.X(DB_mout[118]), .D0(DB_buf[118]), .D1(TDB_buf[118]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_119 (.X(DB_mout[119]), .D0(DB_buf[119]), .D1(TDB_buf[119]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_120 (.X(DB_mout[120]), .D0(DB_buf[120]), .D1(TDB_buf[120]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_121 (.X(DB_mout[121]), .D0(DB_buf[121]), .D1(TDB_buf[121]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_122 (.X(DB_mout[122]), .D0(DB_buf[122]), .D1(TDB_buf[122]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_123 (.X(DB_mout[123]), .D0(DB_buf[123]), .D1(TDB_buf[123]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_124 (.X(DB_mout[124]), .D0(DB_buf[124]), .D1(TDB_buf[124]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_125 (.X(DB_mout[125]), .D0(DB_buf[125]), .D1(TDB_buf[125]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_126 (.X(DB_mout[126]), .D0(DB_buf[126]), .D1(TDB_buf[126]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_127 (.X(DB_mout[127]), .D0(DB_buf[127]), .D1(TDB_buf[127]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_128 (.X(DB_mout[128]), .D0(DB_buf[128]), .D1(TDB_buf[128]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_129 (.X(DB_mout[129]), .D0(DB_buf[129]), .D1(TDB_buf[129]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_130 (.X(DB_mout[130]), .D0(DB_buf[130]), .D1(TDB_buf[130]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_131 (.X(DB_mout[131]), .D0(DB_buf[131]), .D1(TDB_buf[131]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_132 (.X(DB_mout[132]), .D0(DB_buf[132]), .D1(TDB_buf[132]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_133 (.X(DB_mout[133]), .D0(DB_buf[133]), .D1(TDB_buf[133]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_134 (.X(DB_mout[134]), .D0(DB_buf[134]), .D1(TDB_buf[134]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_135 (.X(DB_mout[135]), .D0(DB_buf[135]), .D1(TDB_buf[135]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_136 (.X(DB_mout[136]), .D0(DB_buf[136]), .D1(TDB_buf[136]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_137 (.X(DB_mout[137]), .D0(DB_buf[137]), .D1(TDB_buf[137]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_138 (.X(DB_mout[138]), .D0(DB_buf[138]), .D1(TDB_buf[138]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_139 (.X(DB_mout[139]), .D0(DB_buf[139]), .D1(TDB_buf[139]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_140 (.X(DB_mout[140]), .D0(DB_buf[140]), .D1(TDB_buf[140]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_141 (.X(DB_mout[141]), .D0(DB_buf[141]), .D1(TDB_buf[141]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_142 (.X(DB_mout[142]), .D0(DB_buf[142]), .D1(TDB_buf[142]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_143 (.X(DB_mout[143]), .D0(DB_buf[143]), .D1(TDB_buf[143]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_144 (.X(DB_mout[144]), .D0(DB_buf[144]), .D1(TDB_buf[144]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_145 (.X(DB_mout[145]), .D0(DB_buf[145]), .D1(TDB_buf[145]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_146 (.X(DB_mout[146]), .D0(DB_buf[146]), .D1(TDB_buf[146]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_147 (.X(DB_mout[147]), .D0(DB_buf[147]), .D1(TDB_buf[147]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_148 (.X(DB_mout[148]), .D0(DB_buf[148]), .D1(TDB_buf[148]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_149 (.X(DB_mout[149]), .D0(DB_buf[149]), .D1(TDB_buf[149]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_150 (.X(DB_mout[150]), .D0(DB_buf[150]), .D1(TDB_buf[150]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_151 (.X(DB_mout[151]), .D0(DB_buf[151]), .D1(TDB_buf[151]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_152 (.X(DB_mout[152]), .D0(DB_buf[152]), .D1(TDB_buf[152]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_153 (.X(DB_mout[153]), .D0(DB_buf[153]), .D1(TDB_buf[153]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_154 (.X(DB_mout[154]), .D0(DB_buf[154]), .D1(TDB_buf[154]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_155 (.X(DB_mout[155]), .D0(DB_buf[155]), .D1(TDB_buf[155]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_156 (.X(DB_mout[156]), .D0(DB_buf[156]), .D1(TDB_buf[156]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_157 (.X(DB_mout[157]), .D0(DB_buf[157]), .D1(TDB_buf[157]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_158 (.X(DB_mout[158]), .D0(DB_buf[158]), .D1(TDB_buf[158]), .S(BISTEB_buf));
VIRL_SDN_MUX2_1 mux_diB_159 (.X(DB_mout[159]), .D0(DB_buf[159]), .D1(TDB_buf[159]), .S(BISTEB_buf));

VIRL_SDN_MUX2_1 mux_weB ( .X(WEB_mout), .D0(WEB_buf), .D1(TWEB_buf), .S(BISTEB_buf));

VIRL_SDN_MUX2_1 mux_meB ( .X(MEB_mout), .D0(MEB_buf), .D1(TMEB_buf), .S(BISTEB_buf));

VIRL_SDN_LDNRB_1 lat_MEB (.Q(MEBlatch), .CK(mclkB), .D(MEB_mout));

VIRL_SDN_OR2_1 or_sel1B ( .X(sel1B), .A1(MEBlatch), .A2(DFTCLKEN_old) );
reg clk_memB_int;
always @(mclkB)
begin
  clk_memB_int = sel1B && mclkB;
end
VIRL_SDN_BUF_1 buf_clk_memB_int ( .X(clk_memB), .A(clk_memB_int) );

reg ls_clk_memB_int;
always@(clk_memB)
begin
  ls_clk_memB_int = clk_memB && !LS_old;
end
VIRL_SDN_BUF_1 buf_ls_clk_memB ( .X(ls_clk_memB), .A(ls_clk_memB_int) );

VIRL_SDN_BUF_1 buf_ls_mclkB ( .X(ls_mclkB), .A(mclkB) );

VIRL_SDN_MUX2_1 mux_clk_B ( .X(mclkB), .D0(CLKB_buf), .D1(TCLKB_buf), .S(TCLKEB_buf) );


VIRL_SDN_MUX2_1 mux_rmB_0 ( .X(RMB_int[0]), .D0(1'b0), .D1(RMB_buf[0]), .S(RMEB_buf) );
VIRL_SDN_MUX2_1 mux_rmB_1 ( .X(RMB_int[1]), .D0(1'b1), .D1(RMB_buf[1]), .S(RMEB_buf) );
VIRL_SDN_MUX2_1 mux_rmB_2 ( .X(RMB_int[2]), .D0(1'b0), .D1(RMB_buf[2]), .S(RMEB_buf) );

VIRL_SDN_MUX2_1 mux_pipemeB ( .X(PIPEMEB_mout), .D0(PIPEMEB_buf), .D1(TPIPEMEB_buf), .S(BISTEB_buf));

VIRL_SDN_MUX2_1 mux_pipemeB_me_intB ( .X(in_PIPEMEBlatch), .D0(PIPEMEB_mout), .D1(MEB_int), .S(SE_INB_buf));

VIRL_SDN_LDNRB_1 lat_PIPEMEB (.Q(PIPEMEBlatch), .CK(mclkB), .D(in_PIPEMEBlatch));

VIRL_SDN_OR2_1 or_sel3B ( .X(sel3B), .A1(PIPEMEBlatch), .A2(DFTCLKEN_old) );

VIRL_SDN_AN2_1 and_clk_pipB ( .X(ls_clk_pipB), .A1(sel3B), .A2(mclkB) );

VIRL_SDN_BUF_1 buf_dtA_0 ( .X(dtA[0]), .A(DA_mout[0]) );
VIRL_SDN_BUF_1 buf_dtA_1 ( .X(dtA[1]), .A(DA_mout[1]) );
VIRL_SDN_BUF_1 buf_dtA_2 ( .X(dtA[2]), .A(DA_mout[2]) );
VIRL_SDN_BUF_1 buf_dtA_3 ( .X(dtA[3]), .A(DA_mout[3]) );
VIRL_SDN_BUF_1 buf_dtA_4 ( .X(dtA[4]), .A(DA_mout[4]) );
VIRL_SDN_BUF_1 buf_dtA_5 ( .X(dtA[5]), .A(DA_mout[5]) );
VIRL_SDN_BUF_1 buf_dtA_6 ( .X(dtA[6]), .A(DA_mout[6]) );
VIRL_SDN_BUF_1 buf_dtA_7 ( .X(dtA[7]), .A(DA_mout[7]) );
VIRL_SDN_BUF_1 buf_dtA_8 ( .X(dtA[8]), .A(DA_mout[8]) );
VIRL_SDN_BUF_1 buf_dtA_9 ( .X(dtA[9]), .A(DA_mout[9]) );
VIRL_SDN_BUF_1 buf_dtA_10 ( .X(dtA[10]), .A(DA_mout[10]) );
VIRL_SDN_BUF_1 buf_dtA_11 ( .X(dtA[11]), .A(DA_mout[11]) );
VIRL_SDN_BUF_1 buf_dtA_12 ( .X(dtA[12]), .A(DA_mout[12]) );
VIRL_SDN_BUF_1 buf_dtA_13 ( .X(dtA[13]), .A(DA_mout[13]) );
VIRL_SDN_BUF_1 buf_dtA_14 ( .X(dtA[14]), .A(DA_mout[14]) );
VIRL_SDN_BUF_1 buf_dtA_15 ( .X(dtA[15]), .A(DA_mout[15]) );
VIRL_SDN_BUF_1 buf_dtA_16 ( .X(dtA[16]), .A(DA_mout[16]) );
VIRL_SDN_BUF_1 buf_dtA_17 ( .X(dtA[17]), .A(DA_mout[17]) );
VIRL_SDN_BUF_1 buf_dtA_18 ( .X(dtA[18]), .A(DA_mout[18]) );
VIRL_SDN_BUF_1 buf_dtA_19 ( .X(dtA[19]), .A(DA_mout[19]) );
VIRL_SDN_BUF_1 buf_dtA_20 ( .X(dtA[20]), .A(DA_mout[20]) );
VIRL_SDN_BUF_1 buf_dtA_21 ( .X(dtA[21]), .A(DA_mout[21]) );
VIRL_SDN_BUF_1 buf_dtA_22 ( .X(dtA[22]), .A(DA_mout[22]) );
VIRL_SDN_BUF_1 buf_dtA_23 ( .X(dtA[23]), .A(DA_mout[23]) );
VIRL_SDN_BUF_1 buf_dtA_24 ( .X(dtA[24]), .A(DA_mout[24]) );
VIRL_SDN_BUF_1 buf_dtA_25 ( .X(dtA[25]), .A(DA_mout[25]) );
VIRL_SDN_BUF_1 buf_dtA_26 ( .X(dtA[26]), .A(DA_mout[26]) );
VIRL_SDN_BUF_1 buf_dtA_27 ( .X(dtA[27]), .A(DA_mout[27]) );
VIRL_SDN_BUF_1 buf_dtA_28 ( .X(dtA[28]), .A(DA_mout[28]) );
VIRL_SDN_BUF_1 buf_dtA_29 ( .X(dtA[29]), .A(DA_mout[29]) );
VIRL_SDN_BUF_1 buf_dtA_30 ( .X(dtA[30]), .A(DA_mout[30]) );
VIRL_SDN_BUF_1 buf_dtA_31 ( .X(dtA[31]), .A(DA_mout[31]) );
VIRL_SDN_BUF_1 buf_dtA_32 ( .X(dtA[32]), .A(DA_mout[32]) );
VIRL_SDN_BUF_1 buf_dtA_33 ( .X(dtA[33]), .A(DA_mout[33]) );
VIRL_SDN_BUF_1 buf_dtA_34 ( .X(dtA[34]), .A(DA_mout[34]) );
VIRL_SDN_BUF_1 buf_dtA_35 ( .X(dtA[35]), .A(DA_mout[35]) );
VIRL_SDN_BUF_1 buf_dtA_36 ( .X(dtA[36]), .A(DA_mout[36]) );
VIRL_SDN_BUF_1 buf_dtA_37 ( .X(dtA[37]), .A(DA_mout[37]) );
VIRL_SDN_BUF_1 buf_dtA_38 ( .X(dtA[38]), .A(DA_mout[38]) );
VIRL_SDN_BUF_1 buf_dtA_39 ( .X(dtA[39]), .A(DA_mout[39]) );
VIRL_SDN_BUF_1 buf_dtA_40 ( .X(dtA[40]), .A(DA_mout[40]) );
VIRL_SDN_BUF_1 buf_dtA_41 ( .X(dtA[41]), .A(DA_mout[41]) );
VIRL_SDN_BUF_1 buf_dtA_42 ( .X(dtA[42]), .A(DA_mout[42]) );
VIRL_SDN_BUF_1 buf_dtA_43 ( .X(dtA[43]), .A(DA_mout[43]) );
VIRL_SDN_BUF_1 buf_dtA_44 ( .X(dtA[44]), .A(DA_mout[44]) );
VIRL_SDN_BUF_1 buf_dtA_45 ( .X(dtA[45]), .A(DA_mout[45]) );
VIRL_SDN_BUF_1 buf_dtA_46 ( .X(dtA[46]), .A(DA_mout[46]) );
VIRL_SDN_BUF_1 buf_dtA_47 ( .X(dtA[47]), .A(DA_mout[47]) );
VIRL_SDN_BUF_1 buf_dtA_48 ( .X(dtA[48]), .A(DA_mout[48]) );
VIRL_SDN_BUF_1 buf_dtA_49 ( .X(dtA[49]), .A(DA_mout[49]) );
VIRL_SDN_BUF_1 buf_dtA_50 ( .X(dtA[50]), .A(DA_mout[50]) );
VIRL_SDN_BUF_1 buf_dtA_51 ( .X(dtA[51]), .A(DA_mout[51]) );
VIRL_SDN_BUF_1 buf_dtA_52 ( .X(dtA[52]), .A(DA_mout[52]) );
VIRL_SDN_BUF_1 buf_dtA_53 ( .X(dtA[53]), .A(DA_mout[53]) );
VIRL_SDN_BUF_1 buf_dtA_54 ( .X(dtA[54]), .A(DA_mout[54]) );
VIRL_SDN_BUF_1 buf_dtA_55 ( .X(dtA[55]), .A(DA_mout[55]) );
VIRL_SDN_BUF_1 buf_dtA_56 ( .X(dtA[56]), .A(DA_mout[56]) );
VIRL_SDN_BUF_1 buf_dtA_57 ( .X(dtA[57]), .A(DA_mout[57]) );
VIRL_SDN_BUF_1 buf_dtA_58 ( .X(dtA[58]), .A(DA_mout[58]) );
VIRL_SDN_BUF_1 buf_dtA_59 ( .X(dtA[59]), .A(DA_mout[59]) );
VIRL_SDN_BUF_1 buf_dtA_60 ( .X(dtA[60]), .A(DA_mout[60]) );
VIRL_SDN_BUF_1 buf_dtA_61 ( .X(dtA[61]), .A(DA_mout[61]) );
VIRL_SDN_BUF_1 buf_dtA_62 ( .X(dtA[62]), .A(DA_mout[62]) );
VIRL_SDN_BUF_1 buf_dtA_63 ( .X(dtA[63]), .A(DA_mout[63]) );
VIRL_SDN_BUF_1 buf_dtA_64 ( .X(dtA[64]), .A(DA_mout[64]) );
VIRL_SDN_BUF_1 buf_dtA_65 ( .X(dtA[65]), .A(DA_mout[65]) );
VIRL_SDN_BUF_1 buf_dtA_66 ( .X(dtA[66]), .A(DA_mout[66]) );
VIRL_SDN_BUF_1 buf_dtA_67 ( .X(dtA[67]), .A(DA_mout[67]) );
VIRL_SDN_BUF_1 buf_dtA_68 ( .X(dtA[68]), .A(DA_mout[68]) );
VIRL_SDN_BUF_1 buf_dtA_69 ( .X(dtA[69]), .A(DA_mout[69]) );
VIRL_SDN_BUF_1 buf_dtA_70 ( .X(dtA[70]), .A(DA_mout[70]) );
VIRL_SDN_BUF_1 buf_dtA_71 ( .X(dtA[71]), .A(DA_mout[71]) );
VIRL_SDN_BUF_1 buf_dtA_72 ( .X(dtA[72]), .A(DA_mout[72]) );
VIRL_SDN_BUF_1 buf_dtA_73 ( .X(dtA[73]), .A(DA_mout[73]) );
VIRL_SDN_BUF_1 buf_dtA_74 ( .X(dtA[74]), .A(DA_mout[74]) );
VIRL_SDN_BUF_1 buf_dtA_75 ( .X(dtA[75]), .A(DA_mout[75]) );
VIRL_SDN_BUF_1 buf_dtA_76 ( .X(dtA[76]), .A(DA_mout[76]) );
VIRL_SDN_BUF_1 buf_dtA_77 ( .X(dtA[77]), .A(DA_mout[77]) );
VIRL_SDN_BUF_1 buf_dtA_78 ( .X(dtA[78]), .A(DA_mout[78]) );
VIRL_SDN_BUF_1 buf_dtA_79 ( .X(dtA[79]), .A(DA_mout[79]) );
VIRL_SDN_BUF_1 buf_dtA_80 ( .X(dtA[80]), .A(DA_mout[80]) );
VIRL_SDN_BUF_1 buf_dtA_81 ( .X(dtA[81]), .A(DA_mout[81]) );
VIRL_SDN_BUF_1 buf_dtA_82 ( .X(dtA[82]), .A(DA_mout[82]) );
VIRL_SDN_BUF_1 buf_dtA_83 ( .X(dtA[83]), .A(DA_mout[83]) );
VIRL_SDN_BUF_1 buf_dtA_84 ( .X(dtA[84]), .A(DA_mout[84]) );
VIRL_SDN_BUF_1 buf_dtA_85 ( .X(dtA[85]), .A(DA_mout[85]) );
VIRL_SDN_BUF_1 buf_dtA_86 ( .X(dtA[86]), .A(DA_mout[86]) );
VIRL_SDN_BUF_1 buf_dtA_87 ( .X(dtA[87]), .A(DA_mout[87]) );
VIRL_SDN_BUF_1 buf_dtA_88 ( .X(dtA[88]), .A(DA_mout[88]) );
VIRL_SDN_BUF_1 buf_dtA_89 ( .X(dtA[89]), .A(DA_mout[89]) );
VIRL_SDN_BUF_1 buf_dtA_90 ( .X(dtA[90]), .A(DA_mout[90]) );
VIRL_SDN_BUF_1 buf_dtA_91 ( .X(dtA[91]), .A(DA_mout[91]) );
VIRL_SDN_BUF_1 buf_dtA_92 ( .X(dtA[92]), .A(DA_mout[92]) );
VIRL_SDN_BUF_1 buf_dtA_93 ( .X(dtA[93]), .A(DA_mout[93]) );
VIRL_SDN_BUF_1 buf_dtA_94 ( .X(dtA[94]), .A(DA_mout[94]) );
VIRL_SDN_BUF_1 buf_dtA_95 ( .X(dtA[95]), .A(DA_mout[95]) );
VIRL_SDN_BUF_1 buf_dtA_96 ( .X(dtA[96]), .A(DA_mout[96]) );
VIRL_SDN_BUF_1 buf_dtA_97 ( .X(dtA[97]), .A(DA_mout[97]) );
VIRL_SDN_BUF_1 buf_dtA_98 ( .X(dtA[98]), .A(DA_mout[98]) );
VIRL_SDN_BUF_1 buf_dtA_99 ( .X(dtA[99]), .A(DA_mout[99]) );
VIRL_SDN_BUF_1 buf_dtA_100 ( .X(dtA[100]), .A(DA_mout[100]) );
VIRL_SDN_BUF_1 buf_dtA_101 ( .X(dtA[101]), .A(DA_mout[101]) );
VIRL_SDN_BUF_1 buf_dtA_102 ( .X(dtA[102]), .A(DA_mout[102]) );
VIRL_SDN_BUF_1 buf_dtA_103 ( .X(dtA[103]), .A(DA_mout[103]) );
VIRL_SDN_BUF_1 buf_dtA_104 ( .X(dtA[104]), .A(DA_mout[104]) );
VIRL_SDN_BUF_1 buf_dtA_105 ( .X(dtA[105]), .A(DA_mout[105]) );
VIRL_SDN_BUF_1 buf_dtA_106 ( .X(dtA[106]), .A(DA_mout[106]) );
VIRL_SDN_BUF_1 buf_dtA_107 ( .X(dtA[107]), .A(DA_mout[107]) );
VIRL_SDN_BUF_1 buf_dtA_108 ( .X(dtA[108]), .A(DA_mout[108]) );
VIRL_SDN_BUF_1 buf_dtA_109 ( .X(dtA[109]), .A(DA_mout[109]) );
VIRL_SDN_BUF_1 buf_dtA_110 ( .X(dtA[110]), .A(DA_mout[110]) );
VIRL_SDN_BUF_1 buf_dtA_111 ( .X(dtA[111]), .A(DA_mout[111]) );
VIRL_SDN_BUF_1 buf_dtA_112 ( .X(dtA[112]), .A(DA_mout[112]) );
VIRL_SDN_BUF_1 buf_dtA_113 ( .X(dtA[113]), .A(DA_mout[113]) );
VIRL_SDN_BUF_1 buf_dtA_114 ( .X(dtA[114]), .A(DA_mout[114]) );
VIRL_SDN_BUF_1 buf_dtA_115 ( .X(dtA[115]), .A(DA_mout[115]) );
VIRL_SDN_BUF_1 buf_dtA_116 ( .X(dtA[116]), .A(DA_mout[116]) );
VIRL_SDN_BUF_1 buf_dtA_117 ( .X(dtA[117]), .A(DA_mout[117]) );
VIRL_SDN_BUF_1 buf_dtA_118 ( .X(dtA[118]), .A(DA_mout[118]) );
VIRL_SDN_BUF_1 buf_dtA_119 ( .X(dtA[119]), .A(DA_mout[119]) );
VIRL_SDN_BUF_1 buf_dtA_120 ( .X(dtA[120]), .A(DA_mout[120]) );
VIRL_SDN_BUF_1 buf_dtA_121 ( .X(dtA[121]), .A(DA_mout[121]) );
VIRL_SDN_BUF_1 buf_dtA_122 ( .X(dtA[122]), .A(DA_mout[122]) );
VIRL_SDN_BUF_1 buf_dtA_123 ( .X(dtA[123]), .A(DA_mout[123]) );
VIRL_SDN_BUF_1 buf_dtA_124 ( .X(dtA[124]), .A(DA_mout[124]) );
VIRL_SDN_BUF_1 buf_dtA_125 ( .X(dtA[125]), .A(DA_mout[125]) );
VIRL_SDN_BUF_1 buf_dtA_126 ( .X(dtA[126]), .A(DA_mout[126]) );
VIRL_SDN_BUF_1 buf_dtA_127 ( .X(dtA[127]), .A(DA_mout[127]) );
VIRL_SDN_BUF_1 buf_dtA_128 ( .X(dtA[128]), .A(DA_mout[128]) );
VIRL_SDN_BUF_1 buf_dtA_129 ( .X(dtA[129]), .A(DA_mout[129]) );
VIRL_SDN_BUF_1 buf_dtA_130 ( .X(dtA[130]), .A(DA_mout[130]) );
VIRL_SDN_BUF_1 buf_dtA_131 ( .X(dtA[131]), .A(DA_mout[131]) );
VIRL_SDN_BUF_1 buf_dtA_132 ( .X(dtA[132]), .A(DA_mout[132]) );
VIRL_SDN_BUF_1 buf_dtA_133 ( .X(dtA[133]), .A(DA_mout[133]) );
VIRL_SDN_BUF_1 buf_dtA_134 ( .X(dtA[134]), .A(DA_mout[134]) );
VIRL_SDN_BUF_1 buf_dtA_135 ( .X(dtA[135]), .A(DA_mout[135]) );
VIRL_SDN_BUF_1 buf_dtA_136 ( .X(dtA[136]), .A(DA_mout[136]) );
VIRL_SDN_BUF_1 buf_dtA_137 ( .X(dtA[137]), .A(DA_mout[137]) );
VIRL_SDN_BUF_1 buf_dtA_138 ( .X(dtA[138]), .A(DA_mout[138]) );
VIRL_SDN_BUF_1 buf_dtA_139 ( .X(dtA[139]), .A(DA_mout[139]) );
VIRL_SDN_BUF_1 buf_dtA_140 ( .X(dtA[140]), .A(DA_mout[140]) );
VIRL_SDN_BUF_1 buf_dtA_141 ( .X(dtA[141]), .A(DA_mout[141]) );
VIRL_SDN_BUF_1 buf_dtA_142 ( .X(dtA[142]), .A(DA_mout[142]) );
VIRL_SDN_BUF_1 buf_dtA_143 ( .X(dtA[143]), .A(DA_mout[143]) );
VIRL_SDN_BUF_1 buf_dtA_144 ( .X(dtA[144]), .A(DA_mout[144]) );
VIRL_SDN_BUF_1 buf_dtA_145 ( .X(dtA[145]), .A(DA_mout[145]) );
VIRL_SDN_BUF_1 buf_dtA_146 ( .X(dtA[146]), .A(DA_mout[146]) );
VIRL_SDN_BUF_1 buf_dtA_147 ( .X(dtA[147]), .A(DA_mout[147]) );
VIRL_SDN_BUF_1 buf_dtA_148 ( .X(dtA[148]), .A(DA_mout[148]) );
VIRL_SDN_BUF_1 buf_dtA_149 ( .X(dtA[149]), .A(DA_mout[149]) );
VIRL_SDN_BUF_1 buf_dtA_150 ( .X(dtA[150]), .A(DA_mout[150]) );
VIRL_SDN_BUF_1 buf_dtA_151 ( .X(dtA[151]), .A(DA_mout[151]) );
VIRL_SDN_BUF_1 buf_dtA_152 ( .X(dtA[152]), .A(DA_mout[152]) );
VIRL_SDN_BUF_1 buf_dtA_153 ( .X(dtA[153]), .A(DA_mout[153]) );
VIRL_SDN_BUF_1 buf_dtA_154 ( .X(dtA[154]), .A(DA_mout[154]) );
VIRL_SDN_BUF_1 buf_dtA_155 ( .X(dtA[155]), .A(DA_mout[155]) );
VIRL_SDN_BUF_1 buf_dtA_156 ( .X(dtA[156]), .A(DA_mout[156]) );
VIRL_SDN_BUF_1 buf_dtA_157 ( .X(dtA[157]), .A(DA_mout[157]) );
VIRL_SDN_BUF_1 buf_dtA_158 ( .X(dtA[158]), .A(DA_mout[158]) );
VIRL_SDN_BUF_1 buf_dtA_159 ( .X(dtA[159]), .A(DA_mout[159]) );

always @ ( negedge mclkA or DFTMASK_buf )
begin: blk_dftmaskAlatched
  if ( mclkA === 1'b0 )
  begin
    DFTMASK_latchedA = DFTMASK_buf;
  end
end


VIRL_SDN_MUX2_1 mux_dt_qA_0 ( .X(dt_intA[0]), .D0(QA_mem[0]), .D1(DA_int[0]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_1 ( .X(dt_intA[1]), .D0(QA_mem[1]), .D1(DA_int[1]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_2 ( .X(dt_intA[2]), .D0(QA_mem[2]), .D1(DA_int[2]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_3 ( .X(dt_intA[3]), .D0(QA_mem[3]), .D1(DA_int[3]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_4 ( .X(dt_intA[4]), .D0(QA_mem[4]), .D1(DA_int[4]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_5 ( .X(dt_intA[5]), .D0(QA_mem[5]), .D1(DA_int[5]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_6 ( .X(dt_intA[6]), .D0(QA_mem[6]), .D1(DA_int[6]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_7 ( .X(dt_intA[7]), .D0(QA_mem[7]), .D1(DA_int[7]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_8 ( .X(dt_intA[8]), .D0(QA_mem[8]), .D1(DA_int[8]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_9 ( .X(dt_intA[9]), .D0(QA_mem[9]), .D1(DA_int[9]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_10 ( .X(dt_intA[10]), .D0(QA_mem[10]), .D1(DA_int[10]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_11 ( .X(dt_intA[11]), .D0(QA_mem[11]), .D1(DA_int[11]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_12 ( .X(dt_intA[12]), .D0(QA_mem[12]), .D1(DA_int[12]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_13 ( .X(dt_intA[13]), .D0(QA_mem[13]), .D1(DA_int[13]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_14 ( .X(dt_intA[14]), .D0(QA_mem[14]), .D1(DA_int[14]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_15 ( .X(dt_intA[15]), .D0(QA_mem[15]), .D1(DA_int[15]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_16 ( .X(dt_intA[16]), .D0(QA_mem[16]), .D1(DA_int[16]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_17 ( .X(dt_intA[17]), .D0(QA_mem[17]), .D1(DA_int[17]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_18 ( .X(dt_intA[18]), .D0(QA_mem[18]), .D1(DA_int[18]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_19 ( .X(dt_intA[19]), .D0(QA_mem[19]), .D1(DA_int[19]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_20 ( .X(dt_intA[20]), .D0(QA_mem[20]), .D1(DA_int[20]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_21 ( .X(dt_intA[21]), .D0(QA_mem[21]), .D1(DA_int[21]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_22 ( .X(dt_intA[22]), .D0(QA_mem[22]), .D1(DA_int[22]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_23 ( .X(dt_intA[23]), .D0(QA_mem[23]), .D1(DA_int[23]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_24 ( .X(dt_intA[24]), .D0(QA_mem[24]), .D1(DA_int[24]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_25 ( .X(dt_intA[25]), .D0(QA_mem[25]), .D1(DA_int[25]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_26 ( .X(dt_intA[26]), .D0(QA_mem[26]), .D1(DA_int[26]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_27 ( .X(dt_intA[27]), .D0(QA_mem[27]), .D1(DA_int[27]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_28 ( .X(dt_intA[28]), .D0(QA_mem[28]), .D1(DA_int[28]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_29 ( .X(dt_intA[29]), .D0(QA_mem[29]), .D1(DA_int[29]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_30 ( .X(dt_intA[30]), .D0(QA_mem[30]), .D1(DA_int[30]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_31 ( .X(dt_intA[31]), .D0(QA_mem[31]), .D1(DA_int[31]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_32 ( .X(dt_intA[32]), .D0(QA_mem[32]), .D1(DA_int[32]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_33 ( .X(dt_intA[33]), .D0(QA_mem[33]), .D1(DA_int[33]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_34 ( .X(dt_intA[34]), .D0(QA_mem[34]), .D1(DA_int[34]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_35 ( .X(dt_intA[35]), .D0(QA_mem[35]), .D1(DA_int[35]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_36 ( .X(dt_intA[36]), .D0(QA_mem[36]), .D1(DA_int[36]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_37 ( .X(dt_intA[37]), .D0(QA_mem[37]), .D1(DA_int[37]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_38 ( .X(dt_intA[38]), .D0(QA_mem[38]), .D1(DA_int[38]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_39 ( .X(dt_intA[39]), .D0(QA_mem[39]), .D1(DA_int[39]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_40 ( .X(dt_intA[40]), .D0(QA_mem[40]), .D1(DA_int[40]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_41 ( .X(dt_intA[41]), .D0(QA_mem[41]), .D1(DA_int[41]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_42 ( .X(dt_intA[42]), .D0(QA_mem[42]), .D1(DA_int[42]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_43 ( .X(dt_intA[43]), .D0(QA_mem[43]), .D1(DA_int[43]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_44 ( .X(dt_intA[44]), .D0(QA_mem[44]), .D1(DA_int[44]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_45 ( .X(dt_intA[45]), .D0(QA_mem[45]), .D1(DA_int[45]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_46 ( .X(dt_intA[46]), .D0(QA_mem[46]), .D1(DA_int[46]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_47 ( .X(dt_intA[47]), .D0(QA_mem[47]), .D1(DA_int[47]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_48 ( .X(dt_intA[48]), .D0(QA_mem[48]), .D1(DA_int[48]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_49 ( .X(dt_intA[49]), .D0(QA_mem[49]), .D1(DA_int[49]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_50 ( .X(dt_intA[50]), .D0(QA_mem[50]), .D1(DA_int[50]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_51 ( .X(dt_intA[51]), .D0(QA_mem[51]), .D1(DA_int[51]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_52 ( .X(dt_intA[52]), .D0(QA_mem[52]), .D1(DA_int[52]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_53 ( .X(dt_intA[53]), .D0(QA_mem[53]), .D1(DA_int[53]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_54 ( .X(dt_intA[54]), .D0(QA_mem[54]), .D1(DA_int[54]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_55 ( .X(dt_intA[55]), .D0(QA_mem[55]), .D1(DA_int[55]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_56 ( .X(dt_intA[56]), .D0(QA_mem[56]), .D1(DA_int[56]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_57 ( .X(dt_intA[57]), .D0(QA_mem[57]), .D1(DA_int[57]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_58 ( .X(dt_intA[58]), .D0(QA_mem[58]), .D1(DA_int[58]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_59 ( .X(dt_intA[59]), .D0(QA_mem[59]), .D1(DA_int[59]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_60 ( .X(dt_intA[60]), .D0(QA_mem[60]), .D1(DA_int[60]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_61 ( .X(dt_intA[61]), .D0(QA_mem[61]), .D1(DA_int[61]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_62 ( .X(dt_intA[62]), .D0(QA_mem[62]), .D1(DA_int[62]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_63 ( .X(dt_intA[63]), .D0(QA_mem[63]), .D1(DA_int[63]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_64 ( .X(dt_intA[64]), .D0(QA_mem[64]), .D1(DA_int[64]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_65 ( .X(dt_intA[65]), .D0(QA_mem[65]), .D1(DA_int[65]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_66 ( .X(dt_intA[66]), .D0(QA_mem[66]), .D1(DA_int[66]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_67 ( .X(dt_intA[67]), .D0(QA_mem[67]), .D1(DA_int[67]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_68 ( .X(dt_intA[68]), .D0(QA_mem[68]), .D1(DA_int[68]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_69 ( .X(dt_intA[69]), .D0(QA_mem[69]), .D1(DA_int[69]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_70 ( .X(dt_intA[70]), .D0(QA_mem[70]), .D1(DA_int[70]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_71 ( .X(dt_intA[71]), .D0(QA_mem[71]), .D1(DA_int[71]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_72 ( .X(dt_intA[72]), .D0(QA_mem[72]), .D1(DA_int[72]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_73 ( .X(dt_intA[73]), .D0(QA_mem[73]), .D1(DA_int[73]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_74 ( .X(dt_intA[74]), .D0(QA_mem[74]), .D1(DA_int[74]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_75 ( .X(dt_intA[75]), .D0(QA_mem[75]), .D1(DA_int[75]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_76 ( .X(dt_intA[76]), .D0(QA_mem[76]), .D1(DA_int[76]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_77 ( .X(dt_intA[77]), .D0(QA_mem[77]), .D1(DA_int[77]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_78 ( .X(dt_intA[78]), .D0(QA_mem[78]), .D1(DA_int[78]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_79 ( .X(dt_intA[79]), .D0(QA_mem[79]), .D1(DA_int[79]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_80 ( .X(dt_intA[80]), .D0(QA_mem[80]), .D1(DA_int[80]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_81 ( .X(dt_intA[81]), .D0(QA_mem[81]), .D1(DA_int[81]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_82 ( .X(dt_intA[82]), .D0(QA_mem[82]), .D1(DA_int[82]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_83 ( .X(dt_intA[83]), .D0(QA_mem[83]), .D1(DA_int[83]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_84 ( .X(dt_intA[84]), .D0(QA_mem[84]), .D1(DA_int[84]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_85 ( .X(dt_intA[85]), .D0(QA_mem[85]), .D1(DA_int[85]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_86 ( .X(dt_intA[86]), .D0(QA_mem[86]), .D1(DA_int[86]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_87 ( .X(dt_intA[87]), .D0(QA_mem[87]), .D1(DA_int[87]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_88 ( .X(dt_intA[88]), .D0(QA_mem[88]), .D1(DA_int[88]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_89 ( .X(dt_intA[89]), .D0(QA_mem[89]), .D1(DA_int[89]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_90 ( .X(dt_intA[90]), .D0(QA_mem[90]), .D1(DA_int[90]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_91 ( .X(dt_intA[91]), .D0(QA_mem[91]), .D1(DA_int[91]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_92 ( .X(dt_intA[92]), .D0(QA_mem[92]), .D1(DA_int[92]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_93 ( .X(dt_intA[93]), .D0(QA_mem[93]), .D1(DA_int[93]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_94 ( .X(dt_intA[94]), .D0(QA_mem[94]), .D1(DA_int[94]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_95 ( .X(dt_intA[95]), .D0(QA_mem[95]), .D1(DA_int[95]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_96 ( .X(dt_intA[96]), .D0(QA_mem[96]), .D1(DA_int[96]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_97 ( .X(dt_intA[97]), .D0(QA_mem[97]), .D1(DA_int[97]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_98 ( .X(dt_intA[98]), .D0(QA_mem[98]), .D1(DA_int[98]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_99 ( .X(dt_intA[99]), .D0(QA_mem[99]), .D1(DA_int[99]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_100 ( .X(dt_intA[100]), .D0(QA_mem[100]), .D1(DA_int[100]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_101 ( .X(dt_intA[101]), .D0(QA_mem[101]), .D1(DA_int[101]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_102 ( .X(dt_intA[102]), .D0(QA_mem[102]), .D1(DA_int[102]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_103 ( .X(dt_intA[103]), .D0(QA_mem[103]), .D1(DA_int[103]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_104 ( .X(dt_intA[104]), .D0(QA_mem[104]), .D1(DA_int[104]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_105 ( .X(dt_intA[105]), .D0(QA_mem[105]), .D1(DA_int[105]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_106 ( .X(dt_intA[106]), .D0(QA_mem[106]), .D1(DA_int[106]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_107 ( .X(dt_intA[107]), .D0(QA_mem[107]), .D1(DA_int[107]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_108 ( .X(dt_intA[108]), .D0(QA_mem[108]), .D1(DA_int[108]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_109 ( .X(dt_intA[109]), .D0(QA_mem[109]), .D1(DA_int[109]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_110 ( .X(dt_intA[110]), .D0(QA_mem[110]), .D1(DA_int[110]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_111 ( .X(dt_intA[111]), .D0(QA_mem[111]), .D1(DA_int[111]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_112 ( .X(dt_intA[112]), .D0(QA_mem[112]), .D1(DA_int[112]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_113 ( .X(dt_intA[113]), .D0(QA_mem[113]), .D1(DA_int[113]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_114 ( .X(dt_intA[114]), .D0(QA_mem[114]), .D1(DA_int[114]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_115 ( .X(dt_intA[115]), .D0(QA_mem[115]), .D1(DA_int[115]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_116 ( .X(dt_intA[116]), .D0(QA_mem[116]), .D1(DA_int[116]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_117 ( .X(dt_intA[117]), .D0(QA_mem[117]), .D1(DA_int[117]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_118 ( .X(dt_intA[118]), .D0(QA_mem[118]), .D1(DA_int[118]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_119 ( .X(dt_intA[119]), .D0(QA_mem[119]), .D1(DA_int[119]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_120 ( .X(dt_intA[120]), .D0(QA_mem[120]), .D1(DA_int[120]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_121 ( .X(dt_intA[121]), .D0(QA_mem[121]), .D1(DA_int[121]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_122 ( .X(dt_intA[122]), .D0(QA_mem[122]), .D1(DA_int[122]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_123 ( .X(dt_intA[123]), .D0(QA_mem[123]), .D1(DA_int[123]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_124 ( .X(dt_intA[124]), .D0(QA_mem[124]), .D1(DA_int[124]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_125 ( .X(dt_intA[125]), .D0(QA_mem[125]), .D1(DA_int[125]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_126 ( .X(dt_intA[126]), .D0(QA_mem[126]), .D1(DA_int[126]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_127 ( .X(dt_intA[127]), .D0(QA_mem[127]), .D1(DA_int[127]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_128 ( .X(dt_intA[128]), .D0(QA_mem[128]), .D1(DA_int[128]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_129 ( .X(dt_intA[129]), .D0(QA_mem[129]), .D1(DA_int[129]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_130 ( .X(dt_intA[130]), .D0(QA_mem[130]), .D1(DA_int[130]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_131 ( .X(dt_intA[131]), .D0(QA_mem[131]), .D1(DA_int[131]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_132 ( .X(dt_intA[132]), .D0(QA_mem[132]), .D1(DA_int[132]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_133 ( .X(dt_intA[133]), .D0(QA_mem[133]), .D1(DA_int[133]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_134 ( .X(dt_intA[134]), .D0(QA_mem[134]), .D1(DA_int[134]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_135 ( .X(dt_intA[135]), .D0(QA_mem[135]), .D1(DA_int[135]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_136 ( .X(dt_intA[136]), .D0(QA_mem[136]), .D1(DA_int[136]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_137 ( .X(dt_intA[137]), .D0(QA_mem[137]), .D1(DA_int[137]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_138 ( .X(dt_intA[138]), .D0(QA_mem[138]), .D1(DA_int[138]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_139 ( .X(dt_intA[139]), .D0(QA_mem[139]), .D1(DA_int[139]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_140 ( .X(dt_intA[140]), .D0(QA_mem[140]), .D1(DA_int[140]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_141 ( .X(dt_intA[141]), .D0(QA_mem[141]), .D1(DA_int[141]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_142 ( .X(dt_intA[142]), .D0(QA_mem[142]), .D1(DA_int[142]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_143 ( .X(dt_intA[143]), .D0(QA_mem[143]), .D1(DA_int[143]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_144 ( .X(dt_intA[144]), .D0(QA_mem[144]), .D1(DA_int[144]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_145 ( .X(dt_intA[145]), .D0(QA_mem[145]), .D1(DA_int[145]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_146 ( .X(dt_intA[146]), .D0(QA_mem[146]), .D1(DA_int[146]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_147 ( .X(dt_intA[147]), .D0(QA_mem[147]), .D1(DA_int[147]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_148 ( .X(dt_intA[148]), .D0(QA_mem[148]), .D1(DA_int[148]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_149 ( .X(dt_intA[149]), .D0(QA_mem[149]), .D1(DA_int[149]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_150 ( .X(dt_intA[150]), .D0(QA_mem[150]), .D1(DA_int[150]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_151 ( .X(dt_intA[151]), .D0(QA_mem[151]), .D1(DA_int[151]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_152 ( .X(dt_intA[152]), .D0(QA_mem[152]), .D1(DA_int[152]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_153 ( .X(dt_intA[153]), .D0(QA_mem[153]), .D1(DA_int[153]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_154 ( .X(dt_intA[154]), .D0(QA_mem[154]), .D1(DA_int[154]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_155 ( .X(dt_intA[155]), .D0(QA_mem[155]), .D1(DA_int[155]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_156 ( .X(dt_intA[156]), .D0(QA_mem[156]), .D1(DA_int[156]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_157 ( .X(dt_intA[157]), .D0(QA_mem[157]), .D1(DA_int[157]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_158 ( .X(dt_intA[158]), .D0(QA_mem[158]), .D1(DA_int[158]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qA_159 ( .X(dt_intA[159]), .D0(QA_mem[159]), .D1(DA_int[159]), .S(DFTMASK_buf) );

always @(dt_intA)
begin
  `ifdef VIRAGE_FAST_VERILOG
  `else
    QA_dftclken = 160'bx;
    #0.001;
  `endif // endif of VIRAGE_FAST_VERILOG
  QA_dftclken = dt_intA;
  if (DFTMASK_buf !== 1'b0)
  begin
    uut.QA_local_tmp = dt_intA;
  end
end


real DFTMASK_time;

always @(DFTMASK_buf)
begin
  if (DFTMASK_buf === 1'b0)
    DFTMASK_time = $realtime;
end

always @(DA_int)
begin
  if ($realtime == DFTMASK_time)
    uut.QA_local_tmp = DA_int;
end

always @(QPA_int)
begin
  `ifdef VIRAGE_FAST_VERILOG
  `else
    QPA_dftclken = 160'bx;
    #0.001;
  `endif // endif of VIRAGE_FAST_VERILOG
  QPA_dftclken = QPA_int;
end

wire mux_ls, test1_ls_pwr;

assign test1_ls_pwr = ((uut.TEST1Alatched === 1'b1 && uut.MEAlatched === 1'b1) || (uut.TEST1Blatched === 1'b1 && uut.MEBlatched === 1'b1 )) && LS_buf;

VIRL_SDN_MUX2_1 mux_ls_buf_old (.X(mux_ls), .D0(LS_buf), .D1(LS_old), .S(test1_ls_pwr));
VIRL_SDN_BUF_1 buf_doA_0 ( .X(QA_buf[0]), .A(QA_dftclken[0]) );
VIRL_SDN_BUF_1 buf_doA_1 ( .X(QA_buf[1]), .A(QA_dftclken[1]) );
VIRL_SDN_BUF_1 buf_doA_2 ( .X(QA_buf[2]), .A(QA_dftclken[2]) );
VIRL_SDN_BUF_1 buf_doA_3 ( .X(QA_buf[3]), .A(QA_dftclken[3]) );
VIRL_SDN_BUF_1 buf_doA_4 ( .X(QA_buf[4]), .A(QA_dftclken[4]) );
VIRL_SDN_BUF_1 buf_doA_5 ( .X(QA_buf[5]), .A(QA_dftclken[5]) );
VIRL_SDN_BUF_1 buf_doA_6 ( .X(QA_buf[6]), .A(QA_dftclken[6]) );
VIRL_SDN_BUF_1 buf_doA_7 ( .X(QA_buf[7]), .A(QA_dftclken[7]) );
VIRL_SDN_BUF_1 buf_doA_8 ( .X(QA_buf[8]), .A(QA_dftclken[8]) );
VIRL_SDN_BUF_1 buf_doA_9 ( .X(QA_buf[9]), .A(QA_dftclken[9]) );
VIRL_SDN_BUF_1 buf_doA_10 ( .X(QA_buf[10]), .A(QA_dftclken[10]) );
VIRL_SDN_BUF_1 buf_doA_11 ( .X(QA_buf[11]), .A(QA_dftclken[11]) );
VIRL_SDN_BUF_1 buf_doA_12 ( .X(QA_buf[12]), .A(QA_dftclken[12]) );
VIRL_SDN_BUF_1 buf_doA_13 ( .X(QA_buf[13]), .A(QA_dftclken[13]) );
VIRL_SDN_BUF_1 buf_doA_14 ( .X(QA_buf[14]), .A(QA_dftclken[14]) );
VIRL_SDN_BUF_1 buf_doA_15 ( .X(QA_buf[15]), .A(QA_dftclken[15]) );
VIRL_SDN_BUF_1 buf_doA_16 ( .X(QA_buf[16]), .A(QA_dftclken[16]) );
VIRL_SDN_BUF_1 buf_doA_17 ( .X(QA_buf[17]), .A(QA_dftclken[17]) );
VIRL_SDN_BUF_1 buf_doA_18 ( .X(QA_buf[18]), .A(QA_dftclken[18]) );
VIRL_SDN_BUF_1 buf_doA_19 ( .X(QA_buf[19]), .A(QA_dftclken[19]) );
VIRL_SDN_BUF_1 buf_doA_20 ( .X(QA_buf[20]), .A(QA_dftclken[20]) );
VIRL_SDN_BUF_1 buf_doA_21 ( .X(QA_buf[21]), .A(QA_dftclken[21]) );
VIRL_SDN_BUF_1 buf_doA_22 ( .X(QA_buf[22]), .A(QA_dftclken[22]) );
VIRL_SDN_BUF_1 buf_doA_23 ( .X(QA_buf[23]), .A(QA_dftclken[23]) );
VIRL_SDN_BUF_1 buf_doA_24 ( .X(QA_buf[24]), .A(QA_dftclken[24]) );
VIRL_SDN_BUF_1 buf_doA_25 ( .X(QA_buf[25]), .A(QA_dftclken[25]) );
VIRL_SDN_BUF_1 buf_doA_26 ( .X(QA_buf[26]), .A(QA_dftclken[26]) );
VIRL_SDN_BUF_1 buf_doA_27 ( .X(QA_buf[27]), .A(QA_dftclken[27]) );
VIRL_SDN_BUF_1 buf_doA_28 ( .X(QA_buf[28]), .A(QA_dftclken[28]) );
VIRL_SDN_BUF_1 buf_doA_29 ( .X(QA_buf[29]), .A(QA_dftclken[29]) );
VIRL_SDN_BUF_1 buf_doA_30 ( .X(QA_buf[30]), .A(QA_dftclken[30]) );
VIRL_SDN_BUF_1 buf_doA_31 ( .X(QA_buf[31]), .A(QA_dftclken[31]) );
VIRL_SDN_BUF_1 buf_doA_32 ( .X(QA_buf[32]), .A(QA_dftclken[32]) );
VIRL_SDN_BUF_1 buf_doA_33 ( .X(QA_buf[33]), .A(QA_dftclken[33]) );
VIRL_SDN_BUF_1 buf_doA_34 ( .X(QA_buf[34]), .A(QA_dftclken[34]) );
VIRL_SDN_BUF_1 buf_doA_35 ( .X(QA_buf[35]), .A(QA_dftclken[35]) );
VIRL_SDN_BUF_1 buf_doA_36 ( .X(QA_buf[36]), .A(QA_dftclken[36]) );
VIRL_SDN_BUF_1 buf_doA_37 ( .X(QA_buf[37]), .A(QA_dftclken[37]) );
VIRL_SDN_BUF_1 buf_doA_38 ( .X(QA_buf[38]), .A(QA_dftclken[38]) );
VIRL_SDN_BUF_1 buf_doA_39 ( .X(QA_buf[39]), .A(QA_dftclken[39]) );
VIRL_SDN_BUF_1 buf_doA_40 ( .X(QA_buf[40]), .A(QA_dftclken[40]) );
VIRL_SDN_BUF_1 buf_doA_41 ( .X(QA_buf[41]), .A(QA_dftclken[41]) );
VIRL_SDN_BUF_1 buf_doA_42 ( .X(QA_buf[42]), .A(QA_dftclken[42]) );
VIRL_SDN_BUF_1 buf_doA_43 ( .X(QA_buf[43]), .A(QA_dftclken[43]) );
VIRL_SDN_BUF_1 buf_doA_44 ( .X(QA_buf[44]), .A(QA_dftclken[44]) );
VIRL_SDN_BUF_1 buf_doA_45 ( .X(QA_buf[45]), .A(QA_dftclken[45]) );
VIRL_SDN_BUF_1 buf_doA_46 ( .X(QA_buf[46]), .A(QA_dftclken[46]) );
VIRL_SDN_BUF_1 buf_doA_47 ( .X(QA_buf[47]), .A(QA_dftclken[47]) );
VIRL_SDN_BUF_1 buf_doA_48 ( .X(QA_buf[48]), .A(QA_dftclken[48]) );
VIRL_SDN_BUF_1 buf_doA_49 ( .X(QA_buf[49]), .A(QA_dftclken[49]) );
VIRL_SDN_BUF_1 buf_doA_50 ( .X(QA_buf[50]), .A(QA_dftclken[50]) );
VIRL_SDN_BUF_1 buf_doA_51 ( .X(QA_buf[51]), .A(QA_dftclken[51]) );
VIRL_SDN_BUF_1 buf_doA_52 ( .X(QA_buf[52]), .A(QA_dftclken[52]) );
VIRL_SDN_BUF_1 buf_doA_53 ( .X(QA_buf[53]), .A(QA_dftclken[53]) );
VIRL_SDN_BUF_1 buf_doA_54 ( .X(QA_buf[54]), .A(QA_dftclken[54]) );
VIRL_SDN_BUF_1 buf_doA_55 ( .X(QA_buf[55]), .A(QA_dftclken[55]) );
VIRL_SDN_BUF_1 buf_doA_56 ( .X(QA_buf[56]), .A(QA_dftclken[56]) );
VIRL_SDN_BUF_1 buf_doA_57 ( .X(QA_buf[57]), .A(QA_dftclken[57]) );
VIRL_SDN_BUF_1 buf_doA_58 ( .X(QA_buf[58]), .A(QA_dftclken[58]) );
VIRL_SDN_BUF_1 buf_doA_59 ( .X(QA_buf[59]), .A(QA_dftclken[59]) );
VIRL_SDN_BUF_1 buf_doA_60 ( .X(QA_buf[60]), .A(QA_dftclken[60]) );
VIRL_SDN_BUF_1 buf_doA_61 ( .X(QA_buf[61]), .A(QA_dftclken[61]) );
VIRL_SDN_BUF_1 buf_doA_62 ( .X(QA_buf[62]), .A(QA_dftclken[62]) );
VIRL_SDN_BUF_1 buf_doA_63 ( .X(QA_buf[63]), .A(QA_dftclken[63]) );
VIRL_SDN_BUF_1 buf_doA_64 ( .X(QA_buf[64]), .A(QA_dftclken[64]) );
VIRL_SDN_BUF_1 buf_doA_65 ( .X(QA_buf[65]), .A(QA_dftclken[65]) );
VIRL_SDN_BUF_1 buf_doA_66 ( .X(QA_buf[66]), .A(QA_dftclken[66]) );
VIRL_SDN_BUF_1 buf_doA_67 ( .X(QA_buf[67]), .A(QA_dftclken[67]) );
VIRL_SDN_BUF_1 buf_doA_68 ( .X(QA_buf[68]), .A(QA_dftclken[68]) );
VIRL_SDN_BUF_1 buf_doA_69 ( .X(QA_buf[69]), .A(QA_dftclken[69]) );
VIRL_SDN_BUF_1 buf_doA_70 ( .X(QA_buf[70]), .A(QA_dftclken[70]) );
VIRL_SDN_BUF_1 buf_doA_71 ( .X(QA_buf[71]), .A(QA_dftclken[71]) );
VIRL_SDN_BUF_1 buf_doA_72 ( .X(QA_buf[72]), .A(QA_dftclken[72]) );
VIRL_SDN_BUF_1 buf_doA_73 ( .X(QA_buf[73]), .A(QA_dftclken[73]) );
VIRL_SDN_BUF_1 buf_doA_74 ( .X(QA_buf[74]), .A(QA_dftclken[74]) );
VIRL_SDN_BUF_1 buf_doA_75 ( .X(QA_buf[75]), .A(QA_dftclken[75]) );
VIRL_SDN_BUF_1 buf_doA_76 ( .X(QA_buf[76]), .A(QA_dftclken[76]) );
VIRL_SDN_BUF_1 buf_doA_77 ( .X(QA_buf[77]), .A(QA_dftclken[77]) );
VIRL_SDN_BUF_1 buf_doA_78 ( .X(QA_buf[78]), .A(QA_dftclken[78]) );
VIRL_SDN_BUF_1 buf_doA_79 ( .X(QA_buf[79]), .A(QA_dftclken[79]) );
VIRL_SDN_BUF_1 buf_doA_80 ( .X(QA_buf[80]), .A(QA_dftclken[80]) );
VIRL_SDN_BUF_1 buf_doA_81 ( .X(QA_buf[81]), .A(QA_dftclken[81]) );
VIRL_SDN_BUF_1 buf_doA_82 ( .X(QA_buf[82]), .A(QA_dftclken[82]) );
VIRL_SDN_BUF_1 buf_doA_83 ( .X(QA_buf[83]), .A(QA_dftclken[83]) );
VIRL_SDN_BUF_1 buf_doA_84 ( .X(QA_buf[84]), .A(QA_dftclken[84]) );
VIRL_SDN_BUF_1 buf_doA_85 ( .X(QA_buf[85]), .A(QA_dftclken[85]) );
VIRL_SDN_BUF_1 buf_doA_86 ( .X(QA_buf[86]), .A(QA_dftclken[86]) );
VIRL_SDN_BUF_1 buf_doA_87 ( .X(QA_buf[87]), .A(QA_dftclken[87]) );
VIRL_SDN_BUF_1 buf_doA_88 ( .X(QA_buf[88]), .A(QA_dftclken[88]) );
VIRL_SDN_BUF_1 buf_doA_89 ( .X(QA_buf[89]), .A(QA_dftclken[89]) );
VIRL_SDN_BUF_1 buf_doA_90 ( .X(QA_buf[90]), .A(QA_dftclken[90]) );
VIRL_SDN_BUF_1 buf_doA_91 ( .X(QA_buf[91]), .A(QA_dftclken[91]) );
VIRL_SDN_BUF_1 buf_doA_92 ( .X(QA_buf[92]), .A(QA_dftclken[92]) );
VIRL_SDN_BUF_1 buf_doA_93 ( .X(QA_buf[93]), .A(QA_dftclken[93]) );
VIRL_SDN_BUF_1 buf_doA_94 ( .X(QA_buf[94]), .A(QA_dftclken[94]) );
VIRL_SDN_BUF_1 buf_doA_95 ( .X(QA_buf[95]), .A(QA_dftclken[95]) );
VIRL_SDN_BUF_1 buf_doA_96 ( .X(QA_buf[96]), .A(QA_dftclken[96]) );
VIRL_SDN_BUF_1 buf_doA_97 ( .X(QA_buf[97]), .A(QA_dftclken[97]) );
VIRL_SDN_BUF_1 buf_doA_98 ( .X(QA_buf[98]), .A(QA_dftclken[98]) );
VIRL_SDN_BUF_1 buf_doA_99 ( .X(QA_buf[99]), .A(QA_dftclken[99]) );
VIRL_SDN_BUF_1 buf_doA_100 ( .X(QA_buf[100]), .A(QA_dftclken[100]) );
VIRL_SDN_BUF_1 buf_doA_101 ( .X(QA_buf[101]), .A(QA_dftclken[101]) );
VIRL_SDN_BUF_1 buf_doA_102 ( .X(QA_buf[102]), .A(QA_dftclken[102]) );
VIRL_SDN_BUF_1 buf_doA_103 ( .X(QA_buf[103]), .A(QA_dftclken[103]) );
VIRL_SDN_BUF_1 buf_doA_104 ( .X(QA_buf[104]), .A(QA_dftclken[104]) );
VIRL_SDN_BUF_1 buf_doA_105 ( .X(QA_buf[105]), .A(QA_dftclken[105]) );
VIRL_SDN_BUF_1 buf_doA_106 ( .X(QA_buf[106]), .A(QA_dftclken[106]) );
VIRL_SDN_BUF_1 buf_doA_107 ( .X(QA_buf[107]), .A(QA_dftclken[107]) );
VIRL_SDN_BUF_1 buf_doA_108 ( .X(QA_buf[108]), .A(QA_dftclken[108]) );
VIRL_SDN_BUF_1 buf_doA_109 ( .X(QA_buf[109]), .A(QA_dftclken[109]) );
VIRL_SDN_BUF_1 buf_doA_110 ( .X(QA_buf[110]), .A(QA_dftclken[110]) );
VIRL_SDN_BUF_1 buf_doA_111 ( .X(QA_buf[111]), .A(QA_dftclken[111]) );
VIRL_SDN_BUF_1 buf_doA_112 ( .X(QA_buf[112]), .A(QA_dftclken[112]) );
VIRL_SDN_BUF_1 buf_doA_113 ( .X(QA_buf[113]), .A(QA_dftclken[113]) );
VIRL_SDN_BUF_1 buf_doA_114 ( .X(QA_buf[114]), .A(QA_dftclken[114]) );
VIRL_SDN_BUF_1 buf_doA_115 ( .X(QA_buf[115]), .A(QA_dftclken[115]) );
VIRL_SDN_BUF_1 buf_doA_116 ( .X(QA_buf[116]), .A(QA_dftclken[116]) );
VIRL_SDN_BUF_1 buf_doA_117 ( .X(QA_buf[117]), .A(QA_dftclken[117]) );
VIRL_SDN_BUF_1 buf_doA_118 ( .X(QA_buf[118]), .A(QA_dftclken[118]) );
VIRL_SDN_BUF_1 buf_doA_119 ( .X(QA_buf[119]), .A(QA_dftclken[119]) );
VIRL_SDN_BUF_1 buf_doA_120 ( .X(QA_buf[120]), .A(QA_dftclken[120]) );
VIRL_SDN_BUF_1 buf_doA_121 ( .X(QA_buf[121]), .A(QA_dftclken[121]) );
VIRL_SDN_BUF_1 buf_doA_122 ( .X(QA_buf[122]), .A(QA_dftclken[122]) );
VIRL_SDN_BUF_1 buf_doA_123 ( .X(QA_buf[123]), .A(QA_dftclken[123]) );
VIRL_SDN_BUF_1 buf_doA_124 ( .X(QA_buf[124]), .A(QA_dftclken[124]) );
VIRL_SDN_BUF_1 buf_doA_125 ( .X(QA_buf[125]), .A(QA_dftclken[125]) );
VIRL_SDN_BUF_1 buf_doA_126 ( .X(QA_buf[126]), .A(QA_dftclken[126]) );
VIRL_SDN_BUF_1 buf_doA_127 ( .X(QA_buf[127]), .A(QA_dftclken[127]) );
VIRL_SDN_BUF_1 buf_doA_128 ( .X(QA_buf[128]), .A(QA_dftclken[128]) );
VIRL_SDN_BUF_1 buf_doA_129 ( .X(QA_buf[129]), .A(QA_dftclken[129]) );
VIRL_SDN_BUF_1 buf_doA_130 ( .X(QA_buf[130]), .A(QA_dftclken[130]) );
VIRL_SDN_BUF_1 buf_doA_131 ( .X(QA_buf[131]), .A(QA_dftclken[131]) );
VIRL_SDN_BUF_1 buf_doA_132 ( .X(QA_buf[132]), .A(QA_dftclken[132]) );
VIRL_SDN_BUF_1 buf_doA_133 ( .X(QA_buf[133]), .A(QA_dftclken[133]) );
VIRL_SDN_BUF_1 buf_doA_134 ( .X(QA_buf[134]), .A(QA_dftclken[134]) );
VIRL_SDN_BUF_1 buf_doA_135 ( .X(QA_buf[135]), .A(QA_dftclken[135]) );
VIRL_SDN_BUF_1 buf_doA_136 ( .X(QA_buf[136]), .A(QA_dftclken[136]) );
VIRL_SDN_BUF_1 buf_doA_137 ( .X(QA_buf[137]), .A(QA_dftclken[137]) );
VIRL_SDN_BUF_1 buf_doA_138 ( .X(QA_buf[138]), .A(QA_dftclken[138]) );
VIRL_SDN_BUF_1 buf_doA_139 ( .X(QA_buf[139]), .A(QA_dftclken[139]) );
VIRL_SDN_BUF_1 buf_doA_140 ( .X(QA_buf[140]), .A(QA_dftclken[140]) );
VIRL_SDN_BUF_1 buf_doA_141 ( .X(QA_buf[141]), .A(QA_dftclken[141]) );
VIRL_SDN_BUF_1 buf_doA_142 ( .X(QA_buf[142]), .A(QA_dftclken[142]) );
VIRL_SDN_BUF_1 buf_doA_143 ( .X(QA_buf[143]), .A(QA_dftclken[143]) );
VIRL_SDN_BUF_1 buf_doA_144 ( .X(QA_buf[144]), .A(QA_dftclken[144]) );
VIRL_SDN_BUF_1 buf_doA_145 ( .X(QA_buf[145]), .A(QA_dftclken[145]) );
VIRL_SDN_BUF_1 buf_doA_146 ( .X(QA_buf[146]), .A(QA_dftclken[146]) );
VIRL_SDN_BUF_1 buf_doA_147 ( .X(QA_buf[147]), .A(QA_dftclken[147]) );
VIRL_SDN_BUF_1 buf_doA_148 ( .X(QA_buf[148]), .A(QA_dftclken[148]) );
VIRL_SDN_BUF_1 buf_doA_149 ( .X(QA_buf[149]), .A(QA_dftclken[149]) );
VIRL_SDN_BUF_1 buf_doA_150 ( .X(QA_buf[150]), .A(QA_dftclken[150]) );
VIRL_SDN_BUF_1 buf_doA_151 ( .X(QA_buf[151]), .A(QA_dftclken[151]) );
VIRL_SDN_BUF_1 buf_doA_152 ( .X(QA_buf[152]), .A(QA_dftclken[152]) );
VIRL_SDN_BUF_1 buf_doA_153 ( .X(QA_buf[153]), .A(QA_dftclken[153]) );
VIRL_SDN_BUF_1 buf_doA_154 ( .X(QA_buf[154]), .A(QA_dftclken[154]) );
VIRL_SDN_BUF_1 buf_doA_155 ( .X(QA_buf[155]), .A(QA_dftclken[155]) );
VIRL_SDN_BUF_1 buf_doA_156 ( .X(QA_buf[156]), .A(QA_dftclken[156]) );
VIRL_SDN_BUF_1 buf_doA_157 ( .X(QA_buf[157]), .A(QA_dftclken[157]) );
VIRL_SDN_BUF_1 buf_doA_158 ( .X(QA_buf[158]), .A(QA_dftclken[158]) );
VIRL_SDN_BUF_1 buf_doA_159 ( .X(QA_buf[159]), .A(QA_dftclken[159]) );

VIRL_SDN_BUF_1 buf_qpA_0 ( .X(QPA_buf[0]), .A(QPA_dftclken[0]) );
VIRL_SDN_BUF_1 buf_qpA_1 ( .X(QPA_buf[1]), .A(QPA_dftclken[1]) );
VIRL_SDN_BUF_1 buf_qpA_2 ( .X(QPA_buf[2]), .A(QPA_dftclken[2]) );
VIRL_SDN_BUF_1 buf_qpA_3 ( .X(QPA_buf[3]), .A(QPA_dftclken[3]) );
VIRL_SDN_BUF_1 buf_qpA_4 ( .X(QPA_buf[4]), .A(QPA_dftclken[4]) );
VIRL_SDN_BUF_1 buf_qpA_5 ( .X(QPA_buf[5]), .A(QPA_dftclken[5]) );
VIRL_SDN_BUF_1 buf_qpA_6 ( .X(QPA_buf[6]), .A(QPA_dftclken[6]) );
VIRL_SDN_BUF_1 buf_qpA_7 ( .X(QPA_buf[7]), .A(QPA_dftclken[7]) );
VIRL_SDN_BUF_1 buf_qpA_8 ( .X(QPA_buf[8]), .A(QPA_dftclken[8]) );
VIRL_SDN_BUF_1 buf_qpA_9 ( .X(QPA_buf[9]), .A(QPA_dftclken[9]) );
VIRL_SDN_BUF_1 buf_qpA_10 ( .X(QPA_buf[10]), .A(QPA_dftclken[10]) );
VIRL_SDN_BUF_1 buf_qpA_11 ( .X(QPA_buf[11]), .A(QPA_dftclken[11]) );
VIRL_SDN_BUF_1 buf_qpA_12 ( .X(QPA_buf[12]), .A(QPA_dftclken[12]) );
VIRL_SDN_BUF_1 buf_qpA_13 ( .X(QPA_buf[13]), .A(QPA_dftclken[13]) );
VIRL_SDN_BUF_1 buf_qpA_14 ( .X(QPA_buf[14]), .A(QPA_dftclken[14]) );
VIRL_SDN_BUF_1 buf_qpA_15 ( .X(QPA_buf[15]), .A(QPA_dftclken[15]) );
VIRL_SDN_BUF_1 buf_qpA_16 ( .X(QPA_buf[16]), .A(QPA_dftclken[16]) );
VIRL_SDN_BUF_1 buf_qpA_17 ( .X(QPA_buf[17]), .A(QPA_dftclken[17]) );
VIRL_SDN_BUF_1 buf_qpA_18 ( .X(QPA_buf[18]), .A(QPA_dftclken[18]) );
VIRL_SDN_BUF_1 buf_qpA_19 ( .X(QPA_buf[19]), .A(QPA_dftclken[19]) );
VIRL_SDN_BUF_1 buf_qpA_20 ( .X(QPA_buf[20]), .A(QPA_dftclken[20]) );
VIRL_SDN_BUF_1 buf_qpA_21 ( .X(QPA_buf[21]), .A(QPA_dftclken[21]) );
VIRL_SDN_BUF_1 buf_qpA_22 ( .X(QPA_buf[22]), .A(QPA_dftclken[22]) );
VIRL_SDN_BUF_1 buf_qpA_23 ( .X(QPA_buf[23]), .A(QPA_dftclken[23]) );
VIRL_SDN_BUF_1 buf_qpA_24 ( .X(QPA_buf[24]), .A(QPA_dftclken[24]) );
VIRL_SDN_BUF_1 buf_qpA_25 ( .X(QPA_buf[25]), .A(QPA_dftclken[25]) );
VIRL_SDN_BUF_1 buf_qpA_26 ( .X(QPA_buf[26]), .A(QPA_dftclken[26]) );
VIRL_SDN_BUF_1 buf_qpA_27 ( .X(QPA_buf[27]), .A(QPA_dftclken[27]) );
VIRL_SDN_BUF_1 buf_qpA_28 ( .X(QPA_buf[28]), .A(QPA_dftclken[28]) );
VIRL_SDN_BUF_1 buf_qpA_29 ( .X(QPA_buf[29]), .A(QPA_dftclken[29]) );
VIRL_SDN_BUF_1 buf_qpA_30 ( .X(QPA_buf[30]), .A(QPA_dftclken[30]) );
VIRL_SDN_BUF_1 buf_qpA_31 ( .X(QPA_buf[31]), .A(QPA_dftclken[31]) );
VIRL_SDN_BUF_1 buf_qpA_32 ( .X(QPA_buf[32]), .A(QPA_dftclken[32]) );
VIRL_SDN_BUF_1 buf_qpA_33 ( .X(QPA_buf[33]), .A(QPA_dftclken[33]) );
VIRL_SDN_BUF_1 buf_qpA_34 ( .X(QPA_buf[34]), .A(QPA_dftclken[34]) );
VIRL_SDN_BUF_1 buf_qpA_35 ( .X(QPA_buf[35]), .A(QPA_dftclken[35]) );
VIRL_SDN_BUF_1 buf_qpA_36 ( .X(QPA_buf[36]), .A(QPA_dftclken[36]) );
VIRL_SDN_BUF_1 buf_qpA_37 ( .X(QPA_buf[37]), .A(QPA_dftclken[37]) );
VIRL_SDN_BUF_1 buf_qpA_38 ( .X(QPA_buf[38]), .A(QPA_dftclken[38]) );
VIRL_SDN_BUF_1 buf_qpA_39 ( .X(QPA_buf[39]), .A(QPA_dftclken[39]) );
VIRL_SDN_BUF_1 buf_qpA_40 ( .X(QPA_buf[40]), .A(QPA_dftclken[40]) );
VIRL_SDN_BUF_1 buf_qpA_41 ( .X(QPA_buf[41]), .A(QPA_dftclken[41]) );
VIRL_SDN_BUF_1 buf_qpA_42 ( .X(QPA_buf[42]), .A(QPA_dftclken[42]) );
VIRL_SDN_BUF_1 buf_qpA_43 ( .X(QPA_buf[43]), .A(QPA_dftclken[43]) );
VIRL_SDN_BUF_1 buf_qpA_44 ( .X(QPA_buf[44]), .A(QPA_dftclken[44]) );
VIRL_SDN_BUF_1 buf_qpA_45 ( .X(QPA_buf[45]), .A(QPA_dftclken[45]) );
VIRL_SDN_BUF_1 buf_qpA_46 ( .X(QPA_buf[46]), .A(QPA_dftclken[46]) );
VIRL_SDN_BUF_1 buf_qpA_47 ( .X(QPA_buf[47]), .A(QPA_dftclken[47]) );
VIRL_SDN_BUF_1 buf_qpA_48 ( .X(QPA_buf[48]), .A(QPA_dftclken[48]) );
VIRL_SDN_BUF_1 buf_qpA_49 ( .X(QPA_buf[49]), .A(QPA_dftclken[49]) );
VIRL_SDN_BUF_1 buf_qpA_50 ( .X(QPA_buf[50]), .A(QPA_dftclken[50]) );
VIRL_SDN_BUF_1 buf_qpA_51 ( .X(QPA_buf[51]), .A(QPA_dftclken[51]) );
VIRL_SDN_BUF_1 buf_qpA_52 ( .X(QPA_buf[52]), .A(QPA_dftclken[52]) );
VIRL_SDN_BUF_1 buf_qpA_53 ( .X(QPA_buf[53]), .A(QPA_dftclken[53]) );
VIRL_SDN_BUF_1 buf_qpA_54 ( .X(QPA_buf[54]), .A(QPA_dftclken[54]) );
VIRL_SDN_BUF_1 buf_qpA_55 ( .X(QPA_buf[55]), .A(QPA_dftclken[55]) );
VIRL_SDN_BUF_1 buf_qpA_56 ( .X(QPA_buf[56]), .A(QPA_dftclken[56]) );
VIRL_SDN_BUF_1 buf_qpA_57 ( .X(QPA_buf[57]), .A(QPA_dftclken[57]) );
VIRL_SDN_BUF_1 buf_qpA_58 ( .X(QPA_buf[58]), .A(QPA_dftclken[58]) );
VIRL_SDN_BUF_1 buf_qpA_59 ( .X(QPA_buf[59]), .A(QPA_dftclken[59]) );
VIRL_SDN_BUF_1 buf_qpA_60 ( .X(QPA_buf[60]), .A(QPA_dftclken[60]) );
VIRL_SDN_BUF_1 buf_qpA_61 ( .X(QPA_buf[61]), .A(QPA_dftclken[61]) );
VIRL_SDN_BUF_1 buf_qpA_62 ( .X(QPA_buf[62]), .A(QPA_dftclken[62]) );
VIRL_SDN_BUF_1 buf_qpA_63 ( .X(QPA_buf[63]), .A(QPA_dftclken[63]) );
VIRL_SDN_BUF_1 buf_qpA_64 ( .X(QPA_buf[64]), .A(QPA_dftclken[64]) );
VIRL_SDN_BUF_1 buf_qpA_65 ( .X(QPA_buf[65]), .A(QPA_dftclken[65]) );
VIRL_SDN_BUF_1 buf_qpA_66 ( .X(QPA_buf[66]), .A(QPA_dftclken[66]) );
VIRL_SDN_BUF_1 buf_qpA_67 ( .X(QPA_buf[67]), .A(QPA_dftclken[67]) );
VIRL_SDN_BUF_1 buf_qpA_68 ( .X(QPA_buf[68]), .A(QPA_dftclken[68]) );
VIRL_SDN_BUF_1 buf_qpA_69 ( .X(QPA_buf[69]), .A(QPA_dftclken[69]) );
VIRL_SDN_BUF_1 buf_qpA_70 ( .X(QPA_buf[70]), .A(QPA_dftclken[70]) );
VIRL_SDN_BUF_1 buf_qpA_71 ( .X(QPA_buf[71]), .A(QPA_dftclken[71]) );
VIRL_SDN_BUF_1 buf_qpA_72 ( .X(QPA_buf[72]), .A(QPA_dftclken[72]) );
VIRL_SDN_BUF_1 buf_qpA_73 ( .X(QPA_buf[73]), .A(QPA_dftclken[73]) );
VIRL_SDN_BUF_1 buf_qpA_74 ( .X(QPA_buf[74]), .A(QPA_dftclken[74]) );
VIRL_SDN_BUF_1 buf_qpA_75 ( .X(QPA_buf[75]), .A(QPA_dftclken[75]) );
VIRL_SDN_BUF_1 buf_qpA_76 ( .X(QPA_buf[76]), .A(QPA_dftclken[76]) );
VIRL_SDN_BUF_1 buf_qpA_77 ( .X(QPA_buf[77]), .A(QPA_dftclken[77]) );
VIRL_SDN_BUF_1 buf_qpA_78 ( .X(QPA_buf[78]), .A(QPA_dftclken[78]) );
VIRL_SDN_BUF_1 buf_qpA_79 ( .X(QPA_buf[79]), .A(QPA_dftclken[79]) );
VIRL_SDN_BUF_1 buf_qpA_80 ( .X(QPA_buf[80]), .A(QPA_dftclken[80]) );
VIRL_SDN_BUF_1 buf_qpA_81 ( .X(QPA_buf[81]), .A(QPA_dftclken[81]) );
VIRL_SDN_BUF_1 buf_qpA_82 ( .X(QPA_buf[82]), .A(QPA_dftclken[82]) );
VIRL_SDN_BUF_1 buf_qpA_83 ( .X(QPA_buf[83]), .A(QPA_dftclken[83]) );
VIRL_SDN_BUF_1 buf_qpA_84 ( .X(QPA_buf[84]), .A(QPA_dftclken[84]) );
VIRL_SDN_BUF_1 buf_qpA_85 ( .X(QPA_buf[85]), .A(QPA_dftclken[85]) );
VIRL_SDN_BUF_1 buf_qpA_86 ( .X(QPA_buf[86]), .A(QPA_dftclken[86]) );
VIRL_SDN_BUF_1 buf_qpA_87 ( .X(QPA_buf[87]), .A(QPA_dftclken[87]) );
VIRL_SDN_BUF_1 buf_qpA_88 ( .X(QPA_buf[88]), .A(QPA_dftclken[88]) );
VIRL_SDN_BUF_1 buf_qpA_89 ( .X(QPA_buf[89]), .A(QPA_dftclken[89]) );
VIRL_SDN_BUF_1 buf_qpA_90 ( .X(QPA_buf[90]), .A(QPA_dftclken[90]) );
VIRL_SDN_BUF_1 buf_qpA_91 ( .X(QPA_buf[91]), .A(QPA_dftclken[91]) );
VIRL_SDN_BUF_1 buf_qpA_92 ( .X(QPA_buf[92]), .A(QPA_dftclken[92]) );
VIRL_SDN_BUF_1 buf_qpA_93 ( .X(QPA_buf[93]), .A(QPA_dftclken[93]) );
VIRL_SDN_BUF_1 buf_qpA_94 ( .X(QPA_buf[94]), .A(QPA_dftclken[94]) );
VIRL_SDN_BUF_1 buf_qpA_95 ( .X(QPA_buf[95]), .A(QPA_dftclken[95]) );
VIRL_SDN_BUF_1 buf_qpA_96 ( .X(QPA_buf[96]), .A(QPA_dftclken[96]) );
VIRL_SDN_BUF_1 buf_qpA_97 ( .X(QPA_buf[97]), .A(QPA_dftclken[97]) );
VIRL_SDN_BUF_1 buf_qpA_98 ( .X(QPA_buf[98]), .A(QPA_dftclken[98]) );
VIRL_SDN_BUF_1 buf_qpA_99 ( .X(QPA_buf[99]), .A(QPA_dftclken[99]) );
VIRL_SDN_BUF_1 buf_qpA_100 ( .X(QPA_buf[100]), .A(QPA_dftclken[100]) );
VIRL_SDN_BUF_1 buf_qpA_101 ( .X(QPA_buf[101]), .A(QPA_dftclken[101]) );
VIRL_SDN_BUF_1 buf_qpA_102 ( .X(QPA_buf[102]), .A(QPA_dftclken[102]) );
VIRL_SDN_BUF_1 buf_qpA_103 ( .X(QPA_buf[103]), .A(QPA_dftclken[103]) );
VIRL_SDN_BUF_1 buf_qpA_104 ( .X(QPA_buf[104]), .A(QPA_dftclken[104]) );
VIRL_SDN_BUF_1 buf_qpA_105 ( .X(QPA_buf[105]), .A(QPA_dftclken[105]) );
VIRL_SDN_BUF_1 buf_qpA_106 ( .X(QPA_buf[106]), .A(QPA_dftclken[106]) );
VIRL_SDN_BUF_1 buf_qpA_107 ( .X(QPA_buf[107]), .A(QPA_dftclken[107]) );
VIRL_SDN_BUF_1 buf_qpA_108 ( .X(QPA_buf[108]), .A(QPA_dftclken[108]) );
VIRL_SDN_BUF_1 buf_qpA_109 ( .X(QPA_buf[109]), .A(QPA_dftclken[109]) );
VIRL_SDN_BUF_1 buf_qpA_110 ( .X(QPA_buf[110]), .A(QPA_dftclken[110]) );
VIRL_SDN_BUF_1 buf_qpA_111 ( .X(QPA_buf[111]), .A(QPA_dftclken[111]) );
VIRL_SDN_BUF_1 buf_qpA_112 ( .X(QPA_buf[112]), .A(QPA_dftclken[112]) );
VIRL_SDN_BUF_1 buf_qpA_113 ( .X(QPA_buf[113]), .A(QPA_dftclken[113]) );
VIRL_SDN_BUF_1 buf_qpA_114 ( .X(QPA_buf[114]), .A(QPA_dftclken[114]) );
VIRL_SDN_BUF_1 buf_qpA_115 ( .X(QPA_buf[115]), .A(QPA_dftclken[115]) );
VIRL_SDN_BUF_1 buf_qpA_116 ( .X(QPA_buf[116]), .A(QPA_dftclken[116]) );
VIRL_SDN_BUF_1 buf_qpA_117 ( .X(QPA_buf[117]), .A(QPA_dftclken[117]) );
VIRL_SDN_BUF_1 buf_qpA_118 ( .X(QPA_buf[118]), .A(QPA_dftclken[118]) );
VIRL_SDN_BUF_1 buf_qpA_119 ( .X(QPA_buf[119]), .A(QPA_dftclken[119]) );
VIRL_SDN_BUF_1 buf_qpA_120 ( .X(QPA_buf[120]), .A(QPA_dftclken[120]) );
VIRL_SDN_BUF_1 buf_qpA_121 ( .X(QPA_buf[121]), .A(QPA_dftclken[121]) );
VIRL_SDN_BUF_1 buf_qpA_122 ( .X(QPA_buf[122]), .A(QPA_dftclken[122]) );
VIRL_SDN_BUF_1 buf_qpA_123 ( .X(QPA_buf[123]), .A(QPA_dftclken[123]) );
VIRL_SDN_BUF_1 buf_qpA_124 ( .X(QPA_buf[124]), .A(QPA_dftclken[124]) );
VIRL_SDN_BUF_1 buf_qpA_125 ( .X(QPA_buf[125]), .A(QPA_dftclken[125]) );
VIRL_SDN_BUF_1 buf_qpA_126 ( .X(QPA_buf[126]), .A(QPA_dftclken[126]) );
VIRL_SDN_BUF_1 buf_qpA_127 ( .X(QPA_buf[127]), .A(QPA_dftclken[127]) );
VIRL_SDN_BUF_1 buf_qpA_128 ( .X(QPA_buf[128]), .A(QPA_dftclken[128]) );
VIRL_SDN_BUF_1 buf_qpA_129 ( .X(QPA_buf[129]), .A(QPA_dftclken[129]) );
VIRL_SDN_BUF_1 buf_qpA_130 ( .X(QPA_buf[130]), .A(QPA_dftclken[130]) );
VIRL_SDN_BUF_1 buf_qpA_131 ( .X(QPA_buf[131]), .A(QPA_dftclken[131]) );
VIRL_SDN_BUF_1 buf_qpA_132 ( .X(QPA_buf[132]), .A(QPA_dftclken[132]) );
VIRL_SDN_BUF_1 buf_qpA_133 ( .X(QPA_buf[133]), .A(QPA_dftclken[133]) );
VIRL_SDN_BUF_1 buf_qpA_134 ( .X(QPA_buf[134]), .A(QPA_dftclken[134]) );
VIRL_SDN_BUF_1 buf_qpA_135 ( .X(QPA_buf[135]), .A(QPA_dftclken[135]) );
VIRL_SDN_BUF_1 buf_qpA_136 ( .X(QPA_buf[136]), .A(QPA_dftclken[136]) );
VIRL_SDN_BUF_1 buf_qpA_137 ( .X(QPA_buf[137]), .A(QPA_dftclken[137]) );
VIRL_SDN_BUF_1 buf_qpA_138 ( .X(QPA_buf[138]), .A(QPA_dftclken[138]) );
VIRL_SDN_BUF_1 buf_qpA_139 ( .X(QPA_buf[139]), .A(QPA_dftclken[139]) );
VIRL_SDN_BUF_1 buf_qpA_140 ( .X(QPA_buf[140]), .A(QPA_dftclken[140]) );
VIRL_SDN_BUF_1 buf_qpA_141 ( .X(QPA_buf[141]), .A(QPA_dftclken[141]) );
VIRL_SDN_BUF_1 buf_qpA_142 ( .X(QPA_buf[142]), .A(QPA_dftclken[142]) );
VIRL_SDN_BUF_1 buf_qpA_143 ( .X(QPA_buf[143]), .A(QPA_dftclken[143]) );
VIRL_SDN_BUF_1 buf_qpA_144 ( .X(QPA_buf[144]), .A(QPA_dftclken[144]) );
VIRL_SDN_BUF_1 buf_qpA_145 ( .X(QPA_buf[145]), .A(QPA_dftclken[145]) );
VIRL_SDN_BUF_1 buf_qpA_146 ( .X(QPA_buf[146]), .A(QPA_dftclken[146]) );
VIRL_SDN_BUF_1 buf_qpA_147 ( .X(QPA_buf[147]), .A(QPA_dftclken[147]) );
VIRL_SDN_BUF_1 buf_qpA_148 ( .X(QPA_buf[148]), .A(QPA_dftclken[148]) );
VIRL_SDN_BUF_1 buf_qpA_149 ( .X(QPA_buf[149]), .A(QPA_dftclken[149]) );
VIRL_SDN_BUF_1 buf_qpA_150 ( .X(QPA_buf[150]), .A(QPA_dftclken[150]) );
VIRL_SDN_BUF_1 buf_qpA_151 ( .X(QPA_buf[151]), .A(QPA_dftclken[151]) );
VIRL_SDN_BUF_1 buf_qpA_152 ( .X(QPA_buf[152]), .A(QPA_dftclken[152]) );
VIRL_SDN_BUF_1 buf_qpA_153 ( .X(QPA_buf[153]), .A(QPA_dftclken[153]) );
VIRL_SDN_BUF_1 buf_qpA_154 ( .X(QPA_buf[154]), .A(QPA_dftclken[154]) );
VIRL_SDN_BUF_1 buf_qpA_155 ( .X(QPA_buf[155]), .A(QPA_dftclken[155]) );
VIRL_SDN_BUF_1 buf_qpA_156 ( .X(QPA_buf[156]), .A(QPA_dftclken[156]) );
VIRL_SDN_BUF_1 buf_qpA_157 ( .X(QPA_buf[157]), .A(QPA_dftclken[157]) );
VIRL_SDN_BUF_1 buf_qpA_158 ( .X(QPA_buf[158]), .A(QPA_dftclken[158]) );
VIRL_SDN_BUF_1 buf_qpA_159 ( .X(QPA_buf[159]), .A(QPA_dftclken[159]) );

VIRL_SDN_BUF_1 buf_cd_expA_0 (.X(CDA_exp[0]), .A(CDA_int[0]));
VIRL_SDN_BUF_1 buf_cd_expA_1 (.X(CDA_exp[1]), .A(CDA_int[1]));
VIRL_SDN_BUF_1 buf_cd_expA_2 (.X(CDA_exp[2]), .A(CDA_int[2]));
VIRL_SDN_BUF_1 buf_cd_expA_3 (.X(CDA_exp[3]), .A(CDA_int[3]));
VIRL_SDN_BUF_1 buf_cd_expA_4 (.X(CDA_exp[4]), .A(CDA_int[0]));
VIRL_SDN_BUF_1 buf_cd_expA_5 (.X(CDA_exp[5]), .A(CDA_int[1]));
VIRL_SDN_BUF_1 buf_cd_expA_6 (.X(CDA_exp[6]), .A(CDA_int[2]));
VIRL_SDN_BUF_1 buf_cd_expA_7 (.X(CDA_exp[7]), .A(CDA_int[3]));
VIRL_SDN_BUF_1 buf_cd_expA_8 (.X(CDA_exp[8]), .A(CDA_int[0]));
VIRL_SDN_BUF_1 buf_cd_expA_9 (.X(CDA_exp[9]), .A(CDA_int[1]));
VIRL_SDN_BUF_1 buf_cd_expA_10 (.X(CDA_exp[10]), .A(CDA_int[2]));
VIRL_SDN_BUF_1 buf_cd_expA_11 (.X(CDA_exp[11]), .A(CDA_int[3]));
VIRL_SDN_BUF_1 buf_cd_expA_12 (.X(CDA_exp[12]), .A(CDA_int[0]));
VIRL_SDN_BUF_1 buf_cd_expA_13 (.X(CDA_exp[13]), .A(CDA_int[1]));
VIRL_SDN_BUF_1 buf_cd_expA_14 (.X(CDA_exp[14]), .A(CDA_int[2]));
VIRL_SDN_BUF_1 buf_cd_expA_15 (.X(CDA_exp[15]), .A(CDA_int[3]));
VIRL_SDN_BUF_1 buf_cd_expA_16 (.X(CDA_exp[16]), .A(CDA_int[0]));
VIRL_SDN_BUF_1 buf_cd_expA_17 (.X(CDA_exp[17]), .A(CDA_int[1]));
VIRL_SDN_BUF_1 buf_cd_expA_18 (.X(CDA_exp[18]), .A(CDA_int[2]));
VIRL_SDN_BUF_1 buf_cd_expA_19 (.X(CDA_exp[19]), .A(CDA_int[3]));
VIRL_SDN_BUF_1 buf_cd_expA_20 (.X(CDA_exp[20]), .A(CDA_int[0]));
VIRL_SDN_BUF_1 buf_cd_expA_21 (.X(CDA_exp[21]), .A(CDA_int[1]));
VIRL_SDN_BUF_1 buf_cd_expA_22 (.X(CDA_exp[22]), .A(CDA_int[2]));
VIRL_SDN_BUF_1 buf_cd_expA_23 (.X(CDA_exp[23]), .A(CDA_int[3]));
VIRL_SDN_BUF_1 buf_cd_expA_24 (.X(CDA_exp[24]), .A(CDA_int[0]));
VIRL_SDN_BUF_1 buf_cd_expA_25 (.X(CDA_exp[25]), .A(CDA_int[1]));
VIRL_SDN_BUF_1 buf_cd_expA_26 (.X(CDA_exp[26]), .A(CDA_int[2]));
VIRL_SDN_BUF_1 buf_cd_expA_27 (.X(CDA_exp[27]), .A(CDA_int[3]));
VIRL_SDN_BUF_1 buf_cd_expA_28 (.X(CDA_exp[28]), .A(CDA_int[0]));
VIRL_SDN_BUF_1 buf_cd_expA_29 (.X(CDA_exp[29]), .A(CDA_int[1]));
VIRL_SDN_BUF_1 buf_cd_expA_30 (.X(CDA_exp[30]), .A(CDA_int[2]));
VIRL_SDN_BUF_1 buf_cd_expA_31 (.X(CDA_exp[31]), .A(CDA_int[3]));
VIRL_SDN_BUF_1 buf_cd_expA_32 (.X(CDA_exp[32]), .A(CDA_int[0]));
VIRL_SDN_BUF_1 buf_cd_expA_33 (.X(CDA_exp[33]), .A(CDA_int[1]));
VIRL_SDN_BUF_1 buf_cd_expA_34 (.X(CDA_exp[34]), .A(CDA_int[2]));
VIRL_SDN_BUF_1 buf_cd_expA_35 (.X(CDA_exp[35]), .A(CDA_int[3]));
VIRL_SDN_BUF_1 buf_cd_expA_36 (.X(CDA_exp[36]), .A(CDA_int[0]));
VIRL_SDN_BUF_1 buf_cd_expA_37 (.X(CDA_exp[37]), .A(CDA_int[1]));
VIRL_SDN_BUF_1 buf_cd_expA_38 (.X(CDA_exp[38]), .A(CDA_int[2]));
VIRL_SDN_BUF_1 buf_cd_expA_39 (.X(CDA_exp[39]), .A(CDA_int[3]));
VIRL_SDN_BUF_1 buf_cd_expA_40 (.X(CDA_exp[40]), .A(CDA_int[0]));
VIRL_SDN_BUF_1 buf_cd_expA_41 (.X(CDA_exp[41]), .A(CDA_int[1]));
VIRL_SDN_BUF_1 buf_cd_expA_42 (.X(CDA_exp[42]), .A(CDA_int[2]));
VIRL_SDN_BUF_1 buf_cd_expA_43 (.X(CDA_exp[43]), .A(CDA_int[3]));
VIRL_SDN_BUF_1 buf_cd_expA_44 (.X(CDA_exp[44]), .A(CDA_int[0]));
VIRL_SDN_BUF_1 buf_cd_expA_45 (.X(CDA_exp[45]), .A(CDA_int[1]));
VIRL_SDN_BUF_1 buf_cd_expA_46 (.X(CDA_exp[46]), .A(CDA_int[2]));
VIRL_SDN_BUF_1 buf_cd_expA_47 (.X(CDA_exp[47]), .A(CDA_int[3]));
VIRL_SDN_BUF_1 buf_cd_expA_48 (.X(CDA_exp[48]), .A(CDA_int[0]));
VIRL_SDN_BUF_1 buf_cd_expA_49 (.X(CDA_exp[49]), .A(CDA_int[1]));
VIRL_SDN_BUF_1 buf_cd_expA_50 (.X(CDA_exp[50]), .A(CDA_int[2]));
VIRL_SDN_BUF_1 buf_cd_expA_51 (.X(CDA_exp[51]), .A(CDA_int[3]));
VIRL_SDN_BUF_1 buf_cd_expA_52 (.X(CDA_exp[52]), .A(CDA_int[0]));
VIRL_SDN_BUF_1 buf_cd_expA_53 (.X(CDA_exp[53]), .A(CDA_int[1]));
VIRL_SDN_BUF_1 buf_cd_expA_54 (.X(CDA_exp[54]), .A(CDA_int[2]));
VIRL_SDN_BUF_1 buf_cd_expA_55 (.X(CDA_exp[55]), .A(CDA_int[3]));
VIRL_SDN_BUF_1 buf_cd_expA_56 (.X(CDA_exp[56]), .A(CDA_int[0]));
VIRL_SDN_BUF_1 buf_cd_expA_57 (.X(CDA_exp[57]), .A(CDA_int[1]));
VIRL_SDN_BUF_1 buf_cd_expA_58 (.X(CDA_exp[58]), .A(CDA_int[2]));
VIRL_SDN_BUF_1 buf_cd_expA_59 (.X(CDA_exp[59]), .A(CDA_int[3]));
VIRL_SDN_BUF_1 buf_cd_expA_60 (.X(CDA_exp[60]), .A(CDA_int[0]));
VIRL_SDN_BUF_1 buf_cd_expA_61 (.X(CDA_exp[61]), .A(CDA_int[1]));
VIRL_SDN_BUF_1 buf_cd_expA_62 (.X(CDA_exp[62]), .A(CDA_int[2]));
VIRL_SDN_BUF_1 buf_cd_expA_63 (.X(CDA_exp[63]), .A(CDA_int[3]));
VIRL_SDN_BUF_1 buf_cd_expA_64 (.X(CDA_exp[64]), .A(CDA_int[0]));
VIRL_SDN_BUF_1 buf_cd_expA_65 (.X(CDA_exp[65]), .A(CDA_int[1]));
VIRL_SDN_BUF_1 buf_cd_expA_66 (.X(CDA_exp[66]), .A(CDA_int[2]));
VIRL_SDN_BUF_1 buf_cd_expA_67 (.X(CDA_exp[67]), .A(CDA_int[3]));
VIRL_SDN_BUF_1 buf_cd_expA_68 (.X(CDA_exp[68]), .A(CDA_int[0]));
VIRL_SDN_BUF_1 buf_cd_expA_69 (.X(CDA_exp[69]), .A(CDA_int[1]));
VIRL_SDN_BUF_1 buf_cd_expA_70 (.X(CDA_exp[70]), .A(CDA_int[2]));
VIRL_SDN_BUF_1 buf_cd_expA_71 (.X(CDA_exp[71]), .A(CDA_int[3]));
VIRL_SDN_BUF_1 buf_cd_expA_72 (.X(CDA_exp[72]), .A(CDA_int[0]));
VIRL_SDN_BUF_1 buf_cd_expA_73 (.X(CDA_exp[73]), .A(CDA_int[1]));
VIRL_SDN_BUF_1 buf_cd_expA_74 (.X(CDA_exp[74]), .A(CDA_int[2]));
VIRL_SDN_BUF_1 buf_cd_expA_75 (.X(CDA_exp[75]), .A(CDA_int[3]));
VIRL_SDN_BUF_1 buf_cd_expA_76 (.X(CDA_exp[76]), .A(CDA_int[0]));
VIRL_SDN_BUF_1 buf_cd_expA_77 (.X(CDA_exp[77]), .A(CDA_int[1]));
VIRL_SDN_BUF_1 buf_cd_expA_78 (.X(CDA_exp[78]), .A(CDA_int[2]));
VIRL_SDN_BUF_1 buf_cd_expA_79 (.X(CDA_exp[79]), .A(CDA_int[3]));
VIRL_SDN_BUF_1 buf_cd_expA_80 (.X(CDA_exp[80]), .A(CDA_int[0]));
VIRL_SDN_BUF_1 buf_cd_expA_81 (.X(CDA_exp[81]), .A(CDA_int[1]));
VIRL_SDN_BUF_1 buf_cd_expA_82 (.X(CDA_exp[82]), .A(CDA_int[2]));
VIRL_SDN_BUF_1 buf_cd_expA_83 (.X(CDA_exp[83]), .A(CDA_int[3]));
VIRL_SDN_BUF_1 buf_cd_expA_84 (.X(CDA_exp[84]), .A(CDA_int[0]));
VIRL_SDN_BUF_1 buf_cd_expA_85 (.X(CDA_exp[85]), .A(CDA_int[1]));
VIRL_SDN_BUF_1 buf_cd_expA_86 (.X(CDA_exp[86]), .A(CDA_int[2]));
VIRL_SDN_BUF_1 buf_cd_expA_87 (.X(CDA_exp[87]), .A(CDA_int[3]));
VIRL_SDN_BUF_1 buf_cd_expA_88 (.X(CDA_exp[88]), .A(CDA_int[0]));
VIRL_SDN_BUF_1 buf_cd_expA_89 (.X(CDA_exp[89]), .A(CDA_int[1]));
VIRL_SDN_BUF_1 buf_cd_expA_90 (.X(CDA_exp[90]), .A(CDA_int[2]));
VIRL_SDN_BUF_1 buf_cd_expA_91 (.X(CDA_exp[91]), .A(CDA_int[3]));
VIRL_SDN_BUF_1 buf_cd_expA_92 (.X(CDA_exp[92]), .A(CDA_int[0]));
VIRL_SDN_BUF_1 buf_cd_expA_93 (.X(CDA_exp[93]), .A(CDA_int[1]));
VIRL_SDN_BUF_1 buf_cd_expA_94 (.X(CDA_exp[94]), .A(CDA_int[2]));
VIRL_SDN_BUF_1 buf_cd_expA_95 (.X(CDA_exp[95]), .A(CDA_int[3]));
VIRL_SDN_BUF_1 buf_cd_expA_96 (.X(CDA_exp[96]), .A(CDA_int[0]));
VIRL_SDN_BUF_1 buf_cd_expA_97 (.X(CDA_exp[97]), .A(CDA_int[1]));
VIRL_SDN_BUF_1 buf_cd_expA_98 (.X(CDA_exp[98]), .A(CDA_int[2]));
VIRL_SDN_BUF_1 buf_cd_expA_99 (.X(CDA_exp[99]), .A(CDA_int[3]));
VIRL_SDN_BUF_1 buf_cd_expA_100 (.X(CDA_exp[100]), .A(CDA_int[0]));
VIRL_SDN_BUF_1 buf_cd_expA_101 (.X(CDA_exp[101]), .A(CDA_int[1]));
VIRL_SDN_BUF_1 buf_cd_expA_102 (.X(CDA_exp[102]), .A(CDA_int[2]));
VIRL_SDN_BUF_1 buf_cd_expA_103 (.X(CDA_exp[103]), .A(CDA_int[3]));
VIRL_SDN_BUF_1 buf_cd_expA_104 (.X(CDA_exp[104]), .A(CDA_int[0]));
VIRL_SDN_BUF_1 buf_cd_expA_105 (.X(CDA_exp[105]), .A(CDA_int[1]));
VIRL_SDN_BUF_1 buf_cd_expA_106 (.X(CDA_exp[106]), .A(CDA_int[2]));
VIRL_SDN_BUF_1 buf_cd_expA_107 (.X(CDA_exp[107]), .A(CDA_int[3]));
VIRL_SDN_BUF_1 buf_cd_expA_108 (.X(CDA_exp[108]), .A(CDA_int[0]));
VIRL_SDN_BUF_1 buf_cd_expA_109 (.X(CDA_exp[109]), .A(CDA_int[1]));
VIRL_SDN_BUF_1 buf_cd_expA_110 (.X(CDA_exp[110]), .A(CDA_int[2]));
VIRL_SDN_BUF_1 buf_cd_expA_111 (.X(CDA_exp[111]), .A(CDA_int[3]));
VIRL_SDN_BUF_1 buf_cd_expA_112 (.X(CDA_exp[112]), .A(CDA_int[0]));
VIRL_SDN_BUF_1 buf_cd_expA_113 (.X(CDA_exp[113]), .A(CDA_int[1]));
VIRL_SDN_BUF_1 buf_cd_expA_114 (.X(CDA_exp[114]), .A(CDA_int[2]));
VIRL_SDN_BUF_1 buf_cd_expA_115 (.X(CDA_exp[115]), .A(CDA_int[3]));
VIRL_SDN_BUF_1 buf_cd_expA_116 (.X(CDA_exp[116]), .A(CDA_int[0]));
VIRL_SDN_BUF_1 buf_cd_expA_117 (.X(CDA_exp[117]), .A(CDA_int[1]));
VIRL_SDN_BUF_1 buf_cd_expA_118 (.X(CDA_exp[118]), .A(CDA_int[2]));
VIRL_SDN_BUF_1 buf_cd_expA_119 (.X(CDA_exp[119]), .A(CDA_int[3]));
VIRL_SDN_BUF_1 buf_cd_expA_120 (.X(CDA_exp[120]), .A(CDA_int[0]));
VIRL_SDN_BUF_1 buf_cd_expA_121 (.X(CDA_exp[121]), .A(CDA_int[1]));
VIRL_SDN_BUF_1 buf_cd_expA_122 (.X(CDA_exp[122]), .A(CDA_int[2]));
VIRL_SDN_BUF_1 buf_cd_expA_123 (.X(CDA_exp[123]), .A(CDA_int[3]));
VIRL_SDN_BUF_1 buf_cd_expA_124 (.X(CDA_exp[124]), .A(CDA_int[0]));
VIRL_SDN_BUF_1 buf_cd_expA_125 (.X(CDA_exp[125]), .A(CDA_int[1]));
VIRL_SDN_BUF_1 buf_cd_expA_126 (.X(CDA_exp[126]), .A(CDA_int[2]));
VIRL_SDN_BUF_1 buf_cd_expA_127 (.X(CDA_exp[127]), .A(CDA_int[3]));
VIRL_SDN_BUF_1 buf_cd_expA_128 (.X(CDA_exp[128]), .A(CDA_int[0]));
VIRL_SDN_BUF_1 buf_cd_expA_129 (.X(CDA_exp[129]), .A(CDA_int[1]));
VIRL_SDN_BUF_1 buf_cd_expA_130 (.X(CDA_exp[130]), .A(CDA_int[2]));
VIRL_SDN_BUF_1 buf_cd_expA_131 (.X(CDA_exp[131]), .A(CDA_int[3]));
VIRL_SDN_BUF_1 buf_cd_expA_132 (.X(CDA_exp[132]), .A(CDA_int[0]));
VIRL_SDN_BUF_1 buf_cd_expA_133 (.X(CDA_exp[133]), .A(CDA_int[1]));
VIRL_SDN_BUF_1 buf_cd_expA_134 (.X(CDA_exp[134]), .A(CDA_int[2]));
VIRL_SDN_BUF_1 buf_cd_expA_135 (.X(CDA_exp[135]), .A(CDA_int[3]));
VIRL_SDN_BUF_1 buf_cd_expA_136 (.X(CDA_exp[136]), .A(CDA_int[0]));
VIRL_SDN_BUF_1 buf_cd_expA_137 (.X(CDA_exp[137]), .A(CDA_int[1]));
VIRL_SDN_BUF_1 buf_cd_expA_138 (.X(CDA_exp[138]), .A(CDA_int[2]));
VIRL_SDN_BUF_1 buf_cd_expA_139 (.X(CDA_exp[139]), .A(CDA_int[3]));
VIRL_SDN_BUF_1 buf_cd_expA_140 (.X(CDA_exp[140]), .A(CDA_int[0]));
VIRL_SDN_BUF_1 buf_cd_expA_141 (.X(CDA_exp[141]), .A(CDA_int[1]));
VIRL_SDN_BUF_1 buf_cd_expA_142 (.X(CDA_exp[142]), .A(CDA_int[2]));
VIRL_SDN_BUF_1 buf_cd_expA_143 (.X(CDA_exp[143]), .A(CDA_int[3]));
VIRL_SDN_BUF_1 buf_cd_expA_144 (.X(CDA_exp[144]), .A(CDA_int[0]));
VIRL_SDN_BUF_1 buf_cd_expA_145 (.X(CDA_exp[145]), .A(CDA_int[1]));
VIRL_SDN_BUF_1 buf_cd_expA_146 (.X(CDA_exp[146]), .A(CDA_int[2]));
VIRL_SDN_BUF_1 buf_cd_expA_147 (.X(CDA_exp[147]), .A(CDA_int[3]));
VIRL_SDN_BUF_1 buf_cd_expA_148 (.X(CDA_exp[148]), .A(CDA_int[0]));
VIRL_SDN_BUF_1 buf_cd_expA_149 (.X(CDA_exp[149]), .A(CDA_int[1]));
VIRL_SDN_BUF_1 buf_cd_expA_150 (.X(CDA_exp[150]), .A(CDA_int[2]));
VIRL_SDN_BUF_1 buf_cd_expA_151 (.X(CDA_exp[151]), .A(CDA_int[3]));
VIRL_SDN_BUF_1 buf_cd_expA_152 (.X(CDA_exp[152]), .A(CDA_int[0]));
VIRL_SDN_BUF_1 buf_cd_expA_153 (.X(CDA_exp[153]), .A(CDA_int[1]));
VIRL_SDN_BUF_1 buf_cd_expA_154 (.X(CDA_exp[154]), .A(CDA_int[2]));
VIRL_SDN_BUF_1 buf_cd_expA_155 (.X(CDA_exp[155]), .A(CDA_int[3]));
VIRL_SDN_BUF_1 buf_cd_expA_156 (.X(CDA_exp[156]), .A(CDA_int[0]));
VIRL_SDN_BUF_1 buf_cd_expA_157 (.X(CDA_exp[157]), .A(CDA_int[1]));
VIRL_SDN_BUF_1 buf_cd_expA_158 (.X(CDA_exp[158]), .A(CDA_int[2]));
VIRL_SDN_BUF_1 buf_cd_expA_159 (.X(CDA_exp[159]), .A(CDA_int[3]));

VIRL_SDN_EO2_4 eor_out_cdA_0 ( .X(XorA[0]), .A1(dt_intA[0]), .A2(CDA_exp[0]) );
VIRL_SDN_EO2_4 eor_out_cdA_1 ( .X(XorA[1]), .A1(dt_intA[1]), .A2(CDA_exp[1]) );
VIRL_SDN_EO2_4 eor_out_cdA_2 ( .X(XorA[2]), .A1(dt_intA[2]), .A2(CDA_exp[2]) );
VIRL_SDN_EO2_4 eor_out_cdA_3 ( .X(XorA[3]), .A1(dt_intA[3]), .A2(CDA_exp[3]) );
VIRL_SDN_EO2_4 eor_out_cdA_4 ( .X(XorA[4]), .A1(dt_intA[4]), .A2(CDA_exp[4]) );
VIRL_SDN_EO2_4 eor_out_cdA_5 ( .X(XorA[5]), .A1(dt_intA[5]), .A2(CDA_exp[5]) );
VIRL_SDN_EO2_4 eor_out_cdA_6 ( .X(XorA[6]), .A1(dt_intA[6]), .A2(CDA_exp[6]) );
VIRL_SDN_EO2_4 eor_out_cdA_7 ( .X(XorA[7]), .A1(dt_intA[7]), .A2(CDA_exp[7]) );
VIRL_SDN_EO2_4 eor_out_cdA_8 ( .X(XorA[8]), .A1(dt_intA[8]), .A2(CDA_exp[8]) );
VIRL_SDN_EO2_4 eor_out_cdA_9 ( .X(XorA[9]), .A1(dt_intA[9]), .A2(CDA_exp[9]) );
VIRL_SDN_EO2_4 eor_out_cdA_10 ( .X(XorA[10]), .A1(dt_intA[10]), .A2(CDA_exp[10]) );
VIRL_SDN_EO2_4 eor_out_cdA_11 ( .X(XorA[11]), .A1(dt_intA[11]), .A2(CDA_exp[11]) );
VIRL_SDN_EO2_4 eor_out_cdA_12 ( .X(XorA[12]), .A1(dt_intA[12]), .A2(CDA_exp[12]) );
VIRL_SDN_EO2_4 eor_out_cdA_13 ( .X(XorA[13]), .A1(dt_intA[13]), .A2(CDA_exp[13]) );
VIRL_SDN_EO2_4 eor_out_cdA_14 ( .X(XorA[14]), .A1(dt_intA[14]), .A2(CDA_exp[14]) );
VIRL_SDN_EO2_4 eor_out_cdA_15 ( .X(XorA[15]), .A1(dt_intA[15]), .A2(CDA_exp[15]) );
VIRL_SDN_EO2_4 eor_out_cdA_16 ( .X(XorA[16]), .A1(dt_intA[16]), .A2(CDA_exp[16]) );
VIRL_SDN_EO2_4 eor_out_cdA_17 ( .X(XorA[17]), .A1(dt_intA[17]), .A2(CDA_exp[17]) );
VIRL_SDN_EO2_4 eor_out_cdA_18 ( .X(XorA[18]), .A1(dt_intA[18]), .A2(CDA_exp[18]) );
VIRL_SDN_EO2_4 eor_out_cdA_19 ( .X(XorA[19]), .A1(dt_intA[19]), .A2(CDA_exp[19]) );
VIRL_SDN_EO2_4 eor_out_cdA_20 ( .X(XorA[20]), .A1(dt_intA[20]), .A2(CDA_exp[20]) );
VIRL_SDN_EO2_4 eor_out_cdA_21 ( .X(XorA[21]), .A1(dt_intA[21]), .A2(CDA_exp[21]) );
VIRL_SDN_EO2_4 eor_out_cdA_22 ( .X(XorA[22]), .A1(dt_intA[22]), .A2(CDA_exp[22]) );
VIRL_SDN_EO2_4 eor_out_cdA_23 ( .X(XorA[23]), .A1(dt_intA[23]), .A2(CDA_exp[23]) );
VIRL_SDN_EO2_4 eor_out_cdA_24 ( .X(XorA[24]), .A1(dt_intA[24]), .A2(CDA_exp[24]) );
VIRL_SDN_EO2_4 eor_out_cdA_25 ( .X(XorA[25]), .A1(dt_intA[25]), .A2(CDA_exp[25]) );
VIRL_SDN_EO2_4 eor_out_cdA_26 ( .X(XorA[26]), .A1(dt_intA[26]), .A2(CDA_exp[26]) );
VIRL_SDN_EO2_4 eor_out_cdA_27 ( .X(XorA[27]), .A1(dt_intA[27]), .A2(CDA_exp[27]) );
VIRL_SDN_EO2_4 eor_out_cdA_28 ( .X(XorA[28]), .A1(dt_intA[28]), .A2(CDA_exp[28]) );
VIRL_SDN_EO2_4 eor_out_cdA_29 ( .X(XorA[29]), .A1(dt_intA[29]), .A2(CDA_exp[29]) );
VIRL_SDN_EO2_4 eor_out_cdA_30 ( .X(XorA[30]), .A1(dt_intA[30]), .A2(CDA_exp[30]) );
VIRL_SDN_EO2_4 eor_out_cdA_31 ( .X(XorA[31]), .A1(dt_intA[31]), .A2(CDA_exp[31]) );
VIRL_SDN_EO2_4 eor_out_cdA_32 ( .X(XorA[32]), .A1(dt_intA[32]), .A2(CDA_exp[32]) );
VIRL_SDN_EO2_4 eor_out_cdA_33 ( .X(XorA[33]), .A1(dt_intA[33]), .A2(CDA_exp[33]) );
VIRL_SDN_EO2_4 eor_out_cdA_34 ( .X(XorA[34]), .A1(dt_intA[34]), .A2(CDA_exp[34]) );
VIRL_SDN_EO2_4 eor_out_cdA_35 ( .X(XorA[35]), .A1(dt_intA[35]), .A2(CDA_exp[35]) );
VIRL_SDN_EO2_4 eor_out_cdA_36 ( .X(XorA[36]), .A1(dt_intA[36]), .A2(CDA_exp[36]) );
VIRL_SDN_EO2_4 eor_out_cdA_37 ( .X(XorA[37]), .A1(dt_intA[37]), .A2(CDA_exp[37]) );
VIRL_SDN_EO2_4 eor_out_cdA_38 ( .X(XorA[38]), .A1(dt_intA[38]), .A2(CDA_exp[38]) );
VIRL_SDN_EO2_4 eor_out_cdA_39 ( .X(XorA[39]), .A1(dt_intA[39]), .A2(CDA_exp[39]) );
VIRL_SDN_EO2_4 eor_out_cdA_40 ( .X(XorA[40]), .A1(dt_intA[40]), .A2(CDA_exp[40]) );
VIRL_SDN_EO2_4 eor_out_cdA_41 ( .X(XorA[41]), .A1(dt_intA[41]), .A2(CDA_exp[41]) );
VIRL_SDN_EO2_4 eor_out_cdA_42 ( .X(XorA[42]), .A1(dt_intA[42]), .A2(CDA_exp[42]) );
VIRL_SDN_EO2_4 eor_out_cdA_43 ( .X(XorA[43]), .A1(dt_intA[43]), .A2(CDA_exp[43]) );
VIRL_SDN_EO2_4 eor_out_cdA_44 ( .X(XorA[44]), .A1(dt_intA[44]), .A2(CDA_exp[44]) );
VIRL_SDN_EO2_4 eor_out_cdA_45 ( .X(XorA[45]), .A1(dt_intA[45]), .A2(CDA_exp[45]) );
VIRL_SDN_EO2_4 eor_out_cdA_46 ( .X(XorA[46]), .A1(dt_intA[46]), .A2(CDA_exp[46]) );
VIRL_SDN_EO2_4 eor_out_cdA_47 ( .X(XorA[47]), .A1(dt_intA[47]), .A2(CDA_exp[47]) );
VIRL_SDN_EO2_4 eor_out_cdA_48 ( .X(XorA[48]), .A1(dt_intA[48]), .A2(CDA_exp[48]) );
VIRL_SDN_EO2_4 eor_out_cdA_49 ( .X(XorA[49]), .A1(dt_intA[49]), .A2(CDA_exp[49]) );
VIRL_SDN_EO2_4 eor_out_cdA_50 ( .X(XorA[50]), .A1(dt_intA[50]), .A2(CDA_exp[50]) );
VIRL_SDN_EO2_4 eor_out_cdA_51 ( .X(XorA[51]), .A1(dt_intA[51]), .A2(CDA_exp[51]) );
VIRL_SDN_EO2_4 eor_out_cdA_52 ( .X(XorA[52]), .A1(dt_intA[52]), .A2(CDA_exp[52]) );
VIRL_SDN_EO2_4 eor_out_cdA_53 ( .X(XorA[53]), .A1(dt_intA[53]), .A2(CDA_exp[53]) );
VIRL_SDN_EO2_4 eor_out_cdA_54 ( .X(XorA[54]), .A1(dt_intA[54]), .A2(CDA_exp[54]) );
VIRL_SDN_EO2_4 eor_out_cdA_55 ( .X(XorA[55]), .A1(dt_intA[55]), .A2(CDA_exp[55]) );
VIRL_SDN_EO2_4 eor_out_cdA_56 ( .X(XorA[56]), .A1(dt_intA[56]), .A2(CDA_exp[56]) );
VIRL_SDN_EO2_4 eor_out_cdA_57 ( .X(XorA[57]), .A1(dt_intA[57]), .A2(CDA_exp[57]) );
VIRL_SDN_EO2_4 eor_out_cdA_58 ( .X(XorA[58]), .A1(dt_intA[58]), .A2(CDA_exp[58]) );
VIRL_SDN_EO2_4 eor_out_cdA_59 ( .X(XorA[59]), .A1(dt_intA[59]), .A2(CDA_exp[59]) );
VIRL_SDN_EO2_4 eor_out_cdA_60 ( .X(XorA[60]), .A1(dt_intA[60]), .A2(CDA_exp[60]) );
VIRL_SDN_EO2_4 eor_out_cdA_61 ( .X(XorA[61]), .A1(dt_intA[61]), .A2(CDA_exp[61]) );
VIRL_SDN_EO2_4 eor_out_cdA_62 ( .X(XorA[62]), .A1(dt_intA[62]), .A2(CDA_exp[62]) );
VIRL_SDN_EO2_4 eor_out_cdA_63 ( .X(XorA[63]), .A1(dt_intA[63]), .A2(CDA_exp[63]) );
VIRL_SDN_EO2_4 eor_out_cdA_64 ( .X(XorA[64]), .A1(dt_intA[64]), .A2(CDA_exp[64]) );
VIRL_SDN_EO2_4 eor_out_cdA_65 ( .X(XorA[65]), .A1(dt_intA[65]), .A2(CDA_exp[65]) );
VIRL_SDN_EO2_4 eor_out_cdA_66 ( .X(XorA[66]), .A1(dt_intA[66]), .A2(CDA_exp[66]) );
VIRL_SDN_EO2_4 eor_out_cdA_67 ( .X(XorA[67]), .A1(dt_intA[67]), .A2(CDA_exp[67]) );
VIRL_SDN_EO2_4 eor_out_cdA_68 ( .X(XorA[68]), .A1(dt_intA[68]), .A2(CDA_exp[68]) );
VIRL_SDN_EO2_4 eor_out_cdA_69 ( .X(XorA[69]), .A1(dt_intA[69]), .A2(CDA_exp[69]) );
VIRL_SDN_EO2_4 eor_out_cdA_70 ( .X(XorA[70]), .A1(dt_intA[70]), .A2(CDA_exp[70]) );
VIRL_SDN_EO2_4 eor_out_cdA_71 ( .X(XorA[71]), .A1(dt_intA[71]), .A2(CDA_exp[71]) );
VIRL_SDN_EO2_4 eor_out_cdA_72 ( .X(XorA[72]), .A1(dt_intA[72]), .A2(CDA_exp[72]) );
VIRL_SDN_EO2_4 eor_out_cdA_73 ( .X(XorA[73]), .A1(dt_intA[73]), .A2(CDA_exp[73]) );
VIRL_SDN_EO2_4 eor_out_cdA_74 ( .X(XorA[74]), .A1(dt_intA[74]), .A2(CDA_exp[74]) );
VIRL_SDN_EO2_4 eor_out_cdA_75 ( .X(XorA[75]), .A1(dt_intA[75]), .A2(CDA_exp[75]) );
VIRL_SDN_EO2_4 eor_out_cdA_76 ( .X(XorA[76]), .A1(dt_intA[76]), .A2(CDA_exp[76]) );
VIRL_SDN_EO2_4 eor_out_cdA_77 ( .X(XorA[77]), .A1(dt_intA[77]), .A2(CDA_exp[77]) );
VIRL_SDN_EO2_4 eor_out_cdA_78 ( .X(XorA[78]), .A1(dt_intA[78]), .A2(CDA_exp[78]) );
VIRL_SDN_EO2_4 eor_out_cdA_79 ( .X(XorA[79]), .A1(dt_intA[79]), .A2(CDA_exp[79]) );
VIRL_SDN_EO2_4 eor_out_cdA_80 ( .X(XorA[80]), .A1(dt_intA[80]), .A2(CDA_exp[80]) );
VIRL_SDN_EO2_4 eor_out_cdA_81 ( .X(XorA[81]), .A1(dt_intA[81]), .A2(CDA_exp[81]) );
VIRL_SDN_EO2_4 eor_out_cdA_82 ( .X(XorA[82]), .A1(dt_intA[82]), .A2(CDA_exp[82]) );
VIRL_SDN_EO2_4 eor_out_cdA_83 ( .X(XorA[83]), .A1(dt_intA[83]), .A2(CDA_exp[83]) );
VIRL_SDN_EO2_4 eor_out_cdA_84 ( .X(XorA[84]), .A1(dt_intA[84]), .A2(CDA_exp[84]) );
VIRL_SDN_EO2_4 eor_out_cdA_85 ( .X(XorA[85]), .A1(dt_intA[85]), .A2(CDA_exp[85]) );
VIRL_SDN_EO2_4 eor_out_cdA_86 ( .X(XorA[86]), .A1(dt_intA[86]), .A2(CDA_exp[86]) );
VIRL_SDN_EO2_4 eor_out_cdA_87 ( .X(XorA[87]), .A1(dt_intA[87]), .A2(CDA_exp[87]) );
VIRL_SDN_EO2_4 eor_out_cdA_88 ( .X(XorA[88]), .A1(dt_intA[88]), .A2(CDA_exp[88]) );
VIRL_SDN_EO2_4 eor_out_cdA_89 ( .X(XorA[89]), .A1(dt_intA[89]), .A2(CDA_exp[89]) );
VIRL_SDN_EO2_4 eor_out_cdA_90 ( .X(XorA[90]), .A1(dt_intA[90]), .A2(CDA_exp[90]) );
VIRL_SDN_EO2_4 eor_out_cdA_91 ( .X(XorA[91]), .A1(dt_intA[91]), .A2(CDA_exp[91]) );
VIRL_SDN_EO2_4 eor_out_cdA_92 ( .X(XorA[92]), .A1(dt_intA[92]), .A2(CDA_exp[92]) );
VIRL_SDN_EO2_4 eor_out_cdA_93 ( .X(XorA[93]), .A1(dt_intA[93]), .A2(CDA_exp[93]) );
VIRL_SDN_EO2_4 eor_out_cdA_94 ( .X(XorA[94]), .A1(dt_intA[94]), .A2(CDA_exp[94]) );
VIRL_SDN_EO2_4 eor_out_cdA_95 ( .X(XorA[95]), .A1(dt_intA[95]), .A2(CDA_exp[95]) );
VIRL_SDN_EO2_4 eor_out_cdA_96 ( .X(XorA[96]), .A1(dt_intA[96]), .A2(CDA_exp[96]) );
VIRL_SDN_EO2_4 eor_out_cdA_97 ( .X(XorA[97]), .A1(dt_intA[97]), .A2(CDA_exp[97]) );
VIRL_SDN_EO2_4 eor_out_cdA_98 ( .X(XorA[98]), .A1(dt_intA[98]), .A2(CDA_exp[98]) );
VIRL_SDN_EO2_4 eor_out_cdA_99 ( .X(XorA[99]), .A1(dt_intA[99]), .A2(CDA_exp[99]) );
VIRL_SDN_EO2_4 eor_out_cdA_100 ( .X(XorA[100]), .A1(dt_intA[100]), .A2(CDA_exp[100]) );
VIRL_SDN_EO2_4 eor_out_cdA_101 ( .X(XorA[101]), .A1(dt_intA[101]), .A2(CDA_exp[101]) );
VIRL_SDN_EO2_4 eor_out_cdA_102 ( .X(XorA[102]), .A1(dt_intA[102]), .A2(CDA_exp[102]) );
VIRL_SDN_EO2_4 eor_out_cdA_103 ( .X(XorA[103]), .A1(dt_intA[103]), .A2(CDA_exp[103]) );
VIRL_SDN_EO2_4 eor_out_cdA_104 ( .X(XorA[104]), .A1(dt_intA[104]), .A2(CDA_exp[104]) );
VIRL_SDN_EO2_4 eor_out_cdA_105 ( .X(XorA[105]), .A1(dt_intA[105]), .A2(CDA_exp[105]) );
VIRL_SDN_EO2_4 eor_out_cdA_106 ( .X(XorA[106]), .A1(dt_intA[106]), .A2(CDA_exp[106]) );
VIRL_SDN_EO2_4 eor_out_cdA_107 ( .X(XorA[107]), .A1(dt_intA[107]), .A2(CDA_exp[107]) );
VIRL_SDN_EO2_4 eor_out_cdA_108 ( .X(XorA[108]), .A1(dt_intA[108]), .A2(CDA_exp[108]) );
VIRL_SDN_EO2_4 eor_out_cdA_109 ( .X(XorA[109]), .A1(dt_intA[109]), .A2(CDA_exp[109]) );
VIRL_SDN_EO2_4 eor_out_cdA_110 ( .X(XorA[110]), .A1(dt_intA[110]), .A2(CDA_exp[110]) );
VIRL_SDN_EO2_4 eor_out_cdA_111 ( .X(XorA[111]), .A1(dt_intA[111]), .A2(CDA_exp[111]) );
VIRL_SDN_EO2_4 eor_out_cdA_112 ( .X(XorA[112]), .A1(dt_intA[112]), .A2(CDA_exp[112]) );
VIRL_SDN_EO2_4 eor_out_cdA_113 ( .X(XorA[113]), .A1(dt_intA[113]), .A2(CDA_exp[113]) );
VIRL_SDN_EO2_4 eor_out_cdA_114 ( .X(XorA[114]), .A1(dt_intA[114]), .A2(CDA_exp[114]) );
VIRL_SDN_EO2_4 eor_out_cdA_115 ( .X(XorA[115]), .A1(dt_intA[115]), .A2(CDA_exp[115]) );
VIRL_SDN_EO2_4 eor_out_cdA_116 ( .X(XorA[116]), .A1(dt_intA[116]), .A2(CDA_exp[116]) );
VIRL_SDN_EO2_4 eor_out_cdA_117 ( .X(XorA[117]), .A1(dt_intA[117]), .A2(CDA_exp[117]) );
VIRL_SDN_EO2_4 eor_out_cdA_118 ( .X(XorA[118]), .A1(dt_intA[118]), .A2(CDA_exp[118]) );
VIRL_SDN_EO2_4 eor_out_cdA_119 ( .X(XorA[119]), .A1(dt_intA[119]), .A2(CDA_exp[119]) );
VIRL_SDN_EO2_4 eor_out_cdA_120 ( .X(XorA[120]), .A1(dt_intA[120]), .A2(CDA_exp[120]) );
VIRL_SDN_EO2_4 eor_out_cdA_121 ( .X(XorA[121]), .A1(dt_intA[121]), .A2(CDA_exp[121]) );
VIRL_SDN_EO2_4 eor_out_cdA_122 ( .X(XorA[122]), .A1(dt_intA[122]), .A2(CDA_exp[122]) );
VIRL_SDN_EO2_4 eor_out_cdA_123 ( .X(XorA[123]), .A1(dt_intA[123]), .A2(CDA_exp[123]) );
VIRL_SDN_EO2_4 eor_out_cdA_124 ( .X(XorA[124]), .A1(dt_intA[124]), .A2(CDA_exp[124]) );
VIRL_SDN_EO2_4 eor_out_cdA_125 ( .X(XorA[125]), .A1(dt_intA[125]), .A2(CDA_exp[125]) );
VIRL_SDN_EO2_4 eor_out_cdA_126 ( .X(XorA[126]), .A1(dt_intA[126]), .A2(CDA_exp[126]) );
VIRL_SDN_EO2_4 eor_out_cdA_127 ( .X(XorA[127]), .A1(dt_intA[127]), .A2(CDA_exp[127]) );
VIRL_SDN_EO2_4 eor_out_cdA_128 ( .X(XorA[128]), .A1(dt_intA[128]), .A2(CDA_exp[128]) );
VIRL_SDN_EO2_4 eor_out_cdA_129 ( .X(XorA[129]), .A1(dt_intA[129]), .A2(CDA_exp[129]) );
VIRL_SDN_EO2_4 eor_out_cdA_130 ( .X(XorA[130]), .A1(dt_intA[130]), .A2(CDA_exp[130]) );
VIRL_SDN_EO2_4 eor_out_cdA_131 ( .X(XorA[131]), .A1(dt_intA[131]), .A2(CDA_exp[131]) );
VIRL_SDN_EO2_4 eor_out_cdA_132 ( .X(XorA[132]), .A1(dt_intA[132]), .A2(CDA_exp[132]) );
VIRL_SDN_EO2_4 eor_out_cdA_133 ( .X(XorA[133]), .A1(dt_intA[133]), .A2(CDA_exp[133]) );
VIRL_SDN_EO2_4 eor_out_cdA_134 ( .X(XorA[134]), .A1(dt_intA[134]), .A2(CDA_exp[134]) );
VIRL_SDN_EO2_4 eor_out_cdA_135 ( .X(XorA[135]), .A1(dt_intA[135]), .A2(CDA_exp[135]) );
VIRL_SDN_EO2_4 eor_out_cdA_136 ( .X(XorA[136]), .A1(dt_intA[136]), .A2(CDA_exp[136]) );
VIRL_SDN_EO2_4 eor_out_cdA_137 ( .X(XorA[137]), .A1(dt_intA[137]), .A2(CDA_exp[137]) );
VIRL_SDN_EO2_4 eor_out_cdA_138 ( .X(XorA[138]), .A1(dt_intA[138]), .A2(CDA_exp[138]) );
VIRL_SDN_EO2_4 eor_out_cdA_139 ( .X(XorA[139]), .A1(dt_intA[139]), .A2(CDA_exp[139]) );
VIRL_SDN_EO2_4 eor_out_cdA_140 ( .X(XorA[140]), .A1(dt_intA[140]), .A2(CDA_exp[140]) );
VIRL_SDN_EO2_4 eor_out_cdA_141 ( .X(XorA[141]), .A1(dt_intA[141]), .A2(CDA_exp[141]) );
VIRL_SDN_EO2_4 eor_out_cdA_142 ( .X(XorA[142]), .A1(dt_intA[142]), .A2(CDA_exp[142]) );
VIRL_SDN_EO2_4 eor_out_cdA_143 ( .X(XorA[143]), .A1(dt_intA[143]), .A2(CDA_exp[143]) );
VIRL_SDN_EO2_4 eor_out_cdA_144 ( .X(XorA[144]), .A1(dt_intA[144]), .A2(CDA_exp[144]) );
VIRL_SDN_EO2_4 eor_out_cdA_145 ( .X(XorA[145]), .A1(dt_intA[145]), .A2(CDA_exp[145]) );
VIRL_SDN_EO2_4 eor_out_cdA_146 ( .X(XorA[146]), .A1(dt_intA[146]), .A2(CDA_exp[146]) );
VIRL_SDN_EO2_4 eor_out_cdA_147 ( .X(XorA[147]), .A1(dt_intA[147]), .A2(CDA_exp[147]) );
VIRL_SDN_EO2_4 eor_out_cdA_148 ( .X(XorA[148]), .A1(dt_intA[148]), .A2(CDA_exp[148]) );
VIRL_SDN_EO2_4 eor_out_cdA_149 ( .X(XorA[149]), .A1(dt_intA[149]), .A2(CDA_exp[149]) );
VIRL_SDN_EO2_4 eor_out_cdA_150 ( .X(XorA[150]), .A1(dt_intA[150]), .A2(CDA_exp[150]) );
VIRL_SDN_EO2_4 eor_out_cdA_151 ( .X(XorA[151]), .A1(dt_intA[151]), .A2(CDA_exp[151]) );
VIRL_SDN_EO2_4 eor_out_cdA_152 ( .X(XorA[152]), .A1(dt_intA[152]), .A2(CDA_exp[152]) );
VIRL_SDN_EO2_4 eor_out_cdA_153 ( .X(XorA[153]), .A1(dt_intA[153]), .A2(CDA_exp[153]) );
VIRL_SDN_EO2_4 eor_out_cdA_154 ( .X(XorA[154]), .A1(dt_intA[154]), .A2(CDA_exp[154]) );
VIRL_SDN_EO2_4 eor_out_cdA_155 ( .X(XorA[155]), .A1(dt_intA[155]), .A2(CDA_exp[155]) );
VIRL_SDN_EO2_4 eor_out_cdA_156 ( .X(XorA[156]), .A1(dt_intA[156]), .A2(CDA_exp[156]) );
VIRL_SDN_EO2_4 eor_out_cdA_157 ( .X(XorA[157]), .A1(dt_intA[157]), .A2(CDA_exp[157]) );
VIRL_SDN_EO2_4 eor_out_cdA_158 ( .X(XorA[158]), .A1(dt_intA[158]), .A2(CDA_exp[158]) );
VIRL_SDN_EO2_4 eor_out_cdA_159 ( .X(XorA[159]), .A1(dt_intA[159]), .A2(CDA_exp[159]) );

VIRL_SDN_INV_0P5 invA_160 ( .X(inv_CAPTA_int), .A(CAPTA_int) );

VIRL_SDN_AN2_1 and_xor_captA_0 ( .X(ErrA[0]), .A1(inv_CAPTA_int), .A2(XorA[0]) );
VIRL_SDN_AN2_1 and_xor_captA_1 ( .X(ErrA[1]), .A1(inv_CAPTA_int), .A2(XorA[1]) );
VIRL_SDN_AN2_1 and_xor_captA_2 ( .X(ErrA[2]), .A1(inv_CAPTA_int), .A2(XorA[2]) );
VIRL_SDN_AN2_1 and_xor_captA_3 ( .X(ErrA[3]), .A1(inv_CAPTA_int), .A2(XorA[3]) );
VIRL_SDN_AN2_1 and_xor_captA_4 ( .X(ErrA[4]), .A1(inv_CAPTA_int), .A2(XorA[4]) );
VIRL_SDN_AN2_1 and_xor_captA_5 ( .X(ErrA[5]), .A1(inv_CAPTA_int), .A2(XorA[5]) );
VIRL_SDN_AN2_1 and_xor_captA_6 ( .X(ErrA[6]), .A1(inv_CAPTA_int), .A2(XorA[6]) );
VIRL_SDN_AN2_1 and_xor_captA_7 ( .X(ErrA[7]), .A1(inv_CAPTA_int), .A2(XorA[7]) );
VIRL_SDN_AN2_1 and_xor_captA_8 ( .X(ErrA[8]), .A1(inv_CAPTA_int), .A2(XorA[8]) );
VIRL_SDN_AN2_1 and_xor_captA_9 ( .X(ErrA[9]), .A1(inv_CAPTA_int), .A2(XorA[9]) );
VIRL_SDN_AN2_1 and_xor_captA_10 ( .X(ErrA[10]), .A1(inv_CAPTA_int), .A2(XorA[10]) );
VIRL_SDN_AN2_1 and_xor_captA_11 ( .X(ErrA[11]), .A1(inv_CAPTA_int), .A2(XorA[11]) );
VIRL_SDN_AN2_1 and_xor_captA_12 ( .X(ErrA[12]), .A1(inv_CAPTA_int), .A2(XorA[12]) );
VIRL_SDN_AN2_1 and_xor_captA_13 ( .X(ErrA[13]), .A1(inv_CAPTA_int), .A2(XorA[13]) );
VIRL_SDN_AN2_1 and_xor_captA_14 ( .X(ErrA[14]), .A1(inv_CAPTA_int), .A2(XorA[14]) );
VIRL_SDN_AN2_1 and_xor_captA_15 ( .X(ErrA[15]), .A1(inv_CAPTA_int), .A2(XorA[15]) );
VIRL_SDN_AN2_1 and_xor_captA_16 ( .X(ErrA[16]), .A1(inv_CAPTA_int), .A2(XorA[16]) );
VIRL_SDN_AN2_1 and_xor_captA_17 ( .X(ErrA[17]), .A1(inv_CAPTA_int), .A2(XorA[17]) );
VIRL_SDN_AN2_1 and_xor_captA_18 ( .X(ErrA[18]), .A1(inv_CAPTA_int), .A2(XorA[18]) );
VIRL_SDN_AN2_1 and_xor_captA_19 ( .X(ErrA[19]), .A1(inv_CAPTA_int), .A2(XorA[19]) );
VIRL_SDN_AN2_1 and_xor_captA_20 ( .X(ErrA[20]), .A1(inv_CAPTA_int), .A2(XorA[20]) );
VIRL_SDN_AN2_1 and_xor_captA_21 ( .X(ErrA[21]), .A1(inv_CAPTA_int), .A2(XorA[21]) );
VIRL_SDN_AN2_1 and_xor_captA_22 ( .X(ErrA[22]), .A1(inv_CAPTA_int), .A2(XorA[22]) );
VIRL_SDN_AN2_1 and_xor_captA_23 ( .X(ErrA[23]), .A1(inv_CAPTA_int), .A2(XorA[23]) );
VIRL_SDN_AN2_1 and_xor_captA_24 ( .X(ErrA[24]), .A1(inv_CAPTA_int), .A2(XorA[24]) );
VIRL_SDN_AN2_1 and_xor_captA_25 ( .X(ErrA[25]), .A1(inv_CAPTA_int), .A2(XorA[25]) );
VIRL_SDN_AN2_1 and_xor_captA_26 ( .X(ErrA[26]), .A1(inv_CAPTA_int), .A2(XorA[26]) );
VIRL_SDN_AN2_1 and_xor_captA_27 ( .X(ErrA[27]), .A1(inv_CAPTA_int), .A2(XorA[27]) );
VIRL_SDN_AN2_1 and_xor_captA_28 ( .X(ErrA[28]), .A1(inv_CAPTA_int), .A2(XorA[28]) );
VIRL_SDN_AN2_1 and_xor_captA_29 ( .X(ErrA[29]), .A1(inv_CAPTA_int), .A2(XorA[29]) );
VIRL_SDN_AN2_1 and_xor_captA_30 ( .X(ErrA[30]), .A1(inv_CAPTA_int), .A2(XorA[30]) );
VIRL_SDN_AN2_1 and_xor_captA_31 ( .X(ErrA[31]), .A1(inv_CAPTA_int), .A2(XorA[31]) );
VIRL_SDN_AN2_1 and_xor_captA_32 ( .X(ErrA[32]), .A1(inv_CAPTA_int), .A2(XorA[32]) );
VIRL_SDN_AN2_1 and_xor_captA_33 ( .X(ErrA[33]), .A1(inv_CAPTA_int), .A2(XorA[33]) );
VIRL_SDN_AN2_1 and_xor_captA_34 ( .X(ErrA[34]), .A1(inv_CAPTA_int), .A2(XorA[34]) );
VIRL_SDN_AN2_1 and_xor_captA_35 ( .X(ErrA[35]), .A1(inv_CAPTA_int), .A2(XorA[35]) );
VIRL_SDN_AN2_1 and_xor_captA_36 ( .X(ErrA[36]), .A1(inv_CAPTA_int), .A2(XorA[36]) );
VIRL_SDN_AN2_1 and_xor_captA_37 ( .X(ErrA[37]), .A1(inv_CAPTA_int), .A2(XorA[37]) );
VIRL_SDN_AN2_1 and_xor_captA_38 ( .X(ErrA[38]), .A1(inv_CAPTA_int), .A2(XorA[38]) );
VIRL_SDN_AN2_1 and_xor_captA_39 ( .X(ErrA[39]), .A1(inv_CAPTA_int), .A2(XorA[39]) );
VIRL_SDN_AN2_1 and_xor_captA_40 ( .X(ErrA[40]), .A1(inv_CAPTA_int), .A2(XorA[40]) );
VIRL_SDN_AN2_1 and_xor_captA_41 ( .X(ErrA[41]), .A1(inv_CAPTA_int), .A2(XorA[41]) );
VIRL_SDN_AN2_1 and_xor_captA_42 ( .X(ErrA[42]), .A1(inv_CAPTA_int), .A2(XorA[42]) );
VIRL_SDN_AN2_1 and_xor_captA_43 ( .X(ErrA[43]), .A1(inv_CAPTA_int), .A2(XorA[43]) );
VIRL_SDN_AN2_1 and_xor_captA_44 ( .X(ErrA[44]), .A1(inv_CAPTA_int), .A2(XorA[44]) );
VIRL_SDN_AN2_1 and_xor_captA_45 ( .X(ErrA[45]), .A1(inv_CAPTA_int), .A2(XorA[45]) );
VIRL_SDN_AN2_1 and_xor_captA_46 ( .X(ErrA[46]), .A1(inv_CAPTA_int), .A2(XorA[46]) );
VIRL_SDN_AN2_1 and_xor_captA_47 ( .X(ErrA[47]), .A1(inv_CAPTA_int), .A2(XorA[47]) );
VIRL_SDN_AN2_1 and_xor_captA_48 ( .X(ErrA[48]), .A1(inv_CAPTA_int), .A2(XorA[48]) );
VIRL_SDN_AN2_1 and_xor_captA_49 ( .X(ErrA[49]), .A1(inv_CAPTA_int), .A2(XorA[49]) );
VIRL_SDN_AN2_1 and_xor_captA_50 ( .X(ErrA[50]), .A1(inv_CAPTA_int), .A2(XorA[50]) );
VIRL_SDN_AN2_1 and_xor_captA_51 ( .X(ErrA[51]), .A1(inv_CAPTA_int), .A2(XorA[51]) );
VIRL_SDN_AN2_1 and_xor_captA_52 ( .X(ErrA[52]), .A1(inv_CAPTA_int), .A2(XorA[52]) );
VIRL_SDN_AN2_1 and_xor_captA_53 ( .X(ErrA[53]), .A1(inv_CAPTA_int), .A2(XorA[53]) );
VIRL_SDN_AN2_1 and_xor_captA_54 ( .X(ErrA[54]), .A1(inv_CAPTA_int), .A2(XorA[54]) );
VIRL_SDN_AN2_1 and_xor_captA_55 ( .X(ErrA[55]), .A1(inv_CAPTA_int), .A2(XorA[55]) );
VIRL_SDN_AN2_1 and_xor_captA_56 ( .X(ErrA[56]), .A1(inv_CAPTA_int), .A2(XorA[56]) );
VIRL_SDN_AN2_1 and_xor_captA_57 ( .X(ErrA[57]), .A1(inv_CAPTA_int), .A2(XorA[57]) );
VIRL_SDN_AN2_1 and_xor_captA_58 ( .X(ErrA[58]), .A1(inv_CAPTA_int), .A2(XorA[58]) );
VIRL_SDN_AN2_1 and_xor_captA_59 ( .X(ErrA[59]), .A1(inv_CAPTA_int), .A2(XorA[59]) );
VIRL_SDN_AN2_1 and_xor_captA_60 ( .X(ErrA[60]), .A1(inv_CAPTA_int), .A2(XorA[60]) );
VIRL_SDN_AN2_1 and_xor_captA_61 ( .X(ErrA[61]), .A1(inv_CAPTA_int), .A2(XorA[61]) );
VIRL_SDN_AN2_1 and_xor_captA_62 ( .X(ErrA[62]), .A1(inv_CAPTA_int), .A2(XorA[62]) );
VIRL_SDN_AN2_1 and_xor_captA_63 ( .X(ErrA[63]), .A1(inv_CAPTA_int), .A2(XorA[63]) );
VIRL_SDN_AN2_1 and_xor_captA_64 ( .X(ErrA[64]), .A1(inv_CAPTA_int), .A2(XorA[64]) );
VIRL_SDN_AN2_1 and_xor_captA_65 ( .X(ErrA[65]), .A1(inv_CAPTA_int), .A2(XorA[65]) );
VIRL_SDN_AN2_1 and_xor_captA_66 ( .X(ErrA[66]), .A1(inv_CAPTA_int), .A2(XorA[66]) );
VIRL_SDN_AN2_1 and_xor_captA_67 ( .X(ErrA[67]), .A1(inv_CAPTA_int), .A2(XorA[67]) );
VIRL_SDN_AN2_1 and_xor_captA_68 ( .X(ErrA[68]), .A1(inv_CAPTA_int), .A2(XorA[68]) );
VIRL_SDN_AN2_1 and_xor_captA_69 ( .X(ErrA[69]), .A1(inv_CAPTA_int), .A2(XorA[69]) );
VIRL_SDN_AN2_1 and_xor_captA_70 ( .X(ErrA[70]), .A1(inv_CAPTA_int), .A2(XorA[70]) );
VIRL_SDN_AN2_1 and_xor_captA_71 ( .X(ErrA[71]), .A1(inv_CAPTA_int), .A2(XorA[71]) );
VIRL_SDN_AN2_1 and_xor_captA_72 ( .X(ErrA[72]), .A1(inv_CAPTA_int), .A2(XorA[72]) );
VIRL_SDN_AN2_1 and_xor_captA_73 ( .X(ErrA[73]), .A1(inv_CAPTA_int), .A2(XorA[73]) );
VIRL_SDN_AN2_1 and_xor_captA_74 ( .X(ErrA[74]), .A1(inv_CAPTA_int), .A2(XorA[74]) );
VIRL_SDN_AN2_1 and_xor_captA_75 ( .X(ErrA[75]), .A1(inv_CAPTA_int), .A2(XorA[75]) );
VIRL_SDN_AN2_1 and_xor_captA_76 ( .X(ErrA[76]), .A1(inv_CAPTA_int), .A2(XorA[76]) );
VIRL_SDN_AN2_1 and_xor_captA_77 ( .X(ErrA[77]), .A1(inv_CAPTA_int), .A2(XorA[77]) );
VIRL_SDN_AN2_1 and_xor_captA_78 ( .X(ErrA[78]), .A1(inv_CAPTA_int), .A2(XorA[78]) );
VIRL_SDN_AN2_1 and_xor_captA_79 ( .X(ErrA[79]), .A1(inv_CAPTA_int), .A2(XorA[79]) );
VIRL_SDN_AN2_1 and_xor_captA_80 ( .X(ErrA[80]), .A1(inv_CAPTA_int), .A2(XorA[80]) );
VIRL_SDN_AN2_1 and_xor_captA_81 ( .X(ErrA[81]), .A1(inv_CAPTA_int), .A2(XorA[81]) );
VIRL_SDN_AN2_1 and_xor_captA_82 ( .X(ErrA[82]), .A1(inv_CAPTA_int), .A2(XorA[82]) );
VIRL_SDN_AN2_1 and_xor_captA_83 ( .X(ErrA[83]), .A1(inv_CAPTA_int), .A2(XorA[83]) );
VIRL_SDN_AN2_1 and_xor_captA_84 ( .X(ErrA[84]), .A1(inv_CAPTA_int), .A2(XorA[84]) );
VIRL_SDN_AN2_1 and_xor_captA_85 ( .X(ErrA[85]), .A1(inv_CAPTA_int), .A2(XorA[85]) );
VIRL_SDN_AN2_1 and_xor_captA_86 ( .X(ErrA[86]), .A1(inv_CAPTA_int), .A2(XorA[86]) );
VIRL_SDN_AN2_1 and_xor_captA_87 ( .X(ErrA[87]), .A1(inv_CAPTA_int), .A2(XorA[87]) );
VIRL_SDN_AN2_1 and_xor_captA_88 ( .X(ErrA[88]), .A1(inv_CAPTA_int), .A2(XorA[88]) );
VIRL_SDN_AN2_1 and_xor_captA_89 ( .X(ErrA[89]), .A1(inv_CAPTA_int), .A2(XorA[89]) );
VIRL_SDN_AN2_1 and_xor_captA_90 ( .X(ErrA[90]), .A1(inv_CAPTA_int), .A2(XorA[90]) );
VIRL_SDN_AN2_1 and_xor_captA_91 ( .X(ErrA[91]), .A1(inv_CAPTA_int), .A2(XorA[91]) );
VIRL_SDN_AN2_1 and_xor_captA_92 ( .X(ErrA[92]), .A1(inv_CAPTA_int), .A2(XorA[92]) );
VIRL_SDN_AN2_1 and_xor_captA_93 ( .X(ErrA[93]), .A1(inv_CAPTA_int), .A2(XorA[93]) );
VIRL_SDN_AN2_1 and_xor_captA_94 ( .X(ErrA[94]), .A1(inv_CAPTA_int), .A2(XorA[94]) );
VIRL_SDN_AN2_1 and_xor_captA_95 ( .X(ErrA[95]), .A1(inv_CAPTA_int), .A2(XorA[95]) );
VIRL_SDN_AN2_1 and_xor_captA_96 ( .X(ErrA[96]), .A1(inv_CAPTA_int), .A2(XorA[96]) );
VIRL_SDN_AN2_1 and_xor_captA_97 ( .X(ErrA[97]), .A1(inv_CAPTA_int), .A2(XorA[97]) );
VIRL_SDN_AN2_1 and_xor_captA_98 ( .X(ErrA[98]), .A1(inv_CAPTA_int), .A2(XorA[98]) );
VIRL_SDN_AN2_1 and_xor_captA_99 ( .X(ErrA[99]), .A1(inv_CAPTA_int), .A2(XorA[99]) );
VIRL_SDN_AN2_1 and_xor_captA_100 ( .X(ErrA[100]), .A1(inv_CAPTA_int), .A2(XorA[100]) );
VIRL_SDN_AN2_1 and_xor_captA_101 ( .X(ErrA[101]), .A1(inv_CAPTA_int), .A2(XorA[101]) );
VIRL_SDN_AN2_1 and_xor_captA_102 ( .X(ErrA[102]), .A1(inv_CAPTA_int), .A2(XorA[102]) );
VIRL_SDN_AN2_1 and_xor_captA_103 ( .X(ErrA[103]), .A1(inv_CAPTA_int), .A2(XorA[103]) );
VIRL_SDN_AN2_1 and_xor_captA_104 ( .X(ErrA[104]), .A1(inv_CAPTA_int), .A2(XorA[104]) );
VIRL_SDN_AN2_1 and_xor_captA_105 ( .X(ErrA[105]), .A1(inv_CAPTA_int), .A2(XorA[105]) );
VIRL_SDN_AN2_1 and_xor_captA_106 ( .X(ErrA[106]), .A1(inv_CAPTA_int), .A2(XorA[106]) );
VIRL_SDN_AN2_1 and_xor_captA_107 ( .X(ErrA[107]), .A1(inv_CAPTA_int), .A2(XorA[107]) );
VIRL_SDN_AN2_1 and_xor_captA_108 ( .X(ErrA[108]), .A1(inv_CAPTA_int), .A2(XorA[108]) );
VIRL_SDN_AN2_1 and_xor_captA_109 ( .X(ErrA[109]), .A1(inv_CAPTA_int), .A2(XorA[109]) );
VIRL_SDN_AN2_1 and_xor_captA_110 ( .X(ErrA[110]), .A1(inv_CAPTA_int), .A2(XorA[110]) );
VIRL_SDN_AN2_1 and_xor_captA_111 ( .X(ErrA[111]), .A1(inv_CAPTA_int), .A2(XorA[111]) );
VIRL_SDN_AN2_1 and_xor_captA_112 ( .X(ErrA[112]), .A1(inv_CAPTA_int), .A2(XorA[112]) );
VIRL_SDN_AN2_1 and_xor_captA_113 ( .X(ErrA[113]), .A1(inv_CAPTA_int), .A2(XorA[113]) );
VIRL_SDN_AN2_1 and_xor_captA_114 ( .X(ErrA[114]), .A1(inv_CAPTA_int), .A2(XorA[114]) );
VIRL_SDN_AN2_1 and_xor_captA_115 ( .X(ErrA[115]), .A1(inv_CAPTA_int), .A2(XorA[115]) );
VIRL_SDN_AN2_1 and_xor_captA_116 ( .X(ErrA[116]), .A1(inv_CAPTA_int), .A2(XorA[116]) );
VIRL_SDN_AN2_1 and_xor_captA_117 ( .X(ErrA[117]), .A1(inv_CAPTA_int), .A2(XorA[117]) );
VIRL_SDN_AN2_1 and_xor_captA_118 ( .X(ErrA[118]), .A1(inv_CAPTA_int), .A2(XorA[118]) );
VIRL_SDN_AN2_1 and_xor_captA_119 ( .X(ErrA[119]), .A1(inv_CAPTA_int), .A2(XorA[119]) );
VIRL_SDN_AN2_1 and_xor_captA_120 ( .X(ErrA[120]), .A1(inv_CAPTA_int), .A2(XorA[120]) );
VIRL_SDN_AN2_1 and_xor_captA_121 ( .X(ErrA[121]), .A1(inv_CAPTA_int), .A2(XorA[121]) );
VIRL_SDN_AN2_1 and_xor_captA_122 ( .X(ErrA[122]), .A1(inv_CAPTA_int), .A2(XorA[122]) );
VIRL_SDN_AN2_1 and_xor_captA_123 ( .X(ErrA[123]), .A1(inv_CAPTA_int), .A2(XorA[123]) );
VIRL_SDN_AN2_1 and_xor_captA_124 ( .X(ErrA[124]), .A1(inv_CAPTA_int), .A2(XorA[124]) );
VIRL_SDN_AN2_1 and_xor_captA_125 ( .X(ErrA[125]), .A1(inv_CAPTA_int), .A2(XorA[125]) );
VIRL_SDN_AN2_1 and_xor_captA_126 ( .X(ErrA[126]), .A1(inv_CAPTA_int), .A2(XorA[126]) );
VIRL_SDN_AN2_1 and_xor_captA_127 ( .X(ErrA[127]), .A1(inv_CAPTA_int), .A2(XorA[127]) );
VIRL_SDN_AN2_1 and_xor_captA_128 ( .X(ErrA[128]), .A1(inv_CAPTA_int), .A2(XorA[128]) );
VIRL_SDN_AN2_1 and_xor_captA_129 ( .X(ErrA[129]), .A1(inv_CAPTA_int), .A2(XorA[129]) );
VIRL_SDN_AN2_1 and_xor_captA_130 ( .X(ErrA[130]), .A1(inv_CAPTA_int), .A2(XorA[130]) );
VIRL_SDN_AN2_1 and_xor_captA_131 ( .X(ErrA[131]), .A1(inv_CAPTA_int), .A2(XorA[131]) );
VIRL_SDN_AN2_1 and_xor_captA_132 ( .X(ErrA[132]), .A1(inv_CAPTA_int), .A2(XorA[132]) );
VIRL_SDN_AN2_1 and_xor_captA_133 ( .X(ErrA[133]), .A1(inv_CAPTA_int), .A2(XorA[133]) );
VIRL_SDN_AN2_1 and_xor_captA_134 ( .X(ErrA[134]), .A1(inv_CAPTA_int), .A2(XorA[134]) );
VIRL_SDN_AN2_1 and_xor_captA_135 ( .X(ErrA[135]), .A1(inv_CAPTA_int), .A2(XorA[135]) );
VIRL_SDN_AN2_1 and_xor_captA_136 ( .X(ErrA[136]), .A1(inv_CAPTA_int), .A2(XorA[136]) );
VIRL_SDN_AN2_1 and_xor_captA_137 ( .X(ErrA[137]), .A1(inv_CAPTA_int), .A2(XorA[137]) );
VIRL_SDN_AN2_1 and_xor_captA_138 ( .X(ErrA[138]), .A1(inv_CAPTA_int), .A2(XorA[138]) );
VIRL_SDN_AN2_1 and_xor_captA_139 ( .X(ErrA[139]), .A1(inv_CAPTA_int), .A2(XorA[139]) );
VIRL_SDN_AN2_1 and_xor_captA_140 ( .X(ErrA[140]), .A1(inv_CAPTA_int), .A2(XorA[140]) );
VIRL_SDN_AN2_1 and_xor_captA_141 ( .X(ErrA[141]), .A1(inv_CAPTA_int), .A2(XorA[141]) );
VIRL_SDN_AN2_1 and_xor_captA_142 ( .X(ErrA[142]), .A1(inv_CAPTA_int), .A2(XorA[142]) );
VIRL_SDN_AN2_1 and_xor_captA_143 ( .X(ErrA[143]), .A1(inv_CAPTA_int), .A2(XorA[143]) );
VIRL_SDN_AN2_1 and_xor_captA_144 ( .X(ErrA[144]), .A1(inv_CAPTA_int), .A2(XorA[144]) );
VIRL_SDN_AN2_1 and_xor_captA_145 ( .X(ErrA[145]), .A1(inv_CAPTA_int), .A2(XorA[145]) );
VIRL_SDN_AN2_1 and_xor_captA_146 ( .X(ErrA[146]), .A1(inv_CAPTA_int), .A2(XorA[146]) );
VIRL_SDN_AN2_1 and_xor_captA_147 ( .X(ErrA[147]), .A1(inv_CAPTA_int), .A2(XorA[147]) );
VIRL_SDN_AN2_1 and_xor_captA_148 ( .X(ErrA[148]), .A1(inv_CAPTA_int), .A2(XorA[148]) );
VIRL_SDN_AN2_1 and_xor_captA_149 ( .X(ErrA[149]), .A1(inv_CAPTA_int), .A2(XorA[149]) );
VIRL_SDN_AN2_1 and_xor_captA_150 ( .X(ErrA[150]), .A1(inv_CAPTA_int), .A2(XorA[150]) );
VIRL_SDN_AN2_1 and_xor_captA_151 ( .X(ErrA[151]), .A1(inv_CAPTA_int), .A2(XorA[151]) );
VIRL_SDN_AN2_1 and_xor_captA_152 ( .X(ErrA[152]), .A1(inv_CAPTA_int), .A2(XorA[152]) );
VIRL_SDN_AN2_1 and_xor_captA_153 ( .X(ErrA[153]), .A1(inv_CAPTA_int), .A2(XorA[153]) );
VIRL_SDN_AN2_1 and_xor_captA_154 ( .X(ErrA[154]), .A1(inv_CAPTA_int), .A2(XorA[154]) );
VIRL_SDN_AN2_1 and_xor_captA_155 ( .X(ErrA[155]), .A1(inv_CAPTA_int), .A2(XorA[155]) );
VIRL_SDN_AN2_1 and_xor_captA_156 ( .X(ErrA[156]), .A1(inv_CAPTA_int), .A2(XorA[156]) );
VIRL_SDN_AN2_1 and_xor_captA_157 ( .X(ErrA[157]), .A1(inv_CAPTA_int), .A2(XorA[157]) );
VIRL_SDN_AN2_1 and_xor_captA_158 ( .X(ErrA[158]), .A1(inv_CAPTA_int), .A2(XorA[158]) );
VIRL_SDN_AN2_1 and_xor_captA_159 ( .X(ErrA[159]), .A1(inv_CAPTA_int), .A2(XorA[159]) );

VIRL_SDN_AN2_1 and_sticky_outA_0 ( .X(sticky_outA[0]), .A1(STICKYA_int), .A2(QPA_int[0]) );
VIRL_SDN_AN2_1 and_sticky_outA_1 ( .X(sticky_outA[1]), .A1(STICKYA_int), .A2(QPA_int[1]) );
VIRL_SDN_AN2_1 and_sticky_outA_2 ( .X(sticky_outA[2]), .A1(STICKYA_int), .A2(QPA_int[2]) );
VIRL_SDN_AN2_1 and_sticky_outA_3 ( .X(sticky_outA[3]), .A1(STICKYA_int), .A2(QPA_int[3]) );
VIRL_SDN_AN2_1 and_sticky_outA_4 ( .X(sticky_outA[4]), .A1(STICKYA_int), .A2(QPA_int[4]) );
VIRL_SDN_AN2_1 and_sticky_outA_5 ( .X(sticky_outA[5]), .A1(STICKYA_int), .A2(QPA_int[5]) );
VIRL_SDN_AN2_1 and_sticky_outA_6 ( .X(sticky_outA[6]), .A1(STICKYA_int), .A2(QPA_int[6]) );
VIRL_SDN_AN2_1 and_sticky_outA_7 ( .X(sticky_outA[7]), .A1(STICKYA_int), .A2(QPA_int[7]) );
VIRL_SDN_AN2_1 and_sticky_outA_8 ( .X(sticky_outA[8]), .A1(STICKYA_int), .A2(QPA_int[8]) );
VIRL_SDN_AN2_1 and_sticky_outA_9 ( .X(sticky_outA[9]), .A1(STICKYA_int), .A2(QPA_int[9]) );
VIRL_SDN_AN2_1 and_sticky_outA_10 ( .X(sticky_outA[10]), .A1(STICKYA_int), .A2(QPA_int[10]) );
VIRL_SDN_AN2_1 and_sticky_outA_11 ( .X(sticky_outA[11]), .A1(STICKYA_int), .A2(QPA_int[11]) );
VIRL_SDN_AN2_1 and_sticky_outA_12 ( .X(sticky_outA[12]), .A1(STICKYA_int), .A2(QPA_int[12]) );
VIRL_SDN_AN2_1 and_sticky_outA_13 ( .X(sticky_outA[13]), .A1(STICKYA_int), .A2(QPA_int[13]) );
VIRL_SDN_AN2_1 and_sticky_outA_14 ( .X(sticky_outA[14]), .A1(STICKYA_int), .A2(QPA_int[14]) );
VIRL_SDN_AN2_1 and_sticky_outA_15 ( .X(sticky_outA[15]), .A1(STICKYA_int), .A2(QPA_int[15]) );
VIRL_SDN_AN2_1 and_sticky_outA_16 ( .X(sticky_outA[16]), .A1(STICKYA_int), .A2(QPA_int[16]) );
VIRL_SDN_AN2_1 and_sticky_outA_17 ( .X(sticky_outA[17]), .A1(STICKYA_int), .A2(QPA_int[17]) );
VIRL_SDN_AN2_1 and_sticky_outA_18 ( .X(sticky_outA[18]), .A1(STICKYA_int), .A2(QPA_int[18]) );
VIRL_SDN_AN2_1 and_sticky_outA_19 ( .X(sticky_outA[19]), .A1(STICKYA_int), .A2(QPA_int[19]) );
VIRL_SDN_AN2_1 and_sticky_outA_20 ( .X(sticky_outA[20]), .A1(STICKYA_int), .A2(QPA_int[20]) );
VIRL_SDN_AN2_1 and_sticky_outA_21 ( .X(sticky_outA[21]), .A1(STICKYA_int), .A2(QPA_int[21]) );
VIRL_SDN_AN2_1 and_sticky_outA_22 ( .X(sticky_outA[22]), .A1(STICKYA_int), .A2(QPA_int[22]) );
VIRL_SDN_AN2_1 and_sticky_outA_23 ( .X(sticky_outA[23]), .A1(STICKYA_int), .A2(QPA_int[23]) );
VIRL_SDN_AN2_1 and_sticky_outA_24 ( .X(sticky_outA[24]), .A1(STICKYA_int), .A2(QPA_int[24]) );
VIRL_SDN_AN2_1 and_sticky_outA_25 ( .X(sticky_outA[25]), .A1(STICKYA_int), .A2(QPA_int[25]) );
VIRL_SDN_AN2_1 and_sticky_outA_26 ( .X(sticky_outA[26]), .A1(STICKYA_int), .A2(QPA_int[26]) );
VIRL_SDN_AN2_1 and_sticky_outA_27 ( .X(sticky_outA[27]), .A1(STICKYA_int), .A2(QPA_int[27]) );
VIRL_SDN_AN2_1 and_sticky_outA_28 ( .X(sticky_outA[28]), .A1(STICKYA_int), .A2(QPA_int[28]) );
VIRL_SDN_AN2_1 and_sticky_outA_29 ( .X(sticky_outA[29]), .A1(STICKYA_int), .A2(QPA_int[29]) );
VIRL_SDN_AN2_1 and_sticky_outA_30 ( .X(sticky_outA[30]), .A1(STICKYA_int), .A2(QPA_int[30]) );
VIRL_SDN_AN2_1 and_sticky_outA_31 ( .X(sticky_outA[31]), .A1(STICKYA_int), .A2(QPA_int[31]) );
VIRL_SDN_AN2_1 and_sticky_outA_32 ( .X(sticky_outA[32]), .A1(STICKYA_int), .A2(QPA_int[32]) );
VIRL_SDN_AN2_1 and_sticky_outA_33 ( .X(sticky_outA[33]), .A1(STICKYA_int), .A2(QPA_int[33]) );
VIRL_SDN_AN2_1 and_sticky_outA_34 ( .X(sticky_outA[34]), .A1(STICKYA_int), .A2(QPA_int[34]) );
VIRL_SDN_AN2_1 and_sticky_outA_35 ( .X(sticky_outA[35]), .A1(STICKYA_int), .A2(QPA_int[35]) );
VIRL_SDN_AN2_1 and_sticky_outA_36 ( .X(sticky_outA[36]), .A1(STICKYA_int), .A2(QPA_int[36]) );
VIRL_SDN_AN2_1 and_sticky_outA_37 ( .X(sticky_outA[37]), .A1(STICKYA_int), .A2(QPA_int[37]) );
VIRL_SDN_AN2_1 and_sticky_outA_38 ( .X(sticky_outA[38]), .A1(STICKYA_int), .A2(QPA_int[38]) );
VIRL_SDN_AN2_1 and_sticky_outA_39 ( .X(sticky_outA[39]), .A1(STICKYA_int), .A2(QPA_int[39]) );
VIRL_SDN_AN2_1 and_sticky_outA_40 ( .X(sticky_outA[40]), .A1(STICKYA_int), .A2(QPA_int[40]) );
VIRL_SDN_AN2_1 and_sticky_outA_41 ( .X(sticky_outA[41]), .A1(STICKYA_int), .A2(QPA_int[41]) );
VIRL_SDN_AN2_1 and_sticky_outA_42 ( .X(sticky_outA[42]), .A1(STICKYA_int), .A2(QPA_int[42]) );
VIRL_SDN_AN2_1 and_sticky_outA_43 ( .X(sticky_outA[43]), .A1(STICKYA_int), .A2(QPA_int[43]) );
VIRL_SDN_AN2_1 and_sticky_outA_44 ( .X(sticky_outA[44]), .A1(STICKYA_int), .A2(QPA_int[44]) );
VIRL_SDN_AN2_1 and_sticky_outA_45 ( .X(sticky_outA[45]), .A1(STICKYA_int), .A2(QPA_int[45]) );
VIRL_SDN_AN2_1 and_sticky_outA_46 ( .X(sticky_outA[46]), .A1(STICKYA_int), .A2(QPA_int[46]) );
VIRL_SDN_AN2_1 and_sticky_outA_47 ( .X(sticky_outA[47]), .A1(STICKYA_int), .A2(QPA_int[47]) );
VIRL_SDN_AN2_1 and_sticky_outA_48 ( .X(sticky_outA[48]), .A1(STICKYA_int), .A2(QPA_int[48]) );
VIRL_SDN_AN2_1 and_sticky_outA_49 ( .X(sticky_outA[49]), .A1(STICKYA_int), .A2(QPA_int[49]) );
VIRL_SDN_AN2_1 and_sticky_outA_50 ( .X(sticky_outA[50]), .A1(STICKYA_int), .A2(QPA_int[50]) );
VIRL_SDN_AN2_1 and_sticky_outA_51 ( .X(sticky_outA[51]), .A1(STICKYA_int), .A2(QPA_int[51]) );
VIRL_SDN_AN2_1 and_sticky_outA_52 ( .X(sticky_outA[52]), .A1(STICKYA_int), .A2(QPA_int[52]) );
VIRL_SDN_AN2_1 and_sticky_outA_53 ( .X(sticky_outA[53]), .A1(STICKYA_int), .A2(QPA_int[53]) );
VIRL_SDN_AN2_1 and_sticky_outA_54 ( .X(sticky_outA[54]), .A1(STICKYA_int), .A2(QPA_int[54]) );
VIRL_SDN_AN2_1 and_sticky_outA_55 ( .X(sticky_outA[55]), .A1(STICKYA_int), .A2(QPA_int[55]) );
VIRL_SDN_AN2_1 and_sticky_outA_56 ( .X(sticky_outA[56]), .A1(STICKYA_int), .A2(QPA_int[56]) );
VIRL_SDN_AN2_1 and_sticky_outA_57 ( .X(sticky_outA[57]), .A1(STICKYA_int), .A2(QPA_int[57]) );
VIRL_SDN_AN2_1 and_sticky_outA_58 ( .X(sticky_outA[58]), .A1(STICKYA_int), .A2(QPA_int[58]) );
VIRL_SDN_AN2_1 and_sticky_outA_59 ( .X(sticky_outA[59]), .A1(STICKYA_int), .A2(QPA_int[59]) );
VIRL_SDN_AN2_1 and_sticky_outA_60 ( .X(sticky_outA[60]), .A1(STICKYA_int), .A2(QPA_int[60]) );
VIRL_SDN_AN2_1 and_sticky_outA_61 ( .X(sticky_outA[61]), .A1(STICKYA_int), .A2(QPA_int[61]) );
VIRL_SDN_AN2_1 and_sticky_outA_62 ( .X(sticky_outA[62]), .A1(STICKYA_int), .A2(QPA_int[62]) );
VIRL_SDN_AN2_1 and_sticky_outA_63 ( .X(sticky_outA[63]), .A1(STICKYA_int), .A2(QPA_int[63]) );
VIRL_SDN_AN2_1 and_sticky_outA_64 ( .X(sticky_outA[64]), .A1(STICKYA_int), .A2(QPA_int[64]) );
VIRL_SDN_AN2_1 and_sticky_outA_65 ( .X(sticky_outA[65]), .A1(STICKYA_int), .A2(QPA_int[65]) );
VIRL_SDN_AN2_1 and_sticky_outA_66 ( .X(sticky_outA[66]), .A1(STICKYA_int), .A2(QPA_int[66]) );
VIRL_SDN_AN2_1 and_sticky_outA_67 ( .X(sticky_outA[67]), .A1(STICKYA_int), .A2(QPA_int[67]) );
VIRL_SDN_AN2_1 and_sticky_outA_68 ( .X(sticky_outA[68]), .A1(STICKYA_int), .A2(QPA_int[68]) );
VIRL_SDN_AN2_1 and_sticky_outA_69 ( .X(sticky_outA[69]), .A1(STICKYA_int), .A2(QPA_int[69]) );
VIRL_SDN_AN2_1 and_sticky_outA_70 ( .X(sticky_outA[70]), .A1(STICKYA_int), .A2(QPA_int[70]) );
VIRL_SDN_AN2_1 and_sticky_outA_71 ( .X(sticky_outA[71]), .A1(STICKYA_int), .A2(QPA_int[71]) );
VIRL_SDN_AN2_1 and_sticky_outA_72 ( .X(sticky_outA[72]), .A1(STICKYA_int), .A2(QPA_int[72]) );
VIRL_SDN_AN2_1 and_sticky_outA_73 ( .X(sticky_outA[73]), .A1(STICKYA_int), .A2(QPA_int[73]) );
VIRL_SDN_AN2_1 and_sticky_outA_74 ( .X(sticky_outA[74]), .A1(STICKYA_int), .A2(QPA_int[74]) );
VIRL_SDN_AN2_1 and_sticky_outA_75 ( .X(sticky_outA[75]), .A1(STICKYA_int), .A2(QPA_int[75]) );
VIRL_SDN_AN2_1 and_sticky_outA_76 ( .X(sticky_outA[76]), .A1(STICKYA_int), .A2(QPA_int[76]) );
VIRL_SDN_AN2_1 and_sticky_outA_77 ( .X(sticky_outA[77]), .A1(STICKYA_int), .A2(QPA_int[77]) );
VIRL_SDN_AN2_1 and_sticky_outA_78 ( .X(sticky_outA[78]), .A1(STICKYA_int), .A2(QPA_int[78]) );
VIRL_SDN_AN2_1 and_sticky_outA_79 ( .X(sticky_outA[79]), .A1(STICKYA_int), .A2(QPA_int[79]) );
VIRL_SDN_AN2_1 and_sticky_outA_80 ( .X(sticky_outA[80]), .A1(STICKYA_int), .A2(QPA_int[80]) );
VIRL_SDN_AN2_1 and_sticky_outA_81 ( .X(sticky_outA[81]), .A1(STICKYA_int), .A2(QPA_int[81]) );
VIRL_SDN_AN2_1 and_sticky_outA_82 ( .X(sticky_outA[82]), .A1(STICKYA_int), .A2(QPA_int[82]) );
VIRL_SDN_AN2_1 and_sticky_outA_83 ( .X(sticky_outA[83]), .A1(STICKYA_int), .A2(QPA_int[83]) );
VIRL_SDN_AN2_1 and_sticky_outA_84 ( .X(sticky_outA[84]), .A1(STICKYA_int), .A2(QPA_int[84]) );
VIRL_SDN_AN2_1 and_sticky_outA_85 ( .X(sticky_outA[85]), .A1(STICKYA_int), .A2(QPA_int[85]) );
VIRL_SDN_AN2_1 and_sticky_outA_86 ( .X(sticky_outA[86]), .A1(STICKYA_int), .A2(QPA_int[86]) );
VIRL_SDN_AN2_1 and_sticky_outA_87 ( .X(sticky_outA[87]), .A1(STICKYA_int), .A2(QPA_int[87]) );
VIRL_SDN_AN2_1 and_sticky_outA_88 ( .X(sticky_outA[88]), .A1(STICKYA_int), .A2(QPA_int[88]) );
VIRL_SDN_AN2_1 and_sticky_outA_89 ( .X(sticky_outA[89]), .A1(STICKYA_int), .A2(QPA_int[89]) );
VIRL_SDN_AN2_1 and_sticky_outA_90 ( .X(sticky_outA[90]), .A1(STICKYA_int), .A2(QPA_int[90]) );
VIRL_SDN_AN2_1 and_sticky_outA_91 ( .X(sticky_outA[91]), .A1(STICKYA_int), .A2(QPA_int[91]) );
VIRL_SDN_AN2_1 and_sticky_outA_92 ( .X(sticky_outA[92]), .A1(STICKYA_int), .A2(QPA_int[92]) );
VIRL_SDN_AN2_1 and_sticky_outA_93 ( .X(sticky_outA[93]), .A1(STICKYA_int), .A2(QPA_int[93]) );
VIRL_SDN_AN2_1 and_sticky_outA_94 ( .X(sticky_outA[94]), .A1(STICKYA_int), .A2(QPA_int[94]) );
VIRL_SDN_AN2_1 and_sticky_outA_95 ( .X(sticky_outA[95]), .A1(STICKYA_int), .A2(QPA_int[95]) );
VIRL_SDN_AN2_1 and_sticky_outA_96 ( .X(sticky_outA[96]), .A1(STICKYA_int), .A2(QPA_int[96]) );
VIRL_SDN_AN2_1 and_sticky_outA_97 ( .X(sticky_outA[97]), .A1(STICKYA_int), .A2(QPA_int[97]) );
VIRL_SDN_AN2_1 and_sticky_outA_98 ( .X(sticky_outA[98]), .A1(STICKYA_int), .A2(QPA_int[98]) );
VIRL_SDN_AN2_1 and_sticky_outA_99 ( .X(sticky_outA[99]), .A1(STICKYA_int), .A2(QPA_int[99]) );
VIRL_SDN_AN2_1 and_sticky_outA_100 ( .X(sticky_outA[100]), .A1(STICKYA_int), .A2(QPA_int[100]) );
VIRL_SDN_AN2_1 and_sticky_outA_101 ( .X(sticky_outA[101]), .A1(STICKYA_int), .A2(QPA_int[101]) );
VIRL_SDN_AN2_1 and_sticky_outA_102 ( .X(sticky_outA[102]), .A1(STICKYA_int), .A2(QPA_int[102]) );
VIRL_SDN_AN2_1 and_sticky_outA_103 ( .X(sticky_outA[103]), .A1(STICKYA_int), .A2(QPA_int[103]) );
VIRL_SDN_AN2_1 and_sticky_outA_104 ( .X(sticky_outA[104]), .A1(STICKYA_int), .A2(QPA_int[104]) );
VIRL_SDN_AN2_1 and_sticky_outA_105 ( .X(sticky_outA[105]), .A1(STICKYA_int), .A2(QPA_int[105]) );
VIRL_SDN_AN2_1 and_sticky_outA_106 ( .X(sticky_outA[106]), .A1(STICKYA_int), .A2(QPA_int[106]) );
VIRL_SDN_AN2_1 and_sticky_outA_107 ( .X(sticky_outA[107]), .A1(STICKYA_int), .A2(QPA_int[107]) );
VIRL_SDN_AN2_1 and_sticky_outA_108 ( .X(sticky_outA[108]), .A1(STICKYA_int), .A2(QPA_int[108]) );
VIRL_SDN_AN2_1 and_sticky_outA_109 ( .X(sticky_outA[109]), .A1(STICKYA_int), .A2(QPA_int[109]) );
VIRL_SDN_AN2_1 and_sticky_outA_110 ( .X(sticky_outA[110]), .A1(STICKYA_int), .A2(QPA_int[110]) );
VIRL_SDN_AN2_1 and_sticky_outA_111 ( .X(sticky_outA[111]), .A1(STICKYA_int), .A2(QPA_int[111]) );
VIRL_SDN_AN2_1 and_sticky_outA_112 ( .X(sticky_outA[112]), .A1(STICKYA_int), .A2(QPA_int[112]) );
VIRL_SDN_AN2_1 and_sticky_outA_113 ( .X(sticky_outA[113]), .A1(STICKYA_int), .A2(QPA_int[113]) );
VIRL_SDN_AN2_1 and_sticky_outA_114 ( .X(sticky_outA[114]), .A1(STICKYA_int), .A2(QPA_int[114]) );
VIRL_SDN_AN2_1 and_sticky_outA_115 ( .X(sticky_outA[115]), .A1(STICKYA_int), .A2(QPA_int[115]) );
VIRL_SDN_AN2_1 and_sticky_outA_116 ( .X(sticky_outA[116]), .A1(STICKYA_int), .A2(QPA_int[116]) );
VIRL_SDN_AN2_1 and_sticky_outA_117 ( .X(sticky_outA[117]), .A1(STICKYA_int), .A2(QPA_int[117]) );
VIRL_SDN_AN2_1 and_sticky_outA_118 ( .X(sticky_outA[118]), .A1(STICKYA_int), .A2(QPA_int[118]) );
VIRL_SDN_AN2_1 and_sticky_outA_119 ( .X(sticky_outA[119]), .A1(STICKYA_int), .A2(QPA_int[119]) );
VIRL_SDN_AN2_1 and_sticky_outA_120 ( .X(sticky_outA[120]), .A1(STICKYA_int), .A2(QPA_int[120]) );
VIRL_SDN_AN2_1 and_sticky_outA_121 ( .X(sticky_outA[121]), .A1(STICKYA_int), .A2(QPA_int[121]) );
VIRL_SDN_AN2_1 and_sticky_outA_122 ( .X(sticky_outA[122]), .A1(STICKYA_int), .A2(QPA_int[122]) );
VIRL_SDN_AN2_1 and_sticky_outA_123 ( .X(sticky_outA[123]), .A1(STICKYA_int), .A2(QPA_int[123]) );
VIRL_SDN_AN2_1 and_sticky_outA_124 ( .X(sticky_outA[124]), .A1(STICKYA_int), .A2(QPA_int[124]) );
VIRL_SDN_AN2_1 and_sticky_outA_125 ( .X(sticky_outA[125]), .A1(STICKYA_int), .A2(QPA_int[125]) );
VIRL_SDN_AN2_1 and_sticky_outA_126 ( .X(sticky_outA[126]), .A1(STICKYA_int), .A2(QPA_int[126]) );
VIRL_SDN_AN2_1 and_sticky_outA_127 ( .X(sticky_outA[127]), .A1(STICKYA_int), .A2(QPA_int[127]) );
VIRL_SDN_AN2_1 and_sticky_outA_128 ( .X(sticky_outA[128]), .A1(STICKYA_int), .A2(QPA_int[128]) );
VIRL_SDN_AN2_1 and_sticky_outA_129 ( .X(sticky_outA[129]), .A1(STICKYA_int), .A2(QPA_int[129]) );
VIRL_SDN_AN2_1 and_sticky_outA_130 ( .X(sticky_outA[130]), .A1(STICKYA_int), .A2(QPA_int[130]) );
VIRL_SDN_AN2_1 and_sticky_outA_131 ( .X(sticky_outA[131]), .A1(STICKYA_int), .A2(QPA_int[131]) );
VIRL_SDN_AN2_1 and_sticky_outA_132 ( .X(sticky_outA[132]), .A1(STICKYA_int), .A2(QPA_int[132]) );
VIRL_SDN_AN2_1 and_sticky_outA_133 ( .X(sticky_outA[133]), .A1(STICKYA_int), .A2(QPA_int[133]) );
VIRL_SDN_AN2_1 and_sticky_outA_134 ( .X(sticky_outA[134]), .A1(STICKYA_int), .A2(QPA_int[134]) );
VIRL_SDN_AN2_1 and_sticky_outA_135 ( .X(sticky_outA[135]), .A1(STICKYA_int), .A2(QPA_int[135]) );
VIRL_SDN_AN2_1 and_sticky_outA_136 ( .X(sticky_outA[136]), .A1(STICKYA_int), .A2(QPA_int[136]) );
VIRL_SDN_AN2_1 and_sticky_outA_137 ( .X(sticky_outA[137]), .A1(STICKYA_int), .A2(QPA_int[137]) );
VIRL_SDN_AN2_1 and_sticky_outA_138 ( .X(sticky_outA[138]), .A1(STICKYA_int), .A2(QPA_int[138]) );
VIRL_SDN_AN2_1 and_sticky_outA_139 ( .X(sticky_outA[139]), .A1(STICKYA_int), .A2(QPA_int[139]) );
VIRL_SDN_AN2_1 and_sticky_outA_140 ( .X(sticky_outA[140]), .A1(STICKYA_int), .A2(QPA_int[140]) );
VIRL_SDN_AN2_1 and_sticky_outA_141 ( .X(sticky_outA[141]), .A1(STICKYA_int), .A2(QPA_int[141]) );
VIRL_SDN_AN2_1 and_sticky_outA_142 ( .X(sticky_outA[142]), .A1(STICKYA_int), .A2(QPA_int[142]) );
VIRL_SDN_AN2_1 and_sticky_outA_143 ( .X(sticky_outA[143]), .A1(STICKYA_int), .A2(QPA_int[143]) );
VIRL_SDN_AN2_1 and_sticky_outA_144 ( .X(sticky_outA[144]), .A1(STICKYA_int), .A2(QPA_int[144]) );
VIRL_SDN_AN2_1 and_sticky_outA_145 ( .X(sticky_outA[145]), .A1(STICKYA_int), .A2(QPA_int[145]) );
VIRL_SDN_AN2_1 and_sticky_outA_146 ( .X(sticky_outA[146]), .A1(STICKYA_int), .A2(QPA_int[146]) );
VIRL_SDN_AN2_1 and_sticky_outA_147 ( .X(sticky_outA[147]), .A1(STICKYA_int), .A2(QPA_int[147]) );
VIRL_SDN_AN2_1 and_sticky_outA_148 ( .X(sticky_outA[148]), .A1(STICKYA_int), .A2(QPA_int[148]) );
VIRL_SDN_AN2_1 and_sticky_outA_149 ( .X(sticky_outA[149]), .A1(STICKYA_int), .A2(QPA_int[149]) );
VIRL_SDN_AN2_1 and_sticky_outA_150 ( .X(sticky_outA[150]), .A1(STICKYA_int), .A2(QPA_int[150]) );
VIRL_SDN_AN2_1 and_sticky_outA_151 ( .X(sticky_outA[151]), .A1(STICKYA_int), .A2(QPA_int[151]) );
VIRL_SDN_AN2_1 and_sticky_outA_152 ( .X(sticky_outA[152]), .A1(STICKYA_int), .A2(QPA_int[152]) );
VIRL_SDN_AN2_1 and_sticky_outA_153 ( .X(sticky_outA[153]), .A1(STICKYA_int), .A2(QPA_int[153]) );
VIRL_SDN_AN2_1 and_sticky_outA_154 ( .X(sticky_outA[154]), .A1(STICKYA_int), .A2(QPA_int[154]) );
VIRL_SDN_AN2_1 and_sticky_outA_155 ( .X(sticky_outA[155]), .A1(STICKYA_int), .A2(QPA_int[155]) );
VIRL_SDN_AN2_1 and_sticky_outA_156 ( .X(sticky_outA[156]), .A1(STICKYA_int), .A2(QPA_int[156]) );
VIRL_SDN_AN2_1 and_sticky_outA_157 ( .X(sticky_outA[157]), .A1(STICKYA_int), .A2(QPA_int[157]) );
VIRL_SDN_AN2_1 and_sticky_outA_158 ( .X(sticky_outA[158]), .A1(STICKYA_int), .A2(QPA_int[158]) );
VIRL_SDN_AN2_1 and_sticky_outA_159 ( .X(sticky_outA[159]), .A1(STICKYA_int), .A2(QPA_int[159]) );

VIRL_SDN_OR2_1 or_err_stickyA_0 ( .X(er_styA[0]), .A1(sticky_outA[0]), .A2(ErrA[0]) );
VIRL_SDN_OR2_1 or_err_stickyA_1 ( .X(er_styA[1]), .A1(sticky_outA[1]), .A2(ErrA[1]) );
VIRL_SDN_OR2_1 or_err_stickyA_2 ( .X(er_styA[2]), .A1(sticky_outA[2]), .A2(ErrA[2]) );
VIRL_SDN_OR2_1 or_err_stickyA_3 ( .X(er_styA[3]), .A1(sticky_outA[3]), .A2(ErrA[3]) );
VIRL_SDN_OR2_1 or_err_stickyA_4 ( .X(er_styA[4]), .A1(sticky_outA[4]), .A2(ErrA[4]) );
VIRL_SDN_OR2_1 or_err_stickyA_5 ( .X(er_styA[5]), .A1(sticky_outA[5]), .A2(ErrA[5]) );
VIRL_SDN_OR2_1 or_err_stickyA_6 ( .X(er_styA[6]), .A1(sticky_outA[6]), .A2(ErrA[6]) );
VIRL_SDN_OR2_1 or_err_stickyA_7 ( .X(er_styA[7]), .A1(sticky_outA[7]), .A2(ErrA[7]) );
VIRL_SDN_OR2_1 or_err_stickyA_8 ( .X(er_styA[8]), .A1(sticky_outA[8]), .A2(ErrA[8]) );
VIRL_SDN_OR2_1 or_err_stickyA_9 ( .X(er_styA[9]), .A1(sticky_outA[9]), .A2(ErrA[9]) );
VIRL_SDN_OR2_1 or_err_stickyA_10 ( .X(er_styA[10]), .A1(sticky_outA[10]), .A2(ErrA[10]) );
VIRL_SDN_OR2_1 or_err_stickyA_11 ( .X(er_styA[11]), .A1(sticky_outA[11]), .A2(ErrA[11]) );
VIRL_SDN_OR2_1 or_err_stickyA_12 ( .X(er_styA[12]), .A1(sticky_outA[12]), .A2(ErrA[12]) );
VIRL_SDN_OR2_1 or_err_stickyA_13 ( .X(er_styA[13]), .A1(sticky_outA[13]), .A2(ErrA[13]) );
VIRL_SDN_OR2_1 or_err_stickyA_14 ( .X(er_styA[14]), .A1(sticky_outA[14]), .A2(ErrA[14]) );
VIRL_SDN_OR2_1 or_err_stickyA_15 ( .X(er_styA[15]), .A1(sticky_outA[15]), .A2(ErrA[15]) );
VIRL_SDN_OR2_1 or_err_stickyA_16 ( .X(er_styA[16]), .A1(sticky_outA[16]), .A2(ErrA[16]) );
VIRL_SDN_OR2_1 or_err_stickyA_17 ( .X(er_styA[17]), .A1(sticky_outA[17]), .A2(ErrA[17]) );
VIRL_SDN_OR2_1 or_err_stickyA_18 ( .X(er_styA[18]), .A1(sticky_outA[18]), .A2(ErrA[18]) );
VIRL_SDN_OR2_1 or_err_stickyA_19 ( .X(er_styA[19]), .A1(sticky_outA[19]), .A2(ErrA[19]) );
VIRL_SDN_OR2_1 or_err_stickyA_20 ( .X(er_styA[20]), .A1(sticky_outA[20]), .A2(ErrA[20]) );
VIRL_SDN_OR2_1 or_err_stickyA_21 ( .X(er_styA[21]), .A1(sticky_outA[21]), .A2(ErrA[21]) );
VIRL_SDN_OR2_1 or_err_stickyA_22 ( .X(er_styA[22]), .A1(sticky_outA[22]), .A2(ErrA[22]) );
VIRL_SDN_OR2_1 or_err_stickyA_23 ( .X(er_styA[23]), .A1(sticky_outA[23]), .A2(ErrA[23]) );
VIRL_SDN_OR2_1 or_err_stickyA_24 ( .X(er_styA[24]), .A1(sticky_outA[24]), .A2(ErrA[24]) );
VIRL_SDN_OR2_1 or_err_stickyA_25 ( .X(er_styA[25]), .A1(sticky_outA[25]), .A2(ErrA[25]) );
VIRL_SDN_OR2_1 or_err_stickyA_26 ( .X(er_styA[26]), .A1(sticky_outA[26]), .A2(ErrA[26]) );
VIRL_SDN_OR2_1 or_err_stickyA_27 ( .X(er_styA[27]), .A1(sticky_outA[27]), .A2(ErrA[27]) );
VIRL_SDN_OR2_1 or_err_stickyA_28 ( .X(er_styA[28]), .A1(sticky_outA[28]), .A2(ErrA[28]) );
VIRL_SDN_OR2_1 or_err_stickyA_29 ( .X(er_styA[29]), .A1(sticky_outA[29]), .A2(ErrA[29]) );
VIRL_SDN_OR2_1 or_err_stickyA_30 ( .X(er_styA[30]), .A1(sticky_outA[30]), .A2(ErrA[30]) );
VIRL_SDN_OR2_1 or_err_stickyA_31 ( .X(er_styA[31]), .A1(sticky_outA[31]), .A2(ErrA[31]) );
VIRL_SDN_OR2_1 or_err_stickyA_32 ( .X(er_styA[32]), .A1(sticky_outA[32]), .A2(ErrA[32]) );
VIRL_SDN_OR2_1 or_err_stickyA_33 ( .X(er_styA[33]), .A1(sticky_outA[33]), .A2(ErrA[33]) );
VIRL_SDN_OR2_1 or_err_stickyA_34 ( .X(er_styA[34]), .A1(sticky_outA[34]), .A2(ErrA[34]) );
VIRL_SDN_OR2_1 or_err_stickyA_35 ( .X(er_styA[35]), .A1(sticky_outA[35]), .A2(ErrA[35]) );
VIRL_SDN_OR2_1 or_err_stickyA_36 ( .X(er_styA[36]), .A1(sticky_outA[36]), .A2(ErrA[36]) );
VIRL_SDN_OR2_1 or_err_stickyA_37 ( .X(er_styA[37]), .A1(sticky_outA[37]), .A2(ErrA[37]) );
VIRL_SDN_OR2_1 or_err_stickyA_38 ( .X(er_styA[38]), .A1(sticky_outA[38]), .A2(ErrA[38]) );
VIRL_SDN_OR2_1 or_err_stickyA_39 ( .X(er_styA[39]), .A1(sticky_outA[39]), .A2(ErrA[39]) );
VIRL_SDN_OR2_1 or_err_stickyA_40 ( .X(er_styA[40]), .A1(sticky_outA[40]), .A2(ErrA[40]) );
VIRL_SDN_OR2_1 or_err_stickyA_41 ( .X(er_styA[41]), .A1(sticky_outA[41]), .A2(ErrA[41]) );
VIRL_SDN_OR2_1 or_err_stickyA_42 ( .X(er_styA[42]), .A1(sticky_outA[42]), .A2(ErrA[42]) );
VIRL_SDN_OR2_1 or_err_stickyA_43 ( .X(er_styA[43]), .A1(sticky_outA[43]), .A2(ErrA[43]) );
VIRL_SDN_OR2_1 or_err_stickyA_44 ( .X(er_styA[44]), .A1(sticky_outA[44]), .A2(ErrA[44]) );
VIRL_SDN_OR2_1 or_err_stickyA_45 ( .X(er_styA[45]), .A1(sticky_outA[45]), .A2(ErrA[45]) );
VIRL_SDN_OR2_1 or_err_stickyA_46 ( .X(er_styA[46]), .A1(sticky_outA[46]), .A2(ErrA[46]) );
VIRL_SDN_OR2_1 or_err_stickyA_47 ( .X(er_styA[47]), .A1(sticky_outA[47]), .A2(ErrA[47]) );
VIRL_SDN_OR2_1 or_err_stickyA_48 ( .X(er_styA[48]), .A1(sticky_outA[48]), .A2(ErrA[48]) );
VIRL_SDN_OR2_1 or_err_stickyA_49 ( .X(er_styA[49]), .A1(sticky_outA[49]), .A2(ErrA[49]) );
VIRL_SDN_OR2_1 or_err_stickyA_50 ( .X(er_styA[50]), .A1(sticky_outA[50]), .A2(ErrA[50]) );
VIRL_SDN_OR2_1 or_err_stickyA_51 ( .X(er_styA[51]), .A1(sticky_outA[51]), .A2(ErrA[51]) );
VIRL_SDN_OR2_1 or_err_stickyA_52 ( .X(er_styA[52]), .A1(sticky_outA[52]), .A2(ErrA[52]) );
VIRL_SDN_OR2_1 or_err_stickyA_53 ( .X(er_styA[53]), .A1(sticky_outA[53]), .A2(ErrA[53]) );
VIRL_SDN_OR2_1 or_err_stickyA_54 ( .X(er_styA[54]), .A1(sticky_outA[54]), .A2(ErrA[54]) );
VIRL_SDN_OR2_1 or_err_stickyA_55 ( .X(er_styA[55]), .A1(sticky_outA[55]), .A2(ErrA[55]) );
VIRL_SDN_OR2_1 or_err_stickyA_56 ( .X(er_styA[56]), .A1(sticky_outA[56]), .A2(ErrA[56]) );
VIRL_SDN_OR2_1 or_err_stickyA_57 ( .X(er_styA[57]), .A1(sticky_outA[57]), .A2(ErrA[57]) );
VIRL_SDN_OR2_1 or_err_stickyA_58 ( .X(er_styA[58]), .A1(sticky_outA[58]), .A2(ErrA[58]) );
VIRL_SDN_OR2_1 or_err_stickyA_59 ( .X(er_styA[59]), .A1(sticky_outA[59]), .A2(ErrA[59]) );
VIRL_SDN_OR2_1 or_err_stickyA_60 ( .X(er_styA[60]), .A1(sticky_outA[60]), .A2(ErrA[60]) );
VIRL_SDN_OR2_1 or_err_stickyA_61 ( .X(er_styA[61]), .A1(sticky_outA[61]), .A2(ErrA[61]) );
VIRL_SDN_OR2_1 or_err_stickyA_62 ( .X(er_styA[62]), .A1(sticky_outA[62]), .A2(ErrA[62]) );
VIRL_SDN_OR2_1 or_err_stickyA_63 ( .X(er_styA[63]), .A1(sticky_outA[63]), .A2(ErrA[63]) );
VIRL_SDN_OR2_1 or_err_stickyA_64 ( .X(er_styA[64]), .A1(sticky_outA[64]), .A2(ErrA[64]) );
VIRL_SDN_OR2_1 or_err_stickyA_65 ( .X(er_styA[65]), .A1(sticky_outA[65]), .A2(ErrA[65]) );
VIRL_SDN_OR2_1 or_err_stickyA_66 ( .X(er_styA[66]), .A1(sticky_outA[66]), .A2(ErrA[66]) );
VIRL_SDN_OR2_1 or_err_stickyA_67 ( .X(er_styA[67]), .A1(sticky_outA[67]), .A2(ErrA[67]) );
VIRL_SDN_OR2_1 or_err_stickyA_68 ( .X(er_styA[68]), .A1(sticky_outA[68]), .A2(ErrA[68]) );
VIRL_SDN_OR2_1 or_err_stickyA_69 ( .X(er_styA[69]), .A1(sticky_outA[69]), .A2(ErrA[69]) );
VIRL_SDN_OR2_1 or_err_stickyA_70 ( .X(er_styA[70]), .A1(sticky_outA[70]), .A2(ErrA[70]) );
VIRL_SDN_OR2_1 or_err_stickyA_71 ( .X(er_styA[71]), .A1(sticky_outA[71]), .A2(ErrA[71]) );
VIRL_SDN_OR2_1 or_err_stickyA_72 ( .X(er_styA[72]), .A1(sticky_outA[72]), .A2(ErrA[72]) );
VIRL_SDN_OR2_1 or_err_stickyA_73 ( .X(er_styA[73]), .A1(sticky_outA[73]), .A2(ErrA[73]) );
VIRL_SDN_OR2_1 or_err_stickyA_74 ( .X(er_styA[74]), .A1(sticky_outA[74]), .A2(ErrA[74]) );
VIRL_SDN_OR2_1 or_err_stickyA_75 ( .X(er_styA[75]), .A1(sticky_outA[75]), .A2(ErrA[75]) );
VIRL_SDN_OR2_1 or_err_stickyA_76 ( .X(er_styA[76]), .A1(sticky_outA[76]), .A2(ErrA[76]) );
VIRL_SDN_OR2_1 or_err_stickyA_77 ( .X(er_styA[77]), .A1(sticky_outA[77]), .A2(ErrA[77]) );
VIRL_SDN_OR2_1 or_err_stickyA_78 ( .X(er_styA[78]), .A1(sticky_outA[78]), .A2(ErrA[78]) );
VIRL_SDN_OR2_1 or_err_stickyA_79 ( .X(er_styA[79]), .A1(sticky_outA[79]), .A2(ErrA[79]) );
VIRL_SDN_OR2_1 or_err_stickyA_80 ( .X(er_styA[80]), .A1(sticky_outA[80]), .A2(ErrA[80]) );
VIRL_SDN_OR2_1 or_err_stickyA_81 ( .X(er_styA[81]), .A1(sticky_outA[81]), .A2(ErrA[81]) );
VIRL_SDN_OR2_1 or_err_stickyA_82 ( .X(er_styA[82]), .A1(sticky_outA[82]), .A2(ErrA[82]) );
VIRL_SDN_OR2_1 or_err_stickyA_83 ( .X(er_styA[83]), .A1(sticky_outA[83]), .A2(ErrA[83]) );
VIRL_SDN_OR2_1 or_err_stickyA_84 ( .X(er_styA[84]), .A1(sticky_outA[84]), .A2(ErrA[84]) );
VIRL_SDN_OR2_1 or_err_stickyA_85 ( .X(er_styA[85]), .A1(sticky_outA[85]), .A2(ErrA[85]) );
VIRL_SDN_OR2_1 or_err_stickyA_86 ( .X(er_styA[86]), .A1(sticky_outA[86]), .A2(ErrA[86]) );
VIRL_SDN_OR2_1 or_err_stickyA_87 ( .X(er_styA[87]), .A1(sticky_outA[87]), .A2(ErrA[87]) );
VIRL_SDN_OR2_1 or_err_stickyA_88 ( .X(er_styA[88]), .A1(sticky_outA[88]), .A2(ErrA[88]) );
VIRL_SDN_OR2_1 or_err_stickyA_89 ( .X(er_styA[89]), .A1(sticky_outA[89]), .A2(ErrA[89]) );
VIRL_SDN_OR2_1 or_err_stickyA_90 ( .X(er_styA[90]), .A1(sticky_outA[90]), .A2(ErrA[90]) );
VIRL_SDN_OR2_1 or_err_stickyA_91 ( .X(er_styA[91]), .A1(sticky_outA[91]), .A2(ErrA[91]) );
VIRL_SDN_OR2_1 or_err_stickyA_92 ( .X(er_styA[92]), .A1(sticky_outA[92]), .A2(ErrA[92]) );
VIRL_SDN_OR2_1 or_err_stickyA_93 ( .X(er_styA[93]), .A1(sticky_outA[93]), .A2(ErrA[93]) );
VIRL_SDN_OR2_1 or_err_stickyA_94 ( .X(er_styA[94]), .A1(sticky_outA[94]), .A2(ErrA[94]) );
VIRL_SDN_OR2_1 or_err_stickyA_95 ( .X(er_styA[95]), .A1(sticky_outA[95]), .A2(ErrA[95]) );
VIRL_SDN_OR2_1 or_err_stickyA_96 ( .X(er_styA[96]), .A1(sticky_outA[96]), .A2(ErrA[96]) );
VIRL_SDN_OR2_1 or_err_stickyA_97 ( .X(er_styA[97]), .A1(sticky_outA[97]), .A2(ErrA[97]) );
VIRL_SDN_OR2_1 or_err_stickyA_98 ( .X(er_styA[98]), .A1(sticky_outA[98]), .A2(ErrA[98]) );
VIRL_SDN_OR2_1 or_err_stickyA_99 ( .X(er_styA[99]), .A1(sticky_outA[99]), .A2(ErrA[99]) );
VIRL_SDN_OR2_1 or_err_stickyA_100 ( .X(er_styA[100]), .A1(sticky_outA[100]), .A2(ErrA[100]) );
VIRL_SDN_OR2_1 or_err_stickyA_101 ( .X(er_styA[101]), .A1(sticky_outA[101]), .A2(ErrA[101]) );
VIRL_SDN_OR2_1 or_err_stickyA_102 ( .X(er_styA[102]), .A1(sticky_outA[102]), .A2(ErrA[102]) );
VIRL_SDN_OR2_1 or_err_stickyA_103 ( .X(er_styA[103]), .A1(sticky_outA[103]), .A2(ErrA[103]) );
VIRL_SDN_OR2_1 or_err_stickyA_104 ( .X(er_styA[104]), .A1(sticky_outA[104]), .A2(ErrA[104]) );
VIRL_SDN_OR2_1 or_err_stickyA_105 ( .X(er_styA[105]), .A1(sticky_outA[105]), .A2(ErrA[105]) );
VIRL_SDN_OR2_1 or_err_stickyA_106 ( .X(er_styA[106]), .A1(sticky_outA[106]), .A2(ErrA[106]) );
VIRL_SDN_OR2_1 or_err_stickyA_107 ( .X(er_styA[107]), .A1(sticky_outA[107]), .A2(ErrA[107]) );
VIRL_SDN_OR2_1 or_err_stickyA_108 ( .X(er_styA[108]), .A1(sticky_outA[108]), .A2(ErrA[108]) );
VIRL_SDN_OR2_1 or_err_stickyA_109 ( .X(er_styA[109]), .A1(sticky_outA[109]), .A2(ErrA[109]) );
VIRL_SDN_OR2_1 or_err_stickyA_110 ( .X(er_styA[110]), .A1(sticky_outA[110]), .A2(ErrA[110]) );
VIRL_SDN_OR2_1 or_err_stickyA_111 ( .X(er_styA[111]), .A1(sticky_outA[111]), .A2(ErrA[111]) );
VIRL_SDN_OR2_1 or_err_stickyA_112 ( .X(er_styA[112]), .A1(sticky_outA[112]), .A2(ErrA[112]) );
VIRL_SDN_OR2_1 or_err_stickyA_113 ( .X(er_styA[113]), .A1(sticky_outA[113]), .A2(ErrA[113]) );
VIRL_SDN_OR2_1 or_err_stickyA_114 ( .X(er_styA[114]), .A1(sticky_outA[114]), .A2(ErrA[114]) );
VIRL_SDN_OR2_1 or_err_stickyA_115 ( .X(er_styA[115]), .A1(sticky_outA[115]), .A2(ErrA[115]) );
VIRL_SDN_OR2_1 or_err_stickyA_116 ( .X(er_styA[116]), .A1(sticky_outA[116]), .A2(ErrA[116]) );
VIRL_SDN_OR2_1 or_err_stickyA_117 ( .X(er_styA[117]), .A1(sticky_outA[117]), .A2(ErrA[117]) );
VIRL_SDN_OR2_1 or_err_stickyA_118 ( .X(er_styA[118]), .A1(sticky_outA[118]), .A2(ErrA[118]) );
VIRL_SDN_OR2_1 or_err_stickyA_119 ( .X(er_styA[119]), .A1(sticky_outA[119]), .A2(ErrA[119]) );
VIRL_SDN_OR2_1 or_err_stickyA_120 ( .X(er_styA[120]), .A1(sticky_outA[120]), .A2(ErrA[120]) );
VIRL_SDN_OR2_1 or_err_stickyA_121 ( .X(er_styA[121]), .A1(sticky_outA[121]), .A2(ErrA[121]) );
VIRL_SDN_OR2_1 or_err_stickyA_122 ( .X(er_styA[122]), .A1(sticky_outA[122]), .A2(ErrA[122]) );
VIRL_SDN_OR2_1 or_err_stickyA_123 ( .X(er_styA[123]), .A1(sticky_outA[123]), .A2(ErrA[123]) );
VIRL_SDN_OR2_1 or_err_stickyA_124 ( .X(er_styA[124]), .A1(sticky_outA[124]), .A2(ErrA[124]) );
VIRL_SDN_OR2_1 or_err_stickyA_125 ( .X(er_styA[125]), .A1(sticky_outA[125]), .A2(ErrA[125]) );
VIRL_SDN_OR2_1 or_err_stickyA_126 ( .X(er_styA[126]), .A1(sticky_outA[126]), .A2(ErrA[126]) );
VIRL_SDN_OR2_1 or_err_stickyA_127 ( .X(er_styA[127]), .A1(sticky_outA[127]), .A2(ErrA[127]) );
VIRL_SDN_OR2_1 or_err_stickyA_128 ( .X(er_styA[128]), .A1(sticky_outA[128]), .A2(ErrA[128]) );
VIRL_SDN_OR2_1 or_err_stickyA_129 ( .X(er_styA[129]), .A1(sticky_outA[129]), .A2(ErrA[129]) );
VIRL_SDN_OR2_1 or_err_stickyA_130 ( .X(er_styA[130]), .A1(sticky_outA[130]), .A2(ErrA[130]) );
VIRL_SDN_OR2_1 or_err_stickyA_131 ( .X(er_styA[131]), .A1(sticky_outA[131]), .A2(ErrA[131]) );
VIRL_SDN_OR2_1 or_err_stickyA_132 ( .X(er_styA[132]), .A1(sticky_outA[132]), .A2(ErrA[132]) );
VIRL_SDN_OR2_1 or_err_stickyA_133 ( .X(er_styA[133]), .A1(sticky_outA[133]), .A2(ErrA[133]) );
VIRL_SDN_OR2_1 or_err_stickyA_134 ( .X(er_styA[134]), .A1(sticky_outA[134]), .A2(ErrA[134]) );
VIRL_SDN_OR2_1 or_err_stickyA_135 ( .X(er_styA[135]), .A1(sticky_outA[135]), .A2(ErrA[135]) );
VIRL_SDN_OR2_1 or_err_stickyA_136 ( .X(er_styA[136]), .A1(sticky_outA[136]), .A2(ErrA[136]) );
VIRL_SDN_OR2_1 or_err_stickyA_137 ( .X(er_styA[137]), .A1(sticky_outA[137]), .A2(ErrA[137]) );
VIRL_SDN_OR2_1 or_err_stickyA_138 ( .X(er_styA[138]), .A1(sticky_outA[138]), .A2(ErrA[138]) );
VIRL_SDN_OR2_1 or_err_stickyA_139 ( .X(er_styA[139]), .A1(sticky_outA[139]), .A2(ErrA[139]) );
VIRL_SDN_OR2_1 or_err_stickyA_140 ( .X(er_styA[140]), .A1(sticky_outA[140]), .A2(ErrA[140]) );
VIRL_SDN_OR2_1 or_err_stickyA_141 ( .X(er_styA[141]), .A1(sticky_outA[141]), .A2(ErrA[141]) );
VIRL_SDN_OR2_1 or_err_stickyA_142 ( .X(er_styA[142]), .A1(sticky_outA[142]), .A2(ErrA[142]) );
VIRL_SDN_OR2_1 or_err_stickyA_143 ( .X(er_styA[143]), .A1(sticky_outA[143]), .A2(ErrA[143]) );
VIRL_SDN_OR2_1 or_err_stickyA_144 ( .X(er_styA[144]), .A1(sticky_outA[144]), .A2(ErrA[144]) );
VIRL_SDN_OR2_1 or_err_stickyA_145 ( .X(er_styA[145]), .A1(sticky_outA[145]), .A2(ErrA[145]) );
VIRL_SDN_OR2_1 or_err_stickyA_146 ( .X(er_styA[146]), .A1(sticky_outA[146]), .A2(ErrA[146]) );
VIRL_SDN_OR2_1 or_err_stickyA_147 ( .X(er_styA[147]), .A1(sticky_outA[147]), .A2(ErrA[147]) );
VIRL_SDN_OR2_1 or_err_stickyA_148 ( .X(er_styA[148]), .A1(sticky_outA[148]), .A2(ErrA[148]) );
VIRL_SDN_OR2_1 or_err_stickyA_149 ( .X(er_styA[149]), .A1(sticky_outA[149]), .A2(ErrA[149]) );
VIRL_SDN_OR2_1 or_err_stickyA_150 ( .X(er_styA[150]), .A1(sticky_outA[150]), .A2(ErrA[150]) );
VIRL_SDN_OR2_1 or_err_stickyA_151 ( .X(er_styA[151]), .A1(sticky_outA[151]), .A2(ErrA[151]) );
VIRL_SDN_OR2_1 or_err_stickyA_152 ( .X(er_styA[152]), .A1(sticky_outA[152]), .A2(ErrA[152]) );
VIRL_SDN_OR2_1 or_err_stickyA_153 ( .X(er_styA[153]), .A1(sticky_outA[153]), .A2(ErrA[153]) );
VIRL_SDN_OR2_1 or_err_stickyA_154 ( .X(er_styA[154]), .A1(sticky_outA[154]), .A2(ErrA[154]) );
VIRL_SDN_OR2_1 or_err_stickyA_155 ( .X(er_styA[155]), .A1(sticky_outA[155]), .A2(ErrA[155]) );
VIRL_SDN_OR2_1 or_err_stickyA_156 ( .X(er_styA[156]), .A1(sticky_outA[156]), .A2(ErrA[156]) );
VIRL_SDN_OR2_1 or_err_stickyA_157 ( .X(er_styA[157]), .A1(sticky_outA[157]), .A2(ErrA[157]) );
VIRL_SDN_OR2_1 or_err_stickyA_158 ( .X(er_styA[158]), .A1(sticky_outA[158]), .A2(ErrA[158]) );
VIRL_SDN_OR2_1 or_err_stickyA_159 ( .X(er_styA[159]), .A1(sticky_outA[159]), .A2(ErrA[159]) );
VIRL_SDN_BUF_1 buf_dtB_0 ( .X(dtB[0]), .A(DB_mout[0]) );
VIRL_SDN_BUF_1 buf_dtB_1 ( .X(dtB[1]), .A(DB_mout[1]) );
VIRL_SDN_BUF_1 buf_dtB_2 ( .X(dtB[2]), .A(DB_mout[2]) );
VIRL_SDN_BUF_1 buf_dtB_3 ( .X(dtB[3]), .A(DB_mout[3]) );
VIRL_SDN_BUF_1 buf_dtB_4 ( .X(dtB[4]), .A(DB_mout[4]) );
VIRL_SDN_BUF_1 buf_dtB_5 ( .X(dtB[5]), .A(DB_mout[5]) );
VIRL_SDN_BUF_1 buf_dtB_6 ( .X(dtB[6]), .A(DB_mout[6]) );
VIRL_SDN_BUF_1 buf_dtB_7 ( .X(dtB[7]), .A(DB_mout[7]) );
VIRL_SDN_BUF_1 buf_dtB_8 ( .X(dtB[8]), .A(DB_mout[8]) );
VIRL_SDN_BUF_1 buf_dtB_9 ( .X(dtB[9]), .A(DB_mout[9]) );
VIRL_SDN_BUF_1 buf_dtB_10 ( .X(dtB[10]), .A(DB_mout[10]) );
VIRL_SDN_BUF_1 buf_dtB_11 ( .X(dtB[11]), .A(DB_mout[11]) );
VIRL_SDN_BUF_1 buf_dtB_12 ( .X(dtB[12]), .A(DB_mout[12]) );
VIRL_SDN_BUF_1 buf_dtB_13 ( .X(dtB[13]), .A(DB_mout[13]) );
VIRL_SDN_BUF_1 buf_dtB_14 ( .X(dtB[14]), .A(DB_mout[14]) );
VIRL_SDN_BUF_1 buf_dtB_15 ( .X(dtB[15]), .A(DB_mout[15]) );
VIRL_SDN_BUF_1 buf_dtB_16 ( .X(dtB[16]), .A(DB_mout[16]) );
VIRL_SDN_BUF_1 buf_dtB_17 ( .X(dtB[17]), .A(DB_mout[17]) );
VIRL_SDN_BUF_1 buf_dtB_18 ( .X(dtB[18]), .A(DB_mout[18]) );
VIRL_SDN_BUF_1 buf_dtB_19 ( .X(dtB[19]), .A(DB_mout[19]) );
VIRL_SDN_BUF_1 buf_dtB_20 ( .X(dtB[20]), .A(DB_mout[20]) );
VIRL_SDN_BUF_1 buf_dtB_21 ( .X(dtB[21]), .A(DB_mout[21]) );
VIRL_SDN_BUF_1 buf_dtB_22 ( .X(dtB[22]), .A(DB_mout[22]) );
VIRL_SDN_BUF_1 buf_dtB_23 ( .X(dtB[23]), .A(DB_mout[23]) );
VIRL_SDN_BUF_1 buf_dtB_24 ( .X(dtB[24]), .A(DB_mout[24]) );
VIRL_SDN_BUF_1 buf_dtB_25 ( .X(dtB[25]), .A(DB_mout[25]) );
VIRL_SDN_BUF_1 buf_dtB_26 ( .X(dtB[26]), .A(DB_mout[26]) );
VIRL_SDN_BUF_1 buf_dtB_27 ( .X(dtB[27]), .A(DB_mout[27]) );
VIRL_SDN_BUF_1 buf_dtB_28 ( .X(dtB[28]), .A(DB_mout[28]) );
VIRL_SDN_BUF_1 buf_dtB_29 ( .X(dtB[29]), .A(DB_mout[29]) );
VIRL_SDN_BUF_1 buf_dtB_30 ( .X(dtB[30]), .A(DB_mout[30]) );
VIRL_SDN_BUF_1 buf_dtB_31 ( .X(dtB[31]), .A(DB_mout[31]) );
VIRL_SDN_BUF_1 buf_dtB_32 ( .X(dtB[32]), .A(DB_mout[32]) );
VIRL_SDN_BUF_1 buf_dtB_33 ( .X(dtB[33]), .A(DB_mout[33]) );
VIRL_SDN_BUF_1 buf_dtB_34 ( .X(dtB[34]), .A(DB_mout[34]) );
VIRL_SDN_BUF_1 buf_dtB_35 ( .X(dtB[35]), .A(DB_mout[35]) );
VIRL_SDN_BUF_1 buf_dtB_36 ( .X(dtB[36]), .A(DB_mout[36]) );
VIRL_SDN_BUF_1 buf_dtB_37 ( .X(dtB[37]), .A(DB_mout[37]) );
VIRL_SDN_BUF_1 buf_dtB_38 ( .X(dtB[38]), .A(DB_mout[38]) );
VIRL_SDN_BUF_1 buf_dtB_39 ( .X(dtB[39]), .A(DB_mout[39]) );
VIRL_SDN_BUF_1 buf_dtB_40 ( .X(dtB[40]), .A(DB_mout[40]) );
VIRL_SDN_BUF_1 buf_dtB_41 ( .X(dtB[41]), .A(DB_mout[41]) );
VIRL_SDN_BUF_1 buf_dtB_42 ( .X(dtB[42]), .A(DB_mout[42]) );
VIRL_SDN_BUF_1 buf_dtB_43 ( .X(dtB[43]), .A(DB_mout[43]) );
VIRL_SDN_BUF_1 buf_dtB_44 ( .X(dtB[44]), .A(DB_mout[44]) );
VIRL_SDN_BUF_1 buf_dtB_45 ( .X(dtB[45]), .A(DB_mout[45]) );
VIRL_SDN_BUF_1 buf_dtB_46 ( .X(dtB[46]), .A(DB_mout[46]) );
VIRL_SDN_BUF_1 buf_dtB_47 ( .X(dtB[47]), .A(DB_mout[47]) );
VIRL_SDN_BUF_1 buf_dtB_48 ( .X(dtB[48]), .A(DB_mout[48]) );
VIRL_SDN_BUF_1 buf_dtB_49 ( .X(dtB[49]), .A(DB_mout[49]) );
VIRL_SDN_BUF_1 buf_dtB_50 ( .X(dtB[50]), .A(DB_mout[50]) );
VIRL_SDN_BUF_1 buf_dtB_51 ( .X(dtB[51]), .A(DB_mout[51]) );
VIRL_SDN_BUF_1 buf_dtB_52 ( .X(dtB[52]), .A(DB_mout[52]) );
VIRL_SDN_BUF_1 buf_dtB_53 ( .X(dtB[53]), .A(DB_mout[53]) );
VIRL_SDN_BUF_1 buf_dtB_54 ( .X(dtB[54]), .A(DB_mout[54]) );
VIRL_SDN_BUF_1 buf_dtB_55 ( .X(dtB[55]), .A(DB_mout[55]) );
VIRL_SDN_BUF_1 buf_dtB_56 ( .X(dtB[56]), .A(DB_mout[56]) );
VIRL_SDN_BUF_1 buf_dtB_57 ( .X(dtB[57]), .A(DB_mout[57]) );
VIRL_SDN_BUF_1 buf_dtB_58 ( .X(dtB[58]), .A(DB_mout[58]) );
VIRL_SDN_BUF_1 buf_dtB_59 ( .X(dtB[59]), .A(DB_mout[59]) );
VIRL_SDN_BUF_1 buf_dtB_60 ( .X(dtB[60]), .A(DB_mout[60]) );
VIRL_SDN_BUF_1 buf_dtB_61 ( .X(dtB[61]), .A(DB_mout[61]) );
VIRL_SDN_BUF_1 buf_dtB_62 ( .X(dtB[62]), .A(DB_mout[62]) );
VIRL_SDN_BUF_1 buf_dtB_63 ( .X(dtB[63]), .A(DB_mout[63]) );
VIRL_SDN_BUF_1 buf_dtB_64 ( .X(dtB[64]), .A(DB_mout[64]) );
VIRL_SDN_BUF_1 buf_dtB_65 ( .X(dtB[65]), .A(DB_mout[65]) );
VIRL_SDN_BUF_1 buf_dtB_66 ( .X(dtB[66]), .A(DB_mout[66]) );
VIRL_SDN_BUF_1 buf_dtB_67 ( .X(dtB[67]), .A(DB_mout[67]) );
VIRL_SDN_BUF_1 buf_dtB_68 ( .X(dtB[68]), .A(DB_mout[68]) );
VIRL_SDN_BUF_1 buf_dtB_69 ( .X(dtB[69]), .A(DB_mout[69]) );
VIRL_SDN_BUF_1 buf_dtB_70 ( .X(dtB[70]), .A(DB_mout[70]) );
VIRL_SDN_BUF_1 buf_dtB_71 ( .X(dtB[71]), .A(DB_mout[71]) );
VIRL_SDN_BUF_1 buf_dtB_72 ( .X(dtB[72]), .A(DB_mout[72]) );
VIRL_SDN_BUF_1 buf_dtB_73 ( .X(dtB[73]), .A(DB_mout[73]) );
VIRL_SDN_BUF_1 buf_dtB_74 ( .X(dtB[74]), .A(DB_mout[74]) );
VIRL_SDN_BUF_1 buf_dtB_75 ( .X(dtB[75]), .A(DB_mout[75]) );
VIRL_SDN_BUF_1 buf_dtB_76 ( .X(dtB[76]), .A(DB_mout[76]) );
VIRL_SDN_BUF_1 buf_dtB_77 ( .X(dtB[77]), .A(DB_mout[77]) );
VIRL_SDN_BUF_1 buf_dtB_78 ( .X(dtB[78]), .A(DB_mout[78]) );
VIRL_SDN_BUF_1 buf_dtB_79 ( .X(dtB[79]), .A(DB_mout[79]) );
VIRL_SDN_BUF_1 buf_dtB_80 ( .X(dtB[80]), .A(DB_mout[80]) );
VIRL_SDN_BUF_1 buf_dtB_81 ( .X(dtB[81]), .A(DB_mout[81]) );
VIRL_SDN_BUF_1 buf_dtB_82 ( .X(dtB[82]), .A(DB_mout[82]) );
VIRL_SDN_BUF_1 buf_dtB_83 ( .X(dtB[83]), .A(DB_mout[83]) );
VIRL_SDN_BUF_1 buf_dtB_84 ( .X(dtB[84]), .A(DB_mout[84]) );
VIRL_SDN_BUF_1 buf_dtB_85 ( .X(dtB[85]), .A(DB_mout[85]) );
VIRL_SDN_BUF_1 buf_dtB_86 ( .X(dtB[86]), .A(DB_mout[86]) );
VIRL_SDN_BUF_1 buf_dtB_87 ( .X(dtB[87]), .A(DB_mout[87]) );
VIRL_SDN_BUF_1 buf_dtB_88 ( .X(dtB[88]), .A(DB_mout[88]) );
VIRL_SDN_BUF_1 buf_dtB_89 ( .X(dtB[89]), .A(DB_mout[89]) );
VIRL_SDN_BUF_1 buf_dtB_90 ( .X(dtB[90]), .A(DB_mout[90]) );
VIRL_SDN_BUF_1 buf_dtB_91 ( .X(dtB[91]), .A(DB_mout[91]) );
VIRL_SDN_BUF_1 buf_dtB_92 ( .X(dtB[92]), .A(DB_mout[92]) );
VIRL_SDN_BUF_1 buf_dtB_93 ( .X(dtB[93]), .A(DB_mout[93]) );
VIRL_SDN_BUF_1 buf_dtB_94 ( .X(dtB[94]), .A(DB_mout[94]) );
VIRL_SDN_BUF_1 buf_dtB_95 ( .X(dtB[95]), .A(DB_mout[95]) );
VIRL_SDN_BUF_1 buf_dtB_96 ( .X(dtB[96]), .A(DB_mout[96]) );
VIRL_SDN_BUF_1 buf_dtB_97 ( .X(dtB[97]), .A(DB_mout[97]) );
VIRL_SDN_BUF_1 buf_dtB_98 ( .X(dtB[98]), .A(DB_mout[98]) );
VIRL_SDN_BUF_1 buf_dtB_99 ( .X(dtB[99]), .A(DB_mout[99]) );
VIRL_SDN_BUF_1 buf_dtB_100 ( .X(dtB[100]), .A(DB_mout[100]) );
VIRL_SDN_BUF_1 buf_dtB_101 ( .X(dtB[101]), .A(DB_mout[101]) );
VIRL_SDN_BUF_1 buf_dtB_102 ( .X(dtB[102]), .A(DB_mout[102]) );
VIRL_SDN_BUF_1 buf_dtB_103 ( .X(dtB[103]), .A(DB_mout[103]) );
VIRL_SDN_BUF_1 buf_dtB_104 ( .X(dtB[104]), .A(DB_mout[104]) );
VIRL_SDN_BUF_1 buf_dtB_105 ( .X(dtB[105]), .A(DB_mout[105]) );
VIRL_SDN_BUF_1 buf_dtB_106 ( .X(dtB[106]), .A(DB_mout[106]) );
VIRL_SDN_BUF_1 buf_dtB_107 ( .X(dtB[107]), .A(DB_mout[107]) );
VIRL_SDN_BUF_1 buf_dtB_108 ( .X(dtB[108]), .A(DB_mout[108]) );
VIRL_SDN_BUF_1 buf_dtB_109 ( .X(dtB[109]), .A(DB_mout[109]) );
VIRL_SDN_BUF_1 buf_dtB_110 ( .X(dtB[110]), .A(DB_mout[110]) );
VIRL_SDN_BUF_1 buf_dtB_111 ( .X(dtB[111]), .A(DB_mout[111]) );
VIRL_SDN_BUF_1 buf_dtB_112 ( .X(dtB[112]), .A(DB_mout[112]) );
VIRL_SDN_BUF_1 buf_dtB_113 ( .X(dtB[113]), .A(DB_mout[113]) );
VIRL_SDN_BUF_1 buf_dtB_114 ( .X(dtB[114]), .A(DB_mout[114]) );
VIRL_SDN_BUF_1 buf_dtB_115 ( .X(dtB[115]), .A(DB_mout[115]) );
VIRL_SDN_BUF_1 buf_dtB_116 ( .X(dtB[116]), .A(DB_mout[116]) );
VIRL_SDN_BUF_1 buf_dtB_117 ( .X(dtB[117]), .A(DB_mout[117]) );
VIRL_SDN_BUF_1 buf_dtB_118 ( .X(dtB[118]), .A(DB_mout[118]) );
VIRL_SDN_BUF_1 buf_dtB_119 ( .X(dtB[119]), .A(DB_mout[119]) );
VIRL_SDN_BUF_1 buf_dtB_120 ( .X(dtB[120]), .A(DB_mout[120]) );
VIRL_SDN_BUF_1 buf_dtB_121 ( .X(dtB[121]), .A(DB_mout[121]) );
VIRL_SDN_BUF_1 buf_dtB_122 ( .X(dtB[122]), .A(DB_mout[122]) );
VIRL_SDN_BUF_1 buf_dtB_123 ( .X(dtB[123]), .A(DB_mout[123]) );
VIRL_SDN_BUF_1 buf_dtB_124 ( .X(dtB[124]), .A(DB_mout[124]) );
VIRL_SDN_BUF_1 buf_dtB_125 ( .X(dtB[125]), .A(DB_mout[125]) );
VIRL_SDN_BUF_1 buf_dtB_126 ( .X(dtB[126]), .A(DB_mout[126]) );
VIRL_SDN_BUF_1 buf_dtB_127 ( .X(dtB[127]), .A(DB_mout[127]) );
VIRL_SDN_BUF_1 buf_dtB_128 ( .X(dtB[128]), .A(DB_mout[128]) );
VIRL_SDN_BUF_1 buf_dtB_129 ( .X(dtB[129]), .A(DB_mout[129]) );
VIRL_SDN_BUF_1 buf_dtB_130 ( .X(dtB[130]), .A(DB_mout[130]) );
VIRL_SDN_BUF_1 buf_dtB_131 ( .X(dtB[131]), .A(DB_mout[131]) );
VIRL_SDN_BUF_1 buf_dtB_132 ( .X(dtB[132]), .A(DB_mout[132]) );
VIRL_SDN_BUF_1 buf_dtB_133 ( .X(dtB[133]), .A(DB_mout[133]) );
VIRL_SDN_BUF_1 buf_dtB_134 ( .X(dtB[134]), .A(DB_mout[134]) );
VIRL_SDN_BUF_1 buf_dtB_135 ( .X(dtB[135]), .A(DB_mout[135]) );
VIRL_SDN_BUF_1 buf_dtB_136 ( .X(dtB[136]), .A(DB_mout[136]) );
VIRL_SDN_BUF_1 buf_dtB_137 ( .X(dtB[137]), .A(DB_mout[137]) );
VIRL_SDN_BUF_1 buf_dtB_138 ( .X(dtB[138]), .A(DB_mout[138]) );
VIRL_SDN_BUF_1 buf_dtB_139 ( .X(dtB[139]), .A(DB_mout[139]) );
VIRL_SDN_BUF_1 buf_dtB_140 ( .X(dtB[140]), .A(DB_mout[140]) );
VIRL_SDN_BUF_1 buf_dtB_141 ( .X(dtB[141]), .A(DB_mout[141]) );
VIRL_SDN_BUF_1 buf_dtB_142 ( .X(dtB[142]), .A(DB_mout[142]) );
VIRL_SDN_BUF_1 buf_dtB_143 ( .X(dtB[143]), .A(DB_mout[143]) );
VIRL_SDN_BUF_1 buf_dtB_144 ( .X(dtB[144]), .A(DB_mout[144]) );
VIRL_SDN_BUF_1 buf_dtB_145 ( .X(dtB[145]), .A(DB_mout[145]) );
VIRL_SDN_BUF_1 buf_dtB_146 ( .X(dtB[146]), .A(DB_mout[146]) );
VIRL_SDN_BUF_1 buf_dtB_147 ( .X(dtB[147]), .A(DB_mout[147]) );
VIRL_SDN_BUF_1 buf_dtB_148 ( .X(dtB[148]), .A(DB_mout[148]) );
VIRL_SDN_BUF_1 buf_dtB_149 ( .X(dtB[149]), .A(DB_mout[149]) );
VIRL_SDN_BUF_1 buf_dtB_150 ( .X(dtB[150]), .A(DB_mout[150]) );
VIRL_SDN_BUF_1 buf_dtB_151 ( .X(dtB[151]), .A(DB_mout[151]) );
VIRL_SDN_BUF_1 buf_dtB_152 ( .X(dtB[152]), .A(DB_mout[152]) );
VIRL_SDN_BUF_1 buf_dtB_153 ( .X(dtB[153]), .A(DB_mout[153]) );
VIRL_SDN_BUF_1 buf_dtB_154 ( .X(dtB[154]), .A(DB_mout[154]) );
VIRL_SDN_BUF_1 buf_dtB_155 ( .X(dtB[155]), .A(DB_mout[155]) );
VIRL_SDN_BUF_1 buf_dtB_156 ( .X(dtB[156]), .A(DB_mout[156]) );
VIRL_SDN_BUF_1 buf_dtB_157 ( .X(dtB[157]), .A(DB_mout[157]) );
VIRL_SDN_BUF_1 buf_dtB_158 ( .X(dtB[158]), .A(DB_mout[158]) );
VIRL_SDN_BUF_1 buf_dtB_159 ( .X(dtB[159]), .A(DB_mout[159]) );

always @ ( negedge mclkB or DFTMASK_buf )
begin: blk_dftmaskBlatched
  if ( mclkB === 1'b0 )
  begin
    DFTMASK_latchedB = DFTMASK_buf;
  end
end


VIRL_SDN_MUX2_1 mux_dt_qB_0 ( .X(dt_intB[0]), .D0(QB_mem[0]), .D1(DB_int[0]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_1 ( .X(dt_intB[1]), .D0(QB_mem[1]), .D1(DB_int[1]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_2 ( .X(dt_intB[2]), .D0(QB_mem[2]), .D1(DB_int[2]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_3 ( .X(dt_intB[3]), .D0(QB_mem[3]), .D1(DB_int[3]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_4 ( .X(dt_intB[4]), .D0(QB_mem[4]), .D1(DB_int[4]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_5 ( .X(dt_intB[5]), .D0(QB_mem[5]), .D1(DB_int[5]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_6 ( .X(dt_intB[6]), .D0(QB_mem[6]), .D1(DB_int[6]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_7 ( .X(dt_intB[7]), .D0(QB_mem[7]), .D1(DB_int[7]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_8 ( .X(dt_intB[8]), .D0(QB_mem[8]), .D1(DB_int[8]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_9 ( .X(dt_intB[9]), .D0(QB_mem[9]), .D1(DB_int[9]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_10 ( .X(dt_intB[10]), .D0(QB_mem[10]), .D1(DB_int[10]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_11 ( .X(dt_intB[11]), .D0(QB_mem[11]), .D1(DB_int[11]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_12 ( .X(dt_intB[12]), .D0(QB_mem[12]), .D1(DB_int[12]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_13 ( .X(dt_intB[13]), .D0(QB_mem[13]), .D1(DB_int[13]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_14 ( .X(dt_intB[14]), .D0(QB_mem[14]), .D1(DB_int[14]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_15 ( .X(dt_intB[15]), .D0(QB_mem[15]), .D1(DB_int[15]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_16 ( .X(dt_intB[16]), .D0(QB_mem[16]), .D1(DB_int[16]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_17 ( .X(dt_intB[17]), .D0(QB_mem[17]), .D1(DB_int[17]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_18 ( .X(dt_intB[18]), .D0(QB_mem[18]), .D1(DB_int[18]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_19 ( .X(dt_intB[19]), .D0(QB_mem[19]), .D1(DB_int[19]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_20 ( .X(dt_intB[20]), .D0(QB_mem[20]), .D1(DB_int[20]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_21 ( .X(dt_intB[21]), .D0(QB_mem[21]), .D1(DB_int[21]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_22 ( .X(dt_intB[22]), .D0(QB_mem[22]), .D1(DB_int[22]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_23 ( .X(dt_intB[23]), .D0(QB_mem[23]), .D1(DB_int[23]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_24 ( .X(dt_intB[24]), .D0(QB_mem[24]), .D1(DB_int[24]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_25 ( .X(dt_intB[25]), .D0(QB_mem[25]), .D1(DB_int[25]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_26 ( .X(dt_intB[26]), .D0(QB_mem[26]), .D1(DB_int[26]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_27 ( .X(dt_intB[27]), .D0(QB_mem[27]), .D1(DB_int[27]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_28 ( .X(dt_intB[28]), .D0(QB_mem[28]), .D1(DB_int[28]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_29 ( .X(dt_intB[29]), .D0(QB_mem[29]), .D1(DB_int[29]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_30 ( .X(dt_intB[30]), .D0(QB_mem[30]), .D1(DB_int[30]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_31 ( .X(dt_intB[31]), .D0(QB_mem[31]), .D1(DB_int[31]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_32 ( .X(dt_intB[32]), .D0(QB_mem[32]), .D1(DB_int[32]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_33 ( .X(dt_intB[33]), .D0(QB_mem[33]), .D1(DB_int[33]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_34 ( .X(dt_intB[34]), .D0(QB_mem[34]), .D1(DB_int[34]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_35 ( .X(dt_intB[35]), .D0(QB_mem[35]), .D1(DB_int[35]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_36 ( .X(dt_intB[36]), .D0(QB_mem[36]), .D1(DB_int[36]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_37 ( .X(dt_intB[37]), .D0(QB_mem[37]), .D1(DB_int[37]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_38 ( .X(dt_intB[38]), .D0(QB_mem[38]), .D1(DB_int[38]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_39 ( .X(dt_intB[39]), .D0(QB_mem[39]), .D1(DB_int[39]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_40 ( .X(dt_intB[40]), .D0(QB_mem[40]), .D1(DB_int[40]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_41 ( .X(dt_intB[41]), .D0(QB_mem[41]), .D1(DB_int[41]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_42 ( .X(dt_intB[42]), .D0(QB_mem[42]), .D1(DB_int[42]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_43 ( .X(dt_intB[43]), .D0(QB_mem[43]), .D1(DB_int[43]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_44 ( .X(dt_intB[44]), .D0(QB_mem[44]), .D1(DB_int[44]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_45 ( .X(dt_intB[45]), .D0(QB_mem[45]), .D1(DB_int[45]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_46 ( .X(dt_intB[46]), .D0(QB_mem[46]), .D1(DB_int[46]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_47 ( .X(dt_intB[47]), .D0(QB_mem[47]), .D1(DB_int[47]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_48 ( .X(dt_intB[48]), .D0(QB_mem[48]), .D1(DB_int[48]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_49 ( .X(dt_intB[49]), .D0(QB_mem[49]), .D1(DB_int[49]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_50 ( .X(dt_intB[50]), .D0(QB_mem[50]), .D1(DB_int[50]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_51 ( .X(dt_intB[51]), .D0(QB_mem[51]), .D1(DB_int[51]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_52 ( .X(dt_intB[52]), .D0(QB_mem[52]), .D1(DB_int[52]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_53 ( .X(dt_intB[53]), .D0(QB_mem[53]), .D1(DB_int[53]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_54 ( .X(dt_intB[54]), .D0(QB_mem[54]), .D1(DB_int[54]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_55 ( .X(dt_intB[55]), .D0(QB_mem[55]), .D1(DB_int[55]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_56 ( .X(dt_intB[56]), .D0(QB_mem[56]), .D1(DB_int[56]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_57 ( .X(dt_intB[57]), .D0(QB_mem[57]), .D1(DB_int[57]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_58 ( .X(dt_intB[58]), .D0(QB_mem[58]), .D1(DB_int[58]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_59 ( .X(dt_intB[59]), .D0(QB_mem[59]), .D1(DB_int[59]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_60 ( .X(dt_intB[60]), .D0(QB_mem[60]), .D1(DB_int[60]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_61 ( .X(dt_intB[61]), .D0(QB_mem[61]), .D1(DB_int[61]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_62 ( .X(dt_intB[62]), .D0(QB_mem[62]), .D1(DB_int[62]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_63 ( .X(dt_intB[63]), .D0(QB_mem[63]), .D1(DB_int[63]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_64 ( .X(dt_intB[64]), .D0(QB_mem[64]), .D1(DB_int[64]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_65 ( .X(dt_intB[65]), .D0(QB_mem[65]), .D1(DB_int[65]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_66 ( .X(dt_intB[66]), .D0(QB_mem[66]), .D1(DB_int[66]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_67 ( .X(dt_intB[67]), .D0(QB_mem[67]), .D1(DB_int[67]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_68 ( .X(dt_intB[68]), .D0(QB_mem[68]), .D1(DB_int[68]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_69 ( .X(dt_intB[69]), .D0(QB_mem[69]), .D1(DB_int[69]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_70 ( .X(dt_intB[70]), .D0(QB_mem[70]), .D1(DB_int[70]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_71 ( .X(dt_intB[71]), .D0(QB_mem[71]), .D1(DB_int[71]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_72 ( .X(dt_intB[72]), .D0(QB_mem[72]), .D1(DB_int[72]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_73 ( .X(dt_intB[73]), .D0(QB_mem[73]), .D1(DB_int[73]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_74 ( .X(dt_intB[74]), .D0(QB_mem[74]), .D1(DB_int[74]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_75 ( .X(dt_intB[75]), .D0(QB_mem[75]), .D1(DB_int[75]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_76 ( .X(dt_intB[76]), .D0(QB_mem[76]), .D1(DB_int[76]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_77 ( .X(dt_intB[77]), .D0(QB_mem[77]), .D1(DB_int[77]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_78 ( .X(dt_intB[78]), .D0(QB_mem[78]), .D1(DB_int[78]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_79 ( .X(dt_intB[79]), .D0(QB_mem[79]), .D1(DB_int[79]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_80 ( .X(dt_intB[80]), .D0(QB_mem[80]), .D1(DB_int[80]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_81 ( .X(dt_intB[81]), .D0(QB_mem[81]), .D1(DB_int[81]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_82 ( .X(dt_intB[82]), .D0(QB_mem[82]), .D1(DB_int[82]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_83 ( .X(dt_intB[83]), .D0(QB_mem[83]), .D1(DB_int[83]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_84 ( .X(dt_intB[84]), .D0(QB_mem[84]), .D1(DB_int[84]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_85 ( .X(dt_intB[85]), .D0(QB_mem[85]), .D1(DB_int[85]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_86 ( .X(dt_intB[86]), .D0(QB_mem[86]), .D1(DB_int[86]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_87 ( .X(dt_intB[87]), .D0(QB_mem[87]), .D1(DB_int[87]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_88 ( .X(dt_intB[88]), .D0(QB_mem[88]), .D1(DB_int[88]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_89 ( .X(dt_intB[89]), .D0(QB_mem[89]), .D1(DB_int[89]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_90 ( .X(dt_intB[90]), .D0(QB_mem[90]), .D1(DB_int[90]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_91 ( .X(dt_intB[91]), .D0(QB_mem[91]), .D1(DB_int[91]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_92 ( .X(dt_intB[92]), .D0(QB_mem[92]), .D1(DB_int[92]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_93 ( .X(dt_intB[93]), .D0(QB_mem[93]), .D1(DB_int[93]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_94 ( .X(dt_intB[94]), .D0(QB_mem[94]), .D1(DB_int[94]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_95 ( .X(dt_intB[95]), .D0(QB_mem[95]), .D1(DB_int[95]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_96 ( .X(dt_intB[96]), .D0(QB_mem[96]), .D1(DB_int[96]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_97 ( .X(dt_intB[97]), .D0(QB_mem[97]), .D1(DB_int[97]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_98 ( .X(dt_intB[98]), .D0(QB_mem[98]), .D1(DB_int[98]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_99 ( .X(dt_intB[99]), .D0(QB_mem[99]), .D1(DB_int[99]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_100 ( .X(dt_intB[100]), .D0(QB_mem[100]), .D1(DB_int[100]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_101 ( .X(dt_intB[101]), .D0(QB_mem[101]), .D1(DB_int[101]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_102 ( .X(dt_intB[102]), .D0(QB_mem[102]), .D1(DB_int[102]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_103 ( .X(dt_intB[103]), .D0(QB_mem[103]), .D1(DB_int[103]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_104 ( .X(dt_intB[104]), .D0(QB_mem[104]), .D1(DB_int[104]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_105 ( .X(dt_intB[105]), .D0(QB_mem[105]), .D1(DB_int[105]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_106 ( .X(dt_intB[106]), .D0(QB_mem[106]), .D1(DB_int[106]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_107 ( .X(dt_intB[107]), .D0(QB_mem[107]), .D1(DB_int[107]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_108 ( .X(dt_intB[108]), .D0(QB_mem[108]), .D1(DB_int[108]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_109 ( .X(dt_intB[109]), .D0(QB_mem[109]), .D1(DB_int[109]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_110 ( .X(dt_intB[110]), .D0(QB_mem[110]), .D1(DB_int[110]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_111 ( .X(dt_intB[111]), .D0(QB_mem[111]), .D1(DB_int[111]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_112 ( .X(dt_intB[112]), .D0(QB_mem[112]), .D1(DB_int[112]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_113 ( .X(dt_intB[113]), .D0(QB_mem[113]), .D1(DB_int[113]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_114 ( .X(dt_intB[114]), .D0(QB_mem[114]), .D1(DB_int[114]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_115 ( .X(dt_intB[115]), .D0(QB_mem[115]), .D1(DB_int[115]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_116 ( .X(dt_intB[116]), .D0(QB_mem[116]), .D1(DB_int[116]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_117 ( .X(dt_intB[117]), .D0(QB_mem[117]), .D1(DB_int[117]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_118 ( .X(dt_intB[118]), .D0(QB_mem[118]), .D1(DB_int[118]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_119 ( .X(dt_intB[119]), .D0(QB_mem[119]), .D1(DB_int[119]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_120 ( .X(dt_intB[120]), .D0(QB_mem[120]), .D1(DB_int[120]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_121 ( .X(dt_intB[121]), .D0(QB_mem[121]), .D1(DB_int[121]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_122 ( .X(dt_intB[122]), .D0(QB_mem[122]), .D1(DB_int[122]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_123 ( .X(dt_intB[123]), .D0(QB_mem[123]), .D1(DB_int[123]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_124 ( .X(dt_intB[124]), .D0(QB_mem[124]), .D1(DB_int[124]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_125 ( .X(dt_intB[125]), .D0(QB_mem[125]), .D1(DB_int[125]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_126 ( .X(dt_intB[126]), .D0(QB_mem[126]), .D1(DB_int[126]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_127 ( .X(dt_intB[127]), .D0(QB_mem[127]), .D1(DB_int[127]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_128 ( .X(dt_intB[128]), .D0(QB_mem[128]), .D1(DB_int[128]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_129 ( .X(dt_intB[129]), .D0(QB_mem[129]), .D1(DB_int[129]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_130 ( .X(dt_intB[130]), .D0(QB_mem[130]), .D1(DB_int[130]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_131 ( .X(dt_intB[131]), .D0(QB_mem[131]), .D1(DB_int[131]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_132 ( .X(dt_intB[132]), .D0(QB_mem[132]), .D1(DB_int[132]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_133 ( .X(dt_intB[133]), .D0(QB_mem[133]), .D1(DB_int[133]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_134 ( .X(dt_intB[134]), .D0(QB_mem[134]), .D1(DB_int[134]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_135 ( .X(dt_intB[135]), .D0(QB_mem[135]), .D1(DB_int[135]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_136 ( .X(dt_intB[136]), .D0(QB_mem[136]), .D1(DB_int[136]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_137 ( .X(dt_intB[137]), .D0(QB_mem[137]), .D1(DB_int[137]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_138 ( .X(dt_intB[138]), .D0(QB_mem[138]), .D1(DB_int[138]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_139 ( .X(dt_intB[139]), .D0(QB_mem[139]), .D1(DB_int[139]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_140 ( .X(dt_intB[140]), .D0(QB_mem[140]), .D1(DB_int[140]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_141 ( .X(dt_intB[141]), .D0(QB_mem[141]), .D1(DB_int[141]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_142 ( .X(dt_intB[142]), .D0(QB_mem[142]), .D1(DB_int[142]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_143 ( .X(dt_intB[143]), .D0(QB_mem[143]), .D1(DB_int[143]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_144 ( .X(dt_intB[144]), .D0(QB_mem[144]), .D1(DB_int[144]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_145 ( .X(dt_intB[145]), .D0(QB_mem[145]), .D1(DB_int[145]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_146 ( .X(dt_intB[146]), .D0(QB_mem[146]), .D1(DB_int[146]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_147 ( .X(dt_intB[147]), .D0(QB_mem[147]), .D1(DB_int[147]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_148 ( .X(dt_intB[148]), .D0(QB_mem[148]), .D1(DB_int[148]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_149 ( .X(dt_intB[149]), .D0(QB_mem[149]), .D1(DB_int[149]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_150 ( .X(dt_intB[150]), .D0(QB_mem[150]), .D1(DB_int[150]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_151 ( .X(dt_intB[151]), .D0(QB_mem[151]), .D1(DB_int[151]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_152 ( .X(dt_intB[152]), .D0(QB_mem[152]), .D1(DB_int[152]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_153 ( .X(dt_intB[153]), .D0(QB_mem[153]), .D1(DB_int[153]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_154 ( .X(dt_intB[154]), .D0(QB_mem[154]), .D1(DB_int[154]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_155 ( .X(dt_intB[155]), .D0(QB_mem[155]), .D1(DB_int[155]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_156 ( .X(dt_intB[156]), .D0(QB_mem[156]), .D1(DB_int[156]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_157 ( .X(dt_intB[157]), .D0(QB_mem[157]), .D1(DB_int[157]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_158 ( .X(dt_intB[158]), .D0(QB_mem[158]), .D1(DB_int[158]), .S(DFTMASK_buf) );
VIRL_SDN_MUX2_1 mux_dt_qB_159 ( .X(dt_intB[159]), .D0(QB_mem[159]), .D1(DB_int[159]), .S(DFTMASK_buf) );

always @(dt_intB)
begin
  `ifdef VIRAGE_FAST_VERILOG
  `else
    QB_dftclken = 160'bx;
    #0.001;
  `endif // endif of VIRAGE_FAST_VERILOG
  QB_dftclken = dt_intB;
  if (DFTMASK_buf !== 1'b0)
  begin
    uut.QB_local_tmp = dt_intB;
  end
end


always @(DB_int)
begin
  if ($realtime == DFTMASK_time)
    uut.QB_local_tmp = DB_int;
end

always @(QPB_int)
begin
  `ifdef VIRAGE_FAST_VERILOG
  `else
    QPB_dftclken = 160'bx;
    #0.001;
  `endif // endif of VIRAGE_FAST_VERILOG
  QPB_dftclken = QPB_int;
end

VIRL_SDN_BUF_1 buf_doB_0 ( .X(QB_buf[0]), .A(QB_dftclken[0]) );
VIRL_SDN_BUF_1 buf_doB_1 ( .X(QB_buf[1]), .A(QB_dftclken[1]) );
VIRL_SDN_BUF_1 buf_doB_2 ( .X(QB_buf[2]), .A(QB_dftclken[2]) );
VIRL_SDN_BUF_1 buf_doB_3 ( .X(QB_buf[3]), .A(QB_dftclken[3]) );
VIRL_SDN_BUF_1 buf_doB_4 ( .X(QB_buf[4]), .A(QB_dftclken[4]) );
VIRL_SDN_BUF_1 buf_doB_5 ( .X(QB_buf[5]), .A(QB_dftclken[5]) );
VIRL_SDN_BUF_1 buf_doB_6 ( .X(QB_buf[6]), .A(QB_dftclken[6]) );
VIRL_SDN_BUF_1 buf_doB_7 ( .X(QB_buf[7]), .A(QB_dftclken[7]) );
VIRL_SDN_BUF_1 buf_doB_8 ( .X(QB_buf[8]), .A(QB_dftclken[8]) );
VIRL_SDN_BUF_1 buf_doB_9 ( .X(QB_buf[9]), .A(QB_dftclken[9]) );
VIRL_SDN_BUF_1 buf_doB_10 ( .X(QB_buf[10]), .A(QB_dftclken[10]) );
VIRL_SDN_BUF_1 buf_doB_11 ( .X(QB_buf[11]), .A(QB_dftclken[11]) );
VIRL_SDN_BUF_1 buf_doB_12 ( .X(QB_buf[12]), .A(QB_dftclken[12]) );
VIRL_SDN_BUF_1 buf_doB_13 ( .X(QB_buf[13]), .A(QB_dftclken[13]) );
VIRL_SDN_BUF_1 buf_doB_14 ( .X(QB_buf[14]), .A(QB_dftclken[14]) );
VIRL_SDN_BUF_1 buf_doB_15 ( .X(QB_buf[15]), .A(QB_dftclken[15]) );
VIRL_SDN_BUF_1 buf_doB_16 ( .X(QB_buf[16]), .A(QB_dftclken[16]) );
VIRL_SDN_BUF_1 buf_doB_17 ( .X(QB_buf[17]), .A(QB_dftclken[17]) );
VIRL_SDN_BUF_1 buf_doB_18 ( .X(QB_buf[18]), .A(QB_dftclken[18]) );
VIRL_SDN_BUF_1 buf_doB_19 ( .X(QB_buf[19]), .A(QB_dftclken[19]) );
VIRL_SDN_BUF_1 buf_doB_20 ( .X(QB_buf[20]), .A(QB_dftclken[20]) );
VIRL_SDN_BUF_1 buf_doB_21 ( .X(QB_buf[21]), .A(QB_dftclken[21]) );
VIRL_SDN_BUF_1 buf_doB_22 ( .X(QB_buf[22]), .A(QB_dftclken[22]) );
VIRL_SDN_BUF_1 buf_doB_23 ( .X(QB_buf[23]), .A(QB_dftclken[23]) );
VIRL_SDN_BUF_1 buf_doB_24 ( .X(QB_buf[24]), .A(QB_dftclken[24]) );
VIRL_SDN_BUF_1 buf_doB_25 ( .X(QB_buf[25]), .A(QB_dftclken[25]) );
VIRL_SDN_BUF_1 buf_doB_26 ( .X(QB_buf[26]), .A(QB_dftclken[26]) );
VIRL_SDN_BUF_1 buf_doB_27 ( .X(QB_buf[27]), .A(QB_dftclken[27]) );
VIRL_SDN_BUF_1 buf_doB_28 ( .X(QB_buf[28]), .A(QB_dftclken[28]) );
VIRL_SDN_BUF_1 buf_doB_29 ( .X(QB_buf[29]), .A(QB_dftclken[29]) );
VIRL_SDN_BUF_1 buf_doB_30 ( .X(QB_buf[30]), .A(QB_dftclken[30]) );
VIRL_SDN_BUF_1 buf_doB_31 ( .X(QB_buf[31]), .A(QB_dftclken[31]) );
VIRL_SDN_BUF_1 buf_doB_32 ( .X(QB_buf[32]), .A(QB_dftclken[32]) );
VIRL_SDN_BUF_1 buf_doB_33 ( .X(QB_buf[33]), .A(QB_dftclken[33]) );
VIRL_SDN_BUF_1 buf_doB_34 ( .X(QB_buf[34]), .A(QB_dftclken[34]) );
VIRL_SDN_BUF_1 buf_doB_35 ( .X(QB_buf[35]), .A(QB_dftclken[35]) );
VIRL_SDN_BUF_1 buf_doB_36 ( .X(QB_buf[36]), .A(QB_dftclken[36]) );
VIRL_SDN_BUF_1 buf_doB_37 ( .X(QB_buf[37]), .A(QB_dftclken[37]) );
VIRL_SDN_BUF_1 buf_doB_38 ( .X(QB_buf[38]), .A(QB_dftclken[38]) );
VIRL_SDN_BUF_1 buf_doB_39 ( .X(QB_buf[39]), .A(QB_dftclken[39]) );
VIRL_SDN_BUF_1 buf_doB_40 ( .X(QB_buf[40]), .A(QB_dftclken[40]) );
VIRL_SDN_BUF_1 buf_doB_41 ( .X(QB_buf[41]), .A(QB_dftclken[41]) );
VIRL_SDN_BUF_1 buf_doB_42 ( .X(QB_buf[42]), .A(QB_dftclken[42]) );
VIRL_SDN_BUF_1 buf_doB_43 ( .X(QB_buf[43]), .A(QB_dftclken[43]) );
VIRL_SDN_BUF_1 buf_doB_44 ( .X(QB_buf[44]), .A(QB_dftclken[44]) );
VIRL_SDN_BUF_1 buf_doB_45 ( .X(QB_buf[45]), .A(QB_dftclken[45]) );
VIRL_SDN_BUF_1 buf_doB_46 ( .X(QB_buf[46]), .A(QB_dftclken[46]) );
VIRL_SDN_BUF_1 buf_doB_47 ( .X(QB_buf[47]), .A(QB_dftclken[47]) );
VIRL_SDN_BUF_1 buf_doB_48 ( .X(QB_buf[48]), .A(QB_dftclken[48]) );
VIRL_SDN_BUF_1 buf_doB_49 ( .X(QB_buf[49]), .A(QB_dftclken[49]) );
VIRL_SDN_BUF_1 buf_doB_50 ( .X(QB_buf[50]), .A(QB_dftclken[50]) );
VIRL_SDN_BUF_1 buf_doB_51 ( .X(QB_buf[51]), .A(QB_dftclken[51]) );
VIRL_SDN_BUF_1 buf_doB_52 ( .X(QB_buf[52]), .A(QB_dftclken[52]) );
VIRL_SDN_BUF_1 buf_doB_53 ( .X(QB_buf[53]), .A(QB_dftclken[53]) );
VIRL_SDN_BUF_1 buf_doB_54 ( .X(QB_buf[54]), .A(QB_dftclken[54]) );
VIRL_SDN_BUF_1 buf_doB_55 ( .X(QB_buf[55]), .A(QB_dftclken[55]) );
VIRL_SDN_BUF_1 buf_doB_56 ( .X(QB_buf[56]), .A(QB_dftclken[56]) );
VIRL_SDN_BUF_1 buf_doB_57 ( .X(QB_buf[57]), .A(QB_dftclken[57]) );
VIRL_SDN_BUF_1 buf_doB_58 ( .X(QB_buf[58]), .A(QB_dftclken[58]) );
VIRL_SDN_BUF_1 buf_doB_59 ( .X(QB_buf[59]), .A(QB_dftclken[59]) );
VIRL_SDN_BUF_1 buf_doB_60 ( .X(QB_buf[60]), .A(QB_dftclken[60]) );
VIRL_SDN_BUF_1 buf_doB_61 ( .X(QB_buf[61]), .A(QB_dftclken[61]) );
VIRL_SDN_BUF_1 buf_doB_62 ( .X(QB_buf[62]), .A(QB_dftclken[62]) );
VIRL_SDN_BUF_1 buf_doB_63 ( .X(QB_buf[63]), .A(QB_dftclken[63]) );
VIRL_SDN_BUF_1 buf_doB_64 ( .X(QB_buf[64]), .A(QB_dftclken[64]) );
VIRL_SDN_BUF_1 buf_doB_65 ( .X(QB_buf[65]), .A(QB_dftclken[65]) );
VIRL_SDN_BUF_1 buf_doB_66 ( .X(QB_buf[66]), .A(QB_dftclken[66]) );
VIRL_SDN_BUF_1 buf_doB_67 ( .X(QB_buf[67]), .A(QB_dftclken[67]) );
VIRL_SDN_BUF_1 buf_doB_68 ( .X(QB_buf[68]), .A(QB_dftclken[68]) );
VIRL_SDN_BUF_1 buf_doB_69 ( .X(QB_buf[69]), .A(QB_dftclken[69]) );
VIRL_SDN_BUF_1 buf_doB_70 ( .X(QB_buf[70]), .A(QB_dftclken[70]) );
VIRL_SDN_BUF_1 buf_doB_71 ( .X(QB_buf[71]), .A(QB_dftclken[71]) );
VIRL_SDN_BUF_1 buf_doB_72 ( .X(QB_buf[72]), .A(QB_dftclken[72]) );
VIRL_SDN_BUF_1 buf_doB_73 ( .X(QB_buf[73]), .A(QB_dftclken[73]) );
VIRL_SDN_BUF_1 buf_doB_74 ( .X(QB_buf[74]), .A(QB_dftclken[74]) );
VIRL_SDN_BUF_1 buf_doB_75 ( .X(QB_buf[75]), .A(QB_dftclken[75]) );
VIRL_SDN_BUF_1 buf_doB_76 ( .X(QB_buf[76]), .A(QB_dftclken[76]) );
VIRL_SDN_BUF_1 buf_doB_77 ( .X(QB_buf[77]), .A(QB_dftclken[77]) );
VIRL_SDN_BUF_1 buf_doB_78 ( .X(QB_buf[78]), .A(QB_dftclken[78]) );
VIRL_SDN_BUF_1 buf_doB_79 ( .X(QB_buf[79]), .A(QB_dftclken[79]) );
VIRL_SDN_BUF_1 buf_doB_80 ( .X(QB_buf[80]), .A(QB_dftclken[80]) );
VIRL_SDN_BUF_1 buf_doB_81 ( .X(QB_buf[81]), .A(QB_dftclken[81]) );
VIRL_SDN_BUF_1 buf_doB_82 ( .X(QB_buf[82]), .A(QB_dftclken[82]) );
VIRL_SDN_BUF_1 buf_doB_83 ( .X(QB_buf[83]), .A(QB_dftclken[83]) );
VIRL_SDN_BUF_1 buf_doB_84 ( .X(QB_buf[84]), .A(QB_dftclken[84]) );
VIRL_SDN_BUF_1 buf_doB_85 ( .X(QB_buf[85]), .A(QB_dftclken[85]) );
VIRL_SDN_BUF_1 buf_doB_86 ( .X(QB_buf[86]), .A(QB_dftclken[86]) );
VIRL_SDN_BUF_1 buf_doB_87 ( .X(QB_buf[87]), .A(QB_dftclken[87]) );
VIRL_SDN_BUF_1 buf_doB_88 ( .X(QB_buf[88]), .A(QB_dftclken[88]) );
VIRL_SDN_BUF_1 buf_doB_89 ( .X(QB_buf[89]), .A(QB_dftclken[89]) );
VIRL_SDN_BUF_1 buf_doB_90 ( .X(QB_buf[90]), .A(QB_dftclken[90]) );
VIRL_SDN_BUF_1 buf_doB_91 ( .X(QB_buf[91]), .A(QB_dftclken[91]) );
VIRL_SDN_BUF_1 buf_doB_92 ( .X(QB_buf[92]), .A(QB_dftclken[92]) );
VIRL_SDN_BUF_1 buf_doB_93 ( .X(QB_buf[93]), .A(QB_dftclken[93]) );
VIRL_SDN_BUF_1 buf_doB_94 ( .X(QB_buf[94]), .A(QB_dftclken[94]) );
VIRL_SDN_BUF_1 buf_doB_95 ( .X(QB_buf[95]), .A(QB_dftclken[95]) );
VIRL_SDN_BUF_1 buf_doB_96 ( .X(QB_buf[96]), .A(QB_dftclken[96]) );
VIRL_SDN_BUF_1 buf_doB_97 ( .X(QB_buf[97]), .A(QB_dftclken[97]) );
VIRL_SDN_BUF_1 buf_doB_98 ( .X(QB_buf[98]), .A(QB_dftclken[98]) );
VIRL_SDN_BUF_1 buf_doB_99 ( .X(QB_buf[99]), .A(QB_dftclken[99]) );
VIRL_SDN_BUF_1 buf_doB_100 ( .X(QB_buf[100]), .A(QB_dftclken[100]) );
VIRL_SDN_BUF_1 buf_doB_101 ( .X(QB_buf[101]), .A(QB_dftclken[101]) );
VIRL_SDN_BUF_1 buf_doB_102 ( .X(QB_buf[102]), .A(QB_dftclken[102]) );
VIRL_SDN_BUF_1 buf_doB_103 ( .X(QB_buf[103]), .A(QB_dftclken[103]) );
VIRL_SDN_BUF_1 buf_doB_104 ( .X(QB_buf[104]), .A(QB_dftclken[104]) );
VIRL_SDN_BUF_1 buf_doB_105 ( .X(QB_buf[105]), .A(QB_dftclken[105]) );
VIRL_SDN_BUF_1 buf_doB_106 ( .X(QB_buf[106]), .A(QB_dftclken[106]) );
VIRL_SDN_BUF_1 buf_doB_107 ( .X(QB_buf[107]), .A(QB_dftclken[107]) );
VIRL_SDN_BUF_1 buf_doB_108 ( .X(QB_buf[108]), .A(QB_dftclken[108]) );
VIRL_SDN_BUF_1 buf_doB_109 ( .X(QB_buf[109]), .A(QB_dftclken[109]) );
VIRL_SDN_BUF_1 buf_doB_110 ( .X(QB_buf[110]), .A(QB_dftclken[110]) );
VIRL_SDN_BUF_1 buf_doB_111 ( .X(QB_buf[111]), .A(QB_dftclken[111]) );
VIRL_SDN_BUF_1 buf_doB_112 ( .X(QB_buf[112]), .A(QB_dftclken[112]) );
VIRL_SDN_BUF_1 buf_doB_113 ( .X(QB_buf[113]), .A(QB_dftclken[113]) );
VIRL_SDN_BUF_1 buf_doB_114 ( .X(QB_buf[114]), .A(QB_dftclken[114]) );
VIRL_SDN_BUF_1 buf_doB_115 ( .X(QB_buf[115]), .A(QB_dftclken[115]) );
VIRL_SDN_BUF_1 buf_doB_116 ( .X(QB_buf[116]), .A(QB_dftclken[116]) );
VIRL_SDN_BUF_1 buf_doB_117 ( .X(QB_buf[117]), .A(QB_dftclken[117]) );
VIRL_SDN_BUF_1 buf_doB_118 ( .X(QB_buf[118]), .A(QB_dftclken[118]) );
VIRL_SDN_BUF_1 buf_doB_119 ( .X(QB_buf[119]), .A(QB_dftclken[119]) );
VIRL_SDN_BUF_1 buf_doB_120 ( .X(QB_buf[120]), .A(QB_dftclken[120]) );
VIRL_SDN_BUF_1 buf_doB_121 ( .X(QB_buf[121]), .A(QB_dftclken[121]) );
VIRL_SDN_BUF_1 buf_doB_122 ( .X(QB_buf[122]), .A(QB_dftclken[122]) );
VIRL_SDN_BUF_1 buf_doB_123 ( .X(QB_buf[123]), .A(QB_dftclken[123]) );
VIRL_SDN_BUF_1 buf_doB_124 ( .X(QB_buf[124]), .A(QB_dftclken[124]) );
VIRL_SDN_BUF_1 buf_doB_125 ( .X(QB_buf[125]), .A(QB_dftclken[125]) );
VIRL_SDN_BUF_1 buf_doB_126 ( .X(QB_buf[126]), .A(QB_dftclken[126]) );
VIRL_SDN_BUF_1 buf_doB_127 ( .X(QB_buf[127]), .A(QB_dftclken[127]) );
VIRL_SDN_BUF_1 buf_doB_128 ( .X(QB_buf[128]), .A(QB_dftclken[128]) );
VIRL_SDN_BUF_1 buf_doB_129 ( .X(QB_buf[129]), .A(QB_dftclken[129]) );
VIRL_SDN_BUF_1 buf_doB_130 ( .X(QB_buf[130]), .A(QB_dftclken[130]) );
VIRL_SDN_BUF_1 buf_doB_131 ( .X(QB_buf[131]), .A(QB_dftclken[131]) );
VIRL_SDN_BUF_1 buf_doB_132 ( .X(QB_buf[132]), .A(QB_dftclken[132]) );
VIRL_SDN_BUF_1 buf_doB_133 ( .X(QB_buf[133]), .A(QB_dftclken[133]) );
VIRL_SDN_BUF_1 buf_doB_134 ( .X(QB_buf[134]), .A(QB_dftclken[134]) );
VIRL_SDN_BUF_1 buf_doB_135 ( .X(QB_buf[135]), .A(QB_dftclken[135]) );
VIRL_SDN_BUF_1 buf_doB_136 ( .X(QB_buf[136]), .A(QB_dftclken[136]) );
VIRL_SDN_BUF_1 buf_doB_137 ( .X(QB_buf[137]), .A(QB_dftclken[137]) );
VIRL_SDN_BUF_1 buf_doB_138 ( .X(QB_buf[138]), .A(QB_dftclken[138]) );
VIRL_SDN_BUF_1 buf_doB_139 ( .X(QB_buf[139]), .A(QB_dftclken[139]) );
VIRL_SDN_BUF_1 buf_doB_140 ( .X(QB_buf[140]), .A(QB_dftclken[140]) );
VIRL_SDN_BUF_1 buf_doB_141 ( .X(QB_buf[141]), .A(QB_dftclken[141]) );
VIRL_SDN_BUF_1 buf_doB_142 ( .X(QB_buf[142]), .A(QB_dftclken[142]) );
VIRL_SDN_BUF_1 buf_doB_143 ( .X(QB_buf[143]), .A(QB_dftclken[143]) );
VIRL_SDN_BUF_1 buf_doB_144 ( .X(QB_buf[144]), .A(QB_dftclken[144]) );
VIRL_SDN_BUF_1 buf_doB_145 ( .X(QB_buf[145]), .A(QB_dftclken[145]) );
VIRL_SDN_BUF_1 buf_doB_146 ( .X(QB_buf[146]), .A(QB_dftclken[146]) );
VIRL_SDN_BUF_1 buf_doB_147 ( .X(QB_buf[147]), .A(QB_dftclken[147]) );
VIRL_SDN_BUF_1 buf_doB_148 ( .X(QB_buf[148]), .A(QB_dftclken[148]) );
VIRL_SDN_BUF_1 buf_doB_149 ( .X(QB_buf[149]), .A(QB_dftclken[149]) );
VIRL_SDN_BUF_1 buf_doB_150 ( .X(QB_buf[150]), .A(QB_dftclken[150]) );
VIRL_SDN_BUF_1 buf_doB_151 ( .X(QB_buf[151]), .A(QB_dftclken[151]) );
VIRL_SDN_BUF_1 buf_doB_152 ( .X(QB_buf[152]), .A(QB_dftclken[152]) );
VIRL_SDN_BUF_1 buf_doB_153 ( .X(QB_buf[153]), .A(QB_dftclken[153]) );
VIRL_SDN_BUF_1 buf_doB_154 ( .X(QB_buf[154]), .A(QB_dftclken[154]) );
VIRL_SDN_BUF_1 buf_doB_155 ( .X(QB_buf[155]), .A(QB_dftclken[155]) );
VIRL_SDN_BUF_1 buf_doB_156 ( .X(QB_buf[156]), .A(QB_dftclken[156]) );
VIRL_SDN_BUF_1 buf_doB_157 ( .X(QB_buf[157]), .A(QB_dftclken[157]) );
VIRL_SDN_BUF_1 buf_doB_158 ( .X(QB_buf[158]), .A(QB_dftclken[158]) );
VIRL_SDN_BUF_1 buf_doB_159 ( .X(QB_buf[159]), .A(QB_dftclken[159]) );

VIRL_SDN_BUF_1 buf_qpB_0 ( .X(QPB_buf[0]), .A(QPB_dftclken[0]) );
VIRL_SDN_BUF_1 buf_qpB_1 ( .X(QPB_buf[1]), .A(QPB_dftclken[1]) );
VIRL_SDN_BUF_1 buf_qpB_2 ( .X(QPB_buf[2]), .A(QPB_dftclken[2]) );
VIRL_SDN_BUF_1 buf_qpB_3 ( .X(QPB_buf[3]), .A(QPB_dftclken[3]) );
VIRL_SDN_BUF_1 buf_qpB_4 ( .X(QPB_buf[4]), .A(QPB_dftclken[4]) );
VIRL_SDN_BUF_1 buf_qpB_5 ( .X(QPB_buf[5]), .A(QPB_dftclken[5]) );
VIRL_SDN_BUF_1 buf_qpB_6 ( .X(QPB_buf[6]), .A(QPB_dftclken[6]) );
VIRL_SDN_BUF_1 buf_qpB_7 ( .X(QPB_buf[7]), .A(QPB_dftclken[7]) );
VIRL_SDN_BUF_1 buf_qpB_8 ( .X(QPB_buf[8]), .A(QPB_dftclken[8]) );
VIRL_SDN_BUF_1 buf_qpB_9 ( .X(QPB_buf[9]), .A(QPB_dftclken[9]) );
VIRL_SDN_BUF_1 buf_qpB_10 ( .X(QPB_buf[10]), .A(QPB_dftclken[10]) );
VIRL_SDN_BUF_1 buf_qpB_11 ( .X(QPB_buf[11]), .A(QPB_dftclken[11]) );
VIRL_SDN_BUF_1 buf_qpB_12 ( .X(QPB_buf[12]), .A(QPB_dftclken[12]) );
VIRL_SDN_BUF_1 buf_qpB_13 ( .X(QPB_buf[13]), .A(QPB_dftclken[13]) );
VIRL_SDN_BUF_1 buf_qpB_14 ( .X(QPB_buf[14]), .A(QPB_dftclken[14]) );
VIRL_SDN_BUF_1 buf_qpB_15 ( .X(QPB_buf[15]), .A(QPB_dftclken[15]) );
VIRL_SDN_BUF_1 buf_qpB_16 ( .X(QPB_buf[16]), .A(QPB_dftclken[16]) );
VIRL_SDN_BUF_1 buf_qpB_17 ( .X(QPB_buf[17]), .A(QPB_dftclken[17]) );
VIRL_SDN_BUF_1 buf_qpB_18 ( .X(QPB_buf[18]), .A(QPB_dftclken[18]) );
VIRL_SDN_BUF_1 buf_qpB_19 ( .X(QPB_buf[19]), .A(QPB_dftclken[19]) );
VIRL_SDN_BUF_1 buf_qpB_20 ( .X(QPB_buf[20]), .A(QPB_dftclken[20]) );
VIRL_SDN_BUF_1 buf_qpB_21 ( .X(QPB_buf[21]), .A(QPB_dftclken[21]) );
VIRL_SDN_BUF_1 buf_qpB_22 ( .X(QPB_buf[22]), .A(QPB_dftclken[22]) );
VIRL_SDN_BUF_1 buf_qpB_23 ( .X(QPB_buf[23]), .A(QPB_dftclken[23]) );
VIRL_SDN_BUF_1 buf_qpB_24 ( .X(QPB_buf[24]), .A(QPB_dftclken[24]) );
VIRL_SDN_BUF_1 buf_qpB_25 ( .X(QPB_buf[25]), .A(QPB_dftclken[25]) );
VIRL_SDN_BUF_1 buf_qpB_26 ( .X(QPB_buf[26]), .A(QPB_dftclken[26]) );
VIRL_SDN_BUF_1 buf_qpB_27 ( .X(QPB_buf[27]), .A(QPB_dftclken[27]) );
VIRL_SDN_BUF_1 buf_qpB_28 ( .X(QPB_buf[28]), .A(QPB_dftclken[28]) );
VIRL_SDN_BUF_1 buf_qpB_29 ( .X(QPB_buf[29]), .A(QPB_dftclken[29]) );
VIRL_SDN_BUF_1 buf_qpB_30 ( .X(QPB_buf[30]), .A(QPB_dftclken[30]) );
VIRL_SDN_BUF_1 buf_qpB_31 ( .X(QPB_buf[31]), .A(QPB_dftclken[31]) );
VIRL_SDN_BUF_1 buf_qpB_32 ( .X(QPB_buf[32]), .A(QPB_dftclken[32]) );
VIRL_SDN_BUF_1 buf_qpB_33 ( .X(QPB_buf[33]), .A(QPB_dftclken[33]) );
VIRL_SDN_BUF_1 buf_qpB_34 ( .X(QPB_buf[34]), .A(QPB_dftclken[34]) );
VIRL_SDN_BUF_1 buf_qpB_35 ( .X(QPB_buf[35]), .A(QPB_dftclken[35]) );
VIRL_SDN_BUF_1 buf_qpB_36 ( .X(QPB_buf[36]), .A(QPB_dftclken[36]) );
VIRL_SDN_BUF_1 buf_qpB_37 ( .X(QPB_buf[37]), .A(QPB_dftclken[37]) );
VIRL_SDN_BUF_1 buf_qpB_38 ( .X(QPB_buf[38]), .A(QPB_dftclken[38]) );
VIRL_SDN_BUF_1 buf_qpB_39 ( .X(QPB_buf[39]), .A(QPB_dftclken[39]) );
VIRL_SDN_BUF_1 buf_qpB_40 ( .X(QPB_buf[40]), .A(QPB_dftclken[40]) );
VIRL_SDN_BUF_1 buf_qpB_41 ( .X(QPB_buf[41]), .A(QPB_dftclken[41]) );
VIRL_SDN_BUF_1 buf_qpB_42 ( .X(QPB_buf[42]), .A(QPB_dftclken[42]) );
VIRL_SDN_BUF_1 buf_qpB_43 ( .X(QPB_buf[43]), .A(QPB_dftclken[43]) );
VIRL_SDN_BUF_1 buf_qpB_44 ( .X(QPB_buf[44]), .A(QPB_dftclken[44]) );
VIRL_SDN_BUF_1 buf_qpB_45 ( .X(QPB_buf[45]), .A(QPB_dftclken[45]) );
VIRL_SDN_BUF_1 buf_qpB_46 ( .X(QPB_buf[46]), .A(QPB_dftclken[46]) );
VIRL_SDN_BUF_1 buf_qpB_47 ( .X(QPB_buf[47]), .A(QPB_dftclken[47]) );
VIRL_SDN_BUF_1 buf_qpB_48 ( .X(QPB_buf[48]), .A(QPB_dftclken[48]) );
VIRL_SDN_BUF_1 buf_qpB_49 ( .X(QPB_buf[49]), .A(QPB_dftclken[49]) );
VIRL_SDN_BUF_1 buf_qpB_50 ( .X(QPB_buf[50]), .A(QPB_dftclken[50]) );
VIRL_SDN_BUF_1 buf_qpB_51 ( .X(QPB_buf[51]), .A(QPB_dftclken[51]) );
VIRL_SDN_BUF_1 buf_qpB_52 ( .X(QPB_buf[52]), .A(QPB_dftclken[52]) );
VIRL_SDN_BUF_1 buf_qpB_53 ( .X(QPB_buf[53]), .A(QPB_dftclken[53]) );
VIRL_SDN_BUF_1 buf_qpB_54 ( .X(QPB_buf[54]), .A(QPB_dftclken[54]) );
VIRL_SDN_BUF_1 buf_qpB_55 ( .X(QPB_buf[55]), .A(QPB_dftclken[55]) );
VIRL_SDN_BUF_1 buf_qpB_56 ( .X(QPB_buf[56]), .A(QPB_dftclken[56]) );
VIRL_SDN_BUF_1 buf_qpB_57 ( .X(QPB_buf[57]), .A(QPB_dftclken[57]) );
VIRL_SDN_BUF_1 buf_qpB_58 ( .X(QPB_buf[58]), .A(QPB_dftclken[58]) );
VIRL_SDN_BUF_1 buf_qpB_59 ( .X(QPB_buf[59]), .A(QPB_dftclken[59]) );
VIRL_SDN_BUF_1 buf_qpB_60 ( .X(QPB_buf[60]), .A(QPB_dftclken[60]) );
VIRL_SDN_BUF_1 buf_qpB_61 ( .X(QPB_buf[61]), .A(QPB_dftclken[61]) );
VIRL_SDN_BUF_1 buf_qpB_62 ( .X(QPB_buf[62]), .A(QPB_dftclken[62]) );
VIRL_SDN_BUF_1 buf_qpB_63 ( .X(QPB_buf[63]), .A(QPB_dftclken[63]) );
VIRL_SDN_BUF_1 buf_qpB_64 ( .X(QPB_buf[64]), .A(QPB_dftclken[64]) );
VIRL_SDN_BUF_1 buf_qpB_65 ( .X(QPB_buf[65]), .A(QPB_dftclken[65]) );
VIRL_SDN_BUF_1 buf_qpB_66 ( .X(QPB_buf[66]), .A(QPB_dftclken[66]) );
VIRL_SDN_BUF_1 buf_qpB_67 ( .X(QPB_buf[67]), .A(QPB_dftclken[67]) );
VIRL_SDN_BUF_1 buf_qpB_68 ( .X(QPB_buf[68]), .A(QPB_dftclken[68]) );
VIRL_SDN_BUF_1 buf_qpB_69 ( .X(QPB_buf[69]), .A(QPB_dftclken[69]) );
VIRL_SDN_BUF_1 buf_qpB_70 ( .X(QPB_buf[70]), .A(QPB_dftclken[70]) );
VIRL_SDN_BUF_1 buf_qpB_71 ( .X(QPB_buf[71]), .A(QPB_dftclken[71]) );
VIRL_SDN_BUF_1 buf_qpB_72 ( .X(QPB_buf[72]), .A(QPB_dftclken[72]) );
VIRL_SDN_BUF_1 buf_qpB_73 ( .X(QPB_buf[73]), .A(QPB_dftclken[73]) );
VIRL_SDN_BUF_1 buf_qpB_74 ( .X(QPB_buf[74]), .A(QPB_dftclken[74]) );
VIRL_SDN_BUF_1 buf_qpB_75 ( .X(QPB_buf[75]), .A(QPB_dftclken[75]) );
VIRL_SDN_BUF_1 buf_qpB_76 ( .X(QPB_buf[76]), .A(QPB_dftclken[76]) );
VIRL_SDN_BUF_1 buf_qpB_77 ( .X(QPB_buf[77]), .A(QPB_dftclken[77]) );
VIRL_SDN_BUF_1 buf_qpB_78 ( .X(QPB_buf[78]), .A(QPB_dftclken[78]) );
VIRL_SDN_BUF_1 buf_qpB_79 ( .X(QPB_buf[79]), .A(QPB_dftclken[79]) );
VIRL_SDN_BUF_1 buf_qpB_80 ( .X(QPB_buf[80]), .A(QPB_dftclken[80]) );
VIRL_SDN_BUF_1 buf_qpB_81 ( .X(QPB_buf[81]), .A(QPB_dftclken[81]) );
VIRL_SDN_BUF_1 buf_qpB_82 ( .X(QPB_buf[82]), .A(QPB_dftclken[82]) );
VIRL_SDN_BUF_1 buf_qpB_83 ( .X(QPB_buf[83]), .A(QPB_dftclken[83]) );
VIRL_SDN_BUF_1 buf_qpB_84 ( .X(QPB_buf[84]), .A(QPB_dftclken[84]) );
VIRL_SDN_BUF_1 buf_qpB_85 ( .X(QPB_buf[85]), .A(QPB_dftclken[85]) );
VIRL_SDN_BUF_1 buf_qpB_86 ( .X(QPB_buf[86]), .A(QPB_dftclken[86]) );
VIRL_SDN_BUF_1 buf_qpB_87 ( .X(QPB_buf[87]), .A(QPB_dftclken[87]) );
VIRL_SDN_BUF_1 buf_qpB_88 ( .X(QPB_buf[88]), .A(QPB_dftclken[88]) );
VIRL_SDN_BUF_1 buf_qpB_89 ( .X(QPB_buf[89]), .A(QPB_dftclken[89]) );
VIRL_SDN_BUF_1 buf_qpB_90 ( .X(QPB_buf[90]), .A(QPB_dftclken[90]) );
VIRL_SDN_BUF_1 buf_qpB_91 ( .X(QPB_buf[91]), .A(QPB_dftclken[91]) );
VIRL_SDN_BUF_1 buf_qpB_92 ( .X(QPB_buf[92]), .A(QPB_dftclken[92]) );
VIRL_SDN_BUF_1 buf_qpB_93 ( .X(QPB_buf[93]), .A(QPB_dftclken[93]) );
VIRL_SDN_BUF_1 buf_qpB_94 ( .X(QPB_buf[94]), .A(QPB_dftclken[94]) );
VIRL_SDN_BUF_1 buf_qpB_95 ( .X(QPB_buf[95]), .A(QPB_dftclken[95]) );
VIRL_SDN_BUF_1 buf_qpB_96 ( .X(QPB_buf[96]), .A(QPB_dftclken[96]) );
VIRL_SDN_BUF_1 buf_qpB_97 ( .X(QPB_buf[97]), .A(QPB_dftclken[97]) );
VIRL_SDN_BUF_1 buf_qpB_98 ( .X(QPB_buf[98]), .A(QPB_dftclken[98]) );
VIRL_SDN_BUF_1 buf_qpB_99 ( .X(QPB_buf[99]), .A(QPB_dftclken[99]) );
VIRL_SDN_BUF_1 buf_qpB_100 ( .X(QPB_buf[100]), .A(QPB_dftclken[100]) );
VIRL_SDN_BUF_1 buf_qpB_101 ( .X(QPB_buf[101]), .A(QPB_dftclken[101]) );
VIRL_SDN_BUF_1 buf_qpB_102 ( .X(QPB_buf[102]), .A(QPB_dftclken[102]) );
VIRL_SDN_BUF_1 buf_qpB_103 ( .X(QPB_buf[103]), .A(QPB_dftclken[103]) );
VIRL_SDN_BUF_1 buf_qpB_104 ( .X(QPB_buf[104]), .A(QPB_dftclken[104]) );
VIRL_SDN_BUF_1 buf_qpB_105 ( .X(QPB_buf[105]), .A(QPB_dftclken[105]) );
VIRL_SDN_BUF_1 buf_qpB_106 ( .X(QPB_buf[106]), .A(QPB_dftclken[106]) );
VIRL_SDN_BUF_1 buf_qpB_107 ( .X(QPB_buf[107]), .A(QPB_dftclken[107]) );
VIRL_SDN_BUF_1 buf_qpB_108 ( .X(QPB_buf[108]), .A(QPB_dftclken[108]) );
VIRL_SDN_BUF_1 buf_qpB_109 ( .X(QPB_buf[109]), .A(QPB_dftclken[109]) );
VIRL_SDN_BUF_1 buf_qpB_110 ( .X(QPB_buf[110]), .A(QPB_dftclken[110]) );
VIRL_SDN_BUF_1 buf_qpB_111 ( .X(QPB_buf[111]), .A(QPB_dftclken[111]) );
VIRL_SDN_BUF_1 buf_qpB_112 ( .X(QPB_buf[112]), .A(QPB_dftclken[112]) );
VIRL_SDN_BUF_1 buf_qpB_113 ( .X(QPB_buf[113]), .A(QPB_dftclken[113]) );
VIRL_SDN_BUF_1 buf_qpB_114 ( .X(QPB_buf[114]), .A(QPB_dftclken[114]) );
VIRL_SDN_BUF_1 buf_qpB_115 ( .X(QPB_buf[115]), .A(QPB_dftclken[115]) );
VIRL_SDN_BUF_1 buf_qpB_116 ( .X(QPB_buf[116]), .A(QPB_dftclken[116]) );
VIRL_SDN_BUF_1 buf_qpB_117 ( .X(QPB_buf[117]), .A(QPB_dftclken[117]) );
VIRL_SDN_BUF_1 buf_qpB_118 ( .X(QPB_buf[118]), .A(QPB_dftclken[118]) );
VIRL_SDN_BUF_1 buf_qpB_119 ( .X(QPB_buf[119]), .A(QPB_dftclken[119]) );
VIRL_SDN_BUF_1 buf_qpB_120 ( .X(QPB_buf[120]), .A(QPB_dftclken[120]) );
VIRL_SDN_BUF_1 buf_qpB_121 ( .X(QPB_buf[121]), .A(QPB_dftclken[121]) );
VIRL_SDN_BUF_1 buf_qpB_122 ( .X(QPB_buf[122]), .A(QPB_dftclken[122]) );
VIRL_SDN_BUF_1 buf_qpB_123 ( .X(QPB_buf[123]), .A(QPB_dftclken[123]) );
VIRL_SDN_BUF_1 buf_qpB_124 ( .X(QPB_buf[124]), .A(QPB_dftclken[124]) );
VIRL_SDN_BUF_1 buf_qpB_125 ( .X(QPB_buf[125]), .A(QPB_dftclken[125]) );
VIRL_SDN_BUF_1 buf_qpB_126 ( .X(QPB_buf[126]), .A(QPB_dftclken[126]) );
VIRL_SDN_BUF_1 buf_qpB_127 ( .X(QPB_buf[127]), .A(QPB_dftclken[127]) );
VIRL_SDN_BUF_1 buf_qpB_128 ( .X(QPB_buf[128]), .A(QPB_dftclken[128]) );
VIRL_SDN_BUF_1 buf_qpB_129 ( .X(QPB_buf[129]), .A(QPB_dftclken[129]) );
VIRL_SDN_BUF_1 buf_qpB_130 ( .X(QPB_buf[130]), .A(QPB_dftclken[130]) );
VIRL_SDN_BUF_1 buf_qpB_131 ( .X(QPB_buf[131]), .A(QPB_dftclken[131]) );
VIRL_SDN_BUF_1 buf_qpB_132 ( .X(QPB_buf[132]), .A(QPB_dftclken[132]) );
VIRL_SDN_BUF_1 buf_qpB_133 ( .X(QPB_buf[133]), .A(QPB_dftclken[133]) );
VIRL_SDN_BUF_1 buf_qpB_134 ( .X(QPB_buf[134]), .A(QPB_dftclken[134]) );
VIRL_SDN_BUF_1 buf_qpB_135 ( .X(QPB_buf[135]), .A(QPB_dftclken[135]) );
VIRL_SDN_BUF_1 buf_qpB_136 ( .X(QPB_buf[136]), .A(QPB_dftclken[136]) );
VIRL_SDN_BUF_1 buf_qpB_137 ( .X(QPB_buf[137]), .A(QPB_dftclken[137]) );
VIRL_SDN_BUF_1 buf_qpB_138 ( .X(QPB_buf[138]), .A(QPB_dftclken[138]) );
VIRL_SDN_BUF_1 buf_qpB_139 ( .X(QPB_buf[139]), .A(QPB_dftclken[139]) );
VIRL_SDN_BUF_1 buf_qpB_140 ( .X(QPB_buf[140]), .A(QPB_dftclken[140]) );
VIRL_SDN_BUF_1 buf_qpB_141 ( .X(QPB_buf[141]), .A(QPB_dftclken[141]) );
VIRL_SDN_BUF_1 buf_qpB_142 ( .X(QPB_buf[142]), .A(QPB_dftclken[142]) );
VIRL_SDN_BUF_1 buf_qpB_143 ( .X(QPB_buf[143]), .A(QPB_dftclken[143]) );
VIRL_SDN_BUF_1 buf_qpB_144 ( .X(QPB_buf[144]), .A(QPB_dftclken[144]) );
VIRL_SDN_BUF_1 buf_qpB_145 ( .X(QPB_buf[145]), .A(QPB_dftclken[145]) );
VIRL_SDN_BUF_1 buf_qpB_146 ( .X(QPB_buf[146]), .A(QPB_dftclken[146]) );
VIRL_SDN_BUF_1 buf_qpB_147 ( .X(QPB_buf[147]), .A(QPB_dftclken[147]) );
VIRL_SDN_BUF_1 buf_qpB_148 ( .X(QPB_buf[148]), .A(QPB_dftclken[148]) );
VIRL_SDN_BUF_1 buf_qpB_149 ( .X(QPB_buf[149]), .A(QPB_dftclken[149]) );
VIRL_SDN_BUF_1 buf_qpB_150 ( .X(QPB_buf[150]), .A(QPB_dftclken[150]) );
VIRL_SDN_BUF_1 buf_qpB_151 ( .X(QPB_buf[151]), .A(QPB_dftclken[151]) );
VIRL_SDN_BUF_1 buf_qpB_152 ( .X(QPB_buf[152]), .A(QPB_dftclken[152]) );
VIRL_SDN_BUF_1 buf_qpB_153 ( .X(QPB_buf[153]), .A(QPB_dftclken[153]) );
VIRL_SDN_BUF_1 buf_qpB_154 ( .X(QPB_buf[154]), .A(QPB_dftclken[154]) );
VIRL_SDN_BUF_1 buf_qpB_155 ( .X(QPB_buf[155]), .A(QPB_dftclken[155]) );
VIRL_SDN_BUF_1 buf_qpB_156 ( .X(QPB_buf[156]), .A(QPB_dftclken[156]) );
VIRL_SDN_BUF_1 buf_qpB_157 ( .X(QPB_buf[157]), .A(QPB_dftclken[157]) );
VIRL_SDN_BUF_1 buf_qpB_158 ( .X(QPB_buf[158]), .A(QPB_dftclken[158]) );
VIRL_SDN_BUF_1 buf_qpB_159 ( .X(QPB_buf[159]), .A(QPB_dftclken[159]) );

VIRL_SDN_BUF_1 buf_cd_expB_0 (.X(CDB_exp[0]), .A(CDB_int[0]));
VIRL_SDN_BUF_1 buf_cd_expB_1 (.X(CDB_exp[1]), .A(CDB_int[1]));
VIRL_SDN_BUF_1 buf_cd_expB_2 (.X(CDB_exp[2]), .A(CDB_int[2]));
VIRL_SDN_BUF_1 buf_cd_expB_3 (.X(CDB_exp[3]), .A(CDB_int[3]));
VIRL_SDN_BUF_1 buf_cd_expB_4 (.X(CDB_exp[4]), .A(CDB_int[0]));
VIRL_SDN_BUF_1 buf_cd_expB_5 (.X(CDB_exp[5]), .A(CDB_int[1]));
VIRL_SDN_BUF_1 buf_cd_expB_6 (.X(CDB_exp[6]), .A(CDB_int[2]));
VIRL_SDN_BUF_1 buf_cd_expB_7 (.X(CDB_exp[7]), .A(CDB_int[3]));
VIRL_SDN_BUF_1 buf_cd_expB_8 (.X(CDB_exp[8]), .A(CDB_int[0]));
VIRL_SDN_BUF_1 buf_cd_expB_9 (.X(CDB_exp[9]), .A(CDB_int[1]));
VIRL_SDN_BUF_1 buf_cd_expB_10 (.X(CDB_exp[10]), .A(CDB_int[2]));
VIRL_SDN_BUF_1 buf_cd_expB_11 (.X(CDB_exp[11]), .A(CDB_int[3]));
VIRL_SDN_BUF_1 buf_cd_expB_12 (.X(CDB_exp[12]), .A(CDB_int[0]));
VIRL_SDN_BUF_1 buf_cd_expB_13 (.X(CDB_exp[13]), .A(CDB_int[1]));
VIRL_SDN_BUF_1 buf_cd_expB_14 (.X(CDB_exp[14]), .A(CDB_int[2]));
VIRL_SDN_BUF_1 buf_cd_expB_15 (.X(CDB_exp[15]), .A(CDB_int[3]));
VIRL_SDN_BUF_1 buf_cd_expB_16 (.X(CDB_exp[16]), .A(CDB_int[0]));
VIRL_SDN_BUF_1 buf_cd_expB_17 (.X(CDB_exp[17]), .A(CDB_int[1]));
VIRL_SDN_BUF_1 buf_cd_expB_18 (.X(CDB_exp[18]), .A(CDB_int[2]));
VIRL_SDN_BUF_1 buf_cd_expB_19 (.X(CDB_exp[19]), .A(CDB_int[3]));
VIRL_SDN_BUF_1 buf_cd_expB_20 (.X(CDB_exp[20]), .A(CDB_int[0]));
VIRL_SDN_BUF_1 buf_cd_expB_21 (.X(CDB_exp[21]), .A(CDB_int[1]));
VIRL_SDN_BUF_1 buf_cd_expB_22 (.X(CDB_exp[22]), .A(CDB_int[2]));
VIRL_SDN_BUF_1 buf_cd_expB_23 (.X(CDB_exp[23]), .A(CDB_int[3]));
VIRL_SDN_BUF_1 buf_cd_expB_24 (.X(CDB_exp[24]), .A(CDB_int[0]));
VIRL_SDN_BUF_1 buf_cd_expB_25 (.X(CDB_exp[25]), .A(CDB_int[1]));
VIRL_SDN_BUF_1 buf_cd_expB_26 (.X(CDB_exp[26]), .A(CDB_int[2]));
VIRL_SDN_BUF_1 buf_cd_expB_27 (.X(CDB_exp[27]), .A(CDB_int[3]));
VIRL_SDN_BUF_1 buf_cd_expB_28 (.X(CDB_exp[28]), .A(CDB_int[0]));
VIRL_SDN_BUF_1 buf_cd_expB_29 (.X(CDB_exp[29]), .A(CDB_int[1]));
VIRL_SDN_BUF_1 buf_cd_expB_30 (.X(CDB_exp[30]), .A(CDB_int[2]));
VIRL_SDN_BUF_1 buf_cd_expB_31 (.X(CDB_exp[31]), .A(CDB_int[3]));
VIRL_SDN_BUF_1 buf_cd_expB_32 (.X(CDB_exp[32]), .A(CDB_int[0]));
VIRL_SDN_BUF_1 buf_cd_expB_33 (.X(CDB_exp[33]), .A(CDB_int[1]));
VIRL_SDN_BUF_1 buf_cd_expB_34 (.X(CDB_exp[34]), .A(CDB_int[2]));
VIRL_SDN_BUF_1 buf_cd_expB_35 (.X(CDB_exp[35]), .A(CDB_int[3]));
VIRL_SDN_BUF_1 buf_cd_expB_36 (.X(CDB_exp[36]), .A(CDB_int[0]));
VIRL_SDN_BUF_1 buf_cd_expB_37 (.X(CDB_exp[37]), .A(CDB_int[1]));
VIRL_SDN_BUF_1 buf_cd_expB_38 (.X(CDB_exp[38]), .A(CDB_int[2]));
VIRL_SDN_BUF_1 buf_cd_expB_39 (.X(CDB_exp[39]), .A(CDB_int[3]));
VIRL_SDN_BUF_1 buf_cd_expB_40 (.X(CDB_exp[40]), .A(CDB_int[0]));
VIRL_SDN_BUF_1 buf_cd_expB_41 (.X(CDB_exp[41]), .A(CDB_int[1]));
VIRL_SDN_BUF_1 buf_cd_expB_42 (.X(CDB_exp[42]), .A(CDB_int[2]));
VIRL_SDN_BUF_1 buf_cd_expB_43 (.X(CDB_exp[43]), .A(CDB_int[3]));
VIRL_SDN_BUF_1 buf_cd_expB_44 (.X(CDB_exp[44]), .A(CDB_int[0]));
VIRL_SDN_BUF_1 buf_cd_expB_45 (.X(CDB_exp[45]), .A(CDB_int[1]));
VIRL_SDN_BUF_1 buf_cd_expB_46 (.X(CDB_exp[46]), .A(CDB_int[2]));
VIRL_SDN_BUF_1 buf_cd_expB_47 (.X(CDB_exp[47]), .A(CDB_int[3]));
VIRL_SDN_BUF_1 buf_cd_expB_48 (.X(CDB_exp[48]), .A(CDB_int[0]));
VIRL_SDN_BUF_1 buf_cd_expB_49 (.X(CDB_exp[49]), .A(CDB_int[1]));
VIRL_SDN_BUF_1 buf_cd_expB_50 (.X(CDB_exp[50]), .A(CDB_int[2]));
VIRL_SDN_BUF_1 buf_cd_expB_51 (.X(CDB_exp[51]), .A(CDB_int[3]));
VIRL_SDN_BUF_1 buf_cd_expB_52 (.X(CDB_exp[52]), .A(CDB_int[0]));
VIRL_SDN_BUF_1 buf_cd_expB_53 (.X(CDB_exp[53]), .A(CDB_int[1]));
VIRL_SDN_BUF_1 buf_cd_expB_54 (.X(CDB_exp[54]), .A(CDB_int[2]));
VIRL_SDN_BUF_1 buf_cd_expB_55 (.X(CDB_exp[55]), .A(CDB_int[3]));
VIRL_SDN_BUF_1 buf_cd_expB_56 (.X(CDB_exp[56]), .A(CDB_int[0]));
VIRL_SDN_BUF_1 buf_cd_expB_57 (.X(CDB_exp[57]), .A(CDB_int[1]));
VIRL_SDN_BUF_1 buf_cd_expB_58 (.X(CDB_exp[58]), .A(CDB_int[2]));
VIRL_SDN_BUF_1 buf_cd_expB_59 (.X(CDB_exp[59]), .A(CDB_int[3]));
VIRL_SDN_BUF_1 buf_cd_expB_60 (.X(CDB_exp[60]), .A(CDB_int[0]));
VIRL_SDN_BUF_1 buf_cd_expB_61 (.X(CDB_exp[61]), .A(CDB_int[1]));
VIRL_SDN_BUF_1 buf_cd_expB_62 (.X(CDB_exp[62]), .A(CDB_int[2]));
VIRL_SDN_BUF_1 buf_cd_expB_63 (.X(CDB_exp[63]), .A(CDB_int[3]));
VIRL_SDN_BUF_1 buf_cd_expB_64 (.X(CDB_exp[64]), .A(CDB_int[0]));
VIRL_SDN_BUF_1 buf_cd_expB_65 (.X(CDB_exp[65]), .A(CDB_int[1]));
VIRL_SDN_BUF_1 buf_cd_expB_66 (.X(CDB_exp[66]), .A(CDB_int[2]));
VIRL_SDN_BUF_1 buf_cd_expB_67 (.X(CDB_exp[67]), .A(CDB_int[3]));
VIRL_SDN_BUF_1 buf_cd_expB_68 (.X(CDB_exp[68]), .A(CDB_int[0]));
VIRL_SDN_BUF_1 buf_cd_expB_69 (.X(CDB_exp[69]), .A(CDB_int[1]));
VIRL_SDN_BUF_1 buf_cd_expB_70 (.X(CDB_exp[70]), .A(CDB_int[2]));
VIRL_SDN_BUF_1 buf_cd_expB_71 (.X(CDB_exp[71]), .A(CDB_int[3]));
VIRL_SDN_BUF_1 buf_cd_expB_72 (.X(CDB_exp[72]), .A(CDB_int[0]));
VIRL_SDN_BUF_1 buf_cd_expB_73 (.X(CDB_exp[73]), .A(CDB_int[1]));
VIRL_SDN_BUF_1 buf_cd_expB_74 (.X(CDB_exp[74]), .A(CDB_int[2]));
VIRL_SDN_BUF_1 buf_cd_expB_75 (.X(CDB_exp[75]), .A(CDB_int[3]));
VIRL_SDN_BUF_1 buf_cd_expB_76 (.X(CDB_exp[76]), .A(CDB_int[0]));
VIRL_SDN_BUF_1 buf_cd_expB_77 (.X(CDB_exp[77]), .A(CDB_int[1]));
VIRL_SDN_BUF_1 buf_cd_expB_78 (.X(CDB_exp[78]), .A(CDB_int[2]));
VIRL_SDN_BUF_1 buf_cd_expB_79 (.X(CDB_exp[79]), .A(CDB_int[3]));
VIRL_SDN_BUF_1 buf_cd_expB_80 (.X(CDB_exp[80]), .A(CDB_int[0]));
VIRL_SDN_BUF_1 buf_cd_expB_81 (.X(CDB_exp[81]), .A(CDB_int[1]));
VIRL_SDN_BUF_1 buf_cd_expB_82 (.X(CDB_exp[82]), .A(CDB_int[2]));
VIRL_SDN_BUF_1 buf_cd_expB_83 (.X(CDB_exp[83]), .A(CDB_int[3]));
VIRL_SDN_BUF_1 buf_cd_expB_84 (.X(CDB_exp[84]), .A(CDB_int[0]));
VIRL_SDN_BUF_1 buf_cd_expB_85 (.X(CDB_exp[85]), .A(CDB_int[1]));
VIRL_SDN_BUF_1 buf_cd_expB_86 (.X(CDB_exp[86]), .A(CDB_int[2]));
VIRL_SDN_BUF_1 buf_cd_expB_87 (.X(CDB_exp[87]), .A(CDB_int[3]));
VIRL_SDN_BUF_1 buf_cd_expB_88 (.X(CDB_exp[88]), .A(CDB_int[0]));
VIRL_SDN_BUF_1 buf_cd_expB_89 (.X(CDB_exp[89]), .A(CDB_int[1]));
VIRL_SDN_BUF_1 buf_cd_expB_90 (.X(CDB_exp[90]), .A(CDB_int[2]));
VIRL_SDN_BUF_1 buf_cd_expB_91 (.X(CDB_exp[91]), .A(CDB_int[3]));
VIRL_SDN_BUF_1 buf_cd_expB_92 (.X(CDB_exp[92]), .A(CDB_int[0]));
VIRL_SDN_BUF_1 buf_cd_expB_93 (.X(CDB_exp[93]), .A(CDB_int[1]));
VIRL_SDN_BUF_1 buf_cd_expB_94 (.X(CDB_exp[94]), .A(CDB_int[2]));
VIRL_SDN_BUF_1 buf_cd_expB_95 (.X(CDB_exp[95]), .A(CDB_int[3]));
VIRL_SDN_BUF_1 buf_cd_expB_96 (.X(CDB_exp[96]), .A(CDB_int[0]));
VIRL_SDN_BUF_1 buf_cd_expB_97 (.X(CDB_exp[97]), .A(CDB_int[1]));
VIRL_SDN_BUF_1 buf_cd_expB_98 (.X(CDB_exp[98]), .A(CDB_int[2]));
VIRL_SDN_BUF_1 buf_cd_expB_99 (.X(CDB_exp[99]), .A(CDB_int[3]));
VIRL_SDN_BUF_1 buf_cd_expB_100 (.X(CDB_exp[100]), .A(CDB_int[0]));
VIRL_SDN_BUF_1 buf_cd_expB_101 (.X(CDB_exp[101]), .A(CDB_int[1]));
VIRL_SDN_BUF_1 buf_cd_expB_102 (.X(CDB_exp[102]), .A(CDB_int[2]));
VIRL_SDN_BUF_1 buf_cd_expB_103 (.X(CDB_exp[103]), .A(CDB_int[3]));
VIRL_SDN_BUF_1 buf_cd_expB_104 (.X(CDB_exp[104]), .A(CDB_int[0]));
VIRL_SDN_BUF_1 buf_cd_expB_105 (.X(CDB_exp[105]), .A(CDB_int[1]));
VIRL_SDN_BUF_1 buf_cd_expB_106 (.X(CDB_exp[106]), .A(CDB_int[2]));
VIRL_SDN_BUF_1 buf_cd_expB_107 (.X(CDB_exp[107]), .A(CDB_int[3]));
VIRL_SDN_BUF_1 buf_cd_expB_108 (.X(CDB_exp[108]), .A(CDB_int[0]));
VIRL_SDN_BUF_1 buf_cd_expB_109 (.X(CDB_exp[109]), .A(CDB_int[1]));
VIRL_SDN_BUF_1 buf_cd_expB_110 (.X(CDB_exp[110]), .A(CDB_int[2]));
VIRL_SDN_BUF_1 buf_cd_expB_111 (.X(CDB_exp[111]), .A(CDB_int[3]));
VIRL_SDN_BUF_1 buf_cd_expB_112 (.X(CDB_exp[112]), .A(CDB_int[0]));
VIRL_SDN_BUF_1 buf_cd_expB_113 (.X(CDB_exp[113]), .A(CDB_int[1]));
VIRL_SDN_BUF_1 buf_cd_expB_114 (.X(CDB_exp[114]), .A(CDB_int[2]));
VIRL_SDN_BUF_1 buf_cd_expB_115 (.X(CDB_exp[115]), .A(CDB_int[3]));
VIRL_SDN_BUF_1 buf_cd_expB_116 (.X(CDB_exp[116]), .A(CDB_int[0]));
VIRL_SDN_BUF_1 buf_cd_expB_117 (.X(CDB_exp[117]), .A(CDB_int[1]));
VIRL_SDN_BUF_1 buf_cd_expB_118 (.X(CDB_exp[118]), .A(CDB_int[2]));
VIRL_SDN_BUF_1 buf_cd_expB_119 (.X(CDB_exp[119]), .A(CDB_int[3]));
VIRL_SDN_BUF_1 buf_cd_expB_120 (.X(CDB_exp[120]), .A(CDB_int[0]));
VIRL_SDN_BUF_1 buf_cd_expB_121 (.X(CDB_exp[121]), .A(CDB_int[1]));
VIRL_SDN_BUF_1 buf_cd_expB_122 (.X(CDB_exp[122]), .A(CDB_int[2]));
VIRL_SDN_BUF_1 buf_cd_expB_123 (.X(CDB_exp[123]), .A(CDB_int[3]));
VIRL_SDN_BUF_1 buf_cd_expB_124 (.X(CDB_exp[124]), .A(CDB_int[0]));
VIRL_SDN_BUF_1 buf_cd_expB_125 (.X(CDB_exp[125]), .A(CDB_int[1]));
VIRL_SDN_BUF_1 buf_cd_expB_126 (.X(CDB_exp[126]), .A(CDB_int[2]));
VIRL_SDN_BUF_1 buf_cd_expB_127 (.X(CDB_exp[127]), .A(CDB_int[3]));
VIRL_SDN_BUF_1 buf_cd_expB_128 (.X(CDB_exp[128]), .A(CDB_int[0]));
VIRL_SDN_BUF_1 buf_cd_expB_129 (.X(CDB_exp[129]), .A(CDB_int[1]));
VIRL_SDN_BUF_1 buf_cd_expB_130 (.X(CDB_exp[130]), .A(CDB_int[2]));
VIRL_SDN_BUF_1 buf_cd_expB_131 (.X(CDB_exp[131]), .A(CDB_int[3]));
VIRL_SDN_BUF_1 buf_cd_expB_132 (.X(CDB_exp[132]), .A(CDB_int[0]));
VIRL_SDN_BUF_1 buf_cd_expB_133 (.X(CDB_exp[133]), .A(CDB_int[1]));
VIRL_SDN_BUF_1 buf_cd_expB_134 (.X(CDB_exp[134]), .A(CDB_int[2]));
VIRL_SDN_BUF_1 buf_cd_expB_135 (.X(CDB_exp[135]), .A(CDB_int[3]));
VIRL_SDN_BUF_1 buf_cd_expB_136 (.X(CDB_exp[136]), .A(CDB_int[0]));
VIRL_SDN_BUF_1 buf_cd_expB_137 (.X(CDB_exp[137]), .A(CDB_int[1]));
VIRL_SDN_BUF_1 buf_cd_expB_138 (.X(CDB_exp[138]), .A(CDB_int[2]));
VIRL_SDN_BUF_1 buf_cd_expB_139 (.X(CDB_exp[139]), .A(CDB_int[3]));
VIRL_SDN_BUF_1 buf_cd_expB_140 (.X(CDB_exp[140]), .A(CDB_int[0]));
VIRL_SDN_BUF_1 buf_cd_expB_141 (.X(CDB_exp[141]), .A(CDB_int[1]));
VIRL_SDN_BUF_1 buf_cd_expB_142 (.X(CDB_exp[142]), .A(CDB_int[2]));
VIRL_SDN_BUF_1 buf_cd_expB_143 (.X(CDB_exp[143]), .A(CDB_int[3]));
VIRL_SDN_BUF_1 buf_cd_expB_144 (.X(CDB_exp[144]), .A(CDB_int[0]));
VIRL_SDN_BUF_1 buf_cd_expB_145 (.X(CDB_exp[145]), .A(CDB_int[1]));
VIRL_SDN_BUF_1 buf_cd_expB_146 (.X(CDB_exp[146]), .A(CDB_int[2]));
VIRL_SDN_BUF_1 buf_cd_expB_147 (.X(CDB_exp[147]), .A(CDB_int[3]));
VIRL_SDN_BUF_1 buf_cd_expB_148 (.X(CDB_exp[148]), .A(CDB_int[0]));
VIRL_SDN_BUF_1 buf_cd_expB_149 (.X(CDB_exp[149]), .A(CDB_int[1]));
VIRL_SDN_BUF_1 buf_cd_expB_150 (.X(CDB_exp[150]), .A(CDB_int[2]));
VIRL_SDN_BUF_1 buf_cd_expB_151 (.X(CDB_exp[151]), .A(CDB_int[3]));
VIRL_SDN_BUF_1 buf_cd_expB_152 (.X(CDB_exp[152]), .A(CDB_int[0]));
VIRL_SDN_BUF_1 buf_cd_expB_153 (.X(CDB_exp[153]), .A(CDB_int[1]));
VIRL_SDN_BUF_1 buf_cd_expB_154 (.X(CDB_exp[154]), .A(CDB_int[2]));
VIRL_SDN_BUF_1 buf_cd_expB_155 (.X(CDB_exp[155]), .A(CDB_int[3]));
VIRL_SDN_BUF_1 buf_cd_expB_156 (.X(CDB_exp[156]), .A(CDB_int[0]));
VIRL_SDN_BUF_1 buf_cd_expB_157 (.X(CDB_exp[157]), .A(CDB_int[1]));
VIRL_SDN_BUF_1 buf_cd_expB_158 (.X(CDB_exp[158]), .A(CDB_int[2]));
VIRL_SDN_BUF_1 buf_cd_expB_159 (.X(CDB_exp[159]), .A(CDB_int[3]));

VIRL_SDN_EO2_4 eor_out_cdB_0 ( .X(XorB[0]), .A1(dt_intB[0]), .A2(CDB_exp[0]) );
VIRL_SDN_EO2_4 eor_out_cdB_1 ( .X(XorB[1]), .A1(dt_intB[1]), .A2(CDB_exp[1]) );
VIRL_SDN_EO2_4 eor_out_cdB_2 ( .X(XorB[2]), .A1(dt_intB[2]), .A2(CDB_exp[2]) );
VIRL_SDN_EO2_4 eor_out_cdB_3 ( .X(XorB[3]), .A1(dt_intB[3]), .A2(CDB_exp[3]) );
VIRL_SDN_EO2_4 eor_out_cdB_4 ( .X(XorB[4]), .A1(dt_intB[4]), .A2(CDB_exp[4]) );
VIRL_SDN_EO2_4 eor_out_cdB_5 ( .X(XorB[5]), .A1(dt_intB[5]), .A2(CDB_exp[5]) );
VIRL_SDN_EO2_4 eor_out_cdB_6 ( .X(XorB[6]), .A1(dt_intB[6]), .A2(CDB_exp[6]) );
VIRL_SDN_EO2_4 eor_out_cdB_7 ( .X(XorB[7]), .A1(dt_intB[7]), .A2(CDB_exp[7]) );
VIRL_SDN_EO2_4 eor_out_cdB_8 ( .X(XorB[8]), .A1(dt_intB[8]), .A2(CDB_exp[8]) );
VIRL_SDN_EO2_4 eor_out_cdB_9 ( .X(XorB[9]), .A1(dt_intB[9]), .A2(CDB_exp[9]) );
VIRL_SDN_EO2_4 eor_out_cdB_10 ( .X(XorB[10]), .A1(dt_intB[10]), .A2(CDB_exp[10]) );
VIRL_SDN_EO2_4 eor_out_cdB_11 ( .X(XorB[11]), .A1(dt_intB[11]), .A2(CDB_exp[11]) );
VIRL_SDN_EO2_4 eor_out_cdB_12 ( .X(XorB[12]), .A1(dt_intB[12]), .A2(CDB_exp[12]) );
VIRL_SDN_EO2_4 eor_out_cdB_13 ( .X(XorB[13]), .A1(dt_intB[13]), .A2(CDB_exp[13]) );
VIRL_SDN_EO2_4 eor_out_cdB_14 ( .X(XorB[14]), .A1(dt_intB[14]), .A2(CDB_exp[14]) );
VIRL_SDN_EO2_4 eor_out_cdB_15 ( .X(XorB[15]), .A1(dt_intB[15]), .A2(CDB_exp[15]) );
VIRL_SDN_EO2_4 eor_out_cdB_16 ( .X(XorB[16]), .A1(dt_intB[16]), .A2(CDB_exp[16]) );
VIRL_SDN_EO2_4 eor_out_cdB_17 ( .X(XorB[17]), .A1(dt_intB[17]), .A2(CDB_exp[17]) );
VIRL_SDN_EO2_4 eor_out_cdB_18 ( .X(XorB[18]), .A1(dt_intB[18]), .A2(CDB_exp[18]) );
VIRL_SDN_EO2_4 eor_out_cdB_19 ( .X(XorB[19]), .A1(dt_intB[19]), .A2(CDB_exp[19]) );
VIRL_SDN_EO2_4 eor_out_cdB_20 ( .X(XorB[20]), .A1(dt_intB[20]), .A2(CDB_exp[20]) );
VIRL_SDN_EO2_4 eor_out_cdB_21 ( .X(XorB[21]), .A1(dt_intB[21]), .A2(CDB_exp[21]) );
VIRL_SDN_EO2_4 eor_out_cdB_22 ( .X(XorB[22]), .A1(dt_intB[22]), .A2(CDB_exp[22]) );
VIRL_SDN_EO2_4 eor_out_cdB_23 ( .X(XorB[23]), .A1(dt_intB[23]), .A2(CDB_exp[23]) );
VIRL_SDN_EO2_4 eor_out_cdB_24 ( .X(XorB[24]), .A1(dt_intB[24]), .A2(CDB_exp[24]) );
VIRL_SDN_EO2_4 eor_out_cdB_25 ( .X(XorB[25]), .A1(dt_intB[25]), .A2(CDB_exp[25]) );
VIRL_SDN_EO2_4 eor_out_cdB_26 ( .X(XorB[26]), .A1(dt_intB[26]), .A2(CDB_exp[26]) );
VIRL_SDN_EO2_4 eor_out_cdB_27 ( .X(XorB[27]), .A1(dt_intB[27]), .A2(CDB_exp[27]) );
VIRL_SDN_EO2_4 eor_out_cdB_28 ( .X(XorB[28]), .A1(dt_intB[28]), .A2(CDB_exp[28]) );
VIRL_SDN_EO2_4 eor_out_cdB_29 ( .X(XorB[29]), .A1(dt_intB[29]), .A2(CDB_exp[29]) );
VIRL_SDN_EO2_4 eor_out_cdB_30 ( .X(XorB[30]), .A1(dt_intB[30]), .A2(CDB_exp[30]) );
VIRL_SDN_EO2_4 eor_out_cdB_31 ( .X(XorB[31]), .A1(dt_intB[31]), .A2(CDB_exp[31]) );
VIRL_SDN_EO2_4 eor_out_cdB_32 ( .X(XorB[32]), .A1(dt_intB[32]), .A2(CDB_exp[32]) );
VIRL_SDN_EO2_4 eor_out_cdB_33 ( .X(XorB[33]), .A1(dt_intB[33]), .A2(CDB_exp[33]) );
VIRL_SDN_EO2_4 eor_out_cdB_34 ( .X(XorB[34]), .A1(dt_intB[34]), .A2(CDB_exp[34]) );
VIRL_SDN_EO2_4 eor_out_cdB_35 ( .X(XorB[35]), .A1(dt_intB[35]), .A2(CDB_exp[35]) );
VIRL_SDN_EO2_4 eor_out_cdB_36 ( .X(XorB[36]), .A1(dt_intB[36]), .A2(CDB_exp[36]) );
VIRL_SDN_EO2_4 eor_out_cdB_37 ( .X(XorB[37]), .A1(dt_intB[37]), .A2(CDB_exp[37]) );
VIRL_SDN_EO2_4 eor_out_cdB_38 ( .X(XorB[38]), .A1(dt_intB[38]), .A2(CDB_exp[38]) );
VIRL_SDN_EO2_4 eor_out_cdB_39 ( .X(XorB[39]), .A1(dt_intB[39]), .A2(CDB_exp[39]) );
VIRL_SDN_EO2_4 eor_out_cdB_40 ( .X(XorB[40]), .A1(dt_intB[40]), .A2(CDB_exp[40]) );
VIRL_SDN_EO2_4 eor_out_cdB_41 ( .X(XorB[41]), .A1(dt_intB[41]), .A2(CDB_exp[41]) );
VIRL_SDN_EO2_4 eor_out_cdB_42 ( .X(XorB[42]), .A1(dt_intB[42]), .A2(CDB_exp[42]) );
VIRL_SDN_EO2_4 eor_out_cdB_43 ( .X(XorB[43]), .A1(dt_intB[43]), .A2(CDB_exp[43]) );
VIRL_SDN_EO2_4 eor_out_cdB_44 ( .X(XorB[44]), .A1(dt_intB[44]), .A2(CDB_exp[44]) );
VIRL_SDN_EO2_4 eor_out_cdB_45 ( .X(XorB[45]), .A1(dt_intB[45]), .A2(CDB_exp[45]) );
VIRL_SDN_EO2_4 eor_out_cdB_46 ( .X(XorB[46]), .A1(dt_intB[46]), .A2(CDB_exp[46]) );
VIRL_SDN_EO2_4 eor_out_cdB_47 ( .X(XorB[47]), .A1(dt_intB[47]), .A2(CDB_exp[47]) );
VIRL_SDN_EO2_4 eor_out_cdB_48 ( .X(XorB[48]), .A1(dt_intB[48]), .A2(CDB_exp[48]) );
VIRL_SDN_EO2_4 eor_out_cdB_49 ( .X(XorB[49]), .A1(dt_intB[49]), .A2(CDB_exp[49]) );
VIRL_SDN_EO2_4 eor_out_cdB_50 ( .X(XorB[50]), .A1(dt_intB[50]), .A2(CDB_exp[50]) );
VIRL_SDN_EO2_4 eor_out_cdB_51 ( .X(XorB[51]), .A1(dt_intB[51]), .A2(CDB_exp[51]) );
VIRL_SDN_EO2_4 eor_out_cdB_52 ( .X(XorB[52]), .A1(dt_intB[52]), .A2(CDB_exp[52]) );
VIRL_SDN_EO2_4 eor_out_cdB_53 ( .X(XorB[53]), .A1(dt_intB[53]), .A2(CDB_exp[53]) );
VIRL_SDN_EO2_4 eor_out_cdB_54 ( .X(XorB[54]), .A1(dt_intB[54]), .A2(CDB_exp[54]) );
VIRL_SDN_EO2_4 eor_out_cdB_55 ( .X(XorB[55]), .A1(dt_intB[55]), .A2(CDB_exp[55]) );
VIRL_SDN_EO2_4 eor_out_cdB_56 ( .X(XorB[56]), .A1(dt_intB[56]), .A2(CDB_exp[56]) );
VIRL_SDN_EO2_4 eor_out_cdB_57 ( .X(XorB[57]), .A1(dt_intB[57]), .A2(CDB_exp[57]) );
VIRL_SDN_EO2_4 eor_out_cdB_58 ( .X(XorB[58]), .A1(dt_intB[58]), .A2(CDB_exp[58]) );
VIRL_SDN_EO2_4 eor_out_cdB_59 ( .X(XorB[59]), .A1(dt_intB[59]), .A2(CDB_exp[59]) );
VIRL_SDN_EO2_4 eor_out_cdB_60 ( .X(XorB[60]), .A1(dt_intB[60]), .A2(CDB_exp[60]) );
VIRL_SDN_EO2_4 eor_out_cdB_61 ( .X(XorB[61]), .A1(dt_intB[61]), .A2(CDB_exp[61]) );
VIRL_SDN_EO2_4 eor_out_cdB_62 ( .X(XorB[62]), .A1(dt_intB[62]), .A2(CDB_exp[62]) );
VIRL_SDN_EO2_4 eor_out_cdB_63 ( .X(XorB[63]), .A1(dt_intB[63]), .A2(CDB_exp[63]) );
VIRL_SDN_EO2_4 eor_out_cdB_64 ( .X(XorB[64]), .A1(dt_intB[64]), .A2(CDB_exp[64]) );
VIRL_SDN_EO2_4 eor_out_cdB_65 ( .X(XorB[65]), .A1(dt_intB[65]), .A2(CDB_exp[65]) );
VIRL_SDN_EO2_4 eor_out_cdB_66 ( .X(XorB[66]), .A1(dt_intB[66]), .A2(CDB_exp[66]) );
VIRL_SDN_EO2_4 eor_out_cdB_67 ( .X(XorB[67]), .A1(dt_intB[67]), .A2(CDB_exp[67]) );
VIRL_SDN_EO2_4 eor_out_cdB_68 ( .X(XorB[68]), .A1(dt_intB[68]), .A2(CDB_exp[68]) );
VIRL_SDN_EO2_4 eor_out_cdB_69 ( .X(XorB[69]), .A1(dt_intB[69]), .A2(CDB_exp[69]) );
VIRL_SDN_EO2_4 eor_out_cdB_70 ( .X(XorB[70]), .A1(dt_intB[70]), .A2(CDB_exp[70]) );
VIRL_SDN_EO2_4 eor_out_cdB_71 ( .X(XorB[71]), .A1(dt_intB[71]), .A2(CDB_exp[71]) );
VIRL_SDN_EO2_4 eor_out_cdB_72 ( .X(XorB[72]), .A1(dt_intB[72]), .A2(CDB_exp[72]) );
VIRL_SDN_EO2_4 eor_out_cdB_73 ( .X(XorB[73]), .A1(dt_intB[73]), .A2(CDB_exp[73]) );
VIRL_SDN_EO2_4 eor_out_cdB_74 ( .X(XorB[74]), .A1(dt_intB[74]), .A2(CDB_exp[74]) );
VIRL_SDN_EO2_4 eor_out_cdB_75 ( .X(XorB[75]), .A1(dt_intB[75]), .A2(CDB_exp[75]) );
VIRL_SDN_EO2_4 eor_out_cdB_76 ( .X(XorB[76]), .A1(dt_intB[76]), .A2(CDB_exp[76]) );
VIRL_SDN_EO2_4 eor_out_cdB_77 ( .X(XorB[77]), .A1(dt_intB[77]), .A2(CDB_exp[77]) );
VIRL_SDN_EO2_4 eor_out_cdB_78 ( .X(XorB[78]), .A1(dt_intB[78]), .A2(CDB_exp[78]) );
VIRL_SDN_EO2_4 eor_out_cdB_79 ( .X(XorB[79]), .A1(dt_intB[79]), .A2(CDB_exp[79]) );
VIRL_SDN_EO2_4 eor_out_cdB_80 ( .X(XorB[80]), .A1(dt_intB[80]), .A2(CDB_exp[80]) );
VIRL_SDN_EO2_4 eor_out_cdB_81 ( .X(XorB[81]), .A1(dt_intB[81]), .A2(CDB_exp[81]) );
VIRL_SDN_EO2_4 eor_out_cdB_82 ( .X(XorB[82]), .A1(dt_intB[82]), .A2(CDB_exp[82]) );
VIRL_SDN_EO2_4 eor_out_cdB_83 ( .X(XorB[83]), .A1(dt_intB[83]), .A2(CDB_exp[83]) );
VIRL_SDN_EO2_4 eor_out_cdB_84 ( .X(XorB[84]), .A1(dt_intB[84]), .A2(CDB_exp[84]) );
VIRL_SDN_EO2_4 eor_out_cdB_85 ( .X(XorB[85]), .A1(dt_intB[85]), .A2(CDB_exp[85]) );
VIRL_SDN_EO2_4 eor_out_cdB_86 ( .X(XorB[86]), .A1(dt_intB[86]), .A2(CDB_exp[86]) );
VIRL_SDN_EO2_4 eor_out_cdB_87 ( .X(XorB[87]), .A1(dt_intB[87]), .A2(CDB_exp[87]) );
VIRL_SDN_EO2_4 eor_out_cdB_88 ( .X(XorB[88]), .A1(dt_intB[88]), .A2(CDB_exp[88]) );
VIRL_SDN_EO2_4 eor_out_cdB_89 ( .X(XorB[89]), .A1(dt_intB[89]), .A2(CDB_exp[89]) );
VIRL_SDN_EO2_4 eor_out_cdB_90 ( .X(XorB[90]), .A1(dt_intB[90]), .A2(CDB_exp[90]) );
VIRL_SDN_EO2_4 eor_out_cdB_91 ( .X(XorB[91]), .A1(dt_intB[91]), .A2(CDB_exp[91]) );
VIRL_SDN_EO2_4 eor_out_cdB_92 ( .X(XorB[92]), .A1(dt_intB[92]), .A2(CDB_exp[92]) );
VIRL_SDN_EO2_4 eor_out_cdB_93 ( .X(XorB[93]), .A1(dt_intB[93]), .A2(CDB_exp[93]) );
VIRL_SDN_EO2_4 eor_out_cdB_94 ( .X(XorB[94]), .A1(dt_intB[94]), .A2(CDB_exp[94]) );
VIRL_SDN_EO2_4 eor_out_cdB_95 ( .X(XorB[95]), .A1(dt_intB[95]), .A2(CDB_exp[95]) );
VIRL_SDN_EO2_4 eor_out_cdB_96 ( .X(XorB[96]), .A1(dt_intB[96]), .A2(CDB_exp[96]) );
VIRL_SDN_EO2_4 eor_out_cdB_97 ( .X(XorB[97]), .A1(dt_intB[97]), .A2(CDB_exp[97]) );
VIRL_SDN_EO2_4 eor_out_cdB_98 ( .X(XorB[98]), .A1(dt_intB[98]), .A2(CDB_exp[98]) );
VIRL_SDN_EO2_4 eor_out_cdB_99 ( .X(XorB[99]), .A1(dt_intB[99]), .A2(CDB_exp[99]) );
VIRL_SDN_EO2_4 eor_out_cdB_100 ( .X(XorB[100]), .A1(dt_intB[100]), .A2(CDB_exp[100]) );
VIRL_SDN_EO2_4 eor_out_cdB_101 ( .X(XorB[101]), .A1(dt_intB[101]), .A2(CDB_exp[101]) );
VIRL_SDN_EO2_4 eor_out_cdB_102 ( .X(XorB[102]), .A1(dt_intB[102]), .A2(CDB_exp[102]) );
VIRL_SDN_EO2_4 eor_out_cdB_103 ( .X(XorB[103]), .A1(dt_intB[103]), .A2(CDB_exp[103]) );
VIRL_SDN_EO2_4 eor_out_cdB_104 ( .X(XorB[104]), .A1(dt_intB[104]), .A2(CDB_exp[104]) );
VIRL_SDN_EO2_4 eor_out_cdB_105 ( .X(XorB[105]), .A1(dt_intB[105]), .A2(CDB_exp[105]) );
VIRL_SDN_EO2_4 eor_out_cdB_106 ( .X(XorB[106]), .A1(dt_intB[106]), .A2(CDB_exp[106]) );
VIRL_SDN_EO2_4 eor_out_cdB_107 ( .X(XorB[107]), .A1(dt_intB[107]), .A2(CDB_exp[107]) );
VIRL_SDN_EO2_4 eor_out_cdB_108 ( .X(XorB[108]), .A1(dt_intB[108]), .A2(CDB_exp[108]) );
VIRL_SDN_EO2_4 eor_out_cdB_109 ( .X(XorB[109]), .A1(dt_intB[109]), .A2(CDB_exp[109]) );
VIRL_SDN_EO2_4 eor_out_cdB_110 ( .X(XorB[110]), .A1(dt_intB[110]), .A2(CDB_exp[110]) );
VIRL_SDN_EO2_4 eor_out_cdB_111 ( .X(XorB[111]), .A1(dt_intB[111]), .A2(CDB_exp[111]) );
VIRL_SDN_EO2_4 eor_out_cdB_112 ( .X(XorB[112]), .A1(dt_intB[112]), .A2(CDB_exp[112]) );
VIRL_SDN_EO2_4 eor_out_cdB_113 ( .X(XorB[113]), .A1(dt_intB[113]), .A2(CDB_exp[113]) );
VIRL_SDN_EO2_4 eor_out_cdB_114 ( .X(XorB[114]), .A1(dt_intB[114]), .A2(CDB_exp[114]) );
VIRL_SDN_EO2_4 eor_out_cdB_115 ( .X(XorB[115]), .A1(dt_intB[115]), .A2(CDB_exp[115]) );
VIRL_SDN_EO2_4 eor_out_cdB_116 ( .X(XorB[116]), .A1(dt_intB[116]), .A2(CDB_exp[116]) );
VIRL_SDN_EO2_4 eor_out_cdB_117 ( .X(XorB[117]), .A1(dt_intB[117]), .A2(CDB_exp[117]) );
VIRL_SDN_EO2_4 eor_out_cdB_118 ( .X(XorB[118]), .A1(dt_intB[118]), .A2(CDB_exp[118]) );
VIRL_SDN_EO2_4 eor_out_cdB_119 ( .X(XorB[119]), .A1(dt_intB[119]), .A2(CDB_exp[119]) );
VIRL_SDN_EO2_4 eor_out_cdB_120 ( .X(XorB[120]), .A1(dt_intB[120]), .A2(CDB_exp[120]) );
VIRL_SDN_EO2_4 eor_out_cdB_121 ( .X(XorB[121]), .A1(dt_intB[121]), .A2(CDB_exp[121]) );
VIRL_SDN_EO2_4 eor_out_cdB_122 ( .X(XorB[122]), .A1(dt_intB[122]), .A2(CDB_exp[122]) );
VIRL_SDN_EO2_4 eor_out_cdB_123 ( .X(XorB[123]), .A1(dt_intB[123]), .A2(CDB_exp[123]) );
VIRL_SDN_EO2_4 eor_out_cdB_124 ( .X(XorB[124]), .A1(dt_intB[124]), .A2(CDB_exp[124]) );
VIRL_SDN_EO2_4 eor_out_cdB_125 ( .X(XorB[125]), .A1(dt_intB[125]), .A2(CDB_exp[125]) );
VIRL_SDN_EO2_4 eor_out_cdB_126 ( .X(XorB[126]), .A1(dt_intB[126]), .A2(CDB_exp[126]) );
VIRL_SDN_EO2_4 eor_out_cdB_127 ( .X(XorB[127]), .A1(dt_intB[127]), .A2(CDB_exp[127]) );
VIRL_SDN_EO2_4 eor_out_cdB_128 ( .X(XorB[128]), .A1(dt_intB[128]), .A2(CDB_exp[128]) );
VIRL_SDN_EO2_4 eor_out_cdB_129 ( .X(XorB[129]), .A1(dt_intB[129]), .A2(CDB_exp[129]) );
VIRL_SDN_EO2_4 eor_out_cdB_130 ( .X(XorB[130]), .A1(dt_intB[130]), .A2(CDB_exp[130]) );
VIRL_SDN_EO2_4 eor_out_cdB_131 ( .X(XorB[131]), .A1(dt_intB[131]), .A2(CDB_exp[131]) );
VIRL_SDN_EO2_4 eor_out_cdB_132 ( .X(XorB[132]), .A1(dt_intB[132]), .A2(CDB_exp[132]) );
VIRL_SDN_EO2_4 eor_out_cdB_133 ( .X(XorB[133]), .A1(dt_intB[133]), .A2(CDB_exp[133]) );
VIRL_SDN_EO2_4 eor_out_cdB_134 ( .X(XorB[134]), .A1(dt_intB[134]), .A2(CDB_exp[134]) );
VIRL_SDN_EO2_4 eor_out_cdB_135 ( .X(XorB[135]), .A1(dt_intB[135]), .A2(CDB_exp[135]) );
VIRL_SDN_EO2_4 eor_out_cdB_136 ( .X(XorB[136]), .A1(dt_intB[136]), .A2(CDB_exp[136]) );
VIRL_SDN_EO2_4 eor_out_cdB_137 ( .X(XorB[137]), .A1(dt_intB[137]), .A2(CDB_exp[137]) );
VIRL_SDN_EO2_4 eor_out_cdB_138 ( .X(XorB[138]), .A1(dt_intB[138]), .A2(CDB_exp[138]) );
VIRL_SDN_EO2_4 eor_out_cdB_139 ( .X(XorB[139]), .A1(dt_intB[139]), .A2(CDB_exp[139]) );
VIRL_SDN_EO2_4 eor_out_cdB_140 ( .X(XorB[140]), .A1(dt_intB[140]), .A2(CDB_exp[140]) );
VIRL_SDN_EO2_4 eor_out_cdB_141 ( .X(XorB[141]), .A1(dt_intB[141]), .A2(CDB_exp[141]) );
VIRL_SDN_EO2_4 eor_out_cdB_142 ( .X(XorB[142]), .A1(dt_intB[142]), .A2(CDB_exp[142]) );
VIRL_SDN_EO2_4 eor_out_cdB_143 ( .X(XorB[143]), .A1(dt_intB[143]), .A2(CDB_exp[143]) );
VIRL_SDN_EO2_4 eor_out_cdB_144 ( .X(XorB[144]), .A1(dt_intB[144]), .A2(CDB_exp[144]) );
VIRL_SDN_EO2_4 eor_out_cdB_145 ( .X(XorB[145]), .A1(dt_intB[145]), .A2(CDB_exp[145]) );
VIRL_SDN_EO2_4 eor_out_cdB_146 ( .X(XorB[146]), .A1(dt_intB[146]), .A2(CDB_exp[146]) );
VIRL_SDN_EO2_4 eor_out_cdB_147 ( .X(XorB[147]), .A1(dt_intB[147]), .A2(CDB_exp[147]) );
VIRL_SDN_EO2_4 eor_out_cdB_148 ( .X(XorB[148]), .A1(dt_intB[148]), .A2(CDB_exp[148]) );
VIRL_SDN_EO2_4 eor_out_cdB_149 ( .X(XorB[149]), .A1(dt_intB[149]), .A2(CDB_exp[149]) );
VIRL_SDN_EO2_4 eor_out_cdB_150 ( .X(XorB[150]), .A1(dt_intB[150]), .A2(CDB_exp[150]) );
VIRL_SDN_EO2_4 eor_out_cdB_151 ( .X(XorB[151]), .A1(dt_intB[151]), .A2(CDB_exp[151]) );
VIRL_SDN_EO2_4 eor_out_cdB_152 ( .X(XorB[152]), .A1(dt_intB[152]), .A2(CDB_exp[152]) );
VIRL_SDN_EO2_4 eor_out_cdB_153 ( .X(XorB[153]), .A1(dt_intB[153]), .A2(CDB_exp[153]) );
VIRL_SDN_EO2_4 eor_out_cdB_154 ( .X(XorB[154]), .A1(dt_intB[154]), .A2(CDB_exp[154]) );
VIRL_SDN_EO2_4 eor_out_cdB_155 ( .X(XorB[155]), .A1(dt_intB[155]), .A2(CDB_exp[155]) );
VIRL_SDN_EO2_4 eor_out_cdB_156 ( .X(XorB[156]), .A1(dt_intB[156]), .A2(CDB_exp[156]) );
VIRL_SDN_EO2_4 eor_out_cdB_157 ( .X(XorB[157]), .A1(dt_intB[157]), .A2(CDB_exp[157]) );
VIRL_SDN_EO2_4 eor_out_cdB_158 ( .X(XorB[158]), .A1(dt_intB[158]), .A2(CDB_exp[158]) );
VIRL_SDN_EO2_4 eor_out_cdB_159 ( .X(XorB[159]), .A1(dt_intB[159]), .A2(CDB_exp[159]) );

VIRL_SDN_INV_0P5 invB_160 ( .X(inv_CAPTB_int), .A(CAPTB_int) );

VIRL_SDN_AN2_1 and_xor_captB_0 ( .X(ErrB[0]), .A1(inv_CAPTB_int), .A2(XorB[0]) );
VIRL_SDN_AN2_1 and_xor_captB_1 ( .X(ErrB[1]), .A1(inv_CAPTB_int), .A2(XorB[1]) );
VIRL_SDN_AN2_1 and_xor_captB_2 ( .X(ErrB[2]), .A1(inv_CAPTB_int), .A2(XorB[2]) );
VIRL_SDN_AN2_1 and_xor_captB_3 ( .X(ErrB[3]), .A1(inv_CAPTB_int), .A2(XorB[3]) );
VIRL_SDN_AN2_1 and_xor_captB_4 ( .X(ErrB[4]), .A1(inv_CAPTB_int), .A2(XorB[4]) );
VIRL_SDN_AN2_1 and_xor_captB_5 ( .X(ErrB[5]), .A1(inv_CAPTB_int), .A2(XorB[5]) );
VIRL_SDN_AN2_1 and_xor_captB_6 ( .X(ErrB[6]), .A1(inv_CAPTB_int), .A2(XorB[6]) );
VIRL_SDN_AN2_1 and_xor_captB_7 ( .X(ErrB[7]), .A1(inv_CAPTB_int), .A2(XorB[7]) );
VIRL_SDN_AN2_1 and_xor_captB_8 ( .X(ErrB[8]), .A1(inv_CAPTB_int), .A2(XorB[8]) );
VIRL_SDN_AN2_1 and_xor_captB_9 ( .X(ErrB[9]), .A1(inv_CAPTB_int), .A2(XorB[9]) );
VIRL_SDN_AN2_1 and_xor_captB_10 ( .X(ErrB[10]), .A1(inv_CAPTB_int), .A2(XorB[10]) );
VIRL_SDN_AN2_1 and_xor_captB_11 ( .X(ErrB[11]), .A1(inv_CAPTB_int), .A2(XorB[11]) );
VIRL_SDN_AN2_1 and_xor_captB_12 ( .X(ErrB[12]), .A1(inv_CAPTB_int), .A2(XorB[12]) );
VIRL_SDN_AN2_1 and_xor_captB_13 ( .X(ErrB[13]), .A1(inv_CAPTB_int), .A2(XorB[13]) );
VIRL_SDN_AN2_1 and_xor_captB_14 ( .X(ErrB[14]), .A1(inv_CAPTB_int), .A2(XorB[14]) );
VIRL_SDN_AN2_1 and_xor_captB_15 ( .X(ErrB[15]), .A1(inv_CAPTB_int), .A2(XorB[15]) );
VIRL_SDN_AN2_1 and_xor_captB_16 ( .X(ErrB[16]), .A1(inv_CAPTB_int), .A2(XorB[16]) );
VIRL_SDN_AN2_1 and_xor_captB_17 ( .X(ErrB[17]), .A1(inv_CAPTB_int), .A2(XorB[17]) );
VIRL_SDN_AN2_1 and_xor_captB_18 ( .X(ErrB[18]), .A1(inv_CAPTB_int), .A2(XorB[18]) );
VIRL_SDN_AN2_1 and_xor_captB_19 ( .X(ErrB[19]), .A1(inv_CAPTB_int), .A2(XorB[19]) );
VIRL_SDN_AN2_1 and_xor_captB_20 ( .X(ErrB[20]), .A1(inv_CAPTB_int), .A2(XorB[20]) );
VIRL_SDN_AN2_1 and_xor_captB_21 ( .X(ErrB[21]), .A1(inv_CAPTB_int), .A2(XorB[21]) );
VIRL_SDN_AN2_1 and_xor_captB_22 ( .X(ErrB[22]), .A1(inv_CAPTB_int), .A2(XorB[22]) );
VIRL_SDN_AN2_1 and_xor_captB_23 ( .X(ErrB[23]), .A1(inv_CAPTB_int), .A2(XorB[23]) );
VIRL_SDN_AN2_1 and_xor_captB_24 ( .X(ErrB[24]), .A1(inv_CAPTB_int), .A2(XorB[24]) );
VIRL_SDN_AN2_1 and_xor_captB_25 ( .X(ErrB[25]), .A1(inv_CAPTB_int), .A2(XorB[25]) );
VIRL_SDN_AN2_1 and_xor_captB_26 ( .X(ErrB[26]), .A1(inv_CAPTB_int), .A2(XorB[26]) );
VIRL_SDN_AN2_1 and_xor_captB_27 ( .X(ErrB[27]), .A1(inv_CAPTB_int), .A2(XorB[27]) );
VIRL_SDN_AN2_1 and_xor_captB_28 ( .X(ErrB[28]), .A1(inv_CAPTB_int), .A2(XorB[28]) );
VIRL_SDN_AN2_1 and_xor_captB_29 ( .X(ErrB[29]), .A1(inv_CAPTB_int), .A2(XorB[29]) );
VIRL_SDN_AN2_1 and_xor_captB_30 ( .X(ErrB[30]), .A1(inv_CAPTB_int), .A2(XorB[30]) );
VIRL_SDN_AN2_1 and_xor_captB_31 ( .X(ErrB[31]), .A1(inv_CAPTB_int), .A2(XorB[31]) );
VIRL_SDN_AN2_1 and_xor_captB_32 ( .X(ErrB[32]), .A1(inv_CAPTB_int), .A2(XorB[32]) );
VIRL_SDN_AN2_1 and_xor_captB_33 ( .X(ErrB[33]), .A1(inv_CAPTB_int), .A2(XorB[33]) );
VIRL_SDN_AN2_1 and_xor_captB_34 ( .X(ErrB[34]), .A1(inv_CAPTB_int), .A2(XorB[34]) );
VIRL_SDN_AN2_1 and_xor_captB_35 ( .X(ErrB[35]), .A1(inv_CAPTB_int), .A2(XorB[35]) );
VIRL_SDN_AN2_1 and_xor_captB_36 ( .X(ErrB[36]), .A1(inv_CAPTB_int), .A2(XorB[36]) );
VIRL_SDN_AN2_1 and_xor_captB_37 ( .X(ErrB[37]), .A1(inv_CAPTB_int), .A2(XorB[37]) );
VIRL_SDN_AN2_1 and_xor_captB_38 ( .X(ErrB[38]), .A1(inv_CAPTB_int), .A2(XorB[38]) );
VIRL_SDN_AN2_1 and_xor_captB_39 ( .X(ErrB[39]), .A1(inv_CAPTB_int), .A2(XorB[39]) );
VIRL_SDN_AN2_1 and_xor_captB_40 ( .X(ErrB[40]), .A1(inv_CAPTB_int), .A2(XorB[40]) );
VIRL_SDN_AN2_1 and_xor_captB_41 ( .X(ErrB[41]), .A1(inv_CAPTB_int), .A2(XorB[41]) );
VIRL_SDN_AN2_1 and_xor_captB_42 ( .X(ErrB[42]), .A1(inv_CAPTB_int), .A2(XorB[42]) );
VIRL_SDN_AN2_1 and_xor_captB_43 ( .X(ErrB[43]), .A1(inv_CAPTB_int), .A2(XorB[43]) );
VIRL_SDN_AN2_1 and_xor_captB_44 ( .X(ErrB[44]), .A1(inv_CAPTB_int), .A2(XorB[44]) );
VIRL_SDN_AN2_1 and_xor_captB_45 ( .X(ErrB[45]), .A1(inv_CAPTB_int), .A2(XorB[45]) );
VIRL_SDN_AN2_1 and_xor_captB_46 ( .X(ErrB[46]), .A1(inv_CAPTB_int), .A2(XorB[46]) );
VIRL_SDN_AN2_1 and_xor_captB_47 ( .X(ErrB[47]), .A1(inv_CAPTB_int), .A2(XorB[47]) );
VIRL_SDN_AN2_1 and_xor_captB_48 ( .X(ErrB[48]), .A1(inv_CAPTB_int), .A2(XorB[48]) );
VIRL_SDN_AN2_1 and_xor_captB_49 ( .X(ErrB[49]), .A1(inv_CAPTB_int), .A2(XorB[49]) );
VIRL_SDN_AN2_1 and_xor_captB_50 ( .X(ErrB[50]), .A1(inv_CAPTB_int), .A2(XorB[50]) );
VIRL_SDN_AN2_1 and_xor_captB_51 ( .X(ErrB[51]), .A1(inv_CAPTB_int), .A2(XorB[51]) );
VIRL_SDN_AN2_1 and_xor_captB_52 ( .X(ErrB[52]), .A1(inv_CAPTB_int), .A2(XorB[52]) );
VIRL_SDN_AN2_1 and_xor_captB_53 ( .X(ErrB[53]), .A1(inv_CAPTB_int), .A2(XorB[53]) );
VIRL_SDN_AN2_1 and_xor_captB_54 ( .X(ErrB[54]), .A1(inv_CAPTB_int), .A2(XorB[54]) );
VIRL_SDN_AN2_1 and_xor_captB_55 ( .X(ErrB[55]), .A1(inv_CAPTB_int), .A2(XorB[55]) );
VIRL_SDN_AN2_1 and_xor_captB_56 ( .X(ErrB[56]), .A1(inv_CAPTB_int), .A2(XorB[56]) );
VIRL_SDN_AN2_1 and_xor_captB_57 ( .X(ErrB[57]), .A1(inv_CAPTB_int), .A2(XorB[57]) );
VIRL_SDN_AN2_1 and_xor_captB_58 ( .X(ErrB[58]), .A1(inv_CAPTB_int), .A2(XorB[58]) );
VIRL_SDN_AN2_1 and_xor_captB_59 ( .X(ErrB[59]), .A1(inv_CAPTB_int), .A2(XorB[59]) );
VIRL_SDN_AN2_1 and_xor_captB_60 ( .X(ErrB[60]), .A1(inv_CAPTB_int), .A2(XorB[60]) );
VIRL_SDN_AN2_1 and_xor_captB_61 ( .X(ErrB[61]), .A1(inv_CAPTB_int), .A2(XorB[61]) );
VIRL_SDN_AN2_1 and_xor_captB_62 ( .X(ErrB[62]), .A1(inv_CAPTB_int), .A2(XorB[62]) );
VIRL_SDN_AN2_1 and_xor_captB_63 ( .X(ErrB[63]), .A1(inv_CAPTB_int), .A2(XorB[63]) );
VIRL_SDN_AN2_1 and_xor_captB_64 ( .X(ErrB[64]), .A1(inv_CAPTB_int), .A2(XorB[64]) );
VIRL_SDN_AN2_1 and_xor_captB_65 ( .X(ErrB[65]), .A1(inv_CAPTB_int), .A2(XorB[65]) );
VIRL_SDN_AN2_1 and_xor_captB_66 ( .X(ErrB[66]), .A1(inv_CAPTB_int), .A2(XorB[66]) );
VIRL_SDN_AN2_1 and_xor_captB_67 ( .X(ErrB[67]), .A1(inv_CAPTB_int), .A2(XorB[67]) );
VIRL_SDN_AN2_1 and_xor_captB_68 ( .X(ErrB[68]), .A1(inv_CAPTB_int), .A2(XorB[68]) );
VIRL_SDN_AN2_1 and_xor_captB_69 ( .X(ErrB[69]), .A1(inv_CAPTB_int), .A2(XorB[69]) );
VIRL_SDN_AN2_1 and_xor_captB_70 ( .X(ErrB[70]), .A1(inv_CAPTB_int), .A2(XorB[70]) );
VIRL_SDN_AN2_1 and_xor_captB_71 ( .X(ErrB[71]), .A1(inv_CAPTB_int), .A2(XorB[71]) );
VIRL_SDN_AN2_1 and_xor_captB_72 ( .X(ErrB[72]), .A1(inv_CAPTB_int), .A2(XorB[72]) );
VIRL_SDN_AN2_1 and_xor_captB_73 ( .X(ErrB[73]), .A1(inv_CAPTB_int), .A2(XorB[73]) );
VIRL_SDN_AN2_1 and_xor_captB_74 ( .X(ErrB[74]), .A1(inv_CAPTB_int), .A2(XorB[74]) );
VIRL_SDN_AN2_1 and_xor_captB_75 ( .X(ErrB[75]), .A1(inv_CAPTB_int), .A2(XorB[75]) );
VIRL_SDN_AN2_1 and_xor_captB_76 ( .X(ErrB[76]), .A1(inv_CAPTB_int), .A2(XorB[76]) );
VIRL_SDN_AN2_1 and_xor_captB_77 ( .X(ErrB[77]), .A1(inv_CAPTB_int), .A2(XorB[77]) );
VIRL_SDN_AN2_1 and_xor_captB_78 ( .X(ErrB[78]), .A1(inv_CAPTB_int), .A2(XorB[78]) );
VIRL_SDN_AN2_1 and_xor_captB_79 ( .X(ErrB[79]), .A1(inv_CAPTB_int), .A2(XorB[79]) );
VIRL_SDN_AN2_1 and_xor_captB_80 ( .X(ErrB[80]), .A1(inv_CAPTB_int), .A2(XorB[80]) );
VIRL_SDN_AN2_1 and_xor_captB_81 ( .X(ErrB[81]), .A1(inv_CAPTB_int), .A2(XorB[81]) );
VIRL_SDN_AN2_1 and_xor_captB_82 ( .X(ErrB[82]), .A1(inv_CAPTB_int), .A2(XorB[82]) );
VIRL_SDN_AN2_1 and_xor_captB_83 ( .X(ErrB[83]), .A1(inv_CAPTB_int), .A2(XorB[83]) );
VIRL_SDN_AN2_1 and_xor_captB_84 ( .X(ErrB[84]), .A1(inv_CAPTB_int), .A2(XorB[84]) );
VIRL_SDN_AN2_1 and_xor_captB_85 ( .X(ErrB[85]), .A1(inv_CAPTB_int), .A2(XorB[85]) );
VIRL_SDN_AN2_1 and_xor_captB_86 ( .X(ErrB[86]), .A1(inv_CAPTB_int), .A2(XorB[86]) );
VIRL_SDN_AN2_1 and_xor_captB_87 ( .X(ErrB[87]), .A1(inv_CAPTB_int), .A2(XorB[87]) );
VIRL_SDN_AN2_1 and_xor_captB_88 ( .X(ErrB[88]), .A1(inv_CAPTB_int), .A2(XorB[88]) );
VIRL_SDN_AN2_1 and_xor_captB_89 ( .X(ErrB[89]), .A1(inv_CAPTB_int), .A2(XorB[89]) );
VIRL_SDN_AN2_1 and_xor_captB_90 ( .X(ErrB[90]), .A1(inv_CAPTB_int), .A2(XorB[90]) );
VIRL_SDN_AN2_1 and_xor_captB_91 ( .X(ErrB[91]), .A1(inv_CAPTB_int), .A2(XorB[91]) );
VIRL_SDN_AN2_1 and_xor_captB_92 ( .X(ErrB[92]), .A1(inv_CAPTB_int), .A2(XorB[92]) );
VIRL_SDN_AN2_1 and_xor_captB_93 ( .X(ErrB[93]), .A1(inv_CAPTB_int), .A2(XorB[93]) );
VIRL_SDN_AN2_1 and_xor_captB_94 ( .X(ErrB[94]), .A1(inv_CAPTB_int), .A2(XorB[94]) );
VIRL_SDN_AN2_1 and_xor_captB_95 ( .X(ErrB[95]), .A1(inv_CAPTB_int), .A2(XorB[95]) );
VIRL_SDN_AN2_1 and_xor_captB_96 ( .X(ErrB[96]), .A1(inv_CAPTB_int), .A2(XorB[96]) );
VIRL_SDN_AN2_1 and_xor_captB_97 ( .X(ErrB[97]), .A1(inv_CAPTB_int), .A2(XorB[97]) );
VIRL_SDN_AN2_1 and_xor_captB_98 ( .X(ErrB[98]), .A1(inv_CAPTB_int), .A2(XorB[98]) );
VIRL_SDN_AN2_1 and_xor_captB_99 ( .X(ErrB[99]), .A1(inv_CAPTB_int), .A2(XorB[99]) );
VIRL_SDN_AN2_1 and_xor_captB_100 ( .X(ErrB[100]), .A1(inv_CAPTB_int), .A2(XorB[100]) );
VIRL_SDN_AN2_1 and_xor_captB_101 ( .X(ErrB[101]), .A1(inv_CAPTB_int), .A2(XorB[101]) );
VIRL_SDN_AN2_1 and_xor_captB_102 ( .X(ErrB[102]), .A1(inv_CAPTB_int), .A2(XorB[102]) );
VIRL_SDN_AN2_1 and_xor_captB_103 ( .X(ErrB[103]), .A1(inv_CAPTB_int), .A2(XorB[103]) );
VIRL_SDN_AN2_1 and_xor_captB_104 ( .X(ErrB[104]), .A1(inv_CAPTB_int), .A2(XorB[104]) );
VIRL_SDN_AN2_1 and_xor_captB_105 ( .X(ErrB[105]), .A1(inv_CAPTB_int), .A2(XorB[105]) );
VIRL_SDN_AN2_1 and_xor_captB_106 ( .X(ErrB[106]), .A1(inv_CAPTB_int), .A2(XorB[106]) );
VIRL_SDN_AN2_1 and_xor_captB_107 ( .X(ErrB[107]), .A1(inv_CAPTB_int), .A2(XorB[107]) );
VIRL_SDN_AN2_1 and_xor_captB_108 ( .X(ErrB[108]), .A1(inv_CAPTB_int), .A2(XorB[108]) );
VIRL_SDN_AN2_1 and_xor_captB_109 ( .X(ErrB[109]), .A1(inv_CAPTB_int), .A2(XorB[109]) );
VIRL_SDN_AN2_1 and_xor_captB_110 ( .X(ErrB[110]), .A1(inv_CAPTB_int), .A2(XorB[110]) );
VIRL_SDN_AN2_1 and_xor_captB_111 ( .X(ErrB[111]), .A1(inv_CAPTB_int), .A2(XorB[111]) );
VIRL_SDN_AN2_1 and_xor_captB_112 ( .X(ErrB[112]), .A1(inv_CAPTB_int), .A2(XorB[112]) );
VIRL_SDN_AN2_1 and_xor_captB_113 ( .X(ErrB[113]), .A1(inv_CAPTB_int), .A2(XorB[113]) );
VIRL_SDN_AN2_1 and_xor_captB_114 ( .X(ErrB[114]), .A1(inv_CAPTB_int), .A2(XorB[114]) );
VIRL_SDN_AN2_1 and_xor_captB_115 ( .X(ErrB[115]), .A1(inv_CAPTB_int), .A2(XorB[115]) );
VIRL_SDN_AN2_1 and_xor_captB_116 ( .X(ErrB[116]), .A1(inv_CAPTB_int), .A2(XorB[116]) );
VIRL_SDN_AN2_1 and_xor_captB_117 ( .X(ErrB[117]), .A1(inv_CAPTB_int), .A2(XorB[117]) );
VIRL_SDN_AN2_1 and_xor_captB_118 ( .X(ErrB[118]), .A1(inv_CAPTB_int), .A2(XorB[118]) );
VIRL_SDN_AN2_1 and_xor_captB_119 ( .X(ErrB[119]), .A1(inv_CAPTB_int), .A2(XorB[119]) );
VIRL_SDN_AN2_1 and_xor_captB_120 ( .X(ErrB[120]), .A1(inv_CAPTB_int), .A2(XorB[120]) );
VIRL_SDN_AN2_1 and_xor_captB_121 ( .X(ErrB[121]), .A1(inv_CAPTB_int), .A2(XorB[121]) );
VIRL_SDN_AN2_1 and_xor_captB_122 ( .X(ErrB[122]), .A1(inv_CAPTB_int), .A2(XorB[122]) );
VIRL_SDN_AN2_1 and_xor_captB_123 ( .X(ErrB[123]), .A1(inv_CAPTB_int), .A2(XorB[123]) );
VIRL_SDN_AN2_1 and_xor_captB_124 ( .X(ErrB[124]), .A1(inv_CAPTB_int), .A2(XorB[124]) );
VIRL_SDN_AN2_1 and_xor_captB_125 ( .X(ErrB[125]), .A1(inv_CAPTB_int), .A2(XorB[125]) );
VIRL_SDN_AN2_1 and_xor_captB_126 ( .X(ErrB[126]), .A1(inv_CAPTB_int), .A2(XorB[126]) );
VIRL_SDN_AN2_1 and_xor_captB_127 ( .X(ErrB[127]), .A1(inv_CAPTB_int), .A2(XorB[127]) );
VIRL_SDN_AN2_1 and_xor_captB_128 ( .X(ErrB[128]), .A1(inv_CAPTB_int), .A2(XorB[128]) );
VIRL_SDN_AN2_1 and_xor_captB_129 ( .X(ErrB[129]), .A1(inv_CAPTB_int), .A2(XorB[129]) );
VIRL_SDN_AN2_1 and_xor_captB_130 ( .X(ErrB[130]), .A1(inv_CAPTB_int), .A2(XorB[130]) );
VIRL_SDN_AN2_1 and_xor_captB_131 ( .X(ErrB[131]), .A1(inv_CAPTB_int), .A2(XorB[131]) );
VIRL_SDN_AN2_1 and_xor_captB_132 ( .X(ErrB[132]), .A1(inv_CAPTB_int), .A2(XorB[132]) );
VIRL_SDN_AN2_1 and_xor_captB_133 ( .X(ErrB[133]), .A1(inv_CAPTB_int), .A2(XorB[133]) );
VIRL_SDN_AN2_1 and_xor_captB_134 ( .X(ErrB[134]), .A1(inv_CAPTB_int), .A2(XorB[134]) );
VIRL_SDN_AN2_1 and_xor_captB_135 ( .X(ErrB[135]), .A1(inv_CAPTB_int), .A2(XorB[135]) );
VIRL_SDN_AN2_1 and_xor_captB_136 ( .X(ErrB[136]), .A1(inv_CAPTB_int), .A2(XorB[136]) );
VIRL_SDN_AN2_1 and_xor_captB_137 ( .X(ErrB[137]), .A1(inv_CAPTB_int), .A2(XorB[137]) );
VIRL_SDN_AN2_1 and_xor_captB_138 ( .X(ErrB[138]), .A1(inv_CAPTB_int), .A2(XorB[138]) );
VIRL_SDN_AN2_1 and_xor_captB_139 ( .X(ErrB[139]), .A1(inv_CAPTB_int), .A2(XorB[139]) );
VIRL_SDN_AN2_1 and_xor_captB_140 ( .X(ErrB[140]), .A1(inv_CAPTB_int), .A2(XorB[140]) );
VIRL_SDN_AN2_1 and_xor_captB_141 ( .X(ErrB[141]), .A1(inv_CAPTB_int), .A2(XorB[141]) );
VIRL_SDN_AN2_1 and_xor_captB_142 ( .X(ErrB[142]), .A1(inv_CAPTB_int), .A2(XorB[142]) );
VIRL_SDN_AN2_1 and_xor_captB_143 ( .X(ErrB[143]), .A1(inv_CAPTB_int), .A2(XorB[143]) );
VIRL_SDN_AN2_1 and_xor_captB_144 ( .X(ErrB[144]), .A1(inv_CAPTB_int), .A2(XorB[144]) );
VIRL_SDN_AN2_1 and_xor_captB_145 ( .X(ErrB[145]), .A1(inv_CAPTB_int), .A2(XorB[145]) );
VIRL_SDN_AN2_1 and_xor_captB_146 ( .X(ErrB[146]), .A1(inv_CAPTB_int), .A2(XorB[146]) );
VIRL_SDN_AN2_1 and_xor_captB_147 ( .X(ErrB[147]), .A1(inv_CAPTB_int), .A2(XorB[147]) );
VIRL_SDN_AN2_1 and_xor_captB_148 ( .X(ErrB[148]), .A1(inv_CAPTB_int), .A2(XorB[148]) );
VIRL_SDN_AN2_1 and_xor_captB_149 ( .X(ErrB[149]), .A1(inv_CAPTB_int), .A2(XorB[149]) );
VIRL_SDN_AN2_1 and_xor_captB_150 ( .X(ErrB[150]), .A1(inv_CAPTB_int), .A2(XorB[150]) );
VIRL_SDN_AN2_1 and_xor_captB_151 ( .X(ErrB[151]), .A1(inv_CAPTB_int), .A2(XorB[151]) );
VIRL_SDN_AN2_1 and_xor_captB_152 ( .X(ErrB[152]), .A1(inv_CAPTB_int), .A2(XorB[152]) );
VIRL_SDN_AN2_1 and_xor_captB_153 ( .X(ErrB[153]), .A1(inv_CAPTB_int), .A2(XorB[153]) );
VIRL_SDN_AN2_1 and_xor_captB_154 ( .X(ErrB[154]), .A1(inv_CAPTB_int), .A2(XorB[154]) );
VIRL_SDN_AN2_1 and_xor_captB_155 ( .X(ErrB[155]), .A1(inv_CAPTB_int), .A2(XorB[155]) );
VIRL_SDN_AN2_1 and_xor_captB_156 ( .X(ErrB[156]), .A1(inv_CAPTB_int), .A2(XorB[156]) );
VIRL_SDN_AN2_1 and_xor_captB_157 ( .X(ErrB[157]), .A1(inv_CAPTB_int), .A2(XorB[157]) );
VIRL_SDN_AN2_1 and_xor_captB_158 ( .X(ErrB[158]), .A1(inv_CAPTB_int), .A2(XorB[158]) );
VIRL_SDN_AN2_1 and_xor_captB_159 ( .X(ErrB[159]), .A1(inv_CAPTB_int), .A2(XorB[159]) );

VIRL_SDN_AN2_1 and_sticky_outB_0 ( .X(sticky_outB[0]), .A1(STICKYB_int), .A2(QPB_int[0]) );
VIRL_SDN_AN2_1 and_sticky_outB_1 ( .X(sticky_outB[1]), .A1(STICKYB_int), .A2(QPB_int[1]) );
VIRL_SDN_AN2_1 and_sticky_outB_2 ( .X(sticky_outB[2]), .A1(STICKYB_int), .A2(QPB_int[2]) );
VIRL_SDN_AN2_1 and_sticky_outB_3 ( .X(sticky_outB[3]), .A1(STICKYB_int), .A2(QPB_int[3]) );
VIRL_SDN_AN2_1 and_sticky_outB_4 ( .X(sticky_outB[4]), .A1(STICKYB_int), .A2(QPB_int[4]) );
VIRL_SDN_AN2_1 and_sticky_outB_5 ( .X(sticky_outB[5]), .A1(STICKYB_int), .A2(QPB_int[5]) );
VIRL_SDN_AN2_1 and_sticky_outB_6 ( .X(sticky_outB[6]), .A1(STICKYB_int), .A2(QPB_int[6]) );
VIRL_SDN_AN2_1 and_sticky_outB_7 ( .X(sticky_outB[7]), .A1(STICKYB_int), .A2(QPB_int[7]) );
VIRL_SDN_AN2_1 and_sticky_outB_8 ( .X(sticky_outB[8]), .A1(STICKYB_int), .A2(QPB_int[8]) );
VIRL_SDN_AN2_1 and_sticky_outB_9 ( .X(sticky_outB[9]), .A1(STICKYB_int), .A2(QPB_int[9]) );
VIRL_SDN_AN2_1 and_sticky_outB_10 ( .X(sticky_outB[10]), .A1(STICKYB_int), .A2(QPB_int[10]) );
VIRL_SDN_AN2_1 and_sticky_outB_11 ( .X(sticky_outB[11]), .A1(STICKYB_int), .A2(QPB_int[11]) );
VIRL_SDN_AN2_1 and_sticky_outB_12 ( .X(sticky_outB[12]), .A1(STICKYB_int), .A2(QPB_int[12]) );
VIRL_SDN_AN2_1 and_sticky_outB_13 ( .X(sticky_outB[13]), .A1(STICKYB_int), .A2(QPB_int[13]) );
VIRL_SDN_AN2_1 and_sticky_outB_14 ( .X(sticky_outB[14]), .A1(STICKYB_int), .A2(QPB_int[14]) );
VIRL_SDN_AN2_1 and_sticky_outB_15 ( .X(sticky_outB[15]), .A1(STICKYB_int), .A2(QPB_int[15]) );
VIRL_SDN_AN2_1 and_sticky_outB_16 ( .X(sticky_outB[16]), .A1(STICKYB_int), .A2(QPB_int[16]) );
VIRL_SDN_AN2_1 and_sticky_outB_17 ( .X(sticky_outB[17]), .A1(STICKYB_int), .A2(QPB_int[17]) );
VIRL_SDN_AN2_1 and_sticky_outB_18 ( .X(sticky_outB[18]), .A1(STICKYB_int), .A2(QPB_int[18]) );
VIRL_SDN_AN2_1 and_sticky_outB_19 ( .X(sticky_outB[19]), .A1(STICKYB_int), .A2(QPB_int[19]) );
VIRL_SDN_AN2_1 and_sticky_outB_20 ( .X(sticky_outB[20]), .A1(STICKYB_int), .A2(QPB_int[20]) );
VIRL_SDN_AN2_1 and_sticky_outB_21 ( .X(sticky_outB[21]), .A1(STICKYB_int), .A2(QPB_int[21]) );
VIRL_SDN_AN2_1 and_sticky_outB_22 ( .X(sticky_outB[22]), .A1(STICKYB_int), .A2(QPB_int[22]) );
VIRL_SDN_AN2_1 and_sticky_outB_23 ( .X(sticky_outB[23]), .A1(STICKYB_int), .A2(QPB_int[23]) );
VIRL_SDN_AN2_1 and_sticky_outB_24 ( .X(sticky_outB[24]), .A1(STICKYB_int), .A2(QPB_int[24]) );
VIRL_SDN_AN2_1 and_sticky_outB_25 ( .X(sticky_outB[25]), .A1(STICKYB_int), .A2(QPB_int[25]) );
VIRL_SDN_AN2_1 and_sticky_outB_26 ( .X(sticky_outB[26]), .A1(STICKYB_int), .A2(QPB_int[26]) );
VIRL_SDN_AN2_1 and_sticky_outB_27 ( .X(sticky_outB[27]), .A1(STICKYB_int), .A2(QPB_int[27]) );
VIRL_SDN_AN2_1 and_sticky_outB_28 ( .X(sticky_outB[28]), .A1(STICKYB_int), .A2(QPB_int[28]) );
VIRL_SDN_AN2_1 and_sticky_outB_29 ( .X(sticky_outB[29]), .A1(STICKYB_int), .A2(QPB_int[29]) );
VIRL_SDN_AN2_1 and_sticky_outB_30 ( .X(sticky_outB[30]), .A1(STICKYB_int), .A2(QPB_int[30]) );
VIRL_SDN_AN2_1 and_sticky_outB_31 ( .X(sticky_outB[31]), .A1(STICKYB_int), .A2(QPB_int[31]) );
VIRL_SDN_AN2_1 and_sticky_outB_32 ( .X(sticky_outB[32]), .A1(STICKYB_int), .A2(QPB_int[32]) );
VIRL_SDN_AN2_1 and_sticky_outB_33 ( .X(sticky_outB[33]), .A1(STICKYB_int), .A2(QPB_int[33]) );
VIRL_SDN_AN2_1 and_sticky_outB_34 ( .X(sticky_outB[34]), .A1(STICKYB_int), .A2(QPB_int[34]) );
VIRL_SDN_AN2_1 and_sticky_outB_35 ( .X(sticky_outB[35]), .A1(STICKYB_int), .A2(QPB_int[35]) );
VIRL_SDN_AN2_1 and_sticky_outB_36 ( .X(sticky_outB[36]), .A1(STICKYB_int), .A2(QPB_int[36]) );
VIRL_SDN_AN2_1 and_sticky_outB_37 ( .X(sticky_outB[37]), .A1(STICKYB_int), .A2(QPB_int[37]) );
VIRL_SDN_AN2_1 and_sticky_outB_38 ( .X(sticky_outB[38]), .A1(STICKYB_int), .A2(QPB_int[38]) );
VIRL_SDN_AN2_1 and_sticky_outB_39 ( .X(sticky_outB[39]), .A1(STICKYB_int), .A2(QPB_int[39]) );
VIRL_SDN_AN2_1 and_sticky_outB_40 ( .X(sticky_outB[40]), .A1(STICKYB_int), .A2(QPB_int[40]) );
VIRL_SDN_AN2_1 and_sticky_outB_41 ( .X(sticky_outB[41]), .A1(STICKYB_int), .A2(QPB_int[41]) );
VIRL_SDN_AN2_1 and_sticky_outB_42 ( .X(sticky_outB[42]), .A1(STICKYB_int), .A2(QPB_int[42]) );
VIRL_SDN_AN2_1 and_sticky_outB_43 ( .X(sticky_outB[43]), .A1(STICKYB_int), .A2(QPB_int[43]) );
VIRL_SDN_AN2_1 and_sticky_outB_44 ( .X(sticky_outB[44]), .A1(STICKYB_int), .A2(QPB_int[44]) );
VIRL_SDN_AN2_1 and_sticky_outB_45 ( .X(sticky_outB[45]), .A1(STICKYB_int), .A2(QPB_int[45]) );
VIRL_SDN_AN2_1 and_sticky_outB_46 ( .X(sticky_outB[46]), .A1(STICKYB_int), .A2(QPB_int[46]) );
VIRL_SDN_AN2_1 and_sticky_outB_47 ( .X(sticky_outB[47]), .A1(STICKYB_int), .A2(QPB_int[47]) );
VIRL_SDN_AN2_1 and_sticky_outB_48 ( .X(sticky_outB[48]), .A1(STICKYB_int), .A2(QPB_int[48]) );
VIRL_SDN_AN2_1 and_sticky_outB_49 ( .X(sticky_outB[49]), .A1(STICKYB_int), .A2(QPB_int[49]) );
VIRL_SDN_AN2_1 and_sticky_outB_50 ( .X(sticky_outB[50]), .A1(STICKYB_int), .A2(QPB_int[50]) );
VIRL_SDN_AN2_1 and_sticky_outB_51 ( .X(sticky_outB[51]), .A1(STICKYB_int), .A2(QPB_int[51]) );
VIRL_SDN_AN2_1 and_sticky_outB_52 ( .X(sticky_outB[52]), .A1(STICKYB_int), .A2(QPB_int[52]) );
VIRL_SDN_AN2_1 and_sticky_outB_53 ( .X(sticky_outB[53]), .A1(STICKYB_int), .A2(QPB_int[53]) );
VIRL_SDN_AN2_1 and_sticky_outB_54 ( .X(sticky_outB[54]), .A1(STICKYB_int), .A2(QPB_int[54]) );
VIRL_SDN_AN2_1 and_sticky_outB_55 ( .X(sticky_outB[55]), .A1(STICKYB_int), .A2(QPB_int[55]) );
VIRL_SDN_AN2_1 and_sticky_outB_56 ( .X(sticky_outB[56]), .A1(STICKYB_int), .A2(QPB_int[56]) );
VIRL_SDN_AN2_1 and_sticky_outB_57 ( .X(sticky_outB[57]), .A1(STICKYB_int), .A2(QPB_int[57]) );
VIRL_SDN_AN2_1 and_sticky_outB_58 ( .X(sticky_outB[58]), .A1(STICKYB_int), .A2(QPB_int[58]) );
VIRL_SDN_AN2_1 and_sticky_outB_59 ( .X(sticky_outB[59]), .A1(STICKYB_int), .A2(QPB_int[59]) );
VIRL_SDN_AN2_1 and_sticky_outB_60 ( .X(sticky_outB[60]), .A1(STICKYB_int), .A2(QPB_int[60]) );
VIRL_SDN_AN2_1 and_sticky_outB_61 ( .X(sticky_outB[61]), .A1(STICKYB_int), .A2(QPB_int[61]) );
VIRL_SDN_AN2_1 and_sticky_outB_62 ( .X(sticky_outB[62]), .A1(STICKYB_int), .A2(QPB_int[62]) );
VIRL_SDN_AN2_1 and_sticky_outB_63 ( .X(sticky_outB[63]), .A1(STICKYB_int), .A2(QPB_int[63]) );
VIRL_SDN_AN2_1 and_sticky_outB_64 ( .X(sticky_outB[64]), .A1(STICKYB_int), .A2(QPB_int[64]) );
VIRL_SDN_AN2_1 and_sticky_outB_65 ( .X(sticky_outB[65]), .A1(STICKYB_int), .A2(QPB_int[65]) );
VIRL_SDN_AN2_1 and_sticky_outB_66 ( .X(sticky_outB[66]), .A1(STICKYB_int), .A2(QPB_int[66]) );
VIRL_SDN_AN2_1 and_sticky_outB_67 ( .X(sticky_outB[67]), .A1(STICKYB_int), .A2(QPB_int[67]) );
VIRL_SDN_AN2_1 and_sticky_outB_68 ( .X(sticky_outB[68]), .A1(STICKYB_int), .A2(QPB_int[68]) );
VIRL_SDN_AN2_1 and_sticky_outB_69 ( .X(sticky_outB[69]), .A1(STICKYB_int), .A2(QPB_int[69]) );
VIRL_SDN_AN2_1 and_sticky_outB_70 ( .X(sticky_outB[70]), .A1(STICKYB_int), .A2(QPB_int[70]) );
VIRL_SDN_AN2_1 and_sticky_outB_71 ( .X(sticky_outB[71]), .A1(STICKYB_int), .A2(QPB_int[71]) );
VIRL_SDN_AN2_1 and_sticky_outB_72 ( .X(sticky_outB[72]), .A1(STICKYB_int), .A2(QPB_int[72]) );
VIRL_SDN_AN2_1 and_sticky_outB_73 ( .X(sticky_outB[73]), .A1(STICKYB_int), .A2(QPB_int[73]) );
VIRL_SDN_AN2_1 and_sticky_outB_74 ( .X(sticky_outB[74]), .A1(STICKYB_int), .A2(QPB_int[74]) );
VIRL_SDN_AN2_1 and_sticky_outB_75 ( .X(sticky_outB[75]), .A1(STICKYB_int), .A2(QPB_int[75]) );
VIRL_SDN_AN2_1 and_sticky_outB_76 ( .X(sticky_outB[76]), .A1(STICKYB_int), .A2(QPB_int[76]) );
VIRL_SDN_AN2_1 and_sticky_outB_77 ( .X(sticky_outB[77]), .A1(STICKYB_int), .A2(QPB_int[77]) );
VIRL_SDN_AN2_1 and_sticky_outB_78 ( .X(sticky_outB[78]), .A1(STICKYB_int), .A2(QPB_int[78]) );
VIRL_SDN_AN2_1 and_sticky_outB_79 ( .X(sticky_outB[79]), .A1(STICKYB_int), .A2(QPB_int[79]) );
VIRL_SDN_AN2_1 and_sticky_outB_80 ( .X(sticky_outB[80]), .A1(STICKYB_int), .A2(QPB_int[80]) );
VIRL_SDN_AN2_1 and_sticky_outB_81 ( .X(sticky_outB[81]), .A1(STICKYB_int), .A2(QPB_int[81]) );
VIRL_SDN_AN2_1 and_sticky_outB_82 ( .X(sticky_outB[82]), .A1(STICKYB_int), .A2(QPB_int[82]) );
VIRL_SDN_AN2_1 and_sticky_outB_83 ( .X(sticky_outB[83]), .A1(STICKYB_int), .A2(QPB_int[83]) );
VIRL_SDN_AN2_1 and_sticky_outB_84 ( .X(sticky_outB[84]), .A1(STICKYB_int), .A2(QPB_int[84]) );
VIRL_SDN_AN2_1 and_sticky_outB_85 ( .X(sticky_outB[85]), .A1(STICKYB_int), .A2(QPB_int[85]) );
VIRL_SDN_AN2_1 and_sticky_outB_86 ( .X(sticky_outB[86]), .A1(STICKYB_int), .A2(QPB_int[86]) );
VIRL_SDN_AN2_1 and_sticky_outB_87 ( .X(sticky_outB[87]), .A1(STICKYB_int), .A2(QPB_int[87]) );
VIRL_SDN_AN2_1 and_sticky_outB_88 ( .X(sticky_outB[88]), .A1(STICKYB_int), .A2(QPB_int[88]) );
VIRL_SDN_AN2_1 and_sticky_outB_89 ( .X(sticky_outB[89]), .A1(STICKYB_int), .A2(QPB_int[89]) );
VIRL_SDN_AN2_1 and_sticky_outB_90 ( .X(sticky_outB[90]), .A1(STICKYB_int), .A2(QPB_int[90]) );
VIRL_SDN_AN2_1 and_sticky_outB_91 ( .X(sticky_outB[91]), .A1(STICKYB_int), .A2(QPB_int[91]) );
VIRL_SDN_AN2_1 and_sticky_outB_92 ( .X(sticky_outB[92]), .A1(STICKYB_int), .A2(QPB_int[92]) );
VIRL_SDN_AN2_1 and_sticky_outB_93 ( .X(sticky_outB[93]), .A1(STICKYB_int), .A2(QPB_int[93]) );
VIRL_SDN_AN2_1 and_sticky_outB_94 ( .X(sticky_outB[94]), .A1(STICKYB_int), .A2(QPB_int[94]) );
VIRL_SDN_AN2_1 and_sticky_outB_95 ( .X(sticky_outB[95]), .A1(STICKYB_int), .A2(QPB_int[95]) );
VIRL_SDN_AN2_1 and_sticky_outB_96 ( .X(sticky_outB[96]), .A1(STICKYB_int), .A2(QPB_int[96]) );
VIRL_SDN_AN2_1 and_sticky_outB_97 ( .X(sticky_outB[97]), .A1(STICKYB_int), .A2(QPB_int[97]) );
VIRL_SDN_AN2_1 and_sticky_outB_98 ( .X(sticky_outB[98]), .A1(STICKYB_int), .A2(QPB_int[98]) );
VIRL_SDN_AN2_1 and_sticky_outB_99 ( .X(sticky_outB[99]), .A1(STICKYB_int), .A2(QPB_int[99]) );
VIRL_SDN_AN2_1 and_sticky_outB_100 ( .X(sticky_outB[100]), .A1(STICKYB_int), .A2(QPB_int[100]) );
VIRL_SDN_AN2_1 and_sticky_outB_101 ( .X(sticky_outB[101]), .A1(STICKYB_int), .A2(QPB_int[101]) );
VIRL_SDN_AN2_1 and_sticky_outB_102 ( .X(sticky_outB[102]), .A1(STICKYB_int), .A2(QPB_int[102]) );
VIRL_SDN_AN2_1 and_sticky_outB_103 ( .X(sticky_outB[103]), .A1(STICKYB_int), .A2(QPB_int[103]) );
VIRL_SDN_AN2_1 and_sticky_outB_104 ( .X(sticky_outB[104]), .A1(STICKYB_int), .A2(QPB_int[104]) );
VIRL_SDN_AN2_1 and_sticky_outB_105 ( .X(sticky_outB[105]), .A1(STICKYB_int), .A2(QPB_int[105]) );
VIRL_SDN_AN2_1 and_sticky_outB_106 ( .X(sticky_outB[106]), .A1(STICKYB_int), .A2(QPB_int[106]) );
VIRL_SDN_AN2_1 and_sticky_outB_107 ( .X(sticky_outB[107]), .A1(STICKYB_int), .A2(QPB_int[107]) );
VIRL_SDN_AN2_1 and_sticky_outB_108 ( .X(sticky_outB[108]), .A1(STICKYB_int), .A2(QPB_int[108]) );
VIRL_SDN_AN2_1 and_sticky_outB_109 ( .X(sticky_outB[109]), .A1(STICKYB_int), .A2(QPB_int[109]) );
VIRL_SDN_AN2_1 and_sticky_outB_110 ( .X(sticky_outB[110]), .A1(STICKYB_int), .A2(QPB_int[110]) );
VIRL_SDN_AN2_1 and_sticky_outB_111 ( .X(sticky_outB[111]), .A1(STICKYB_int), .A2(QPB_int[111]) );
VIRL_SDN_AN2_1 and_sticky_outB_112 ( .X(sticky_outB[112]), .A1(STICKYB_int), .A2(QPB_int[112]) );
VIRL_SDN_AN2_1 and_sticky_outB_113 ( .X(sticky_outB[113]), .A1(STICKYB_int), .A2(QPB_int[113]) );
VIRL_SDN_AN2_1 and_sticky_outB_114 ( .X(sticky_outB[114]), .A1(STICKYB_int), .A2(QPB_int[114]) );
VIRL_SDN_AN2_1 and_sticky_outB_115 ( .X(sticky_outB[115]), .A1(STICKYB_int), .A2(QPB_int[115]) );
VIRL_SDN_AN2_1 and_sticky_outB_116 ( .X(sticky_outB[116]), .A1(STICKYB_int), .A2(QPB_int[116]) );
VIRL_SDN_AN2_1 and_sticky_outB_117 ( .X(sticky_outB[117]), .A1(STICKYB_int), .A2(QPB_int[117]) );
VIRL_SDN_AN2_1 and_sticky_outB_118 ( .X(sticky_outB[118]), .A1(STICKYB_int), .A2(QPB_int[118]) );
VIRL_SDN_AN2_1 and_sticky_outB_119 ( .X(sticky_outB[119]), .A1(STICKYB_int), .A2(QPB_int[119]) );
VIRL_SDN_AN2_1 and_sticky_outB_120 ( .X(sticky_outB[120]), .A1(STICKYB_int), .A2(QPB_int[120]) );
VIRL_SDN_AN2_1 and_sticky_outB_121 ( .X(sticky_outB[121]), .A1(STICKYB_int), .A2(QPB_int[121]) );
VIRL_SDN_AN2_1 and_sticky_outB_122 ( .X(sticky_outB[122]), .A1(STICKYB_int), .A2(QPB_int[122]) );
VIRL_SDN_AN2_1 and_sticky_outB_123 ( .X(sticky_outB[123]), .A1(STICKYB_int), .A2(QPB_int[123]) );
VIRL_SDN_AN2_1 and_sticky_outB_124 ( .X(sticky_outB[124]), .A1(STICKYB_int), .A2(QPB_int[124]) );
VIRL_SDN_AN2_1 and_sticky_outB_125 ( .X(sticky_outB[125]), .A1(STICKYB_int), .A2(QPB_int[125]) );
VIRL_SDN_AN2_1 and_sticky_outB_126 ( .X(sticky_outB[126]), .A1(STICKYB_int), .A2(QPB_int[126]) );
VIRL_SDN_AN2_1 and_sticky_outB_127 ( .X(sticky_outB[127]), .A1(STICKYB_int), .A2(QPB_int[127]) );
VIRL_SDN_AN2_1 and_sticky_outB_128 ( .X(sticky_outB[128]), .A1(STICKYB_int), .A2(QPB_int[128]) );
VIRL_SDN_AN2_1 and_sticky_outB_129 ( .X(sticky_outB[129]), .A1(STICKYB_int), .A2(QPB_int[129]) );
VIRL_SDN_AN2_1 and_sticky_outB_130 ( .X(sticky_outB[130]), .A1(STICKYB_int), .A2(QPB_int[130]) );
VIRL_SDN_AN2_1 and_sticky_outB_131 ( .X(sticky_outB[131]), .A1(STICKYB_int), .A2(QPB_int[131]) );
VIRL_SDN_AN2_1 and_sticky_outB_132 ( .X(sticky_outB[132]), .A1(STICKYB_int), .A2(QPB_int[132]) );
VIRL_SDN_AN2_1 and_sticky_outB_133 ( .X(sticky_outB[133]), .A1(STICKYB_int), .A2(QPB_int[133]) );
VIRL_SDN_AN2_1 and_sticky_outB_134 ( .X(sticky_outB[134]), .A1(STICKYB_int), .A2(QPB_int[134]) );
VIRL_SDN_AN2_1 and_sticky_outB_135 ( .X(sticky_outB[135]), .A1(STICKYB_int), .A2(QPB_int[135]) );
VIRL_SDN_AN2_1 and_sticky_outB_136 ( .X(sticky_outB[136]), .A1(STICKYB_int), .A2(QPB_int[136]) );
VIRL_SDN_AN2_1 and_sticky_outB_137 ( .X(sticky_outB[137]), .A1(STICKYB_int), .A2(QPB_int[137]) );
VIRL_SDN_AN2_1 and_sticky_outB_138 ( .X(sticky_outB[138]), .A1(STICKYB_int), .A2(QPB_int[138]) );
VIRL_SDN_AN2_1 and_sticky_outB_139 ( .X(sticky_outB[139]), .A1(STICKYB_int), .A2(QPB_int[139]) );
VIRL_SDN_AN2_1 and_sticky_outB_140 ( .X(sticky_outB[140]), .A1(STICKYB_int), .A2(QPB_int[140]) );
VIRL_SDN_AN2_1 and_sticky_outB_141 ( .X(sticky_outB[141]), .A1(STICKYB_int), .A2(QPB_int[141]) );
VIRL_SDN_AN2_1 and_sticky_outB_142 ( .X(sticky_outB[142]), .A1(STICKYB_int), .A2(QPB_int[142]) );
VIRL_SDN_AN2_1 and_sticky_outB_143 ( .X(sticky_outB[143]), .A1(STICKYB_int), .A2(QPB_int[143]) );
VIRL_SDN_AN2_1 and_sticky_outB_144 ( .X(sticky_outB[144]), .A1(STICKYB_int), .A2(QPB_int[144]) );
VIRL_SDN_AN2_1 and_sticky_outB_145 ( .X(sticky_outB[145]), .A1(STICKYB_int), .A2(QPB_int[145]) );
VIRL_SDN_AN2_1 and_sticky_outB_146 ( .X(sticky_outB[146]), .A1(STICKYB_int), .A2(QPB_int[146]) );
VIRL_SDN_AN2_1 and_sticky_outB_147 ( .X(sticky_outB[147]), .A1(STICKYB_int), .A2(QPB_int[147]) );
VIRL_SDN_AN2_1 and_sticky_outB_148 ( .X(sticky_outB[148]), .A1(STICKYB_int), .A2(QPB_int[148]) );
VIRL_SDN_AN2_1 and_sticky_outB_149 ( .X(sticky_outB[149]), .A1(STICKYB_int), .A2(QPB_int[149]) );
VIRL_SDN_AN2_1 and_sticky_outB_150 ( .X(sticky_outB[150]), .A1(STICKYB_int), .A2(QPB_int[150]) );
VIRL_SDN_AN2_1 and_sticky_outB_151 ( .X(sticky_outB[151]), .A1(STICKYB_int), .A2(QPB_int[151]) );
VIRL_SDN_AN2_1 and_sticky_outB_152 ( .X(sticky_outB[152]), .A1(STICKYB_int), .A2(QPB_int[152]) );
VIRL_SDN_AN2_1 and_sticky_outB_153 ( .X(sticky_outB[153]), .A1(STICKYB_int), .A2(QPB_int[153]) );
VIRL_SDN_AN2_1 and_sticky_outB_154 ( .X(sticky_outB[154]), .A1(STICKYB_int), .A2(QPB_int[154]) );
VIRL_SDN_AN2_1 and_sticky_outB_155 ( .X(sticky_outB[155]), .A1(STICKYB_int), .A2(QPB_int[155]) );
VIRL_SDN_AN2_1 and_sticky_outB_156 ( .X(sticky_outB[156]), .A1(STICKYB_int), .A2(QPB_int[156]) );
VIRL_SDN_AN2_1 and_sticky_outB_157 ( .X(sticky_outB[157]), .A1(STICKYB_int), .A2(QPB_int[157]) );
VIRL_SDN_AN2_1 and_sticky_outB_158 ( .X(sticky_outB[158]), .A1(STICKYB_int), .A2(QPB_int[158]) );
VIRL_SDN_AN2_1 and_sticky_outB_159 ( .X(sticky_outB[159]), .A1(STICKYB_int), .A2(QPB_int[159]) );

VIRL_SDN_OR2_1 or_err_stickyB_0 ( .X(er_styB[0]), .A1(sticky_outB[0]), .A2(ErrB[0]) );
VIRL_SDN_OR2_1 or_err_stickyB_1 ( .X(er_styB[1]), .A1(sticky_outB[1]), .A2(ErrB[1]) );
VIRL_SDN_OR2_1 or_err_stickyB_2 ( .X(er_styB[2]), .A1(sticky_outB[2]), .A2(ErrB[2]) );
VIRL_SDN_OR2_1 or_err_stickyB_3 ( .X(er_styB[3]), .A1(sticky_outB[3]), .A2(ErrB[3]) );
VIRL_SDN_OR2_1 or_err_stickyB_4 ( .X(er_styB[4]), .A1(sticky_outB[4]), .A2(ErrB[4]) );
VIRL_SDN_OR2_1 or_err_stickyB_5 ( .X(er_styB[5]), .A1(sticky_outB[5]), .A2(ErrB[5]) );
VIRL_SDN_OR2_1 or_err_stickyB_6 ( .X(er_styB[6]), .A1(sticky_outB[6]), .A2(ErrB[6]) );
VIRL_SDN_OR2_1 or_err_stickyB_7 ( .X(er_styB[7]), .A1(sticky_outB[7]), .A2(ErrB[7]) );
VIRL_SDN_OR2_1 or_err_stickyB_8 ( .X(er_styB[8]), .A1(sticky_outB[8]), .A2(ErrB[8]) );
VIRL_SDN_OR2_1 or_err_stickyB_9 ( .X(er_styB[9]), .A1(sticky_outB[9]), .A2(ErrB[9]) );
VIRL_SDN_OR2_1 or_err_stickyB_10 ( .X(er_styB[10]), .A1(sticky_outB[10]), .A2(ErrB[10]) );
VIRL_SDN_OR2_1 or_err_stickyB_11 ( .X(er_styB[11]), .A1(sticky_outB[11]), .A2(ErrB[11]) );
VIRL_SDN_OR2_1 or_err_stickyB_12 ( .X(er_styB[12]), .A1(sticky_outB[12]), .A2(ErrB[12]) );
VIRL_SDN_OR2_1 or_err_stickyB_13 ( .X(er_styB[13]), .A1(sticky_outB[13]), .A2(ErrB[13]) );
VIRL_SDN_OR2_1 or_err_stickyB_14 ( .X(er_styB[14]), .A1(sticky_outB[14]), .A2(ErrB[14]) );
VIRL_SDN_OR2_1 or_err_stickyB_15 ( .X(er_styB[15]), .A1(sticky_outB[15]), .A2(ErrB[15]) );
VIRL_SDN_OR2_1 or_err_stickyB_16 ( .X(er_styB[16]), .A1(sticky_outB[16]), .A2(ErrB[16]) );
VIRL_SDN_OR2_1 or_err_stickyB_17 ( .X(er_styB[17]), .A1(sticky_outB[17]), .A2(ErrB[17]) );
VIRL_SDN_OR2_1 or_err_stickyB_18 ( .X(er_styB[18]), .A1(sticky_outB[18]), .A2(ErrB[18]) );
VIRL_SDN_OR2_1 or_err_stickyB_19 ( .X(er_styB[19]), .A1(sticky_outB[19]), .A2(ErrB[19]) );
VIRL_SDN_OR2_1 or_err_stickyB_20 ( .X(er_styB[20]), .A1(sticky_outB[20]), .A2(ErrB[20]) );
VIRL_SDN_OR2_1 or_err_stickyB_21 ( .X(er_styB[21]), .A1(sticky_outB[21]), .A2(ErrB[21]) );
VIRL_SDN_OR2_1 or_err_stickyB_22 ( .X(er_styB[22]), .A1(sticky_outB[22]), .A2(ErrB[22]) );
VIRL_SDN_OR2_1 or_err_stickyB_23 ( .X(er_styB[23]), .A1(sticky_outB[23]), .A2(ErrB[23]) );
VIRL_SDN_OR2_1 or_err_stickyB_24 ( .X(er_styB[24]), .A1(sticky_outB[24]), .A2(ErrB[24]) );
VIRL_SDN_OR2_1 or_err_stickyB_25 ( .X(er_styB[25]), .A1(sticky_outB[25]), .A2(ErrB[25]) );
VIRL_SDN_OR2_1 or_err_stickyB_26 ( .X(er_styB[26]), .A1(sticky_outB[26]), .A2(ErrB[26]) );
VIRL_SDN_OR2_1 or_err_stickyB_27 ( .X(er_styB[27]), .A1(sticky_outB[27]), .A2(ErrB[27]) );
VIRL_SDN_OR2_1 or_err_stickyB_28 ( .X(er_styB[28]), .A1(sticky_outB[28]), .A2(ErrB[28]) );
VIRL_SDN_OR2_1 or_err_stickyB_29 ( .X(er_styB[29]), .A1(sticky_outB[29]), .A2(ErrB[29]) );
VIRL_SDN_OR2_1 or_err_stickyB_30 ( .X(er_styB[30]), .A1(sticky_outB[30]), .A2(ErrB[30]) );
VIRL_SDN_OR2_1 or_err_stickyB_31 ( .X(er_styB[31]), .A1(sticky_outB[31]), .A2(ErrB[31]) );
VIRL_SDN_OR2_1 or_err_stickyB_32 ( .X(er_styB[32]), .A1(sticky_outB[32]), .A2(ErrB[32]) );
VIRL_SDN_OR2_1 or_err_stickyB_33 ( .X(er_styB[33]), .A1(sticky_outB[33]), .A2(ErrB[33]) );
VIRL_SDN_OR2_1 or_err_stickyB_34 ( .X(er_styB[34]), .A1(sticky_outB[34]), .A2(ErrB[34]) );
VIRL_SDN_OR2_1 or_err_stickyB_35 ( .X(er_styB[35]), .A1(sticky_outB[35]), .A2(ErrB[35]) );
VIRL_SDN_OR2_1 or_err_stickyB_36 ( .X(er_styB[36]), .A1(sticky_outB[36]), .A2(ErrB[36]) );
VIRL_SDN_OR2_1 or_err_stickyB_37 ( .X(er_styB[37]), .A1(sticky_outB[37]), .A2(ErrB[37]) );
VIRL_SDN_OR2_1 or_err_stickyB_38 ( .X(er_styB[38]), .A1(sticky_outB[38]), .A2(ErrB[38]) );
VIRL_SDN_OR2_1 or_err_stickyB_39 ( .X(er_styB[39]), .A1(sticky_outB[39]), .A2(ErrB[39]) );
VIRL_SDN_OR2_1 or_err_stickyB_40 ( .X(er_styB[40]), .A1(sticky_outB[40]), .A2(ErrB[40]) );
VIRL_SDN_OR2_1 or_err_stickyB_41 ( .X(er_styB[41]), .A1(sticky_outB[41]), .A2(ErrB[41]) );
VIRL_SDN_OR2_1 or_err_stickyB_42 ( .X(er_styB[42]), .A1(sticky_outB[42]), .A2(ErrB[42]) );
VIRL_SDN_OR2_1 or_err_stickyB_43 ( .X(er_styB[43]), .A1(sticky_outB[43]), .A2(ErrB[43]) );
VIRL_SDN_OR2_1 or_err_stickyB_44 ( .X(er_styB[44]), .A1(sticky_outB[44]), .A2(ErrB[44]) );
VIRL_SDN_OR2_1 or_err_stickyB_45 ( .X(er_styB[45]), .A1(sticky_outB[45]), .A2(ErrB[45]) );
VIRL_SDN_OR2_1 or_err_stickyB_46 ( .X(er_styB[46]), .A1(sticky_outB[46]), .A2(ErrB[46]) );
VIRL_SDN_OR2_1 or_err_stickyB_47 ( .X(er_styB[47]), .A1(sticky_outB[47]), .A2(ErrB[47]) );
VIRL_SDN_OR2_1 or_err_stickyB_48 ( .X(er_styB[48]), .A1(sticky_outB[48]), .A2(ErrB[48]) );
VIRL_SDN_OR2_1 or_err_stickyB_49 ( .X(er_styB[49]), .A1(sticky_outB[49]), .A2(ErrB[49]) );
VIRL_SDN_OR2_1 or_err_stickyB_50 ( .X(er_styB[50]), .A1(sticky_outB[50]), .A2(ErrB[50]) );
VIRL_SDN_OR2_1 or_err_stickyB_51 ( .X(er_styB[51]), .A1(sticky_outB[51]), .A2(ErrB[51]) );
VIRL_SDN_OR2_1 or_err_stickyB_52 ( .X(er_styB[52]), .A1(sticky_outB[52]), .A2(ErrB[52]) );
VIRL_SDN_OR2_1 or_err_stickyB_53 ( .X(er_styB[53]), .A1(sticky_outB[53]), .A2(ErrB[53]) );
VIRL_SDN_OR2_1 or_err_stickyB_54 ( .X(er_styB[54]), .A1(sticky_outB[54]), .A2(ErrB[54]) );
VIRL_SDN_OR2_1 or_err_stickyB_55 ( .X(er_styB[55]), .A1(sticky_outB[55]), .A2(ErrB[55]) );
VIRL_SDN_OR2_1 or_err_stickyB_56 ( .X(er_styB[56]), .A1(sticky_outB[56]), .A2(ErrB[56]) );
VIRL_SDN_OR2_1 or_err_stickyB_57 ( .X(er_styB[57]), .A1(sticky_outB[57]), .A2(ErrB[57]) );
VIRL_SDN_OR2_1 or_err_stickyB_58 ( .X(er_styB[58]), .A1(sticky_outB[58]), .A2(ErrB[58]) );
VIRL_SDN_OR2_1 or_err_stickyB_59 ( .X(er_styB[59]), .A1(sticky_outB[59]), .A2(ErrB[59]) );
VIRL_SDN_OR2_1 or_err_stickyB_60 ( .X(er_styB[60]), .A1(sticky_outB[60]), .A2(ErrB[60]) );
VIRL_SDN_OR2_1 or_err_stickyB_61 ( .X(er_styB[61]), .A1(sticky_outB[61]), .A2(ErrB[61]) );
VIRL_SDN_OR2_1 or_err_stickyB_62 ( .X(er_styB[62]), .A1(sticky_outB[62]), .A2(ErrB[62]) );
VIRL_SDN_OR2_1 or_err_stickyB_63 ( .X(er_styB[63]), .A1(sticky_outB[63]), .A2(ErrB[63]) );
VIRL_SDN_OR2_1 or_err_stickyB_64 ( .X(er_styB[64]), .A1(sticky_outB[64]), .A2(ErrB[64]) );
VIRL_SDN_OR2_1 or_err_stickyB_65 ( .X(er_styB[65]), .A1(sticky_outB[65]), .A2(ErrB[65]) );
VIRL_SDN_OR2_1 or_err_stickyB_66 ( .X(er_styB[66]), .A1(sticky_outB[66]), .A2(ErrB[66]) );
VIRL_SDN_OR2_1 or_err_stickyB_67 ( .X(er_styB[67]), .A1(sticky_outB[67]), .A2(ErrB[67]) );
VIRL_SDN_OR2_1 or_err_stickyB_68 ( .X(er_styB[68]), .A1(sticky_outB[68]), .A2(ErrB[68]) );
VIRL_SDN_OR2_1 or_err_stickyB_69 ( .X(er_styB[69]), .A1(sticky_outB[69]), .A2(ErrB[69]) );
VIRL_SDN_OR2_1 or_err_stickyB_70 ( .X(er_styB[70]), .A1(sticky_outB[70]), .A2(ErrB[70]) );
VIRL_SDN_OR2_1 or_err_stickyB_71 ( .X(er_styB[71]), .A1(sticky_outB[71]), .A2(ErrB[71]) );
VIRL_SDN_OR2_1 or_err_stickyB_72 ( .X(er_styB[72]), .A1(sticky_outB[72]), .A2(ErrB[72]) );
VIRL_SDN_OR2_1 or_err_stickyB_73 ( .X(er_styB[73]), .A1(sticky_outB[73]), .A2(ErrB[73]) );
VIRL_SDN_OR2_1 or_err_stickyB_74 ( .X(er_styB[74]), .A1(sticky_outB[74]), .A2(ErrB[74]) );
VIRL_SDN_OR2_1 or_err_stickyB_75 ( .X(er_styB[75]), .A1(sticky_outB[75]), .A2(ErrB[75]) );
VIRL_SDN_OR2_1 or_err_stickyB_76 ( .X(er_styB[76]), .A1(sticky_outB[76]), .A2(ErrB[76]) );
VIRL_SDN_OR2_1 or_err_stickyB_77 ( .X(er_styB[77]), .A1(sticky_outB[77]), .A2(ErrB[77]) );
VIRL_SDN_OR2_1 or_err_stickyB_78 ( .X(er_styB[78]), .A1(sticky_outB[78]), .A2(ErrB[78]) );
VIRL_SDN_OR2_1 or_err_stickyB_79 ( .X(er_styB[79]), .A1(sticky_outB[79]), .A2(ErrB[79]) );
VIRL_SDN_OR2_1 or_err_stickyB_80 ( .X(er_styB[80]), .A1(sticky_outB[80]), .A2(ErrB[80]) );
VIRL_SDN_OR2_1 or_err_stickyB_81 ( .X(er_styB[81]), .A1(sticky_outB[81]), .A2(ErrB[81]) );
VIRL_SDN_OR2_1 or_err_stickyB_82 ( .X(er_styB[82]), .A1(sticky_outB[82]), .A2(ErrB[82]) );
VIRL_SDN_OR2_1 or_err_stickyB_83 ( .X(er_styB[83]), .A1(sticky_outB[83]), .A2(ErrB[83]) );
VIRL_SDN_OR2_1 or_err_stickyB_84 ( .X(er_styB[84]), .A1(sticky_outB[84]), .A2(ErrB[84]) );
VIRL_SDN_OR2_1 or_err_stickyB_85 ( .X(er_styB[85]), .A1(sticky_outB[85]), .A2(ErrB[85]) );
VIRL_SDN_OR2_1 or_err_stickyB_86 ( .X(er_styB[86]), .A1(sticky_outB[86]), .A2(ErrB[86]) );
VIRL_SDN_OR2_1 or_err_stickyB_87 ( .X(er_styB[87]), .A1(sticky_outB[87]), .A2(ErrB[87]) );
VIRL_SDN_OR2_1 or_err_stickyB_88 ( .X(er_styB[88]), .A1(sticky_outB[88]), .A2(ErrB[88]) );
VIRL_SDN_OR2_1 or_err_stickyB_89 ( .X(er_styB[89]), .A1(sticky_outB[89]), .A2(ErrB[89]) );
VIRL_SDN_OR2_1 or_err_stickyB_90 ( .X(er_styB[90]), .A1(sticky_outB[90]), .A2(ErrB[90]) );
VIRL_SDN_OR2_1 or_err_stickyB_91 ( .X(er_styB[91]), .A1(sticky_outB[91]), .A2(ErrB[91]) );
VIRL_SDN_OR2_1 or_err_stickyB_92 ( .X(er_styB[92]), .A1(sticky_outB[92]), .A2(ErrB[92]) );
VIRL_SDN_OR2_1 or_err_stickyB_93 ( .X(er_styB[93]), .A1(sticky_outB[93]), .A2(ErrB[93]) );
VIRL_SDN_OR2_1 or_err_stickyB_94 ( .X(er_styB[94]), .A1(sticky_outB[94]), .A2(ErrB[94]) );
VIRL_SDN_OR2_1 or_err_stickyB_95 ( .X(er_styB[95]), .A1(sticky_outB[95]), .A2(ErrB[95]) );
VIRL_SDN_OR2_1 or_err_stickyB_96 ( .X(er_styB[96]), .A1(sticky_outB[96]), .A2(ErrB[96]) );
VIRL_SDN_OR2_1 or_err_stickyB_97 ( .X(er_styB[97]), .A1(sticky_outB[97]), .A2(ErrB[97]) );
VIRL_SDN_OR2_1 or_err_stickyB_98 ( .X(er_styB[98]), .A1(sticky_outB[98]), .A2(ErrB[98]) );
VIRL_SDN_OR2_1 or_err_stickyB_99 ( .X(er_styB[99]), .A1(sticky_outB[99]), .A2(ErrB[99]) );
VIRL_SDN_OR2_1 or_err_stickyB_100 ( .X(er_styB[100]), .A1(sticky_outB[100]), .A2(ErrB[100]) );
VIRL_SDN_OR2_1 or_err_stickyB_101 ( .X(er_styB[101]), .A1(sticky_outB[101]), .A2(ErrB[101]) );
VIRL_SDN_OR2_1 or_err_stickyB_102 ( .X(er_styB[102]), .A1(sticky_outB[102]), .A2(ErrB[102]) );
VIRL_SDN_OR2_1 or_err_stickyB_103 ( .X(er_styB[103]), .A1(sticky_outB[103]), .A2(ErrB[103]) );
VIRL_SDN_OR2_1 or_err_stickyB_104 ( .X(er_styB[104]), .A1(sticky_outB[104]), .A2(ErrB[104]) );
VIRL_SDN_OR2_1 or_err_stickyB_105 ( .X(er_styB[105]), .A1(sticky_outB[105]), .A2(ErrB[105]) );
VIRL_SDN_OR2_1 or_err_stickyB_106 ( .X(er_styB[106]), .A1(sticky_outB[106]), .A2(ErrB[106]) );
VIRL_SDN_OR2_1 or_err_stickyB_107 ( .X(er_styB[107]), .A1(sticky_outB[107]), .A2(ErrB[107]) );
VIRL_SDN_OR2_1 or_err_stickyB_108 ( .X(er_styB[108]), .A1(sticky_outB[108]), .A2(ErrB[108]) );
VIRL_SDN_OR2_1 or_err_stickyB_109 ( .X(er_styB[109]), .A1(sticky_outB[109]), .A2(ErrB[109]) );
VIRL_SDN_OR2_1 or_err_stickyB_110 ( .X(er_styB[110]), .A1(sticky_outB[110]), .A2(ErrB[110]) );
VIRL_SDN_OR2_1 or_err_stickyB_111 ( .X(er_styB[111]), .A1(sticky_outB[111]), .A2(ErrB[111]) );
VIRL_SDN_OR2_1 or_err_stickyB_112 ( .X(er_styB[112]), .A1(sticky_outB[112]), .A2(ErrB[112]) );
VIRL_SDN_OR2_1 or_err_stickyB_113 ( .X(er_styB[113]), .A1(sticky_outB[113]), .A2(ErrB[113]) );
VIRL_SDN_OR2_1 or_err_stickyB_114 ( .X(er_styB[114]), .A1(sticky_outB[114]), .A2(ErrB[114]) );
VIRL_SDN_OR2_1 or_err_stickyB_115 ( .X(er_styB[115]), .A1(sticky_outB[115]), .A2(ErrB[115]) );
VIRL_SDN_OR2_1 or_err_stickyB_116 ( .X(er_styB[116]), .A1(sticky_outB[116]), .A2(ErrB[116]) );
VIRL_SDN_OR2_1 or_err_stickyB_117 ( .X(er_styB[117]), .A1(sticky_outB[117]), .A2(ErrB[117]) );
VIRL_SDN_OR2_1 or_err_stickyB_118 ( .X(er_styB[118]), .A1(sticky_outB[118]), .A2(ErrB[118]) );
VIRL_SDN_OR2_1 or_err_stickyB_119 ( .X(er_styB[119]), .A1(sticky_outB[119]), .A2(ErrB[119]) );
VIRL_SDN_OR2_1 or_err_stickyB_120 ( .X(er_styB[120]), .A1(sticky_outB[120]), .A2(ErrB[120]) );
VIRL_SDN_OR2_1 or_err_stickyB_121 ( .X(er_styB[121]), .A1(sticky_outB[121]), .A2(ErrB[121]) );
VIRL_SDN_OR2_1 or_err_stickyB_122 ( .X(er_styB[122]), .A1(sticky_outB[122]), .A2(ErrB[122]) );
VIRL_SDN_OR2_1 or_err_stickyB_123 ( .X(er_styB[123]), .A1(sticky_outB[123]), .A2(ErrB[123]) );
VIRL_SDN_OR2_1 or_err_stickyB_124 ( .X(er_styB[124]), .A1(sticky_outB[124]), .A2(ErrB[124]) );
VIRL_SDN_OR2_1 or_err_stickyB_125 ( .X(er_styB[125]), .A1(sticky_outB[125]), .A2(ErrB[125]) );
VIRL_SDN_OR2_1 or_err_stickyB_126 ( .X(er_styB[126]), .A1(sticky_outB[126]), .A2(ErrB[126]) );
VIRL_SDN_OR2_1 or_err_stickyB_127 ( .X(er_styB[127]), .A1(sticky_outB[127]), .A2(ErrB[127]) );
VIRL_SDN_OR2_1 or_err_stickyB_128 ( .X(er_styB[128]), .A1(sticky_outB[128]), .A2(ErrB[128]) );
VIRL_SDN_OR2_1 or_err_stickyB_129 ( .X(er_styB[129]), .A1(sticky_outB[129]), .A2(ErrB[129]) );
VIRL_SDN_OR2_1 or_err_stickyB_130 ( .X(er_styB[130]), .A1(sticky_outB[130]), .A2(ErrB[130]) );
VIRL_SDN_OR2_1 or_err_stickyB_131 ( .X(er_styB[131]), .A1(sticky_outB[131]), .A2(ErrB[131]) );
VIRL_SDN_OR2_1 or_err_stickyB_132 ( .X(er_styB[132]), .A1(sticky_outB[132]), .A2(ErrB[132]) );
VIRL_SDN_OR2_1 or_err_stickyB_133 ( .X(er_styB[133]), .A1(sticky_outB[133]), .A2(ErrB[133]) );
VIRL_SDN_OR2_1 or_err_stickyB_134 ( .X(er_styB[134]), .A1(sticky_outB[134]), .A2(ErrB[134]) );
VIRL_SDN_OR2_1 or_err_stickyB_135 ( .X(er_styB[135]), .A1(sticky_outB[135]), .A2(ErrB[135]) );
VIRL_SDN_OR2_1 or_err_stickyB_136 ( .X(er_styB[136]), .A1(sticky_outB[136]), .A2(ErrB[136]) );
VIRL_SDN_OR2_1 or_err_stickyB_137 ( .X(er_styB[137]), .A1(sticky_outB[137]), .A2(ErrB[137]) );
VIRL_SDN_OR2_1 or_err_stickyB_138 ( .X(er_styB[138]), .A1(sticky_outB[138]), .A2(ErrB[138]) );
VIRL_SDN_OR2_1 or_err_stickyB_139 ( .X(er_styB[139]), .A1(sticky_outB[139]), .A2(ErrB[139]) );
VIRL_SDN_OR2_1 or_err_stickyB_140 ( .X(er_styB[140]), .A1(sticky_outB[140]), .A2(ErrB[140]) );
VIRL_SDN_OR2_1 or_err_stickyB_141 ( .X(er_styB[141]), .A1(sticky_outB[141]), .A2(ErrB[141]) );
VIRL_SDN_OR2_1 or_err_stickyB_142 ( .X(er_styB[142]), .A1(sticky_outB[142]), .A2(ErrB[142]) );
VIRL_SDN_OR2_1 or_err_stickyB_143 ( .X(er_styB[143]), .A1(sticky_outB[143]), .A2(ErrB[143]) );
VIRL_SDN_OR2_1 or_err_stickyB_144 ( .X(er_styB[144]), .A1(sticky_outB[144]), .A2(ErrB[144]) );
VIRL_SDN_OR2_1 or_err_stickyB_145 ( .X(er_styB[145]), .A1(sticky_outB[145]), .A2(ErrB[145]) );
VIRL_SDN_OR2_1 or_err_stickyB_146 ( .X(er_styB[146]), .A1(sticky_outB[146]), .A2(ErrB[146]) );
VIRL_SDN_OR2_1 or_err_stickyB_147 ( .X(er_styB[147]), .A1(sticky_outB[147]), .A2(ErrB[147]) );
VIRL_SDN_OR2_1 or_err_stickyB_148 ( .X(er_styB[148]), .A1(sticky_outB[148]), .A2(ErrB[148]) );
VIRL_SDN_OR2_1 or_err_stickyB_149 ( .X(er_styB[149]), .A1(sticky_outB[149]), .A2(ErrB[149]) );
VIRL_SDN_OR2_1 or_err_stickyB_150 ( .X(er_styB[150]), .A1(sticky_outB[150]), .A2(ErrB[150]) );
VIRL_SDN_OR2_1 or_err_stickyB_151 ( .X(er_styB[151]), .A1(sticky_outB[151]), .A2(ErrB[151]) );
VIRL_SDN_OR2_1 or_err_stickyB_152 ( .X(er_styB[152]), .A1(sticky_outB[152]), .A2(ErrB[152]) );
VIRL_SDN_OR2_1 or_err_stickyB_153 ( .X(er_styB[153]), .A1(sticky_outB[153]), .A2(ErrB[153]) );
VIRL_SDN_OR2_1 or_err_stickyB_154 ( .X(er_styB[154]), .A1(sticky_outB[154]), .A2(ErrB[154]) );
VIRL_SDN_OR2_1 or_err_stickyB_155 ( .X(er_styB[155]), .A1(sticky_outB[155]), .A2(ErrB[155]) );
VIRL_SDN_OR2_1 or_err_stickyB_156 ( .X(er_styB[156]), .A1(sticky_outB[156]), .A2(ErrB[156]) );
VIRL_SDN_OR2_1 or_err_stickyB_157 ( .X(er_styB[157]), .A1(sticky_outB[157]), .A2(ErrB[157]) );
VIRL_SDN_OR2_1 or_err_stickyB_158 ( .X(er_styB[158]), .A1(sticky_outB[158]), .A2(ErrB[158]) );
VIRL_SDN_OR2_1 or_err_stickyB_159 ( .X(er_styB[159]), .A1(sticky_outB[159]), .A2(ErrB[159]) );


VIRL_SDN_BUF_1 buf_SO_QA_out (.X(SO_QA_buf), .A(QPA_int[159]));
VIRL_SDN_MSDPRB_1 ff_QPA_int_159 (.Q(QPA_int[159]), .CK(ls_clk_pipA), .D(er_styA[159]), .SI(QPA_int[158]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_158 (.Q(QPA_int[158]), .CK(ls_clk_pipA), .D(er_styA[158]), .SI(QPA_int[157]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_157 (.Q(QPA_int[157]), .CK(ls_clk_pipA), .D(er_styA[157]), .SI(QPA_int[156]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_156 (.Q(QPA_int[156]), .CK(ls_clk_pipA), .D(er_styA[156]), .SI(QPA_int[155]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_155 (.Q(QPA_int[155]), .CK(ls_clk_pipA), .D(er_styA[155]), .SI(QPA_int[154]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_154 (.Q(QPA_int[154]), .CK(ls_clk_pipA), .D(er_styA[154]), .SI(QPA_int[153]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_153 (.Q(QPA_int[153]), .CK(ls_clk_pipA), .D(er_styA[153]), .SI(QPA_int[152]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_152 (.Q(QPA_int[152]), .CK(ls_clk_pipA), .D(er_styA[152]), .SI(QPA_int[151]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_151 (.Q(QPA_int[151]), .CK(ls_clk_pipA), .D(er_styA[151]), .SI(QPA_int[150]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_150 (.Q(QPA_int[150]), .CK(ls_clk_pipA), .D(er_styA[150]), .SI(QPA_int[149]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_149 (.Q(QPA_int[149]), .CK(ls_clk_pipA), .D(er_styA[149]), .SI(QPA_int[148]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_148 (.Q(QPA_int[148]), .CK(ls_clk_pipA), .D(er_styA[148]), .SI(QPA_int[147]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_147 (.Q(QPA_int[147]), .CK(ls_clk_pipA), .D(er_styA[147]), .SI(QPA_int[146]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_146 (.Q(QPA_int[146]), .CK(ls_clk_pipA), .D(er_styA[146]), .SI(QPA_int[145]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_145 (.Q(QPA_int[145]), .CK(ls_clk_pipA), .D(er_styA[145]), .SI(QPA_int[144]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_144 (.Q(QPA_int[144]), .CK(ls_clk_pipA), .D(er_styA[144]), .SI(QPA_int[143]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_143 (.Q(QPA_int[143]), .CK(ls_clk_pipA), .D(er_styA[143]), .SI(QPA_int[142]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_142 (.Q(QPA_int[142]), .CK(ls_clk_pipA), .D(er_styA[142]), .SI(QPA_int[141]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_141 (.Q(QPA_int[141]), .CK(ls_clk_pipA), .D(er_styA[141]), .SI(QPA_int[140]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_140 (.Q(QPA_int[140]), .CK(ls_clk_pipA), .D(er_styA[140]), .SI(QPA_int[139]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_139 (.Q(QPA_int[139]), .CK(ls_clk_pipA), .D(er_styA[139]), .SI(QPA_int[138]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_138 (.Q(QPA_int[138]), .CK(ls_clk_pipA), .D(er_styA[138]), .SI(QPA_int[137]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_137 (.Q(QPA_int[137]), .CK(ls_clk_pipA), .D(er_styA[137]), .SI(QPA_int[136]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_136 (.Q(QPA_int[136]), .CK(ls_clk_pipA), .D(er_styA[136]), .SI(QPA_int[135]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_135 (.Q(QPA_int[135]), .CK(ls_clk_pipA), .D(er_styA[135]), .SI(QPA_int[134]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_134 (.Q(QPA_int[134]), .CK(ls_clk_pipA), .D(er_styA[134]), .SI(QPA_int[133]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_133 (.Q(QPA_int[133]), .CK(ls_clk_pipA), .D(er_styA[133]), .SI(QPA_int[132]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_132 (.Q(QPA_int[132]), .CK(ls_clk_pipA), .D(er_styA[132]), .SI(QPA_int[131]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_131 (.Q(QPA_int[131]), .CK(ls_clk_pipA), .D(er_styA[131]), .SI(QPA_int[130]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_130 (.Q(QPA_int[130]), .CK(ls_clk_pipA), .D(er_styA[130]), .SI(QPA_int[129]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_129 (.Q(QPA_int[129]), .CK(ls_clk_pipA), .D(er_styA[129]), .SI(QPA_int[128]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_128 (.Q(QPA_int[128]), .CK(ls_clk_pipA), .D(er_styA[128]), .SI(QPA_int[127]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_127 (.Q(QPA_int[127]), .CK(ls_clk_pipA), .D(er_styA[127]), .SI(QPA_int[126]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_126 (.Q(QPA_int[126]), .CK(ls_clk_pipA), .D(er_styA[126]), .SI(QPA_int[125]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_125 (.Q(QPA_int[125]), .CK(ls_clk_pipA), .D(er_styA[125]), .SI(QPA_int[124]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_124 (.Q(QPA_int[124]), .CK(ls_clk_pipA), .D(er_styA[124]), .SI(QPA_int[123]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_123 (.Q(QPA_int[123]), .CK(ls_clk_pipA), .D(er_styA[123]), .SI(QPA_int[122]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_122 (.Q(QPA_int[122]), .CK(ls_clk_pipA), .D(er_styA[122]), .SI(QPA_int[121]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_121 (.Q(QPA_int[121]), .CK(ls_clk_pipA), .D(er_styA[121]), .SI(QPA_int[120]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_120 (.Q(QPA_int[120]), .CK(ls_clk_pipA), .D(er_styA[120]), .SI(QPA_int[119]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_119 (.Q(QPA_int[119]), .CK(ls_clk_pipA), .D(er_styA[119]), .SI(QPA_int[118]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_118 (.Q(QPA_int[118]), .CK(ls_clk_pipA), .D(er_styA[118]), .SI(QPA_int[117]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_117 (.Q(QPA_int[117]), .CK(ls_clk_pipA), .D(er_styA[117]), .SI(QPA_int[116]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_116 (.Q(QPA_int[116]), .CK(ls_clk_pipA), .D(er_styA[116]), .SI(QPA_int[115]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_115 (.Q(QPA_int[115]), .CK(ls_clk_pipA), .D(er_styA[115]), .SI(QPA_int[114]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_114 (.Q(QPA_int[114]), .CK(ls_clk_pipA), .D(er_styA[114]), .SI(QPA_int[113]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_113 (.Q(QPA_int[113]), .CK(ls_clk_pipA), .D(er_styA[113]), .SI(QPA_int[112]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_112 (.Q(QPA_int[112]), .CK(ls_clk_pipA), .D(er_styA[112]), .SI(QPA_int[111]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_111 (.Q(QPA_int[111]), .CK(ls_clk_pipA), .D(er_styA[111]), .SI(QPA_int[110]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_110 (.Q(QPA_int[110]), .CK(ls_clk_pipA), .D(er_styA[110]), .SI(QPA_int[109]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_109 (.Q(QPA_int[109]), .CK(ls_clk_pipA), .D(er_styA[109]), .SI(QPA_int[108]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_108 (.Q(QPA_int[108]), .CK(ls_clk_pipA), .D(er_styA[108]), .SI(QPA_int[107]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_107 (.Q(QPA_int[107]), .CK(ls_clk_pipA), .D(er_styA[107]), .SI(QPA_int[106]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_106 (.Q(QPA_int[106]), .CK(ls_clk_pipA), .D(er_styA[106]), .SI(QPA_int[105]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_105 (.Q(QPA_int[105]), .CK(ls_clk_pipA), .D(er_styA[105]), .SI(QPA_int[104]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_104 (.Q(QPA_int[104]), .CK(ls_clk_pipA), .D(er_styA[104]), .SI(QPA_int[103]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_103 (.Q(QPA_int[103]), .CK(ls_clk_pipA), .D(er_styA[103]), .SI(QPA_int[102]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_102 (.Q(QPA_int[102]), .CK(ls_clk_pipA), .D(er_styA[102]), .SI(QPA_int[101]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_101 (.Q(QPA_int[101]), .CK(ls_clk_pipA), .D(er_styA[101]), .SI(QPA_int[100]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_100 (.Q(QPA_int[100]), .CK(ls_clk_pipA), .D(er_styA[100]), .SI(QPA_int[99]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_99 (.Q(QPA_int[99]), .CK(ls_clk_pipA), .D(er_styA[99]), .SI(QPA_int[98]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_98 (.Q(QPA_int[98]), .CK(ls_clk_pipA), .D(er_styA[98]), .SI(QPA_int[97]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_97 (.Q(QPA_int[97]), .CK(ls_clk_pipA), .D(er_styA[97]), .SI(QPA_int[96]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_96 (.Q(QPA_int[96]), .CK(ls_clk_pipA), .D(er_styA[96]), .SI(QPA_int[95]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_95 (.Q(QPA_int[95]), .CK(ls_clk_pipA), .D(er_styA[95]), .SI(QPA_int[94]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_94 (.Q(QPA_int[94]), .CK(ls_clk_pipA), .D(er_styA[94]), .SI(QPA_int[93]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_93 (.Q(QPA_int[93]), .CK(ls_clk_pipA), .D(er_styA[93]), .SI(QPA_int[92]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_92 (.Q(QPA_int[92]), .CK(ls_clk_pipA), .D(er_styA[92]), .SI(QPA_int[91]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_91 (.Q(QPA_int[91]), .CK(ls_clk_pipA), .D(er_styA[91]), .SI(QPA_int[90]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_90 (.Q(QPA_int[90]), .CK(ls_clk_pipA), .D(er_styA[90]), .SI(QPA_int[89]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_89 (.Q(QPA_int[89]), .CK(ls_clk_pipA), .D(er_styA[89]), .SI(QPA_int[88]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_88 (.Q(QPA_int[88]), .CK(ls_clk_pipA), .D(er_styA[88]), .SI(QPA_int[87]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_87 (.Q(QPA_int[87]), .CK(ls_clk_pipA), .D(er_styA[87]), .SI(QPA_int[86]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_86 (.Q(QPA_int[86]), .CK(ls_clk_pipA), .D(er_styA[86]), .SI(QPA_int[85]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_85 (.Q(QPA_int[85]), .CK(ls_clk_pipA), .D(er_styA[85]), .SI(QPA_int[84]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_84 (.Q(QPA_int[84]), .CK(ls_clk_pipA), .D(er_styA[84]), .SI(QPA_int[83]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_83 (.Q(QPA_int[83]), .CK(ls_clk_pipA), .D(er_styA[83]), .SI(QPA_int[82]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_82 (.Q(QPA_int[82]), .CK(ls_clk_pipA), .D(er_styA[82]), .SI(QPA_int[81]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_81 (.Q(QPA_int[81]), .CK(ls_clk_pipA), .D(er_styA[81]), .SI(QPA_int[80]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_80 (.Q(QPA_int[80]), .CK(ls_clk_pipA), .D(er_styA[80]), .SI(QPA_int[79]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_79 (.Q(QPA_int[79]), .CK(ls_clk_pipA), .D(er_styA[79]), .SI(QPA_int[78]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_78 (.Q(QPA_int[78]), .CK(ls_clk_pipA), .D(er_styA[78]), .SI(QPA_int[77]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_77 (.Q(QPA_int[77]), .CK(ls_clk_pipA), .D(er_styA[77]), .SI(QPA_int[76]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_76 (.Q(QPA_int[76]), .CK(ls_clk_pipA), .D(er_styA[76]), .SI(QPA_int[75]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_75 (.Q(QPA_int[75]), .CK(ls_clk_pipA), .D(er_styA[75]), .SI(QPA_int[74]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_74 (.Q(QPA_int[74]), .CK(ls_clk_pipA), .D(er_styA[74]), .SI(QPA_int[73]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_73 (.Q(QPA_int[73]), .CK(ls_clk_pipA), .D(er_styA[73]), .SI(QPA_int[72]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_72 (.Q(QPA_int[72]), .CK(ls_clk_pipA), .D(er_styA[72]), .SI(QPA_int[71]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_71 (.Q(QPA_int[71]), .CK(ls_clk_pipA), .D(er_styA[71]), .SI(QPA_int[70]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_70 (.Q(QPA_int[70]), .CK(ls_clk_pipA), .D(er_styA[70]), .SI(QPA_int[69]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_69 (.Q(QPA_int[69]), .CK(ls_clk_pipA), .D(er_styA[69]), .SI(QPA_int[68]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_68 (.Q(QPA_int[68]), .CK(ls_clk_pipA), .D(er_styA[68]), .SI(QPA_int[67]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_67 (.Q(QPA_int[67]), .CK(ls_clk_pipA), .D(er_styA[67]), .SI(QPA_int[66]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_66 (.Q(QPA_int[66]), .CK(ls_clk_pipA), .D(er_styA[66]), .SI(QPA_int[65]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_65 (.Q(QPA_int[65]), .CK(ls_clk_pipA), .D(er_styA[65]), .SI(QPA_int[64]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_64 (.Q(QPA_int[64]), .CK(ls_clk_pipA), .D(er_styA[64]), .SI(QPA_int[63]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_63 (.Q(QPA_int[63]), .CK(ls_clk_pipA), .D(er_styA[63]), .SI(QPA_int[62]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_62 (.Q(QPA_int[62]), .CK(ls_clk_pipA), .D(er_styA[62]), .SI(QPA_int[61]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_61 (.Q(QPA_int[61]), .CK(ls_clk_pipA), .D(er_styA[61]), .SI(QPA_int[60]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_60 (.Q(QPA_int[60]), .CK(ls_clk_pipA), .D(er_styA[60]), .SI(QPA_int[59]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_59 (.Q(QPA_int[59]), .CK(ls_clk_pipA), .D(er_styA[59]), .SI(QPA_int[58]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_58 (.Q(QPA_int[58]), .CK(ls_clk_pipA), .D(er_styA[58]), .SI(QPA_int[57]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_57 (.Q(QPA_int[57]), .CK(ls_clk_pipA), .D(er_styA[57]), .SI(QPA_int[56]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_56 (.Q(QPA_int[56]), .CK(ls_clk_pipA), .D(er_styA[56]), .SI(QPA_int[55]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_55 (.Q(QPA_int[55]), .CK(ls_clk_pipA), .D(er_styA[55]), .SI(QPA_int[54]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_54 (.Q(QPA_int[54]), .CK(ls_clk_pipA), .D(er_styA[54]), .SI(QPA_int[53]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_53 (.Q(QPA_int[53]), .CK(ls_clk_pipA), .D(er_styA[53]), .SI(QPA_int[52]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_52 (.Q(QPA_int[52]), .CK(ls_clk_pipA), .D(er_styA[52]), .SI(QPA_int[51]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_51 (.Q(QPA_int[51]), .CK(ls_clk_pipA), .D(er_styA[51]), .SI(QPA_int[50]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_50 (.Q(QPA_int[50]), .CK(ls_clk_pipA), .D(er_styA[50]), .SI(QPA_int[49]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_49 (.Q(QPA_int[49]), .CK(ls_clk_pipA), .D(er_styA[49]), .SI(QPA_int[48]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_48 (.Q(QPA_int[48]), .CK(ls_clk_pipA), .D(er_styA[48]), .SI(QPA_int[47]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_47 (.Q(QPA_int[47]), .CK(ls_clk_pipA), .D(er_styA[47]), .SI(QPA_int[46]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_46 (.Q(QPA_int[46]), .CK(ls_clk_pipA), .D(er_styA[46]), .SI(QPA_int[45]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_45 (.Q(QPA_int[45]), .CK(ls_clk_pipA), .D(er_styA[45]), .SI(QPA_int[44]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_44 (.Q(QPA_int[44]), .CK(ls_clk_pipA), .D(er_styA[44]), .SI(QPA_int[43]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_43 (.Q(QPA_int[43]), .CK(ls_clk_pipA), .D(er_styA[43]), .SI(QPA_int[42]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_42 (.Q(QPA_int[42]), .CK(ls_clk_pipA), .D(er_styA[42]), .SI(QPA_int[41]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_41 (.Q(QPA_int[41]), .CK(ls_clk_pipA), .D(er_styA[41]), .SI(QPA_int[40]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_40 (.Q(QPA_int[40]), .CK(ls_clk_pipA), .D(er_styA[40]), .SI(QPA_int[39]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_39 (.Q(QPA_int[39]), .CK(ls_clk_pipA), .D(er_styA[39]), .SI(QPA_int[38]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_38 (.Q(QPA_int[38]), .CK(ls_clk_pipA), .D(er_styA[38]), .SI(QPA_int[37]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_37 (.Q(QPA_int[37]), .CK(ls_clk_pipA), .D(er_styA[37]), .SI(QPA_int[36]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_36 (.Q(QPA_int[36]), .CK(ls_clk_pipA), .D(er_styA[36]), .SI(QPA_int[35]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_35 (.Q(QPA_int[35]), .CK(ls_clk_pipA), .D(er_styA[35]), .SI(QPA_int[34]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_34 (.Q(QPA_int[34]), .CK(ls_clk_pipA), .D(er_styA[34]), .SI(QPA_int[33]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_33 (.Q(QPA_int[33]), .CK(ls_clk_pipA), .D(er_styA[33]), .SI(QPA_int[32]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_32 (.Q(QPA_int[32]), .CK(ls_clk_pipA), .D(er_styA[32]), .SI(QPA_int[31]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_31 (.Q(QPA_int[31]), .CK(ls_clk_pipA), .D(er_styA[31]), .SI(QPA_int[30]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_30 (.Q(QPA_int[30]), .CK(ls_clk_pipA), .D(er_styA[30]), .SI(QPA_int[29]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_29 (.Q(QPA_int[29]), .CK(ls_clk_pipA), .D(er_styA[29]), .SI(QPA_int[28]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_28 (.Q(QPA_int[28]), .CK(ls_clk_pipA), .D(er_styA[28]), .SI(QPA_int[27]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_27 (.Q(QPA_int[27]), .CK(ls_clk_pipA), .D(er_styA[27]), .SI(QPA_int[26]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_26 (.Q(QPA_int[26]), .CK(ls_clk_pipA), .D(er_styA[26]), .SI(QPA_int[25]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_25 (.Q(QPA_int[25]), .CK(ls_clk_pipA), .D(er_styA[25]), .SI(QPA_int[24]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_24 (.Q(QPA_int[24]), .CK(ls_clk_pipA), .D(er_styA[24]), .SI(QPA_int[23]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_23 (.Q(QPA_int[23]), .CK(ls_clk_pipA), .D(er_styA[23]), .SI(QPA_int[22]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_22 (.Q(QPA_int[22]), .CK(ls_clk_pipA), .D(er_styA[22]), .SI(QPA_int[21]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_21 (.Q(QPA_int[21]), .CK(ls_clk_pipA), .D(er_styA[21]), .SI(QPA_int[20]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_20 (.Q(QPA_int[20]), .CK(ls_clk_pipA), .D(er_styA[20]), .SI(QPA_int[19]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_19 (.Q(QPA_int[19]), .CK(ls_clk_pipA), .D(er_styA[19]), .SI(QPA_int[18]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_18 (.Q(QPA_int[18]), .CK(ls_clk_pipA), .D(er_styA[18]), .SI(QPA_int[17]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_17 (.Q(QPA_int[17]), .CK(ls_clk_pipA), .D(er_styA[17]), .SI(QPA_int[16]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_16 (.Q(QPA_int[16]), .CK(ls_clk_pipA), .D(er_styA[16]), .SI(QPA_int[15]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_15 (.Q(QPA_int[15]), .CK(ls_clk_pipA), .D(er_styA[15]), .SI(QPA_int[14]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_14 (.Q(QPA_int[14]), .CK(ls_clk_pipA), .D(er_styA[14]), .SI(QPA_int[13]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_13 (.Q(QPA_int[13]), .CK(ls_clk_pipA), .D(er_styA[13]), .SI(QPA_int[12]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_12 (.Q(QPA_int[12]), .CK(ls_clk_pipA), .D(er_styA[12]), .SI(QPA_int[11]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_11 (.Q(QPA_int[11]), .CK(ls_clk_pipA), .D(er_styA[11]), .SI(QPA_int[10]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_10 (.Q(QPA_int[10]), .CK(ls_clk_pipA), .D(er_styA[10]), .SI(QPA_int[9]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_9 (.Q(QPA_int[9]), .CK(ls_clk_pipA), .D(er_styA[9]), .SI(QPA_int[8]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_8 (.Q(QPA_int[8]), .CK(ls_clk_pipA), .D(er_styA[8]), .SI(QPA_int[7]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_7 (.Q(QPA_int[7]), .CK(ls_clk_pipA), .D(er_styA[7]), .SI(QPA_int[6]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_6 (.Q(QPA_int[6]), .CK(ls_clk_pipA), .D(er_styA[6]), .SI(QPA_int[5]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_5 (.Q(QPA_int[5]), .CK(ls_clk_pipA), .D(er_styA[5]), .SI(QPA_int[4]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_4 (.Q(QPA_int[4]), .CK(ls_clk_pipA), .D(er_styA[4]), .SI(QPA_int[3]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_3 (.Q(QPA_int[3]), .CK(ls_clk_pipA), .D(er_styA[3]), .SI(QPA_int[2]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_2 (.Q(QPA_int[2]), .CK(ls_clk_pipA), .D(er_styA[2]), .SI(QPA_int[1]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_1 (.Q(QPA_int[1]), .CK(ls_clk_pipA), .D(er_styA[1]), .SI(QPA_int[0]), .SE(SE_QA_buf), .RD(flag_qA));
VIRL_SDN_MSDPRB_1 ff_QPA_int_0 (.Q(QPA_int[0]), .CK(ls_clk_pipA), .D(er_styA[0]), .SI(SI_QA_buf), .SE(SE_QA_buf), .RD(flag_si_qA));
wire [159:0] flag_dA_bit;
assign flag_dA_bit = flag_dA_viol & {{159{flag_dA}},{flag_si_dA}};

VIRL_SDN_BUF_1 buf_SO_DA_out (.X(SO_DA_buf), .A(DA_int[159]));
VIRL_SDN_MSDPRB_1 ff_DA_int_159 (.Q(DA_int[159]), .CK(ls_clk_memA), .D(dtA[159]), .SI(DA_int[158]), .SE(SE_INA_buf), .RD(flag_dA_bit[159]));
VIRL_SDN_MSDPRB_1 ff_DA_int_158 (.Q(DA_int[158]), .CK(ls_clk_memA), .D(dtA[158]), .SI(DA_int[157]), .SE(SE_INA_buf), .RD(flag_dA_bit[158]));
VIRL_SDN_MSDPRB_1 ff_DA_int_157 (.Q(DA_int[157]), .CK(ls_clk_memA), .D(dtA[157]), .SI(DA_int[156]), .SE(SE_INA_buf), .RD(flag_dA_bit[157]));
VIRL_SDN_MSDPRB_1 ff_DA_int_156 (.Q(DA_int[156]), .CK(ls_clk_memA), .D(dtA[156]), .SI(DA_int[155]), .SE(SE_INA_buf), .RD(flag_dA_bit[156]));
VIRL_SDN_MSDPRB_1 ff_DA_int_155 (.Q(DA_int[155]), .CK(ls_clk_memA), .D(dtA[155]), .SI(DA_int[154]), .SE(SE_INA_buf), .RD(flag_dA_bit[155]));
VIRL_SDN_MSDPRB_1 ff_DA_int_154 (.Q(DA_int[154]), .CK(ls_clk_memA), .D(dtA[154]), .SI(DA_int[153]), .SE(SE_INA_buf), .RD(flag_dA_bit[154]));
VIRL_SDN_MSDPRB_1 ff_DA_int_153 (.Q(DA_int[153]), .CK(ls_clk_memA), .D(dtA[153]), .SI(DA_int[152]), .SE(SE_INA_buf), .RD(flag_dA_bit[153]));
VIRL_SDN_MSDPRB_1 ff_DA_int_152 (.Q(DA_int[152]), .CK(ls_clk_memA), .D(dtA[152]), .SI(DA_int[151]), .SE(SE_INA_buf), .RD(flag_dA_bit[152]));
VIRL_SDN_MSDPRB_1 ff_DA_int_151 (.Q(DA_int[151]), .CK(ls_clk_memA), .D(dtA[151]), .SI(DA_int[150]), .SE(SE_INA_buf), .RD(flag_dA_bit[151]));
VIRL_SDN_MSDPRB_1 ff_DA_int_150 (.Q(DA_int[150]), .CK(ls_clk_memA), .D(dtA[150]), .SI(DA_int[149]), .SE(SE_INA_buf), .RD(flag_dA_bit[150]));
VIRL_SDN_MSDPRB_1 ff_DA_int_149 (.Q(DA_int[149]), .CK(ls_clk_memA), .D(dtA[149]), .SI(DA_int[148]), .SE(SE_INA_buf), .RD(flag_dA_bit[149]));
VIRL_SDN_MSDPRB_1 ff_DA_int_148 (.Q(DA_int[148]), .CK(ls_clk_memA), .D(dtA[148]), .SI(DA_int[147]), .SE(SE_INA_buf), .RD(flag_dA_bit[148]));
VIRL_SDN_MSDPRB_1 ff_DA_int_147 (.Q(DA_int[147]), .CK(ls_clk_memA), .D(dtA[147]), .SI(DA_int[146]), .SE(SE_INA_buf), .RD(flag_dA_bit[147]));
VIRL_SDN_MSDPRB_1 ff_DA_int_146 (.Q(DA_int[146]), .CK(ls_clk_memA), .D(dtA[146]), .SI(DA_int[145]), .SE(SE_INA_buf), .RD(flag_dA_bit[146]));
VIRL_SDN_MSDPRB_1 ff_DA_int_145 (.Q(DA_int[145]), .CK(ls_clk_memA), .D(dtA[145]), .SI(DA_int[144]), .SE(SE_INA_buf), .RD(flag_dA_bit[145]));
VIRL_SDN_MSDPRB_1 ff_DA_int_144 (.Q(DA_int[144]), .CK(ls_clk_memA), .D(dtA[144]), .SI(DA_int[143]), .SE(SE_INA_buf), .RD(flag_dA_bit[144]));
VIRL_SDN_MSDPRB_1 ff_DA_int_143 (.Q(DA_int[143]), .CK(ls_clk_memA), .D(dtA[143]), .SI(DA_int[142]), .SE(SE_INA_buf), .RD(flag_dA_bit[143]));
VIRL_SDN_MSDPRB_1 ff_DA_int_142 (.Q(DA_int[142]), .CK(ls_clk_memA), .D(dtA[142]), .SI(DA_int[141]), .SE(SE_INA_buf), .RD(flag_dA_bit[142]));
VIRL_SDN_MSDPRB_1 ff_DA_int_141 (.Q(DA_int[141]), .CK(ls_clk_memA), .D(dtA[141]), .SI(DA_int[140]), .SE(SE_INA_buf), .RD(flag_dA_bit[141]));
VIRL_SDN_MSDPRB_1 ff_DA_int_140 (.Q(DA_int[140]), .CK(ls_clk_memA), .D(dtA[140]), .SI(DA_int[139]), .SE(SE_INA_buf), .RD(flag_dA_bit[140]));
VIRL_SDN_MSDPRB_1 ff_DA_int_139 (.Q(DA_int[139]), .CK(ls_clk_memA), .D(dtA[139]), .SI(DA_int[138]), .SE(SE_INA_buf), .RD(flag_dA_bit[139]));
VIRL_SDN_MSDPRB_1 ff_DA_int_138 (.Q(DA_int[138]), .CK(ls_clk_memA), .D(dtA[138]), .SI(DA_int[137]), .SE(SE_INA_buf), .RD(flag_dA_bit[138]));
VIRL_SDN_MSDPRB_1 ff_DA_int_137 (.Q(DA_int[137]), .CK(ls_clk_memA), .D(dtA[137]), .SI(DA_int[136]), .SE(SE_INA_buf), .RD(flag_dA_bit[137]));
VIRL_SDN_MSDPRB_1 ff_DA_int_136 (.Q(DA_int[136]), .CK(ls_clk_memA), .D(dtA[136]), .SI(DA_int[135]), .SE(SE_INA_buf), .RD(flag_dA_bit[136]));
VIRL_SDN_MSDPRB_1 ff_DA_int_135 (.Q(DA_int[135]), .CK(ls_clk_memA), .D(dtA[135]), .SI(DA_int[134]), .SE(SE_INA_buf), .RD(flag_dA_bit[135]));
VIRL_SDN_MSDPRB_1 ff_DA_int_134 (.Q(DA_int[134]), .CK(ls_clk_memA), .D(dtA[134]), .SI(DA_int[133]), .SE(SE_INA_buf), .RD(flag_dA_bit[134]));
VIRL_SDN_MSDPRB_1 ff_DA_int_133 (.Q(DA_int[133]), .CK(ls_clk_memA), .D(dtA[133]), .SI(DA_int[132]), .SE(SE_INA_buf), .RD(flag_dA_bit[133]));
VIRL_SDN_MSDPRB_1 ff_DA_int_132 (.Q(DA_int[132]), .CK(ls_clk_memA), .D(dtA[132]), .SI(DA_int[131]), .SE(SE_INA_buf), .RD(flag_dA_bit[132]));
VIRL_SDN_MSDPRB_1 ff_DA_int_131 (.Q(DA_int[131]), .CK(ls_clk_memA), .D(dtA[131]), .SI(DA_int[130]), .SE(SE_INA_buf), .RD(flag_dA_bit[131]));
VIRL_SDN_MSDPRB_1 ff_DA_int_130 (.Q(DA_int[130]), .CK(ls_clk_memA), .D(dtA[130]), .SI(DA_int[129]), .SE(SE_INA_buf), .RD(flag_dA_bit[130]));
VIRL_SDN_MSDPRB_1 ff_DA_int_129 (.Q(DA_int[129]), .CK(ls_clk_memA), .D(dtA[129]), .SI(DA_int[128]), .SE(SE_INA_buf), .RD(flag_dA_bit[129]));
VIRL_SDN_MSDPRB_1 ff_DA_int_128 (.Q(DA_int[128]), .CK(ls_clk_memA), .D(dtA[128]), .SI(DA_int[127]), .SE(SE_INA_buf), .RD(flag_dA_bit[128]));
VIRL_SDN_MSDPRB_1 ff_DA_int_127 (.Q(DA_int[127]), .CK(ls_clk_memA), .D(dtA[127]), .SI(DA_int[126]), .SE(SE_INA_buf), .RD(flag_dA_bit[127]));
VIRL_SDN_MSDPRB_1 ff_DA_int_126 (.Q(DA_int[126]), .CK(ls_clk_memA), .D(dtA[126]), .SI(DA_int[125]), .SE(SE_INA_buf), .RD(flag_dA_bit[126]));
VIRL_SDN_MSDPRB_1 ff_DA_int_125 (.Q(DA_int[125]), .CK(ls_clk_memA), .D(dtA[125]), .SI(DA_int[124]), .SE(SE_INA_buf), .RD(flag_dA_bit[125]));
VIRL_SDN_MSDPRB_1 ff_DA_int_124 (.Q(DA_int[124]), .CK(ls_clk_memA), .D(dtA[124]), .SI(DA_int[123]), .SE(SE_INA_buf), .RD(flag_dA_bit[124]));
VIRL_SDN_MSDPRB_1 ff_DA_int_123 (.Q(DA_int[123]), .CK(ls_clk_memA), .D(dtA[123]), .SI(DA_int[122]), .SE(SE_INA_buf), .RD(flag_dA_bit[123]));
VIRL_SDN_MSDPRB_1 ff_DA_int_122 (.Q(DA_int[122]), .CK(ls_clk_memA), .D(dtA[122]), .SI(DA_int[121]), .SE(SE_INA_buf), .RD(flag_dA_bit[122]));
VIRL_SDN_MSDPRB_1 ff_DA_int_121 (.Q(DA_int[121]), .CK(ls_clk_memA), .D(dtA[121]), .SI(DA_int[120]), .SE(SE_INA_buf), .RD(flag_dA_bit[121]));
VIRL_SDN_MSDPRB_1 ff_DA_int_120 (.Q(DA_int[120]), .CK(ls_clk_memA), .D(dtA[120]), .SI(DA_int[119]), .SE(SE_INA_buf), .RD(flag_dA_bit[120]));
VIRL_SDN_MSDPRB_1 ff_DA_int_119 (.Q(DA_int[119]), .CK(ls_clk_memA), .D(dtA[119]), .SI(DA_int[118]), .SE(SE_INA_buf), .RD(flag_dA_bit[119]));
VIRL_SDN_MSDPRB_1 ff_DA_int_118 (.Q(DA_int[118]), .CK(ls_clk_memA), .D(dtA[118]), .SI(DA_int[117]), .SE(SE_INA_buf), .RD(flag_dA_bit[118]));
VIRL_SDN_MSDPRB_1 ff_DA_int_117 (.Q(DA_int[117]), .CK(ls_clk_memA), .D(dtA[117]), .SI(DA_int[116]), .SE(SE_INA_buf), .RD(flag_dA_bit[117]));
VIRL_SDN_MSDPRB_1 ff_DA_int_116 (.Q(DA_int[116]), .CK(ls_clk_memA), .D(dtA[116]), .SI(DA_int[115]), .SE(SE_INA_buf), .RD(flag_dA_bit[116]));
VIRL_SDN_MSDPRB_1 ff_DA_int_115 (.Q(DA_int[115]), .CK(ls_clk_memA), .D(dtA[115]), .SI(DA_int[114]), .SE(SE_INA_buf), .RD(flag_dA_bit[115]));
VIRL_SDN_MSDPRB_1 ff_DA_int_114 (.Q(DA_int[114]), .CK(ls_clk_memA), .D(dtA[114]), .SI(DA_int[113]), .SE(SE_INA_buf), .RD(flag_dA_bit[114]));
VIRL_SDN_MSDPRB_1 ff_DA_int_113 (.Q(DA_int[113]), .CK(ls_clk_memA), .D(dtA[113]), .SI(DA_int[112]), .SE(SE_INA_buf), .RD(flag_dA_bit[113]));
VIRL_SDN_MSDPRB_1 ff_DA_int_112 (.Q(DA_int[112]), .CK(ls_clk_memA), .D(dtA[112]), .SI(DA_int[111]), .SE(SE_INA_buf), .RD(flag_dA_bit[112]));
VIRL_SDN_MSDPRB_1 ff_DA_int_111 (.Q(DA_int[111]), .CK(ls_clk_memA), .D(dtA[111]), .SI(DA_int[110]), .SE(SE_INA_buf), .RD(flag_dA_bit[111]));
VIRL_SDN_MSDPRB_1 ff_DA_int_110 (.Q(DA_int[110]), .CK(ls_clk_memA), .D(dtA[110]), .SI(DA_int[109]), .SE(SE_INA_buf), .RD(flag_dA_bit[110]));
VIRL_SDN_MSDPRB_1 ff_DA_int_109 (.Q(DA_int[109]), .CK(ls_clk_memA), .D(dtA[109]), .SI(DA_int[108]), .SE(SE_INA_buf), .RD(flag_dA_bit[109]));
VIRL_SDN_MSDPRB_1 ff_DA_int_108 (.Q(DA_int[108]), .CK(ls_clk_memA), .D(dtA[108]), .SI(DA_int[107]), .SE(SE_INA_buf), .RD(flag_dA_bit[108]));
VIRL_SDN_MSDPRB_1 ff_DA_int_107 (.Q(DA_int[107]), .CK(ls_clk_memA), .D(dtA[107]), .SI(DA_int[106]), .SE(SE_INA_buf), .RD(flag_dA_bit[107]));
VIRL_SDN_MSDPRB_1 ff_DA_int_106 (.Q(DA_int[106]), .CK(ls_clk_memA), .D(dtA[106]), .SI(DA_int[105]), .SE(SE_INA_buf), .RD(flag_dA_bit[106]));
VIRL_SDN_MSDPRB_1 ff_DA_int_105 (.Q(DA_int[105]), .CK(ls_clk_memA), .D(dtA[105]), .SI(DA_int[104]), .SE(SE_INA_buf), .RD(flag_dA_bit[105]));
VIRL_SDN_MSDPRB_1 ff_DA_int_104 (.Q(DA_int[104]), .CK(ls_clk_memA), .D(dtA[104]), .SI(DA_int[103]), .SE(SE_INA_buf), .RD(flag_dA_bit[104]));
VIRL_SDN_MSDPRB_1 ff_DA_int_103 (.Q(DA_int[103]), .CK(ls_clk_memA), .D(dtA[103]), .SI(DA_int[102]), .SE(SE_INA_buf), .RD(flag_dA_bit[103]));
VIRL_SDN_MSDPRB_1 ff_DA_int_102 (.Q(DA_int[102]), .CK(ls_clk_memA), .D(dtA[102]), .SI(DA_int[101]), .SE(SE_INA_buf), .RD(flag_dA_bit[102]));
VIRL_SDN_MSDPRB_1 ff_DA_int_101 (.Q(DA_int[101]), .CK(ls_clk_memA), .D(dtA[101]), .SI(DA_int[100]), .SE(SE_INA_buf), .RD(flag_dA_bit[101]));
VIRL_SDN_MSDPRB_1 ff_DA_int_100 (.Q(DA_int[100]), .CK(ls_clk_memA), .D(dtA[100]), .SI(DA_int[99]), .SE(SE_INA_buf), .RD(flag_dA_bit[100]));
VIRL_SDN_MSDPRB_1 ff_DA_int_99 (.Q(DA_int[99]), .CK(ls_clk_memA), .D(dtA[99]), .SI(DA_int[98]), .SE(SE_INA_buf), .RD(flag_dA_bit[99]));
VIRL_SDN_MSDPRB_1 ff_DA_int_98 (.Q(DA_int[98]), .CK(ls_clk_memA), .D(dtA[98]), .SI(DA_int[97]), .SE(SE_INA_buf), .RD(flag_dA_bit[98]));
VIRL_SDN_MSDPRB_1 ff_DA_int_97 (.Q(DA_int[97]), .CK(ls_clk_memA), .D(dtA[97]), .SI(DA_int[96]), .SE(SE_INA_buf), .RD(flag_dA_bit[97]));
VIRL_SDN_MSDPRB_1 ff_DA_int_96 (.Q(DA_int[96]), .CK(ls_clk_memA), .D(dtA[96]), .SI(DA_int[95]), .SE(SE_INA_buf), .RD(flag_dA_bit[96]));
VIRL_SDN_MSDPRB_1 ff_DA_int_95 (.Q(DA_int[95]), .CK(ls_clk_memA), .D(dtA[95]), .SI(DA_int[94]), .SE(SE_INA_buf), .RD(flag_dA_bit[95]));
VIRL_SDN_MSDPRB_1 ff_DA_int_94 (.Q(DA_int[94]), .CK(ls_clk_memA), .D(dtA[94]), .SI(DA_int[93]), .SE(SE_INA_buf), .RD(flag_dA_bit[94]));
VIRL_SDN_MSDPRB_1 ff_DA_int_93 (.Q(DA_int[93]), .CK(ls_clk_memA), .D(dtA[93]), .SI(DA_int[92]), .SE(SE_INA_buf), .RD(flag_dA_bit[93]));
VIRL_SDN_MSDPRB_1 ff_DA_int_92 (.Q(DA_int[92]), .CK(ls_clk_memA), .D(dtA[92]), .SI(DA_int[91]), .SE(SE_INA_buf), .RD(flag_dA_bit[92]));
VIRL_SDN_MSDPRB_1 ff_DA_int_91 (.Q(DA_int[91]), .CK(ls_clk_memA), .D(dtA[91]), .SI(DA_int[90]), .SE(SE_INA_buf), .RD(flag_dA_bit[91]));
VIRL_SDN_MSDPRB_1 ff_DA_int_90 (.Q(DA_int[90]), .CK(ls_clk_memA), .D(dtA[90]), .SI(DA_int[89]), .SE(SE_INA_buf), .RD(flag_dA_bit[90]));
VIRL_SDN_MSDPRB_1 ff_DA_int_89 (.Q(DA_int[89]), .CK(ls_clk_memA), .D(dtA[89]), .SI(DA_int[88]), .SE(SE_INA_buf), .RD(flag_dA_bit[89]));
VIRL_SDN_MSDPRB_1 ff_DA_int_88 (.Q(DA_int[88]), .CK(ls_clk_memA), .D(dtA[88]), .SI(DA_int[87]), .SE(SE_INA_buf), .RD(flag_dA_bit[88]));
VIRL_SDN_MSDPRB_1 ff_DA_int_87 (.Q(DA_int[87]), .CK(ls_clk_memA), .D(dtA[87]), .SI(DA_int[86]), .SE(SE_INA_buf), .RD(flag_dA_bit[87]));
VIRL_SDN_MSDPRB_1 ff_DA_int_86 (.Q(DA_int[86]), .CK(ls_clk_memA), .D(dtA[86]), .SI(DA_int[85]), .SE(SE_INA_buf), .RD(flag_dA_bit[86]));
VIRL_SDN_MSDPRB_1 ff_DA_int_85 (.Q(DA_int[85]), .CK(ls_clk_memA), .D(dtA[85]), .SI(DA_int[84]), .SE(SE_INA_buf), .RD(flag_dA_bit[85]));
VIRL_SDN_MSDPRB_1 ff_DA_int_84 (.Q(DA_int[84]), .CK(ls_clk_memA), .D(dtA[84]), .SI(DA_int[83]), .SE(SE_INA_buf), .RD(flag_dA_bit[84]));
VIRL_SDN_MSDPRB_1 ff_DA_int_83 (.Q(DA_int[83]), .CK(ls_clk_memA), .D(dtA[83]), .SI(DA_int[82]), .SE(SE_INA_buf), .RD(flag_dA_bit[83]));
VIRL_SDN_MSDPRB_1 ff_DA_int_82 (.Q(DA_int[82]), .CK(ls_clk_memA), .D(dtA[82]), .SI(DA_int[81]), .SE(SE_INA_buf), .RD(flag_dA_bit[82]));
VIRL_SDN_MSDPRB_1 ff_DA_int_81 (.Q(DA_int[81]), .CK(ls_clk_memA), .D(dtA[81]), .SI(DA_int[80]), .SE(SE_INA_buf), .RD(flag_dA_bit[81]));
VIRL_SDN_MSDPRB_1 ff_DA_int_80 (.Q(DA_int[80]), .CK(ls_clk_memA), .D(dtA[80]), .SI(DA_int[79]), .SE(SE_INA_buf), .RD(flag_dA_bit[80]));
VIRL_SDN_MSDPRB_1 ff_DA_int_79 (.Q(DA_int[79]), .CK(ls_clk_memA), .D(dtA[79]), .SI(DA_int[78]), .SE(SE_INA_buf), .RD(flag_dA_bit[79]));
VIRL_SDN_MSDPRB_1 ff_DA_int_78 (.Q(DA_int[78]), .CK(ls_clk_memA), .D(dtA[78]), .SI(DA_int[77]), .SE(SE_INA_buf), .RD(flag_dA_bit[78]));
VIRL_SDN_MSDPRB_1 ff_DA_int_77 (.Q(DA_int[77]), .CK(ls_clk_memA), .D(dtA[77]), .SI(DA_int[76]), .SE(SE_INA_buf), .RD(flag_dA_bit[77]));
VIRL_SDN_MSDPRB_1 ff_DA_int_76 (.Q(DA_int[76]), .CK(ls_clk_memA), .D(dtA[76]), .SI(DA_int[75]), .SE(SE_INA_buf), .RD(flag_dA_bit[76]));
VIRL_SDN_MSDPRB_1 ff_DA_int_75 (.Q(DA_int[75]), .CK(ls_clk_memA), .D(dtA[75]), .SI(DA_int[74]), .SE(SE_INA_buf), .RD(flag_dA_bit[75]));
VIRL_SDN_MSDPRB_1 ff_DA_int_74 (.Q(DA_int[74]), .CK(ls_clk_memA), .D(dtA[74]), .SI(DA_int[73]), .SE(SE_INA_buf), .RD(flag_dA_bit[74]));
VIRL_SDN_MSDPRB_1 ff_DA_int_73 (.Q(DA_int[73]), .CK(ls_clk_memA), .D(dtA[73]), .SI(DA_int[72]), .SE(SE_INA_buf), .RD(flag_dA_bit[73]));
VIRL_SDN_MSDPRB_1 ff_DA_int_72 (.Q(DA_int[72]), .CK(ls_clk_memA), .D(dtA[72]), .SI(DA_int[71]), .SE(SE_INA_buf), .RD(flag_dA_bit[72]));
VIRL_SDN_MSDPRB_1 ff_DA_int_71 (.Q(DA_int[71]), .CK(ls_clk_memA), .D(dtA[71]), .SI(DA_int[70]), .SE(SE_INA_buf), .RD(flag_dA_bit[71]));
VIRL_SDN_MSDPRB_1 ff_DA_int_70 (.Q(DA_int[70]), .CK(ls_clk_memA), .D(dtA[70]), .SI(DA_int[69]), .SE(SE_INA_buf), .RD(flag_dA_bit[70]));
VIRL_SDN_MSDPRB_1 ff_DA_int_69 (.Q(DA_int[69]), .CK(ls_clk_memA), .D(dtA[69]), .SI(DA_int[68]), .SE(SE_INA_buf), .RD(flag_dA_bit[69]));
VIRL_SDN_MSDPRB_1 ff_DA_int_68 (.Q(DA_int[68]), .CK(ls_clk_memA), .D(dtA[68]), .SI(DA_int[67]), .SE(SE_INA_buf), .RD(flag_dA_bit[68]));
VIRL_SDN_MSDPRB_1 ff_DA_int_67 (.Q(DA_int[67]), .CK(ls_clk_memA), .D(dtA[67]), .SI(DA_int[66]), .SE(SE_INA_buf), .RD(flag_dA_bit[67]));
VIRL_SDN_MSDPRB_1 ff_DA_int_66 (.Q(DA_int[66]), .CK(ls_clk_memA), .D(dtA[66]), .SI(DA_int[65]), .SE(SE_INA_buf), .RD(flag_dA_bit[66]));
VIRL_SDN_MSDPRB_1 ff_DA_int_65 (.Q(DA_int[65]), .CK(ls_clk_memA), .D(dtA[65]), .SI(DA_int[64]), .SE(SE_INA_buf), .RD(flag_dA_bit[65]));
VIRL_SDN_MSDPRB_1 ff_DA_int_64 (.Q(DA_int[64]), .CK(ls_clk_memA), .D(dtA[64]), .SI(DA_int[63]), .SE(SE_INA_buf), .RD(flag_dA_bit[64]));
VIRL_SDN_MSDPRB_1 ff_DA_int_63 (.Q(DA_int[63]), .CK(ls_clk_memA), .D(dtA[63]), .SI(DA_int[62]), .SE(SE_INA_buf), .RD(flag_dA_bit[63]));
VIRL_SDN_MSDPRB_1 ff_DA_int_62 (.Q(DA_int[62]), .CK(ls_clk_memA), .D(dtA[62]), .SI(DA_int[61]), .SE(SE_INA_buf), .RD(flag_dA_bit[62]));
VIRL_SDN_MSDPRB_1 ff_DA_int_61 (.Q(DA_int[61]), .CK(ls_clk_memA), .D(dtA[61]), .SI(DA_int[60]), .SE(SE_INA_buf), .RD(flag_dA_bit[61]));
VIRL_SDN_MSDPRB_1 ff_DA_int_60 (.Q(DA_int[60]), .CK(ls_clk_memA), .D(dtA[60]), .SI(DA_int[59]), .SE(SE_INA_buf), .RD(flag_dA_bit[60]));
VIRL_SDN_MSDPRB_1 ff_DA_int_59 (.Q(DA_int[59]), .CK(ls_clk_memA), .D(dtA[59]), .SI(DA_int[58]), .SE(SE_INA_buf), .RD(flag_dA_bit[59]));
VIRL_SDN_MSDPRB_1 ff_DA_int_58 (.Q(DA_int[58]), .CK(ls_clk_memA), .D(dtA[58]), .SI(DA_int[57]), .SE(SE_INA_buf), .RD(flag_dA_bit[58]));
VIRL_SDN_MSDPRB_1 ff_DA_int_57 (.Q(DA_int[57]), .CK(ls_clk_memA), .D(dtA[57]), .SI(DA_int[56]), .SE(SE_INA_buf), .RD(flag_dA_bit[57]));
VIRL_SDN_MSDPRB_1 ff_DA_int_56 (.Q(DA_int[56]), .CK(ls_clk_memA), .D(dtA[56]), .SI(DA_int[55]), .SE(SE_INA_buf), .RD(flag_dA_bit[56]));
VIRL_SDN_MSDPRB_1 ff_DA_int_55 (.Q(DA_int[55]), .CK(ls_clk_memA), .D(dtA[55]), .SI(DA_int[54]), .SE(SE_INA_buf), .RD(flag_dA_bit[55]));
VIRL_SDN_MSDPRB_1 ff_DA_int_54 (.Q(DA_int[54]), .CK(ls_clk_memA), .D(dtA[54]), .SI(DA_int[53]), .SE(SE_INA_buf), .RD(flag_dA_bit[54]));
VIRL_SDN_MSDPRB_1 ff_DA_int_53 (.Q(DA_int[53]), .CK(ls_clk_memA), .D(dtA[53]), .SI(DA_int[52]), .SE(SE_INA_buf), .RD(flag_dA_bit[53]));
VIRL_SDN_MSDPRB_1 ff_DA_int_52 (.Q(DA_int[52]), .CK(ls_clk_memA), .D(dtA[52]), .SI(DA_int[51]), .SE(SE_INA_buf), .RD(flag_dA_bit[52]));
VIRL_SDN_MSDPRB_1 ff_DA_int_51 (.Q(DA_int[51]), .CK(ls_clk_memA), .D(dtA[51]), .SI(DA_int[50]), .SE(SE_INA_buf), .RD(flag_dA_bit[51]));
VIRL_SDN_MSDPRB_1 ff_DA_int_50 (.Q(DA_int[50]), .CK(ls_clk_memA), .D(dtA[50]), .SI(DA_int[49]), .SE(SE_INA_buf), .RD(flag_dA_bit[50]));
VIRL_SDN_MSDPRB_1 ff_DA_int_49 (.Q(DA_int[49]), .CK(ls_clk_memA), .D(dtA[49]), .SI(DA_int[48]), .SE(SE_INA_buf), .RD(flag_dA_bit[49]));
VIRL_SDN_MSDPRB_1 ff_DA_int_48 (.Q(DA_int[48]), .CK(ls_clk_memA), .D(dtA[48]), .SI(DA_int[47]), .SE(SE_INA_buf), .RD(flag_dA_bit[48]));
VIRL_SDN_MSDPRB_1 ff_DA_int_47 (.Q(DA_int[47]), .CK(ls_clk_memA), .D(dtA[47]), .SI(DA_int[46]), .SE(SE_INA_buf), .RD(flag_dA_bit[47]));
VIRL_SDN_MSDPRB_1 ff_DA_int_46 (.Q(DA_int[46]), .CK(ls_clk_memA), .D(dtA[46]), .SI(DA_int[45]), .SE(SE_INA_buf), .RD(flag_dA_bit[46]));
VIRL_SDN_MSDPRB_1 ff_DA_int_45 (.Q(DA_int[45]), .CK(ls_clk_memA), .D(dtA[45]), .SI(DA_int[44]), .SE(SE_INA_buf), .RD(flag_dA_bit[45]));
VIRL_SDN_MSDPRB_1 ff_DA_int_44 (.Q(DA_int[44]), .CK(ls_clk_memA), .D(dtA[44]), .SI(DA_int[43]), .SE(SE_INA_buf), .RD(flag_dA_bit[44]));
VIRL_SDN_MSDPRB_1 ff_DA_int_43 (.Q(DA_int[43]), .CK(ls_clk_memA), .D(dtA[43]), .SI(DA_int[42]), .SE(SE_INA_buf), .RD(flag_dA_bit[43]));
VIRL_SDN_MSDPRB_1 ff_DA_int_42 (.Q(DA_int[42]), .CK(ls_clk_memA), .D(dtA[42]), .SI(DA_int[41]), .SE(SE_INA_buf), .RD(flag_dA_bit[42]));
VIRL_SDN_MSDPRB_1 ff_DA_int_41 (.Q(DA_int[41]), .CK(ls_clk_memA), .D(dtA[41]), .SI(DA_int[40]), .SE(SE_INA_buf), .RD(flag_dA_bit[41]));
VIRL_SDN_MSDPRB_1 ff_DA_int_40 (.Q(DA_int[40]), .CK(ls_clk_memA), .D(dtA[40]), .SI(DA_int[39]), .SE(SE_INA_buf), .RD(flag_dA_bit[40]));
VIRL_SDN_MSDPRB_1 ff_DA_int_39 (.Q(DA_int[39]), .CK(ls_clk_memA), .D(dtA[39]), .SI(DA_int[38]), .SE(SE_INA_buf), .RD(flag_dA_bit[39]));
VIRL_SDN_MSDPRB_1 ff_DA_int_38 (.Q(DA_int[38]), .CK(ls_clk_memA), .D(dtA[38]), .SI(DA_int[37]), .SE(SE_INA_buf), .RD(flag_dA_bit[38]));
VIRL_SDN_MSDPRB_1 ff_DA_int_37 (.Q(DA_int[37]), .CK(ls_clk_memA), .D(dtA[37]), .SI(DA_int[36]), .SE(SE_INA_buf), .RD(flag_dA_bit[37]));
VIRL_SDN_MSDPRB_1 ff_DA_int_36 (.Q(DA_int[36]), .CK(ls_clk_memA), .D(dtA[36]), .SI(DA_int[35]), .SE(SE_INA_buf), .RD(flag_dA_bit[36]));
VIRL_SDN_MSDPRB_1 ff_DA_int_35 (.Q(DA_int[35]), .CK(ls_clk_memA), .D(dtA[35]), .SI(DA_int[34]), .SE(SE_INA_buf), .RD(flag_dA_bit[35]));
VIRL_SDN_MSDPRB_1 ff_DA_int_34 (.Q(DA_int[34]), .CK(ls_clk_memA), .D(dtA[34]), .SI(DA_int[33]), .SE(SE_INA_buf), .RD(flag_dA_bit[34]));
VIRL_SDN_MSDPRB_1 ff_DA_int_33 (.Q(DA_int[33]), .CK(ls_clk_memA), .D(dtA[33]), .SI(DA_int[32]), .SE(SE_INA_buf), .RD(flag_dA_bit[33]));
VIRL_SDN_MSDPRB_1 ff_DA_int_32 (.Q(DA_int[32]), .CK(ls_clk_memA), .D(dtA[32]), .SI(DA_int[31]), .SE(SE_INA_buf), .RD(flag_dA_bit[32]));
VIRL_SDN_MSDPRB_1 ff_DA_int_31 (.Q(DA_int[31]), .CK(ls_clk_memA), .D(dtA[31]), .SI(DA_int[30]), .SE(SE_INA_buf), .RD(flag_dA_bit[31]));
VIRL_SDN_MSDPRB_1 ff_DA_int_30 (.Q(DA_int[30]), .CK(ls_clk_memA), .D(dtA[30]), .SI(DA_int[29]), .SE(SE_INA_buf), .RD(flag_dA_bit[30]));
VIRL_SDN_MSDPRB_1 ff_DA_int_29 (.Q(DA_int[29]), .CK(ls_clk_memA), .D(dtA[29]), .SI(DA_int[28]), .SE(SE_INA_buf), .RD(flag_dA_bit[29]));
VIRL_SDN_MSDPRB_1 ff_DA_int_28 (.Q(DA_int[28]), .CK(ls_clk_memA), .D(dtA[28]), .SI(DA_int[27]), .SE(SE_INA_buf), .RD(flag_dA_bit[28]));
VIRL_SDN_MSDPRB_1 ff_DA_int_27 (.Q(DA_int[27]), .CK(ls_clk_memA), .D(dtA[27]), .SI(DA_int[26]), .SE(SE_INA_buf), .RD(flag_dA_bit[27]));
VIRL_SDN_MSDPRB_1 ff_DA_int_26 (.Q(DA_int[26]), .CK(ls_clk_memA), .D(dtA[26]), .SI(DA_int[25]), .SE(SE_INA_buf), .RD(flag_dA_bit[26]));
VIRL_SDN_MSDPRB_1 ff_DA_int_25 (.Q(DA_int[25]), .CK(ls_clk_memA), .D(dtA[25]), .SI(DA_int[24]), .SE(SE_INA_buf), .RD(flag_dA_bit[25]));
VIRL_SDN_MSDPRB_1 ff_DA_int_24 (.Q(DA_int[24]), .CK(ls_clk_memA), .D(dtA[24]), .SI(DA_int[23]), .SE(SE_INA_buf), .RD(flag_dA_bit[24]));
VIRL_SDN_MSDPRB_1 ff_DA_int_23 (.Q(DA_int[23]), .CK(ls_clk_memA), .D(dtA[23]), .SI(DA_int[22]), .SE(SE_INA_buf), .RD(flag_dA_bit[23]));
VIRL_SDN_MSDPRB_1 ff_DA_int_22 (.Q(DA_int[22]), .CK(ls_clk_memA), .D(dtA[22]), .SI(DA_int[21]), .SE(SE_INA_buf), .RD(flag_dA_bit[22]));
VIRL_SDN_MSDPRB_1 ff_DA_int_21 (.Q(DA_int[21]), .CK(ls_clk_memA), .D(dtA[21]), .SI(DA_int[20]), .SE(SE_INA_buf), .RD(flag_dA_bit[21]));
VIRL_SDN_MSDPRB_1 ff_DA_int_20 (.Q(DA_int[20]), .CK(ls_clk_memA), .D(dtA[20]), .SI(DA_int[19]), .SE(SE_INA_buf), .RD(flag_dA_bit[20]));
VIRL_SDN_MSDPRB_1 ff_DA_int_19 (.Q(DA_int[19]), .CK(ls_clk_memA), .D(dtA[19]), .SI(DA_int[18]), .SE(SE_INA_buf), .RD(flag_dA_bit[19]));
VIRL_SDN_MSDPRB_1 ff_DA_int_18 (.Q(DA_int[18]), .CK(ls_clk_memA), .D(dtA[18]), .SI(DA_int[17]), .SE(SE_INA_buf), .RD(flag_dA_bit[18]));
VIRL_SDN_MSDPRB_1 ff_DA_int_17 (.Q(DA_int[17]), .CK(ls_clk_memA), .D(dtA[17]), .SI(DA_int[16]), .SE(SE_INA_buf), .RD(flag_dA_bit[17]));
VIRL_SDN_MSDPRB_1 ff_DA_int_16 (.Q(DA_int[16]), .CK(ls_clk_memA), .D(dtA[16]), .SI(DA_int[15]), .SE(SE_INA_buf), .RD(flag_dA_bit[16]));
VIRL_SDN_MSDPRB_1 ff_DA_int_15 (.Q(DA_int[15]), .CK(ls_clk_memA), .D(dtA[15]), .SI(DA_int[14]), .SE(SE_INA_buf), .RD(flag_dA_bit[15]));
VIRL_SDN_MSDPRB_1 ff_DA_int_14 (.Q(DA_int[14]), .CK(ls_clk_memA), .D(dtA[14]), .SI(DA_int[13]), .SE(SE_INA_buf), .RD(flag_dA_bit[14]));
VIRL_SDN_MSDPRB_1 ff_DA_int_13 (.Q(DA_int[13]), .CK(ls_clk_memA), .D(dtA[13]), .SI(DA_int[12]), .SE(SE_INA_buf), .RD(flag_dA_bit[13]));
VIRL_SDN_MSDPRB_1 ff_DA_int_12 (.Q(DA_int[12]), .CK(ls_clk_memA), .D(dtA[12]), .SI(DA_int[11]), .SE(SE_INA_buf), .RD(flag_dA_bit[12]));
VIRL_SDN_MSDPRB_1 ff_DA_int_11 (.Q(DA_int[11]), .CK(ls_clk_memA), .D(dtA[11]), .SI(DA_int[10]), .SE(SE_INA_buf), .RD(flag_dA_bit[11]));
VIRL_SDN_MSDPRB_1 ff_DA_int_10 (.Q(DA_int[10]), .CK(ls_clk_memA), .D(dtA[10]), .SI(DA_int[9]), .SE(SE_INA_buf), .RD(flag_dA_bit[10]));
VIRL_SDN_MSDPRB_1 ff_DA_int_9 (.Q(DA_int[9]), .CK(ls_clk_memA), .D(dtA[9]), .SI(DA_int[8]), .SE(SE_INA_buf), .RD(flag_dA_bit[9]));
VIRL_SDN_MSDPRB_1 ff_DA_int_8 (.Q(DA_int[8]), .CK(ls_clk_memA), .D(dtA[8]), .SI(DA_int[7]), .SE(SE_INA_buf), .RD(flag_dA_bit[8]));
VIRL_SDN_MSDPRB_1 ff_DA_int_7 (.Q(DA_int[7]), .CK(ls_clk_memA), .D(dtA[7]), .SI(DA_int[6]), .SE(SE_INA_buf), .RD(flag_dA_bit[7]));
VIRL_SDN_MSDPRB_1 ff_DA_int_6 (.Q(DA_int[6]), .CK(ls_clk_memA), .D(dtA[6]), .SI(DA_int[5]), .SE(SE_INA_buf), .RD(flag_dA_bit[6]));
VIRL_SDN_MSDPRB_1 ff_DA_int_5 (.Q(DA_int[5]), .CK(ls_clk_memA), .D(dtA[5]), .SI(DA_int[4]), .SE(SE_INA_buf), .RD(flag_dA_bit[5]));
VIRL_SDN_MSDPRB_1 ff_DA_int_4 (.Q(DA_int[4]), .CK(ls_clk_memA), .D(dtA[4]), .SI(DA_int[3]), .SE(SE_INA_buf), .RD(flag_dA_bit[4]));
VIRL_SDN_MSDPRB_1 ff_DA_int_3 (.Q(DA_int[3]), .CK(ls_clk_memA), .D(dtA[3]), .SI(DA_int[2]), .SE(SE_INA_buf), .RD(flag_dA_bit[3]));
VIRL_SDN_MSDPRB_1 ff_DA_int_2 (.Q(DA_int[2]), .CK(ls_clk_memA), .D(dtA[2]), .SI(DA_int[1]), .SE(SE_INA_buf), .RD(flag_dA_bit[2]));
VIRL_SDN_MSDPRB_1 ff_DA_int_1 (.Q(DA_int[1]), .CK(ls_clk_memA), .D(dtA[1]), .SI(DA_int[0]), .SE(SE_INA_buf), .RD(flag_dA_bit[1]));
VIRL_SDN_MSDPRB_1 ff_DA_int_0 (.Q(DA_int[0]), .CK(ls_clk_memA), .D(dtA[0]), .SI(SI_DA_buf), .SE(SE_INA_buf), .RD(flag_dA_bit[0]));

VIRL_SDN_BUF_1 buf_SO_CNTRA_out (.X(SO_CNTRA_buf), .A(STICKYA_int));
VIRL_SDN_MSDPRB_1 ff_STICKYA_int (.Q(STICKYA_int), .CK(ls_mclkA), .D(STICKYA_buf), .SI(CAPTA_int), .SE(SE_INA_buf), .RD(flag_stickyA));
VIRL_SDN_MSDPRB_1 ff_CAPTA_int (.Q(CAPTA_int), .CK(ls_mclkA), .D(CAPTA_buf), .SI(CDA_int[3]), .SE(SE_INA_buf), .RD(flag_captA));
wire [3:0] flag_cdA_bit;
assign flag_cdA_bit = flag_cdA_viol & {4{flag_cdA}};
VIRL_SDN_MSDPRB_1 ff_CDA_int_3 (.Q(CDA_int[3]), .CK(ls_mclkA), .D(CDA_buf[3]), .SI(CDA_int[2]), .SE(SE_INA_buf), .RD(flag_cdA_bit[3]));
VIRL_SDN_MSDPRB_1 ff_CDA_int_2 (.Q(CDA_int[2]), .CK(ls_mclkA), .D(CDA_buf[2]), .SI(CDA_int[1]), .SE(SE_INA_buf), .RD(flag_cdA_bit[2]));
VIRL_SDN_MSDPRB_1 ff_CDA_int_1 (.Q(CDA_int[1]), .CK(ls_mclkA), .D(CDA_buf[1]), .SI(CDA_int[0]), .SE(SE_INA_buf), .RD(flag_cdA_bit[1]));
VIRL_SDN_MSDPRB_1 ff_CDA_int_0 (.Q(CDA_int[0]), .CK(ls_mclkA), .D(CDA_buf[0]), .SI(PIPEMEA_int), .SE(SE_INA_buf), .RD(flag_cdA_bit[0]));
VIRL_SDN_MSDPRB_1 ff_PIPEMEA_int (.Q(PIPEMEA_int), .CK(ls_mclkA), .D(PIPEMEA_mout), .SI(MEA_int), .SE(SE_INA_buf), .RD(flag_pipemeA));
VIRL_SDN_MSDPRB_1 ff_MEA_int (.Q(MEA_int), .CK(ls_mclkA), .D(MEA_mout), .SI(WEA_int), .SE(SE_INA_buf), .RD(flag_meA));
VIRL_SDN_MSDPRB_1 ff_WEA_int (.Q(WEA_int), .CK(ls_clk_memA), .D(WEA_mout), .SI(ADRA_int[14]), .SE(SE_INA_buf), .RD(flag_weA));

wire [10:0] flag_addrA_bit;
assign flag_addrA_bit = flag_addrA_viol & {{10{flag_addrA}},{flag_si_cntrA}};

VIRL_SDN_MSDPRB_1 ff_ADRA_int_0 (.Q(ADRA_int[0]), .CK(ls_clk_memA), .D(ADRA_mout[0]), .SI(SI_CNTRA_buf), .SE(SE_INA_buf), .RD(flag_addrA_bit[0]));
VIRL_SDN_MSDPRB_1 ff_ADRA_int_1 (.Q(ADRA_int[1]), .CK(ls_clk_memA), .D(ADRA_mout[1]), .SI(ADRA_int[0]), .SE(SE_INA_buf), .RD(flag_addrA_bit[1]));
VIRL_SDN_MSDPRB_1 ff_ADRA_int_2 (.Q(ADRA_int[2]), .CK(ls_clk_memA), .D(1'b0), .SI(ADRA_int[1]), .SE(SE_INA_buf), .RD(flag_addrA));
VIRL_SDN_MSDPRB_1 ff_ADRA_int_3 (.Q(ADRA_int[3]), .CK(ls_clk_memA), .D(1'b0), .SI(ADRA_int[2]), .SE(SE_INA_buf), .RD(flag_addrA));
VIRL_SDN_MSDPRB_1 ff_ADRA_int_4 (.Q(ADRA_int[4]), .CK(ls_clk_memA), .D(ADRA_mout[2]), .SI(ADRA_int[3]), .SE(SE_INA_buf), .RD(flag_addrA_bit[2]));
VIRL_SDN_MSDPRB_1 ff_ADRA_int_5 (.Q(ADRA_int[5]), .CK(ls_clk_memA), .D(ADRA_mout[3]), .SI(ADRA_int[4]), .SE(SE_INA_buf), .RD(flag_addrA_bit[3]));
VIRL_SDN_MSDPRB_1 ff_ADRA_int_6 (.Q(ADRA_int[6]), .CK(ls_clk_memA), .D(ADRA_mout[4]), .SI(ADRA_int[5]), .SE(SE_INA_buf), .RD(flag_addrA_bit[4]));
VIRL_SDN_MSDPRB_1 ff_ADRA_int_7 (.Q(ADRA_int[7]), .CK(ls_clk_memA), .D(ADRA_mout[5]), .SI(ADRA_int[6]), .SE(SE_INA_buf), .RD(flag_addrA_bit[5]));
VIRL_SDN_MSDPRB_1 ff_ADRA_int_8 (.Q(ADRA_int[8]), .CK(ls_clk_memA), .D(1'b0), .SI(ADRA_int[7]), .SE(SE_INA_buf), .RD(flag_addrA));
VIRL_SDN_MSDPRB_1 ff_ADRA_int_9 (.Q(ADRA_int[9]), .CK(ls_clk_memA), .D(ADRA_mout[6]), .SI(ADRA_int[8]), .SE(SE_INA_buf), .RD(flag_addrA_bit[6]));
VIRL_SDN_MSDPRB_1 ff_ADRA_int_10 (.Q(ADRA_int[10]), .CK(ls_clk_memA), .D(ADRA_mout[7]), .SI(ADRA_int[9]), .SE(SE_INA_buf), .RD(flag_addrA_bit[7]));
VIRL_SDN_MSDPRB_1 ff_ADRA_int_11 (.Q(ADRA_int[11]), .CK(ls_clk_memA), .D(ADRA_mout[8]), .SI(ADRA_int[10]), .SE(SE_INA_buf), .RD(flag_addrA_bit[8]));
VIRL_SDN_MSDPRB_1 ff_ADRA_int_12 (.Q(ADRA_int[12]), .CK(ls_clk_memA), .D(ADRA_mout[9]), .SI(ADRA_int[11]), .SE(SE_INA_buf), .RD(flag_addrA_bit[9]));
VIRL_SDN_MSDPRB_1 ff_ADRA_int_13 (.Q(ADRA_int[13]), .CK(ls_clk_memA), .D(ADRA_mout[10]), .SI(ADRA_int[12]), .SE(SE_INA_buf), .RD(flag_addrA_bit[10]));
VIRL_SDN_MSDPRB_1 ff_ADRA_int_14 (.Q(ADRA_int[14]), .CK(ls_clk_memA), .D(1'b0), .SI(ADRA_int[13]), .SE(SE_INA_buf), .RD(flag_addrA));

VIRL_SDN_BUF_1 buf_SO_QB_out (.X(SO_QB_buf), .A(QPB_int[159]));
VIRL_SDN_MSDPRB_1 ff_QPB_int_159 (.Q(QPB_int[159]), .CK(ls_clk_pipB), .D(er_styB[159]), .SI(QPB_int[158]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_158 (.Q(QPB_int[158]), .CK(ls_clk_pipB), .D(er_styB[158]), .SI(QPB_int[157]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_157 (.Q(QPB_int[157]), .CK(ls_clk_pipB), .D(er_styB[157]), .SI(QPB_int[156]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_156 (.Q(QPB_int[156]), .CK(ls_clk_pipB), .D(er_styB[156]), .SI(QPB_int[155]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_155 (.Q(QPB_int[155]), .CK(ls_clk_pipB), .D(er_styB[155]), .SI(QPB_int[154]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_154 (.Q(QPB_int[154]), .CK(ls_clk_pipB), .D(er_styB[154]), .SI(QPB_int[153]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_153 (.Q(QPB_int[153]), .CK(ls_clk_pipB), .D(er_styB[153]), .SI(QPB_int[152]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_152 (.Q(QPB_int[152]), .CK(ls_clk_pipB), .D(er_styB[152]), .SI(QPB_int[151]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_151 (.Q(QPB_int[151]), .CK(ls_clk_pipB), .D(er_styB[151]), .SI(QPB_int[150]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_150 (.Q(QPB_int[150]), .CK(ls_clk_pipB), .D(er_styB[150]), .SI(QPB_int[149]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_149 (.Q(QPB_int[149]), .CK(ls_clk_pipB), .D(er_styB[149]), .SI(QPB_int[148]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_148 (.Q(QPB_int[148]), .CK(ls_clk_pipB), .D(er_styB[148]), .SI(QPB_int[147]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_147 (.Q(QPB_int[147]), .CK(ls_clk_pipB), .D(er_styB[147]), .SI(QPB_int[146]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_146 (.Q(QPB_int[146]), .CK(ls_clk_pipB), .D(er_styB[146]), .SI(QPB_int[145]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_145 (.Q(QPB_int[145]), .CK(ls_clk_pipB), .D(er_styB[145]), .SI(QPB_int[144]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_144 (.Q(QPB_int[144]), .CK(ls_clk_pipB), .D(er_styB[144]), .SI(QPB_int[143]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_143 (.Q(QPB_int[143]), .CK(ls_clk_pipB), .D(er_styB[143]), .SI(QPB_int[142]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_142 (.Q(QPB_int[142]), .CK(ls_clk_pipB), .D(er_styB[142]), .SI(QPB_int[141]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_141 (.Q(QPB_int[141]), .CK(ls_clk_pipB), .D(er_styB[141]), .SI(QPB_int[140]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_140 (.Q(QPB_int[140]), .CK(ls_clk_pipB), .D(er_styB[140]), .SI(QPB_int[139]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_139 (.Q(QPB_int[139]), .CK(ls_clk_pipB), .D(er_styB[139]), .SI(QPB_int[138]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_138 (.Q(QPB_int[138]), .CK(ls_clk_pipB), .D(er_styB[138]), .SI(QPB_int[137]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_137 (.Q(QPB_int[137]), .CK(ls_clk_pipB), .D(er_styB[137]), .SI(QPB_int[136]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_136 (.Q(QPB_int[136]), .CK(ls_clk_pipB), .D(er_styB[136]), .SI(QPB_int[135]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_135 (.Q(QPB_int[135]), .CK(ls_clk_pipB), .D(er_styB[135]), .SI(QPB_int[134]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_134 (.Q(QPB_int[134]), .CK(ls_clk_pipB), .D(er_styB[134]), .SI(QPB_int[133]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_133 (.Q(QPB_int[133]), .CK(ls_clk_pipB), .D(er_styB[133]), .SI(QPB_int[132]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_132 (.Q(QPB_int[132]), .CK(ls_clk_pipB), .D(er_styB[132]), .SI(QPB_int[131]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_131 (.Q(QPB_int[131]), .CK(ls_clk_pipB), .D(er_styB[131]), .SI(QPB_int[130]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_130 (.Q(QPB_int[130]), .CK(ls_clk_pipB), .D(er_styB[130]), .SI(QPB_int[129]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_129 (.Q(QPB_int[129]), .CK(ls_clk_pipB), .D(er_styB[129]), .SI(QPB_int[128]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_128 (.Q(QPB_int[128]), .CK(ls_clk_pipB), .D(er_styB[128]), .SI(QPB_int[127]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_127 (.Q(QPB_int[127]), .CK(ls_clk_pipB), .D(er_styB[127]), .SI(QPB_int[126]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_126 (.Q(QPB_int[126]), .CK(ls_clk_pipB), .D(er_styB[126]), .SI(QPB_int[125]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_125 (.Q(QPB_int[125]), .CK(ls_clk_pipB), .D(er_styB[125]), .SI(QPB_int[124]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_124 (.Q(QPB_int[124]), .CK(ls_clk_pipB), .D(er_styB[124]), .SI(QPB_int[123]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_123 (.Q(QPB_int[123]), .CK(ls_clk_pipB), .D(er_styB[123]), .SI(QPB_int[122]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_122 (.Q(QPB_int[122]), .CK(ls_clk_pipB), .D(er_styB[122]), .SI(QPB_int[121]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_121 (.Q(QPB_int[121]), .CK(ls_clk_pipB), .D(er_styB[121]), .SI(QPB_int[120]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_120 (.Q(QPB_int[120]), .CK(ls_clk_pipB), .D(er_styB[120]), .SI(QPB_int[119]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_119 (.Q(QPB_int[119]), .CK(ls_clk_pipB), .D(er_styB[119]), .SI(QPB_int[118]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_118 (.Q(QPB_int[118]), .CK(ls_clk_pipB), .D(er_styB[118]), .SI(QPB_int[117]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_117 (.Q(QPB_int[117]), .CK(ls_clk_pipB), .D(er_styB[117]), .SI(QPB_int[116]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_116 (.Q(QPB_int[116]), .CK(ls_clk_pipB), .D(er_styB[116]), .SI(QPB_int[115]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_115 (.Q(QPB_int[115]), .CK(ls_clk_pipB), .D(er_styB[115]), .SI(QPB_int[114]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_114 (.Q(QPB_int[114]), .CK(ls_clk_pipB), .D(er_styB[114]), .SI(QPB_int[113]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_113 (.Q(QPB_int[113]), .CK(ls_clk_pipB), .D(er_styB[113]), .SI(QPB_int[112]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_112 (.Q(QPB_int[112]), .CK(ls_clk_pipB), .D(er_styB[112]), .SI(QPB_int[111]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_111 (.Q(QPB_int[111]), .CK(ls_clk_pipB), .D(er_styB[111]), .SI(QPB_int[110]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_110 (.Q(QPB_int[110]), .CK(ls_clk_pipB), .D(er_styB[110]), .SI(QPB_int[109]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_109 (.Q(QPB_int[109]), .CK(ls_clk_pipB), .D(er_styB[109]), .SI(QPB_int[108]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_108 (.Q(QPB_int[108]), .CK(ls_clk_pipB), .D(er_styB[108]), .SI(QPB_int[107]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_107 (.Q(QPB_int[107]), .CK(ls_clk_pipB), .D(er_styB[107]), .SI(QPB_int[106]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_106 (.Q(QPB_int[106]), .CK(ls_clk_pipB), .D(er_styB[106]), .SI(QPB_int[105]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_105 (.Q(QPB_int[105]), .CK(ls_clk_pipB), .D(er_styB[105]), .SI(QPB_int[104]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_104 (.Q(QPB_int[104]), .CK(ls_clk_pipB), .D(er_styB[104]), .SI(QPB_int[103]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_103 (.Q(QPB_int[103]), .CK(ls_clk_pipB), .D(er_styB[103]), .SI(QPB_int[102]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_102 (.Q(QPB_int[102]), .CK(ls_clk_pipB), .D(er_styB[102]), .SI(QPB_int[101]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_101 (.Q(QPB_int[101]), .CK(ls_clk_pipB), .D(er_styB[101]), .SI(QPB_int[100]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_100 (.Q(QPB_int[100]), .CK(ls_clk_pipB), .D(er_styB[100]), .SI(QPB_int[99]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_99 (.Q(QPB_int[99]), .CK(ls_clk_pipB), .D(er_styB[99]), .SI(QPB_int[98]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_98 (.Q(QPB_int[98]), .CK(ls_clk_pipB), .D(er_styB[98]), .SI(QPB_int[97]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_97 (.Q(QPB_int[97]), .CK(ls_clk_pipB), .D(er_styB[97]), .SI(QPB_int[96]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_96 (.Q(QPB_int[96]), .CK(ls_clk_pipB), .D(er_styB[96]), .SI(QPB_int[95]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_95 (.Q(QPB_int[95]), .CK(ls_clk_pipB), .D(er_styB[95]), .SI(QPB_int[94]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_94 (.Q(QPB_int[94]), .CK(ls_clk_pipB), .D(er_styB[94]), .SI(QPB_int[93]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_93 (.Q(QPB_int[93]), .CK(ls_clk_pipB), .D(er_styB[93]), .SI(QPB_int[92]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_92 (.Q(QPB_int[92]), .CK(ls_clk_pipB), .D(er_styB[92]), .SI(QPB_int[91]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_91 (.Q(QPB_int[91]), .CK(ls_clk_pipB), .D(er_styB[91]), .SI(QPB_int[90]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_90 (.Q(QPB_int[90]), .CK(ls_clk_pipB), .D(er_styB[90]), .SI(QPB_int[89]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_89 (.Q(QPB_int[89]), .CK(ls_clk_pipB), .D(er_styB[89]), .SI(QPB_int[88]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_88 (.Q(QPB_int[88]), .CK(ls_clk_pipB), .D(er_styB[88]), .SI(QPB_int[87]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_87 (.Q(QPB_int[87]), .CK(ls_clk_pipB), .D(er_styB[87]), .SI(QPB_int[86]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_86 (.Q(QPB_int[86]), .CK(ls_clk_pipB), .D(er_styB[86]), .SI(QPB_int[85]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_85 (.Q(QPB_int[85]), .CK(ls_clk_pipB), .D(er_styB[85]), .SI(QPB_int[84]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_84 (.Q(QPB_int[84]), .CK(ls_clk_pipB), .D(er_styB[84]), .SI(QPB_int[83]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_83 (.Q(QPB_int[83]), .CK(ls_clk_pipB), .D(er_styB[83]), .SI(QPB_int[82]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_82 (.Q(QPB_int[82]), .CK(ls_clk_pipB), .D(er_styB[82]), .SI(QPB_int[81]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_81 (.Q(QPB_int[81]), .CK(ls_clk_pipB), .D(er_styB[81]), .SI(QPB_int[80]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_80 (.Q(QPB_int[80]), .CK(ls_clk_pipB), .D(er_styB[80]), .SI(QPB_int[79]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_79 (.Q(QPB_int[79]), .CK(ls_clk_pipB), .D(er_styB[79]), .SI(QPB_int[78]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_78 (.Q(QPB_int[78]), .CK(ls_clk_pipB), .D(er_styB[78]), .SI(QPB_int[77]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_77 (.Q(QPB_int[77]), .CK(ls_clk_pipB), .D(er_styB[77]), .SI(QPB_int[76]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_76 (.Q(QPB_int[76]), .CK(ls_clk_pipB), .D(er_styB[76]), .SI(QPB_int[75]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_75 (.Q(QPB_int[75]), .CK(ls_clk_pipB), .D(er_styB[75]), .SI(QPB_int[74]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_74 (.Q(QPB_int[74]), .CK(ls_clk_pipB), .D(er_styB[74]), .SI(QPB_int[73]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_73 (.Q(QPB_int[73]), .CK(ls_clk_pipB), .D(er_styB[73]), .SI(QPB_int[72]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_72 (.Q(QPB_int[72]), .CK(ls_clk_pipB), .D(er_styB[72]), .SI(QPB_int[71]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_71 (.Q(QPB_int[71]), .CK(ls_clk_pipB), .D(er_styB[71]), .SI(QPB_int[70]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_70 (.Q(QPB_int[70]), .CK(ls_clk_pipB), .D(er_styB[70]), .SI(QPB_int[69]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_69 (.Q(QPB_int[69]), .CK(ls_clk_pipB), .D(er_styB[69]), .SI(QPB_int[68]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_68 (.Q(QPB_int[68]), .CK(ls_clk_pipB), .D(er_styB[68]), .SI(QPB_int[67]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_67 (.Q(QPB_int[67]), .CK(ls_clk_pipB), .D(er_styB[67]), .SI(QPB_int[66]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_66 (.Q(QPB_int[66]), .CK(ls_clk_pipB), .D(er_styB[66]), .SI(QPB_int[65]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_65 (.Q(QPB_int[65]), .CK(ls_clk_pipB), .D(er_styB[65]), .SI(QPB_int[64]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_64 (.Q(QPB_int[64]), .CK(ls_clk_pipB), .D(er_styB[64]), .SI(QPB_int[63]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_63 (.Q(QPB_int[63]), .CK(ls_clk_pipB), .D(er_styB[63]), .SI(QPB_int[62]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_62 (.Q(QPB_int[62]), .CK(ls_clk_pipB), .D(er_styB[62]), .SI(QPB_int[61]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_61 (.Q(QPB_int[61]), .CK(ls_clk_pipB), .D(er_styB[61]), .SI(QPB_int[60]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_60 (.Q(QPB_int[60]), .CK(ls_clk_pipB), .D(er_styB[60]), .SI(QPB_int[59]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_59 (.Q(QPB_int[59]), .CK(ls_clk_pipB), .D(er_styB[59]), .SI(QPB_int[58]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_58 (.Q(QPB_int[58]), .CK(ls_clk_pipB), .D(er_styB[58]), .SI(QPB_int[57]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_57 (.Q(QPB_int[57]), .CK(ls_clk_pipB), .D(er_styB[57]), .SI(QPB_int[56]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_56 (.Q(QPB_int[56]), .CK(ls_clk_pipB), .D(er_styB[56]), .SI(QPB_int[55]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_55 (.Q(QPB_int[55]), .CK(ls_clk_pipB), .D(er_styB[55]), .SI(QPB_int[54]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_54 (.Q(QPB_int[54]), .CK(ls_clk_pipB), .D(er_styB[54]), .SI(QPB_int[53]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_53 (.Q(QPB_int[53]), .CK(ls_clk_pipB), .D(er_styB[53]), .SI(QPB_int[52]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_52 (.Q(QPB_int[52]), .CK(ls_clk_pipB), .D(er_styB[52]), .SI(QPB_int[51]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_51 (.Q(QPB_int[51]), .CK(ls_clk_pipB), .D(er_styB[51]), .SI(QPB_int[50]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_50 (.Q(QPB_int[50]), .CK(ls_clk_pipB), .D(er_styB[50]), .SI(QPB_int[49]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_49 (.Q(QPB_int[49]), .CK(ls_clk_pipB), .D(er_styB[49]), .SI(QPB_int[48]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_48 (.Q(QPB_int[48]), .CK(ls_clk_pipB), .D(er_styB[48]), .SI(QPB_int[47]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_47 (.Q(QPB_int[47]), .CK(ls_clk_pipB), .D(er_styB[47]), .SI(QPB_int[46]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_46 (.Q(QPB_int[46]), .CK(ls_clk_pipB), .D(er_styB[46]), .SI(QPB_int[45]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_45 (.Q(QPB_int[45]), .CK(ls_clk_pipB), .D(er_styB[45]), .SI(QPB_int[44]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_44 (.Q(QPB_int[44]), .CK(ls_clk_pipB), .D(er_styB[44]), .SI(QPB_int[43]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_43 (.Q(QPB_int[43]), .CK(ls_clk_pipB), .D(er_styB[43]), .SI(QPB_int[42]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_42 (.Q(QPB_int[42]), .CK(ls_clk_pipB), .D(er_styB[42]), .SI(QPB_int[41]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_41 (.Q(QPB_int[41]), .CK(ls_clk_pipB), .D(er_styB[41]), .SI(QPB_int[40]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_40 (.Q(QPB_int[40]), .CK(ls_clk_pipB), .D(er_styB[40]), .SI(QPB_int[39]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_39 (.Q(QPB_int[39]), .CK(ls_clk_pipB), .D(er_styB[39]), .SI(QPB_int[38]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_38 (.Q(QPB_int[38]), .CK(ls_clk_pipB), .D(er_styB[38]), .SI(QPB_int[37]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_37 (.Q(QPB_int[37]), .CK(ls_clk_pipB), .D(er_styB[37]), .SI(QPB_int[36]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_36 (.Q(QPB_int[36]), .CK(ls_clk_pipB), .D(er_styB[36]), .SI(QPB_int[35]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_35 (.Q(QPB_int[35]), .CK(ls_clk_pipB), .D(er_styB[35]), .SI(QPB_int[34]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_34 (.Q(QPB_int[34]), .CK(ls_clk_pipB), .D(er_styB[34]), .SI(QPB_int[33]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_33 (.Q(QPB_int[33]), .CK(ls_clk_pipB), .D(er_styB[33]), .SI(QPB_int[32]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_32 (.Q(QPB_int[32]), .CK(ls_clk_pipB), .D(er_styB[32]), .SI(QPB_int[31]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_31 (.Q(QPB_int[31]), .CK(ls_clk_pipB), .D(er_styB[31]), .SI(QPB_int[30]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_30 (.Q(QPB_int[30]), .CK(ls_clk_pipB), .D(er_styB[30]), .SI(QPB_int[29]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_29 (.Q(QPB_int[29]), .CK(ls_clk_pipB), .D(er_styB[29]), .SI(QPB_int[28]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_28 (.Q(QPB_int[28]), .CK(ls_clk_pipB), .D(er_styB[28]), .SI(QPB_int[27]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_27 (.Q(QPB_int[27]), .CK(ls_clk_pipB), .D(er_styB[27]), .SI(QPB_int[26]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_26 (.Q(QPB_int[26]), .CK(ls_clk_pipB), .D(er_styB[26]), .SI(QPB_int[25]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_25 (.Q(QPB_int[25]), .CK(ls_clk_pipB), .D(er_styB[25]), .SI(QPB_int[24]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_24 (.Q(QPB_int[24]), .CK(ls_clk_pipB), .D(er_styB[24]), .SI(QPB_int[23]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_23 (.Q(QPB_int[23]), .CK(ls_clk_pipB), .D(er_styB[23]), .SI(QPB_int[22]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_22 (.Q(QPB_int[22]), .CK(ls_clk_pipB), .D(er_styB[22]), .SI(QPB_int[21]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_21 (.Q(QPB_int[21]), .CK(ls_clk_pipB), .D(er_styB[21]), .SI(QPB_int[20]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_20 (.Q(QPB_int[20]), .CK(ls_clk_pipB), .D(er_styB[20]), .SI(QPB_int[19]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_19 (.Q(QPB_int[19]), .CK(ls_clk_pipB), .D(er_styB[19]), .SI(QPB_int[18]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_18 (.Q(QPB_int[18]), .CK(ls_clk_pipB), .D(er_styB[18]), .SI(QPB_int[17]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_17 (.Q(QPB_int[17]), .CK(ls_clk_pipB), .D(er_styB[17]), .SI(QPB_int[16]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_16 (.Q(QPB_int[16]), .CK(ls_clk_pipB), .D(er_styB[16]), .SI(QPB_int[15]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_15 (.Q(QPB_int[15]), .CK(ls_clk_pipB), .D(er_styB[15]), .SI(QPB_int[14]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_14 (.Q(QPB_int[14]), .CK(ls_clk_pipB), .D(er_styB[14]), .SI(QPB_int[13]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_13 (.Q(QPB_int[13]), .CK(ls_clk_pipB), .D(er_styB[13]), .SI(QPB_int[12]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_12 (.Q(QPB_int[12]), .CK(ls_clk_pipB), .D(er_styB[12]), .SI(QPB_int[11]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_11 (.Q(QPB_int[11]), .CK(ls_clk_pipB), .D(er_styB[11]), .SI(QPB_int[10]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_10 (.Q(QPB_int[10]), .CK(ls_clk_pipB), .D(er_styB[10]), .SI(QPB_int[9]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_9 (.Q(QPB_int[9]), .CK(ls_clk_pipB), .D(er_styB[9]), .SI(QPB_int[8]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_8 (.Q(QPB_int[8]), .CK(ls_clk_pipB), .D(er_styB[8]), .SI(QPB_int[7]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_7 (.Q(QPB_int[7]), .CK(ls_clk_pipB), .D(er_styB[7]), .SI(QPB_int[6]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_6 (.Q(QPB_int[6]), .CK(ls_clk_pipB), .D(er_styB[6]), .SI(QPB_int[5]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_5 (.Q(QPB_int[5]), .CK(ls_clk_pipB), .D(er_styB[5]), .SI(QPB_int[4]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_4 (.Q(QPB_int[4]), .CK(ls_clk_pipB), .D(er_styB[4]), .SI(QPB_int[3]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_3 (.Q(QPB_int[3]), .CK(ls_clk_pipB), .D(er_styB[3]), .SI(QPB_int[2]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_2 (.Q(QPB_int[2]), .CK(ls_clk_pipB), .D(er_styB[2]), .SI(QPB_int[1]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_1 (.Q(QPB_int[1]), .CK(ls_clk_pipB), .D(er_styB[1]), .SI(QPB_int[0]), .SE(SE_QB_buf), .RD(flag_qB));
VIRL_SDN_MSDPRB_1 ff_QPB_int_0 (.Q(QPB_int[0]), .CK(ls_clk_pipB), .D(er_styB[0]), .SI(SI_QB_buf), .SE(SE_QB_buf), .RD(flag_si_qB));
wire [159:0] flag_dB_bit;
assign flag_dB_bit = flag_dB_viol & {{159{flag_dB}},{flag_si_dB}};

VIRL_SDN_BUF_1 buf_SO_DB_out (.X(SO_DB_buf), .A(DB_int[159]));
VIRL_SDN_MSDPRB_1 ff_DB_int_159 (.Q(DB_int[159]), .CK(ls_clk_memB), .D(dtB[159]), .SI(DB_int[158]), .SE(SE_INB_buf), .RD(flag_dB_bit[159]));
VIRL_SDN_MSDPRB_1 ff_DB_int_158 (.Q(DB_int[158]), .CK(ls_clk_memB), .D(dtB[158]), .SI(DB_int[157]), .SE(SE_INB_buf), .RD(flag_dB_bit[158]));
VIRL_SDN_MSDPRB_1 ff_DB_int_157 (.Q(DB_int[157]), .CK(ls_clk_memB), .D(dtB[157]), .SI(DB_int[156]), .SE(SE_INB_buf), .RD(flag_dB_bit[157]));
VIRL_SDN_MSDPRB_1 ff_DB_int_156 (.Q(DB_int[156]), .CK(ls_clk_memB), .D(dtB[156]), .SI(DB_int[155]), .SE(SE_INB_buf), .RD(flag_dB_bit[156]));
VIRL_SDN_MSDPRB_1 ff_DB_int_155 (.Q(DB_int[155]), .CK(ls_clk_memB), .D(dtB[155]), .SI(DB_int[154]), .SE(SE_INB_buf), .RD(flag_dB_bit[155]));
VIRL_SDN_MSDPRB_1 ff_DB_int_154 (.Q(DB_int[154]), .CK(ls_clk_memB), .D(dtB[154]), .SI(DB_int[153]), .SE(SE_INB_buf), .RD(flag_dB_bit[154]));
VIRL_SDN_MSDPRB_1 ff_DB_int_153 (.Q(DB_int[153]), .CK(ls_clk_memB), .D(dtB[153]), .SI(DB_int[152]), .SE(SE_INB_buf), .RD(flag_dB_bit[153]));
VIRL_SDN_MSDPRB_1 ff_DB_int_152 (.Q(DB_int[152]), .CK(ls_clk_memB), .D(dtB[152]), .SI(DB_int[151]), .SE(SE_INB_buf), .RD(flag_dB_bit[152]));
VIRL_SDN_MSDPRB_1 ff_DB_int_151 (.Q(DB_int[151]), .CK(ls_clk_memB), .D(dtB[151]), .SI(DB_int[150]), .SE(SE_INB_buf), .RD(flag_dB_bit[151]));
VIRL_SDN_MSDPRB_1 ff_DB_int_150 (.Q(DB_int[150]), .CK(ls_clk_memB), .D(dtB[150]), .SI(DB_int[149]), .SE(SE_INB_buf), .RD(flag_dB_bit[150]));
VIRL_SDN_MSDPRB_1 ff_DB_int_149 (.Q(DB_int[149]), .CK(ls_clk_memB), .D(dtB[149]), .SI(DB_int[148]), .SE(SE_INB_buf), .RD(flag_dB_bit[149]));
VIRL_SDN_MSDPRB_1 ff_DB_int_148 (.Q(DB_int[148]), .CK(ls_clk_memB), .D(dtB[148]), .SI(DB_int[147]), .SE(SE_INB_buf), .RD(flag_dB_bit[148]));
VIRL_SDN_MSDPRB_1 ff_DB_int_147 (.Q(DB_int[147]), .CK(ls_clk_memB), .D(dtB[147]), .SI(DB_int[146]), .SE(SE_INB_buf), .RD(flag_dB_bit[147]));
VIRL_SDN_MSDPRB_1 ff_DB_int_146 (.Q(DB_int[146]), .CK(ls_clk_memB), .D(dtB[146]), .SI(DB_int[145]), .SE(SE_INB_buf), .RD(flag_dB_bit[146]));
VIRL_SDN_MSDPRB_1 ff_DB_int_145 (.Q(DB_int[145]), .CK(ls_clk_memB), .D(dtB[145]), .SI(DB_int[144]), .SE(SE_INB_buf), .RD(flag_dB_bit[145]));
VIRL_SDN_MSDPRB_1 ff_DB_int_144 (.Q(DB_int[144]), .CK(ls_clk_memB), .D(dtB[144]), .SI(DB_int[143]), .SE(SE_INB_buf), .RD(flag_dB_bit[144]));
VIRL_SDN_MSDPRB_1 ff_DB_int_143 (.Q(DB_int[143]), .CK(ls_clk_memB), .D(dtB[143]), .SI(DB_int[142]), .SE(SE_INB_buf), .RD(flag_dB_bit[143]));
VIRL_SDN_MSDPRB_1 ff_DB_int_142 (.Q(DB_int[142]), .CK(ls_clk_memB), .D(dtB[142]), .SI(DB_int[141]), .SE(SE_INB_buf), .RD(flag_dB_bit[142]));
VIRL_SDN_MSDPRB_1 ff_DB_int_141 (.Q(DB_int[141]), .CK(ls_clk_memB), .D(dtB[141]), .SI(DB_int[140]), .SE(SE_INB_buf), .RD(flag_dB_bit[141]));
VIRL_SDN_MSDPRB_1 ff_DB_int_140 (.Q(DB_int[140]), .CK(ls_clk_memB), .D(dtB[140]), .SI(DB_int[139]), .SE(SE_INB_buf), .RD(flag_dB_bit[140]));
VIRL_SDN_MSDPRB_1 ff_DB_int_139 (.Q(DB_int[139]), .CK(ls_clk_memB), .D(dtB[139]), .SI(DB_int[138]), .SE(SE_INB_buf), .RD(flag_dB_bit[139]));
VIRL_SDN_MSDPRB_1 ff_DB_int_138 (.Q(DB_int[138]), .CK(ls_clk_memB), .D(dtB[138]), .SI(DB_int[137]), .SE(SE_INB_buf), .RD(flag_dB_bit[138]));
VIRL_SDN_MSDPRB_1 ff_DB_int_137 (.Q(DB_int[137]), .CK(ls_clk_memB), .D(dtB[137]), .SI(DB_int[136]), .SE(SE_INB_buf), .RD(flag_dB_bit[137]));
VIRL_SDN_MSDPRB_1 ff_DB_int_136 (.Q(DB_int[136]), .CK(ls_clk_memB), .D(dtB[136]), .SI(DB_int[135]), .SE(SE_INB_buf), .RD(flag_dB_bit[136]));
VIRL_SDN_MSDPRB_1 ff_DB_int_135 (.Q(DB_int[135]), .CK(ls_clk_memB), .D(dtB[135]), .SI(DB_int[134]), .SE(SE_INB_buf), .RD(flag_dB_bit[135]));
VIRL_SDN_MSDPRB_1 ff_DB_int_134 (.Q(DB_int[134]), .CK(ls_clk_memB), .D(dtB[134]), .SI(DB_int[133]), .SE(SE_INB_buf), .RD(flag_dB_bit[134]));
VIRL_SDN_MSDPRB_1 ff_DB_int_133 (.Q(DB_int[133]), .CK(ls_clk_memB), .D(dtB[133]), .SI(DB_int[132]), .SE(SE_INB_buf), .RD(flag_dB_bit[133]));
VIRL_SDN_MSDPRB_1 ff_DB_int_132 (.Q(DB_int[132]), .CK(ls_clk_memB), .D(dtB[132]), .SI(DB_int[131]), .SE(SE_INB_buf), .RD(flag_dB_bit[132]));
VIRL_SDN_MSDPRB_1 ff_DB_int_131 (.Q(DB_int[131]), .CK(ls_clk_memB), .D(dtB[131]), .SI(DB_int[130]), .SE(SE_INB_buf), .RD(flag_dB_bit[131]));
VIRL_SDN_MSDPRB_1 ff_DB_int_130 (.Q(DB_int[130]), .CK(ls_clk_memB), .D(dtB[130]), .SI(DB_int[129]), .SE(SE_INB_buf), .RD(flag_dB_bit[130]));
VIRL_SDN_MSDPRB_1 ff_DB_int_129 (.Q(DB_int[129]), .CK(ls_clk_memB), .D(dtB[129]), .SI(DB_int[128]), .SE(SE_INB_buf), .RD(flag_dB_bit[129]));
VIRL_SDN_MSDPRB_1 ff_DB_int_128 (.Q(DB_int[128]), .CK(ls_clk_memB), .D(dtB[128]), .SI(DB_int[127]), .SE(SE_INB_buf), .RD(flag_dB_bit[128]));
VIRL_SDN_MSDPRB_1 ff_DB_int_127 (.Q(DB_int[127]), .CK(ls_clk_memB), .D(dtB[127]), .SI(DB_int[126]), .SE(SE_INB_buf), .RD(flag_dB_bit[127]));
VIRL_SDN_MSDPRB_1 ff_DB_int_126 (.Q(DB_int[126]), .CK(ls_clk_memB), .D(dtB[126]), .SI(DB_int[125]), .SE(SE_INB_buf), .RD(flag_dB_bit[126]));
VIRL_SDN_MSDPRB_1 ff_DB_int_125 (.Q(DB_int[125]), .CK(ls_clk_memB), .D(dtB[125]), .SI(DB_int[124]), .SE(SE_INB_buf), .RD(flag_dB_bit[125]));
VIRL_SDN_MSDPRB_1 ff_DB_int_124 (.Q(DB_int[124]), .CK(ls_clk_memB), .D(dtB[124]), .SI(DB_int[123]), .SE(SE_INB_buf), .RD(flag_dB_bit[124]));
VIRL_SDN_MSDPRB_1 ff_DB_int_123 (.Q(DB_int[123]), .CK(ls_clk_memB), .D(dtB[123]), .SI(DB_int[122]), .SE(SE_INB_buf), .RD(flag_dB_bit[123]));
VIRL_SDN_MSDPRB_1 ff_DB_int_122 (.Q(DB_int[122]), .CK(ls_clk_memB), .D(dtB[122]), .SI(DB_int[121]), .SE(SE_INB_buf), .RD(flag_dB_bit[122]));
VIRL_SDN_MSDPRB_1 ff_DB_int_121 (.Q(DB_int[121]), .CK(ls_clk_memB), .D(dtB[121]), .SI(DB_int[120]), .SE(SE_INB_buf), .RD(flag_dB_bit[121]));
VIRL_SDN_MSDPRB_1 ff_DB_int_120 (.Q(DB_int[120]), .CK(ls_clk_memB), .D(dtB[120]), .SI(DB_int[119]), .SE(SE_INB_buf), .RD(flag_dB_bit[120]));
VIRL_SDN_MSDPRB_1 ff_DB_int_119 (.Q(DB_int[119]), .CK(ls_clk_memB), .D(dtB[119]), .SI(DB_int[118]), .SE(SE_INB_buf), .RD(flag_dB_bit[119]));
VIRL_SDN_MSDPRB_1 ff_DB_int_118 (.Q(DB_int[118]), .CK(ls_clk_memB), .D(dtB[118]), .SI(DB_int[117]), .SE(SE_INB_buf), .RD(flag_dB_bit[118]));
VIRL_SDN_MSDPRB_1 ff_DB_int_117 (.Q(DB_int[117]), .CK(ls_clk_memB), .D(dtB[117]), .SI(DB_int[116]), .SE(SE_INB_buf), .RD(flag_dB_bit[117]));
VIRL_SDN_MSDPRB_1 ff_DB_int_116 (.Q(DB_int[116]), .CK(ls_clk_memB), .D(dtB[116]), .SI(DB_int[115]), .SE(SE_INB_buf), .RD(flag_dB_bit[116]));
VIRL_SDN_MSDPRB_1 ff_DB_int_115 (.Q(DB_int[115]), .CK(ls_clk_memB), .D(dtB[115]), .SI(DB_int[114]), .SE(SE_INB_buf), .RD(flag_dB_bit[115]));
VIRL_SDN_MSDPRB_1 ff_DB_int_114 (.Q(DB_int[114]), .CK(ls_clk_memB), .D(dtB[114]), .SI(DB_int[113]), .SE(SE_INB_buf), .RD(flag_dB_bit[114]));
VIRL_SDN_MSDPRB_1 ff_DB_int_113 (.Q(DB_int[113]), .CK(ls_clk_memB), .D(dtB[113]), .SI(DB_int[112]), .SE(SE_INB_buf), .RD(flag_dB_bit[113]));
VIRL_SDN_MSDPRB_1 ff_DB_int_112 (.Q(DB_int[112]), .CK(ls_clk_memB), .D(dtB[112]), .SI(DB_int[111]), .SE(SE_INB_buf), .RD(flag_dB_bit[112]));
VIRL_SDN_MSDPRB_1 ff_DB_int_111 (.Q(DB_int[111]), .CK(ls_clk_memB), .D(dtB[111]), .SI(DB_int[110]), .SE(SE_INB_buf), .RD(flag_dB_bit[111]));
VIRL_SDN_MSDPRB_1 ff_DB_int_110 (.Q(DB_int[110]), .CK(ls_clk_memB), .D(dtB[110]), .SI(DB_int[109]), .SE(SE_INB_buf), .RD(flag_dB_bit[110]));
VIRL_SDN_MSDPRB_1 ff_DB_int_109 (.Q(DB_int[109]), .CK(ls_clk_memB), .D(dtB[109]), .SI(DB_int[108]), .SE(SE_INB_buf), .RD(flag_dB_bit[109]));
VIRL_SDN_MSDPRB_1 ff_DB_int_108 (.Q(DB_int[108]), .CK(ls_clk_memB), .D(dtB[108]), .SI(DB_int[107]), .SE(SE_INB_buf), .RD(flag_dB_bit[108]));
VIRL_SDN_MSDPRB_1 ff_DB_int_107 (.Q(DB_int[107]), .CK(ls_clk_memB), .D(dtB[107]), .SI(DB_int[106]), .SE(SE_INB_buf), .RD(flag_dB_bit[107]));
VIRL_SDN_MSDPRB_1 ff_DB_int_106 (.Q(DB_int[106]), .CK(ls_clk_memB), .D(dtB[106]), .SI(DB_int[105]), .SE(SE_INB_buf), .RD(flag_dB_bit[106]));
VIRL_SDN_MSDPRB_1 ff_DB_int_105 (.Q(DB_int[105]), .CK(ls_clk_memB), .D(dtB[105]), .SI(DB_int[104]), .SE(SE_INB_buf), .RD(flag_dB_bit[105]));
VIRL_SDN_MSDPRB_1 ff_DB_int_104 (.Q(DB_int[104]), .CK(ls_clk_memB), .D(dtB[104]), .SI(DB_int[103]), .SE(SE_INB_buf), .RD(flag_dB_bit[104]));
VIRL_SDN_MSDPRB_1 ff_DB_int_103 (.Q(DB_int[103]), .CK(ls_clk_memB), .D(dtB[103]), .SI(DB_int[102]), .SE(SE_INB_buf), .RD(flag_dB_bit[103]));
VIRL_SDN_MSDPRB_1 ff_DB_int_102 (.Q(DB_int[102]), .CK(ls_clk_memB), .D(dtB[102]), .SI(DB_int[101]), .SE(SE_INB_buf), .RD(flag_dB_bit[102]));
VIRL_SDN_MSDPRB_1 ff_DB_int_101 (.Q(DB_int[101]), .CK(ls_clk_memB), .D(dtB[101]), .SI(DB_int[100]), .SE(SE_INB_buf), .RD(flag_dB_bit[101]));
VIRL_SDN_MSDPRB_1 ff_DB_int_100 (.Q(DB_int[100]), .CK(ls_clk_memB), .D(dtB[100]), .SI(DB_int[99]), .SE(SE_INB_buf), .RD(flag_dB_bit[100]));
VIRL_SDN_MSDPRB_1 ff_DB_int_99 (.Q(DB_int[99]), .CK(ls_clk_memB), .D(dtB[99]), .SI(DB_int[98]), .SE(SE_INB_buf), .RD(flag_dB_bit[99]));
VIRL_SDN_MSDPRB_1 ff_DB_int_98 (.Q(DB_int[98]), .CK(ls_clk_memB), .D(dtB[98]), .SI(DB_int[97]), .SE(SE_INB_buf), .RD(flag_dB_bit[98]));
VIRL_SDN_MSDPRB_1 ff_DB_int_97 (.Q(DB_int[97]), .CK(ls_clk_memB), .D(dtB[97]), .SI(DB_int[96]), .SE(SE_INB_buf), .RD(flag_dB_bit[97]));
VIRL_SDN_MSDPRB_1 ff_DB_int_96 (.Q(DB_int[96]), .CK(ls_clk_memB), .D(dtB[96]), .SI(DB_int[95]), .SE(SE_INB_buf), .RD(flag_dB_bit[96]));
VIRL_SDN_MSDPRB_1 ff_DB_int_95 (.Q(DB_int[95]), .CK(ls_clk_memB), .D(dtB[95]), .SI(DB_int[94]), .SE(SE_INB_buf), .RD(flag_dB_bit[95]));
VIRL_SDN_MSDPRB_1 ff_DB_int_94 (.Q(DB_int[94]), .CK(ls_clk_memB), .D(dtB[94]), .SI(DB_int[93]), .SE(SE_INB_buf), .RD(flag_dB_bit[94]));
VIRL_SDN_MSDPRB_1 ff_DB_int_93 (.Q(DB_int[93]), .CK(ls_clk_memB), .D(dtB[93]), .SI(DB_int[92]), .SE(SE_INB_buf), .RD(flag_dB_bit[93]));
VIRL_SDN_MSDPRB_1 ff_DB_int_92 (.Q(DB_int[92]), .CK(ls_clk_memB), .D(dtB[92]), .SI(DB_int[91]), .SE(SE_INB_buf), .RD(flag_dB_bit[92]));
VIRL_SDN_MSDPRB_1 ff_DB_int_91 (.Q(DB_int[91]), .CK(ls_clk_memB), .D(dtB[91]), .SI(DB_int[90]), .SE(SE_INB_buf), .RD(flag_dB_bit[91]));
VIRL_SDN_MSDPRB_1 ff_DB_int_90 (.Q(DB_int[90]), .CK(ls_clk_memB), .D(dtB[90]), .SI(DB_int[89]), .SE(SE_INB_buf), .RD(flag_dB_bit[90]));
VIRL_SDN_MSDPRB_1 ff_DB_int_89 (.Q(DB_int[89]), .CK(ls_clk_memB), .D(dtB[89]), .SI(DB_int[88]), .SE(SE_INB_buf), .RD(flag_dB_bit[89]));
VIRL_SDN_MSDPRB_1 ff_DB_int_88 (.Q(DB_int[88]), .CK(ls_clk_memB), .D(dtB[88]), .SI(DB_int[87]), .SE(SE_INB_buf), .RD(flag_dB_bit[88]));
VIRL_SDN_MSDPRB_1 ff_DB_int_87 (.Q(DB_int[87]), .CK(ls_clk_memB), .D(dtB[87]), .SI(DB_int[86]), .SE(SE_INB_buf), .RD(flag_dB_bit[87]));
VIRL_SDN_MSDPRB_1 ff_DB_int_86 (.Q(DB_int[86]), .CK(ls_clk_memB), .D(dtB[86]), .SI(DB_int[85]), .SE(SE_INB_buf), .RD(flag_dB_bit[86]));
VIRL_SDN_MSDPRB_1 ff_DB_int_85 (.Q(DB_int[85]), .CK(ls_clk_memB), .D(dtB[85]), .SI(DB_int[84]), .SE(SE_INB_buf), .RD(flag_dB_bit[85]));
VIRL_SDN_MSDPRB_1 ff_DB_int_84 (.Q(DB_int[84]), .CK(ls_clk_memB), .D(dtB[84]), .SI(DB_int[83]), .SE(SE_INB_buf), .RD(flag_dB_bit[84]));
VIRL_SDN_MSDPRB_1 ff_DB_int_83 (.Q(DB_int[83]), .CK(ls_clk_memB), .D(dtB[83]), .SI(DB_int[82]), .SE(SE_INB_buf), .RD(flag_dB_bit[83]));
VIRL_SDN_MSDPRB_1 ff_DB_int_82 (.Q(DB_int[82]), .CK(ls_clk_memB), .D(dtB[82]), .SI(DB_int[81]), .SE(SE_INB_buf), .RD(flag_dB_bit[82]));
VIRL_SDN_MSDPRB_1 ff_DB_int_81 (.Q(DB_int[81]), .CK(ls_clk_memB), .D(dtB[81]), .SI(DB_int[80]), .SE(SE_INB_buf), .RD(flag_dB_bit[81]));
VIRL_SDN_MSDPRB_1 ff_DB_int_80 (.Q(DB_int[80]), .CK(ls_clk_memB), .D(dtB[80]), .SI(DB_int[79]), .SE(SE_INB_buf), .RD(flag_dB_bit[80]));
VIRL_SDN_MSDPRB_1 ff_DB_int_79 (.Q(DB_int[79]), .CK(ls_clk_memB), .D(dtB[79]), .SI(DB_int[78]), .SE(SE_INB_buf), .RD(flag_dB_bit[79]));
VIRL_SDN_MSDPRB_1 ff_DB_int_78 (.Q(DB_int[78]), .CK(ls_clk_memB), .D(dtB[78]), .SI(DB_int[77]), .SE(SE_INB_buf), .RD(flag_dB_bit[78]));
VIRL_SDN_MSDPRB_1 ff_DB_int_77 (.Q(DB_int[77]), .CK(ls_clk_memB), .D(dtB[77]), .SI(DB_int[76]), .SE(SE_INB_buf), .RD(flag_dB_bit[77]));
VIRL_SDN_MSDPRB_1 ff_DB_int_76 (.Q(DB_int[76]), .CK(ls_clk_memB), .D(dtB[76]), .SI(DB_int[75]), .SE(SE_INB_buf), .RD(flag_dB_bit[76]));
VIRL_SDN_MSDPRB_1 ff_DB_int_75 (.Q(DB_int[75]), .CK(ls_clk_memB), .D(dtB[75]), .SI(DB_int[74]), .SE(SE_INB_buf), .RD(flag_dB_bit[75]));
VIRL_SDN_MSDPRB_1 ff_DB_int_74 (.Q(DB_int[74]), .CK(ls_clk_memB), .D(dtB[74]), .SI(DB_int[73]), .SE(SE_INB_buf), .RD(flag_dB_bit[74]));
VIRL_SDN_MSDPRB_1 ff_DB_int_73 (.Q(DB_int[73]), .CK(ls_clk_memB), .D(dtB[73]), .SI(DB_int[72]), .SE(SE_INB_buf), .RD(flag_dB_bit[73]));
VIRL_SDN_MSDPRB_1 ff_DB_int_72 (.Q(DB_int[72]), .CK(ls_clk_memB), .D(dtB[72]), .SI(DB_int[71]), .SE(SE_INB_buf), .RD(flag_dB_bit[72]));
VIRL_SDN_MSDPRB_1 ff_DB_int_71 (.Q(DB_int[71]), .CK(ls_clk_memB), .D(dtB[71]), .SI(DB_int[70]), .SE(SE_INB_buf), .RD(flag_dB_bit[71]));
VIRL_SDN_MSDPRB_1 ff_DB_int_70 (.Q(DB_int[70]), .CK(ls_clk_memB), .D(dtB[70]), .SI(DB_int[69]), .SE(SE_INB_buf), .RD(flag_dB_bit[70]));
VIRL_SDN_MSDPRB_1 ff_DB_int_69 (.Q(DB_int[69]), .CK(ls_clk_memB), .D(dtB[69]), .SI(DB_int[68]), .SE(SE_INB_buf), .RD(flag_dB_bit[69]));
VIRL_SDN_MSDPRB_1 ff_DB_int_68 (.Q(DB_int[68]), .CK(ls_clk_memB), .D(dtB[68]), .SI(DB_int[67]), .SE(SE_INB_buf), .RD(flag_dB_bit[68]));
VIRL_SDN_MSDPRB_1 ff_DB_int_67 (.Q(DB_int[67]), .CK(ls_clk_memB), .D(dtB[67]), .SI(DB_int[66]), .SE(SE_INB_buf), .RD(flag_dB_bit[67]));
VIRL_SDN_MSDPRB_1 ff_DB_int_66 (.Q(DB_int[66]), .CK(ls_clk_memB), .D(dtB[66]), .SI(DB_int[65]), .SE(SE_INB_buf), .RD(flag_dB_bit[66]));
VIRL_SDN_MSDPRB_1 ff_DB_int_65 (.Q(DB_int[65]), .CK(ls_clk_memB), .D(dtB[65]), .SI(DB_int[64]), .SE(SE_INB_buf), .RD(flag_dB_bit[65]));
VIRL_SDN_MSDPRB_1 ff_DB_int_64 (.Q(DB_int[64]), .CK(ls_clk_memB), .D(dtB[64]), .SI(DB_int[63]), .SE(SE_INB_buf), .RD(flag_dB_bit[64]));
VIRL_SDN_MSDPRB_1 ff_DB_int_63 (.Q(DB_int[63]), .CK(ls_clk_memB), .D(dtB[63]), .SI(DB_int[62]), .SE(SE_INB_buf), .RD(flag_dB_bit[63]));
VIRL_SDN_MSDPRB_1 ff_DB_int_62 (.Q(DB_int[62]), .CK(ls_clk_memB), .D(dtB[62]), .SI(DB_int[61]), .SE(SE_INB_buf), .RD(flag_dB_bit[62]));
VIRL_SDN_MSDPRB_1 ff_DB_int_61 (.Q(DB_int[61]), .CK(ls_clk_memB), .D(dtB[61]), .SI(DB_int[60]), .SE(SE_INB_buf), .RD(flag_dB_bit[61]));
VIRL_SDN_MSDPRB_1 ff_DB_int_60 (.Q(DB_int[60]), .CK(ls_clk_memB), .D(dtB[60]), .SI(DB_int[59]), .SE(SE_INB_buf), .RD(flag_dB_bit[60]));
VIRL_SDN_MSDPRB_1 ff_DB_int_59 (.Q(DB_int[59]), .CK(ls_clk_memB), .D(dtB[59]), .SI(DB_int[58]), .SE(SE_INB_buf), .RD(flag_dB_bit[59]));
VIRL_SDN_MSDPRB_1 ff_DB_int_58 (.Q(DB_int[58]), .CK(ls_clk_memB), .D(dtB[58]), .SI(DB_int[57]), .SE(SE_INB_buf), .RD(flag_dB_bit[58]));
VIRL_SDN_MSDPRB_1 ff_DB_int_57 (.Q(DB_int[57]), .CK(ls_clk_memB), .D(dtB[57]), .SI(DB_int[56]), .SE(SE_INB_buf), .RD(flag_dB_bit[57]));
VIRL_SDN_MSDPRB_1 ff_DB_int_56 (.Q(DB_int[56]), .CK(ls_clk_memB), .D(dtB[56]), .SI(DB_int[55]), .SE(SE_INB_buf), .RD(flag_dB_bit[56]));
VIRL_SDN_MSDPRB_1 ff_DB_int_55 (.Q(DB_int[55]), .CK(ls_clk_memB), .D(dtB[55]), .SI(DB_int[54]), .SE(SE_INB_buf), .RD(flag_dB_bit[55]));
VIRL_SDN_MSDPRB_1 ff_DB_int_54 (.Q(DB_int[54]), .CK(ls_clk_memB), .D(dtB[54]), .SI(DB_int[53]), .SE(SE_INB_buf), .RD(flag_dB_bit[54]));
VIRL_SDN_MSDPRB_1 ff_DB_int_53 (.Q(DB_int[53]), .CK(ls_clk_memB), .D(dtB[53]), .SI(DB_int[52]), .SE(SE_INB_buf), .RD(flag_dB_bit[53]));
VIRL_SDN_MSDPRB_1 ff_DB_int_52 (.Q(DB_int[52]), .CK(ls_clk_memB), .D(dtB[52]), .SI(DB_int[51]), .SE(SE_INB_buf), .RD(flag_dB_bit[52]));
VIRL_SDN_MSDPRB_1 ff_DB_int_51 (.Q(DB_int[51]), .CK(ls_clk_memB), .D(dtB[51]), .SI(DB_int[50]), .SE(SE_INB_buf), .RD(flag_dB_bit[51]));
VIRL_SDN_MSDPRB_1 ff_DB_int_50 (.Q(DB_int[50]), .CK(ls_clk_memB), .D(dtB[50]), .SI(DB_int[49]), .SE(SE_INB_buf), .RD(flag_dB_bit[50]));
VIRL_SDN_MSDPRB_1 ff_DB_int_49 (.Q(DB_int[49]), .CK(ls_clk_memB), .D(dtB[49]), .SI(DB_int[48]), .SE(SE_INB_buf), .RD(flag_dB_bit[49]));
VIRL_SDN_MSDPRB_1 ff_DB_int_48 (.Q(DB_int[48]), .CK(ls_clk_memB), .D(dtB[48]), .SI(DB_int[47]), .SE(SE_INB_buf), .RD(flag_dB_bit[48]));
VIRL_SDN_MSDPRB_1 ff_DB_int_47 (.Q(DB_int[47]), .CK(ls_clk_memB), .D(dtB[47]), .SI(DB_int[46]), .SE(SE_INB_buf), .RD(flag_dB_bit[47]));
VIRL_SDN_MSDPRB_1 ff_DB_int_46 (.Q(DB_int[46]), .CK(ls_clk_memB), .D(dtB[46]), .SI(DB_int[45]), .SE(SE_INB_buf), .RD(flag_dB_bit[46]));
VIRL_SDN_MSDPRB_1 ff_DB_int_45 (.Q(DB_int[45]), .CK(ls_clk_memB), .D(dtB[45]), .SI(DB_int[44]), .SE(SE_INB_buf), .RD(flag_dB_bit[45]));
VIRL_SDN_MSDPRB_1 ff_DB_int_44 (.Q(DB_int[44]), .CK(ls_clk_memB), .D(dtB[44]), .SI(DB_int[43]), .SE(SE_INB_buf), .RD(flag_dB_bit[44]));
VIRL_SDN_MSDPRB_1 ff_DB_int_43 (.Q(DB_int[43]), .CK(ls_clk_memB), .D(dtB[43]), .SI(DB_int[42]), .SE(SE_INB_buf), .RD(flag_dB_bit[43]));
VIRL_SDN_MSDPRB_1 ff_DB_int_42 (.Q(DB_int[42]), .CK(ls_clk_memB), .D(dtB[42]), .SI(DB_int[41]), .SE(SE_INB_buf), .RD(flag_dB_bit[42]));
VIRL_SDN_MSDPRB_1 ff_DB_int_41 (.Q(DB_int[41]), .CK(ls_clk_memB), .D(dtB[41]), .SI(DB_int[40]), .SE(SE_INB_buf), .RD(flag_dB_bit[41]));
VIRL_SDN_MSDPRB_1 ff_DB_int_40 (.Q(DB_int[40]), .CK(ls_clk_memB), .D(dtB[40]), .SI(DB_int[39]), .SE(SE_INB_buf), .RD(flag_dB_bit[40]));
VIRL_SDN_MSDPRB_1 ff_DB_int_39 (.Q(DB_int[39]), .CK(ls_clk_memB), .D(dtB[39]), .SI(DB_int[38]), .SE(SE_INB_buf), .RD(flag_dB_bit[39]));
VIRL_SDN_MSDPRB_1 ff_DB_int_38 (.Q(DB_int[38]), .CK(ls_clk_memB), .D(dtB[38]), .SI(DB_int[37]), .SE(SE_INB_buf), .RD(flag_dB_bit[38]));
VIRL_SDN_MSDPRB_1 ff_DB_int_37 (.Q(DB_int[37]), .CK(ls_clk_memB), .D(dtB[37]), .SI(DB_int[36]), .SE(SE_INB_buf), .RD(flag_dB_bit[37]));
VIRL_SDN_MSDPRB_1 ff_DB_int_36 (.Q(DB_int[36]), .CK(ls_clk_memB), .D(dtB[36]), .SI(DB_int[35]), .SE(SE_INB_buf), .RD(flag_dB_bit[36]));
VIRL_SDN_MSDPRB_1 ff_DB_int_35 (.Q(DB_int[35]), .CK(ls_clk_memB), .D(dtB[35]), .SI(DB_int[34]), .SE(SE_INB_buf), .RD(flag_dB_bit[35]));
VIRL_SDN_MSDPRB_1 ff_DB_int_34 (.Q(DB_int[34]), .CK(ls_clk_memB), .D(dtB[34]), .SI(DB_int[33]), .SE(SE_INB_buf), .RD(flag_dB_bit[34]));
VIRL_SDN_MSDPRB_1 ff_DB_int_33 (.Q(DB_int[33]), .CK(ls_clk_memB), .D(dtB[33]), .SI(DB_int[32]), .SE(SE_INB_buf), .RD(flag_dB_bit[33]));
VIRL_SDN_MSDPRB_1 ff_DB_int_32 (.Q(DB_int[32]), .CK(ls_clk_memB), .D(dtB[32]), .SI(DB_int[31]), .SE(SE_INB_buf), .RD(flag_dB_bit[32]));
VIRL_SDN_MSDPRB_1 ff_DB_int_31 (.Q(DB_int[31]), .CK(ls_clk_memB), .D(dtB[31]), .SI(DB_int[30]), .SE(SE_INB_buf), .RD(flag_dB_bit[31]));
VIRL_SDN_MSDPRB_1 ff_DB_int_30 (.Q(DB_int[30]), .CK(ls_clk_memB), .D(dtB[30]), .SI(DB_int[29]), .SE(SE_INB_buf), .RD(flag_dB_bit[30]));
VIRL_SDN_MSDPRB_1 ff_DB_int_29 (.Q(DB_int[29]), .CK(ls_clk_memB), .D(dtB[29]), .SI(DB_int[28]), .SE(SE_INB_buf), .RD(flag_dB_bit[29]));
VIRL_SDN_MSDPRB_1 ff_DB_int_28 (.Q(DB_int[28]), .CK(ls_clk_memB), .D(dtB[28]), .SI(DB_int[27]), .SE(SE_INB_buf), .RD(flag_dB_bit[28]));
VIRL_SDN_MSDPRB_1 ff_DB_int_27 (.Q(DB_int[27]), .CK(ls_clk_memB), .D(dtB[27]), .SI(DB_int[26]), .SE(SE_INB_buf), .RD(flag_dB_bit[27]));
VIRL_SDN_MSDPRB_1 ff_DB_int_26 (.Q(DB_int[26]), .CK(ls_clk_memB), .D(dtB[26]), .SI(DB_int[25]), .SE(SE_INB_buf), .RD(flag_dB_bit[26]));
VIRL_SDN_MSDPRB_1 ff_DB_int_25 (.Q(DB_int[25]), .CK(ls_clk_memB), .D(dtB[25]), .SI(DB_int[24]), .SE(SE_INB_buf), .RD(flag_dB_bit[25]));
VIRL_SDN_MSDPRB_1 ff_DB_int_24 (.Q(DB_int[24]), .CK(ls_clk_memB), .D(dtB[24]), .SI(DB_int[23]), .SE(SE_INB_buf), .RD(flag_dB_bit[24]));
VIRL_SDN_MSDPRB_1 ff_DB_int_23 (.Q(DB_int[23]), .CK(ls_clk_memB), .D(dtB[23]), .SI(DB_int[22]), .SE(SE_INB_buf), .RD(flag_dB_bit[23]));
VIRL_SDN_MSDPRB_1 ff_DB_int_22 (.Q(DB_int[22]), .CK(ls_clk_memB), .D(dtB[22]), .SI(DB_int[21]), .SE(SE_INB_buf), .RD(flag_dB_bit[22]));
VIRL_SDN_MSDPRB_1 ff_DB_int_21 (.Q(DB_int[21]), .CK(ls_clk_memB), .D(dtB[21]), .SI(DB_int[20]), .SE(SE_INB_buf), .RD(flag_dB_bit[21]));
VIRL_SDN_MSDPRB_1 ff_DB_int_20 (.Q(DB_int[20]), .CK(ls_clk_memB), .D(dtB[20]), .SI(DB_int[19]), .SE(SE_INB_buf), .RD(flag_dB_bit[20]));
VIRL_SDN_MSDPRB_1 ff_DB_int_19 (.Q(DB_int[19]), .CK(ls_clk_memB), .D(dtB[19]), .SI(DB_int[18]), .SE(SE_INB_buf), .RD(flag_dB_bit[19]));
VIRL_SDN_MSDPRB_1 ff_DB_int_18 (.Q(DB_int[18]), .CK(ls_clk_memB), .D(dtB[18]), .SI(DB_int[17]), .SE(SE_INB_buf), .RD(flag_dB_bit[18]));
VIRL_SDN_MSDPRB_1 ff_DB_int_17 (.Q(DB_int[17]), .CK(ls_clk_memB), .D(dtB[17]), .SI(DB_int[16]), .SE(SE_INB_buf), .RD(flag_dB_bit[17]));
VIRL_SDN_MSDPRB_1 ff_DB_int_16 (.Q(DB_int[16]), .CK(ls_clk_memB), .D(dtB[16]), .SI(DB_int[15]), .SE(SE_INB_buf), .RD(flag_dB_bit[16]));
VIRL_SDN_MSDPRB_1 ff_DB_int_15 (.Q(DB_int[15]), .CK(ls_clk_memB), .D(dtB[15]), .SI(DB_int[14]), .SE(SE_INB_buf), .RD(flag_dB_bit[15]));
VIRL_SDN_MSDPRB_1 ff_DB_int_14 (.Q(DB_int[14]), .CK(ls_clk_memB), .D(dtB[14]), .SI(DB_int[13]), .SE(SE_INB_buf), .RD(flag_dB_bit[14]));
VIRL_SDN_MSDPRB_1 ff_DB_int_13 (.Q(DB_int[13]), .CK(ls_clk_memB), .D(dtB[13]), .SI(DB_int[12]), .SE(SE_INB_buf), .RD(flag_dB_bit[13]));
VIRL_SDN_MSDPRB_1 ff_DB_int_12 (.Q(DB_int[12]), .CK(ls_clk_memB), .D(dtB[12]), .SI(DB_int[11]), .SE(SE_INB_buf), .RD(flag_dB_bit[12]));
VIRL_SDN_MSDPRB_1 ff_DB_int_11 (.Q(DB_int[11]), .CK(ls_clk_memB), .D(dtB[11]), .SI(DB_int[10]), .SE(SE_INB_buf), .RD(flag_dB_bit[11]));
VIRL_SDN_MSDPRB_1 ff_DB_int_10 (.Q(DB_int[10]), .CK(ls_clk_memB), .D(dtB[10]), .SI(DB_int[9]), .SE(SE_INB_buf), .RD(flag_dB_bit[10]));
VIRL_SDN_MSDPRB_1 ff_DB_int_9 (.Q(DB_int[9]), .CK(ls_clk_memB), .D(dtB[9]), .SI(DB_int[8]), .SE(SE_INB_buf), .RD(flag_dB_bit[9]));
VIRL_SDN_MSDPRB_1 ff_DB_int_8 (.Q(DB_int[8]), .CK(ls_clk_memB), .D(dtB[8]), .SI(DB_int[7]), .SE(SE_INB_buf), .RD(flag_dB_bit[8]));
VIRL_SDN_MSDPRB_1 ff_DB_int_7 (.Q(DB_int[7]), .CK(ls_clk_memB), .D(dtB[7]), .SI(DB_int[6]), .SE(SE_INB_buf), .RD(flag_dB_bit[7]));
VIRL_SDN_MSDPRB_1 ff_DB_int_6 (.Q(DB_int[6]), .CK(ls_clk_memB), .D(dtB[6]), .SI(DB_int[5]), .SE(SE_INB_buf), .RD(flag_dB_bit[6]));
VIRL_SDN_MSDPRB_1 ff_DB_int_5 (.Q(DB_int[5]), .CK(ls_clk_memB), .D(dtB[5]), .SI(DB_int[4]), .SE(SE_INB_buf), .RD(flag_dB_bit[5]));
VIRL_SDN_MSDPRB_1 ff_DB_int_4 (.Q(DB_int[4]), .CK(ls_clk_memB), .D(dtB[4]), .SI(DB_int[3]), .SE(SE_INB_buf), .RD(flag_dB_bit[4]));
VIRL_SDN_MSDPRB_1 ff_DB_int_3 (.Q(DB_int[3]), .CK(ls_clk_memB), .D(dtB[3]), .SI(DB_int[2]), .SE(SE_INB_buf), .RD(flag_dB_bit[3]));
VIRL_SDN_MSDPRB_1 ff_DB_int_2 (.Q(DB_int[2]), .CK(ls_clk_memB), .D(dtB[2]), .SI(DB_int[1]), .SE(SE_INB_buf), .RD(flag_dB_bit[2]));
VIRL_SDN_MSDPRB_1 ff_DB_int_1 (.Q(DB_int[1]), .CK(ls_clk_memB), .D(dtB[1]), .SI(DB_int[0]), .SE(SE_INB_buf), .RD(flag_dB_bit[1]));
VIRL_SDN_MSDPRB_1 ff_DB_int_0 (.Q(DB_int[0]), .CK(ls_clk_memB), .D(dtB[0]), .SI(SI_DB_buf), .SE(SE_INB_buf), .RD(flag_dB_bit[0]));

VIRL_SDN_BUF_1 buf_SO_CNTRB_out (.X(SO_CNTRB_buf), .A(STICKYB_int));
VIRL_SDN_MSDPRB_1 ff_STICKYB_int (.Q(STICKYB_int), .CK(ls_mclkB), .D(STICKYB_buf), .SI(CAPTB_int), .SE(SE_INB_buf), .RD(flag_stickyB));
VIRL_SDN_MSDPRB_1 ff_CAPTB_int (.Q(CAPTB_int), .CK(ls_mclkB), .D(CAPTB_buf), .SI(CDB_int[3]), .SE(SE_INB_buf), .RD(flag_captB));
wire [3:0] flag_cdB_bit;
assign flag_cdB_bit = flag_cdB_viol & {4{flag_cdB}};
VIRL_SDN_MSDPRB_1 ff_CDB_int_3 (.Q(CDB_int[3]), .CK(ls_mclkB), .D(CDB_buf[3]), .SI(CDB_int[2]), .SE(SE_INB_buf), .RD(flag_cdB_bit[3]));
VIRL_SDN_MSDPRB_1 ff_CDB_int_2 (.Q(CDB_int[2]), .CK(ls_mclkB), .D(CDB_buf[2]), .SI(CDB_int[1]), .SE(SE_INB_buf), .RD(flag_cdB_bit[2]));
VIRL_SDN_MSDPRB_1 ff_CDB_int_1 (.Q(CDB_int[1]), .CK(ls_mclkB), .D(CDB_buf[1]), .SI(CDB_int[0]), .SE(SE_INB_buf), .RD(flag_cdB_bit[1]));
VIRL_SDN_MSDPRB_1 ff_CDB_int_0 (.Q(CDB_int[0]), .CK(ls_mclkB), .D(CDB_buf[0]), .SI(PIPEMEB_int), .SE(SE_INB_buf), .RD(flag_cdB_bit[0]));
VIRL_SDN_MSDPRB_1 ff_PIPEMEB_int (.Q(PIPEMEB_int), .CK(ls_mclkB), .D(PIPEMEB_mout), .SI(MEB_int), .SE(SE_INB_buf), .RD(flag_pipemeB));
VIRL_SDN_MSDPRB_1 ff_MEB_int (.Q(MEB_int), .CK(ls_mclkB), .D(MEB_mout), .SI(WEB_int), .SE(SE_INB_buf), .RD(flag_meB));
VIRL_SDN_MSDPRB_1 ff_WEB_int (.Q(WEB_int), .CK(ls_clk_memB), .D(WEB_mout), .SI(ADRB_int[14]), .SE(SE_INB_buf), .RD(flag_weB));

wire [10:0] flag_addrB_bit;
assign flag_addrB_bit = flag_addrB_viol & {{10{flag_addrB}},{flag_si_cntrB}};

VIRL_SDN_MSDPRB_1 ff_ADRB_int_0 (.Q(ADRB_int[0]), .CK(ls_clk_memB), .D(ADRB_mout[0]), .SI(SI_CNTRB_buf), .SE(SE_INB_buf), .RD(flag_addrB_bit[0]));
VIRL_SDN_MSDPRB_1 ff_ADRB_int_1 (.Q(ADRB_int[1]), .CK(ls_clk_memB), .D(ADRB_mout[1]), .SI(ADRB_int[0]), .SE(SE_INB_buf), .RD(flag_addrB_bit[1]));
VIRL_SDN_MSDPRB_1 ff_ADRB_int_2 (.Q(ADRB_int[2]), .CK(ls_clk_memB), .D(1'b0), .SI(ADRB_int[1]), .SE(SE_INB_buf), .RD(flag_addrB));
VIRL_SDN_MSDPRB_1 ff_ADRB_int_3 (.Q(ADRB_int[3]), .CK(ls_clk_memB), .D(1'b0), .SI(ADRB_int[2]), .SE(SE_INB_buf), .RD(flag_addrB));
VIRL_SDN_MSDPRB_1 ff_ADRB_int_4 (.Q(ADRB_int[4]), .CK(ls_clk_memB), .D(ADRB_mout[2]), .SI(ADRB_int[3]), .SE(SE_INB_buf), .RD(flag_addrB_bit[2]));
VIRL_SDN_MSDPRB_1 ff_ADRB_int_5 (.Q(ADRB_int[5]), .CK(ls_clk_memB), .D(ADRB_mout[3]), .SI(ADRB_int[4]), .SE(SE_INB_buf), .RD(flag_addrB_bit[3]));
VIRL_SDN_MSDPRB_1 ff_ADRB_int_6 (.Q(ADRB_int[6]), .CK(ls_clk_memB), .D(ADRB_mout[4]), .SI(ADRB_int[5]), .SE(SE_INB_buf), .RD(flag_addrB_bit[4]));
VIRL_SDN_MSDPRB_1 ff_ADRB_int_7 (.Q(ADRB_int[7]), .CK(ls_clk_memB), .D(ADRB_mout[5]), .SI(ADRB_int[6]), .SE(SE_INB_buf), .RD(flag_addrB_bit[5]));
VIRL_SDN_MSDPRB_1 ff_ADRB_int_8 (.Q(ADRB_int[8]), .CK(ls_clk_memB), .D(1'b0), .SI(ADRB_int[7]), .SE(SE_INB_buf), .RD(flag_addrB));
VIRL_SDN_MSDPRB_1 ff_ADRB_int_9 (.Q(ADRB_int[9]), .CK(ls_clk_memB), .D(ADRB_mout[6]), .SI(ADRB_int[8]), .SE(SE_INB_buf), .RD(flag_addrB_bit[6]));
VIRL_SDN_MSDPRB_1 ff_ADRB_int_10 (.Q(ADRB_int[10]), .CK(ls_clk_memB), .D(ADRB_mout[7]), .SI(ADRB_int[9]), .SE(SE_INB_buf), .RD(flag_addrB_bit[7]));
VIRL_SDN_MSDPRB_1 ff_ADRB_int_11 (.Q(ADRB_int[11]), .CK(ls_clk_memB), .D(ADRB_mout[8]), .SI(ADRB_int[10]), .SE(SE_INB_buf), .RD(flag_addrB_bit[8]));
VIRL_SDN_MSDPRB_1 ff_ADRB_int_12 (.Q(ADRB_int[12]), .CK(ls_clk_memB), .D(ADRB_mout[9]), .SI(ADRB_int[11]), .SE(SE_INB_buf), .RD(flag_addrB_bit[9]));
VIRL_SDN_MSDPRB_1 ff_ADRB_int_13 (.Q(ADRB_int[13]), .CK(ls_clk_memB), .D(ADRB_mout[10]), .SI(ADRB_int[12]), .SE(SE_INB_buf), .RD(flag_addrB_bit[10]));
VIRL_SDN_MSDPRB_1 ff_ADRB_int_14 (.Q(ADRB_int[14]), .CK(ls_clk_memB), .D(1'b0), .SI(ADRB_int[13]), .SE(SE_INB_buf), .RD(flag_addrB));


initial
begin
disp_LS_msgA = 1'b1;
disp_LS_msgB = 1'b1;
end


// Display the warning when LS is 1.

always @ ( negedge LS_buf )
begin
  disp_LS_msgA = 1'b1;
  disp_LS_msgA_old = 1'b1;
end

always @ (posedge LS_buf or posedge mclkA)
begin : blk_ls_0
  if (LS_buf === 1'b1 && MEA_pre !== 1'b0)
  begin
    if( (MES_CNTRL=="ON" || MES_CNTRL=="WARN") && disp_LS_msgA === 1'b1 )
    begin
      $display("<<VIRL_MEM_WARNING: Port A : No Operation as Memory is in Light Sleep mode.>> time=%0t instance=%m", $time);
      disp_LS_msgA = 1'b0;
    end
  end // if LS = 1
end // end of always block blk_ls_0


// Display the warning when LS is 1.

always @ ( negedge LS_buf )
begin
  disp_LS_msgB = 1'b1;
  disp_LS_msgB_old = 1'b1;
end

always @ (posedge LS_buf or posedge mclkB)
begin : blk_ls_1
  if (LS_buf === 1'b1 && MEB_pre !== 1'b0)
  begin
    if( (MES_CNTRL=="ON" || MES_CNTRL=="WARN") && disp_LS_msgB === 1'b1 )
    begin
      $display("<<VIRL_MEM_WARNING: Port B : No Operation as Memory is in Light Sleep mode.>> time=%0t instance=%m", $time);
      disp_LS_msgB = 1'b0;
    end
  end // if LS = 1
end // end of always block blk_ls_1

wire llsb;


assign llsb = (!(mux_ls) || (RMA_buf[3] || RMB_buf[3]));
always @(RMA_buf[3])
begin
  if(RMA_buf[3] === 1'bx)
  begin
    if( (MES_CNTRL =="ON" || MES_CNTRL == "WARN") && $realtime != 0 && uut.mes_all_valid)
    begin
      $display("<<VIRL_MEM_WARNING:RMA[3] is unknown>> at time=%t; instance=%m (SRAMDP_1920x160_core)",$realtime);
    end
  end
end
always @(RMB_buf[3])
begin
  if(RMB_buf[3] === 1'bx)
  begin
    if( (MES_CNTRL =="ON" || MES_CNTRL == "WARN") && $realtime != 0 && uut.mes_all_valid)
    begin
      $display("<<VIRL_MEM_WARNING:RMB[3] is unknown>> at time=%t; instance=%m (SRAMDP_1920x160_core)",$realtime);
    end
  end
end

real lstime;
always @(posedge LS_buf)
begin
  lstime = $realtime;
  #0;
  if (DFTCLKEN_buf === 1'b1 )
  begin
    flag_dA = 1'bX;
    flag_si_dA = 1'bX;
    flag_si_cntrA = 1'bX;
    flag_weA = 1'bX;
    flag_addrA = 1'bX;
    flag_dB = 1'bX;
    flag_si_dB = 1'bX;
    flag_si_cntrB = 1'bX;
    flag_weB = 1'bX;
    flag_addrB = 1'bX;
  end
end
always @(negedge LS_buf)
begin
  #0;
  if (mclkA === 1'b0 )
  begin
    flag_dA = 1'bX;
    flag_si_dA = 1'bX;
    flag_si_cntrA = 1'bX;
    flag_weA = 1'bX;
    flag_addrA = 1'bX;
  end
end
always @(negedge LS_buf)
begin
  #0;
  if (mclkB === 1'b0 )
  begin
    flag_dB = 1'bX;
    flag_si_dB = 1'bX;
    flag_si_cntrB = 1'bX;
    flag_weB = 1'bX;
    flag_addrB = 1'bX;
  end
end

always @(negedge mclkA or flag_tclke_clkA  )
begin
  if (flag_tclke_clkA === 1'b0 && LS_buf === 1'b0)
  begin
    #0.0;
    if (DFTCLKEN_buf === 1'b1)
    begin
      flag_dA <= 1'b1;
      flag_si_dA <= 1'b1;
      flag_si_cntrA <= 1'b1;
      flag_weA <= 1'b1;
      flag_addrA <= 1'b1;
    end
    else
    begin
      flag_dA = 1'bX;
      flag_si_dA = 1'bX;
      flag_si_cntrA = 1'bX;
      flag_weA = 1'bX;
      flag_addrA = 1'bX;
    end
  end
  if (flag_tclke_clkA === 1'b0)
  begin
    flag_qA <= 1'b1;
    flag_si_qA <= 1'b1;
    flag_stickyA <= 1'b1;
    flag_captA <= 1'b1;
    flag_cdA <= 1'b1;
    flag_pipemeA <= 1'b1;
    flag_meA <= 1'b1;
    flag_dA_viol = {160{1'b1}};
    flag_cdA_viol = {4{1'b1}};
    flag_addrA_viol = {11{1'b1}};
  end
  if (mclkA === 1'bX) 
  begin
  #0;
    flag_stickyA = 1'bX;
    flag_captA = 1'bX;
    flag_cdA = 1'bX;
    flag_pipemeA = 1'bX;
    flag_meA = 1'bX;
    if (sel3A === 1'b1)
    begin
      flag_qA = 1'bX;
      flag_si_qA = 1'bX;
    end
  end
end

always @(negedge ls_clk_memA)
begin
  if (ls_clk_memA === 1'bX)
  begin
    flag_dA = 1'bX;
    flag_si_dA = 1'bX;
    flag_si_cntrA = 1'bX;
    flag_weA = 1'bX;
    flag_addrA = 1'bX;
  end
end
always @(negedge mclkB or flag_tclke_clkB  )
begin
  if (flag_tclke_clkB === 1'b0 && LS_buf === 1'b0)
  begin
    #0.0;
    if (DFTCLKEN_buf === 1'b1)
    begin
      flag_dB <= 1'b1;
      flag_si_dB <= 1'b1;
      flag_si_cntrB <= 1'b1;
      flag_weB <= 1'b1;
      flag_addrB <= 1'b1;
    end
    else
    begin
      flag_dB = 1'bX;
      flag_si_dB = 1'bX;
      flag_si_cntrB = 1'bX;
      flag_weB = 1'bX;
      flag_addrB = 1'bX;
    end
  end
  if (flag_tclke_clkB === 1'b0)
  begin
    flag_qB <= 1'b1;
    flag_si_qB <= 1'b1;
    flag_stickyB <= 1'b1;
    flag_captB <= 1'b1;
    flag_cdB <= 1'b1;
    flag_pipemeB <= 1'b1;
    flag_meB <= 1'b1;
    flag_dB_viol = {160{1'b1}};
    flag_cdB_viol = {4{1'b1}};
    flag_addrB_viol = {11{1'b1}};
  end
  if (mclkB === 1'bX) 
  begin
  #0;
    flag_stickyB = 1'bX;
    flag_captB = 1'bX;
    flag_cdB = 1'bX;
    flag_pipemeB = 1'bX;
    flag_meB = 1'bX;
    if (sel3B === 1'b1)
    begin
      flag_qB = 1'bX;
      flag_si_qB = 1'bX;
    end
  end
end

always @(negedge ls_clk_memB)
begin
  if (ls_clk_memB === 1'bX)
  begin
    flag_dB = 1'bX;
    flag_si_dB = 1'bX;
    flag_si_cntrB = 1'bX;
    flag_weB = 1'bX;
    flag_addrB = 1'bX;
  end
end
always @(posedge mclkA)
begin
  if ( SE_INA_buf === 1'b1 && ((SE_QA_buf === 1'b0 && DFTMASK_buf === 1'b0 && DFTCLKEN_buf === 1'b1) || (DFTCLKEN_buf === 1'b0)))
  begin
      flag_qA = 1'bX;
      flag_si_qA = 1'bX;
  end
end
always @(posedge CLKA_mem) 
begin
  if (DFTMASK_old === 1'b0 && SE_INA_buf !== 0)
  begin
  #0;
    uut.flaga_adr_ok = `False;
    uut.checkSanityOnAport;
    uut.corrupt_all_loc(`True);
    uut.QA = 160'bx;
    uut.QA_local_tmp = 160'bx;
    if (uut.TEST1A_old === 1'b1)
     @(negedge CLKA_mem);
    uut.flaga_read_ok = `False;
    ->uut.ev_read_out_a_port;
  end
end

always @(posedge ls_clk_memA)
begin
  if(SE_INA_buf === 1'bx)
  begin
    uut.report_unknown("SE_INA","","");
  end
  if(SI_CNTRA_buf === 1'bx && SE_INA_buf === 1'b1)
  begin
    uut.report_unknown("SI_CNTRA","","");
  end
  if(SI_DA_buf === 1'bx && SE_INA_buf === 1'b1)
  begin
    uut.report_unknown("SI_DA","","");
  end
end

always @(posedge ls_mclkA)
begin
  if(^CDA_buf === 1'bx && SE_INA_buf === 1'b0)
  begin
    uut.report_unknown("CDA","","");
  end
  if(CAPTA_buf === 1'bx && SE_INA_buf === 1'b0)
  begin
    uut.report_unknown("CAPTA","","");
  end
  if(STICKYA_buf === 1'bx && SE_INA_buf === 1'b0)
  begin
    uut.report_unknown("STICKYA","","");
  end
  if(PIPEMEA_mout === 1'bx && DFTCLKEN_buf === 1'b0 && SE_INA_buf === 1'b0)
  begin
    uut.report_unknown("PIPEMEA","BISTEA","TPIPEMEA");
  end
  if(SE_INA_buf === 1'bx)
  begin
    uut.report_unknown("SE_INA","","");
  end
end

always @(posedge ls_clk_pipA)
begin
  if(SE_QA_buf === 1'bx)
  begin
    uut.report_unknown("SE_QA","","");
  end
  if(SI_QA_buf === 1'bx && SE_QA_buf === 1'b1)
  begin
    uut.report_unknown("SI_QA","","");
  end
end


always @(DFTCLKEN_buf or flag_tclke_clkA or flag_tclke_clkB or LS_old)
begin 
  if(DFTCLKEN_buf === 1'bx)
  begin
    uut.report_unknown("DFTCLKEN","","");
  end
  else if(DFTCLKEN_buf === 1'b0 && (LS_old !== 1'b1 || $realtime == lstime) )
  begin
    flag_dA <= 1'bX;
    flag_si_dA <= 1'bX;
    flag_si_cntrA <= 1'bX;
    flag_weA <= 1'bX;
    flag_addrA <= 1'bX;
    flag_dB <= 1'bX;
    flag_si_dB <= 1'bX;
    flag_si_cntrB <= 1'bX;
    flag_weB <= 1'bX;
    flag_addrB <= 1'bX;
  end
  else if ($realtime != 0 && LS_buf === 1'b0  )
  begin
   #0.0;
    if(DFTCLKEN_buf === 1'b1 && flag_tclke_clkA === 1'b0)
    begin
    flag_dA = 1'b1;
    flag_si_dA = 1'b1;
    flag_si_cntrA = 1'b1;
    flag_weA = 1'b1;
    flag_addrA = 1'b1;
    end
    if(DFTCLKEN_buf === 1'b1 && flag_tclke_clkB === 1'b0)
    begin
    flag_dB = 1'b1;
    flag_si_dB = 1'b1;
    flag_si_cntrB = 1'b1;
    flag_weB = 1'b1;
    flag_addrB = 1'b1;
    end
  end
  #0;
  if (mclkA === 1'b1 && PIPEMEAlatch !== 1'b1)
  begin
    flag_qA = 1'bX;
    flag_si_qA = 1'bX;
  end
  if (mclkB === 1'b1 && PIPEMEBlatch !== 1'b1)
  begin
    flag_qB = 1'bX;
    flag_si_qB = 1'bX;
  end
end

`ifdef VIRAGE_FAST_VERILOG
`else
assign notif_adra = {notif_adra_10, notif_adra_9, notif_adra_8, notif_adra_7, notif_adra_6, notif_adra_5, notif_adra_4, notif_adra_3, notif_adra_2, notif_adra_1, notif_adra_0};
genvar nj;
generate for (nj=0; nj<11; nj=nj+1) 
begin :notif_adra_blk
  always @(notif_adra[nj])     
  begin
  if(LS_old === 1'b0 && SE_INA_buf === 1'b0 && DFTMASK_old === 1'b1)
  begin
    flag_addrA_viol[nj] = 1'bX;
  end
  end
end 
endgenerate
always @(notif_dftclken)
begin : blk_notif_dftclken
  if(LS_old === 1'b0)
  begin
    flag_dA = 1'bX;
    flag_si_dA = 1'bX;
    flag_si_cntrA = 1'bX;
    flag_weA = 1'bX;
    flag_addrA = 1'bX;
  end
  flag_qA = 1'bX;
  flag_si_qA = 1'bX;
end


always @(notif_ls)     
begin : blk_notif_ls
    flag_dA = 1'bX;
    flag_si_dA = 1'bX;
    flag_si_cntrA = 1'bX;
    flag_weA = 1'bX;
    flag_addrA = 1'bX;
    flag_dB = 1'bX;
    flag_si_dB = 1'bX;
    flag_si_cntrB = 1'bX;
    flag_weB = 1'bX;
    flag_addrB = 1'bX;
end



assign notif_da = {notif_da_159, notif_da_158, notif_da_157, notif_da_156, notif_da_155, notif_da_154, notif_da_153, notif_da_152, notif_da_151, notif_da_150, notif_da_149, notif_da_148, notif_da_147, notif_da_146, notif_da_145, notif_da_144, notif_da_143, notif_da_142, notif_da_141, notif_da_140, notif_da_139, notif_da_138, notif_da_137, notif_da_136, notif_da_135, notif_da_134, notif_da_133, notif_da_132, notif_da_131, notif_da_130, notif_da_129, notif_da_128, notif_da_127, notif_da_126, notif_da_125, notif_da_124, notif_da_123, notif_da_122, notif_da_121, notif_da_120, notif_da_119, notif_da_118, notif_da_117, notif_da_116, notif_da_115, notif_da_114, notif_da_113, notif_da_112, notif_da_111, notif_da_110, notif_da_109, notif_da_108, notif_da_107, notif_da_106, notif_da_105, notif_da_104, notif_da_103, notif_da_102, notif_da_101, notif_da_100, notif_da_99, notif_da_98, notif_da_97, notif_da_96, notif_da_95, notif_da_94, notif_da_93, notif_da_92, notif_da_91, notif_da_90, notif_da_89, notif_da_88, 
notif_da_87, notif_da_86, notif_da_85, notif_da_84, notif_da_83, notif_da_82, notif_da_81, notif_da_80, notif_da_79, notif_da_78, notif_da_77, notif_da_76, notif_da_75, notif_da_74, notif_da_73, notif_da_72, notif_da_71, notif_da_70, notif_da_69, notif_da_68, notif_da_67, notif_da_66, notif_da_65, notif_da_64, notif_da_63, notif_da_62, notif_da_61, notif_da_60, notif_da_59, notif_da_58, notif_da_57, notif_da_56, notif_da_55, notif_da_54, notif_da_53, notif_da_52, notif_da_51, notif_da_50, notif_da_49, notif_da_48, notif_da_47, notif_da_46, notif_da_45, notif_da_44, notif_da_43, notif_da_42, notif_da_41, notif_da_40, notif_da_39, notif_da_38, notif_da_37, notif_da_36, notif_da_35, notif_da_34, notif_da_33, notif_da_32, notif_da_31, notif_da_30, notif_da_29, notif_da_28, notif_da_27, notif_da_26, notif_da_25, notif_da_24, notif_da_23, notif_da_22, notif_da_21, notif_da_20, notif_da_19, notif_da_18, notif_da_17, notif_da_16, notif_da_15, notif_da_14, notif_da_13, notif_da_12, notif_da_11, notif_da_10, 
notif_da_9, notif_da_8, notif_da_7, notif_da_6, notif_da_5, notif_da_4, notif_da_3, notif_da_2, notif_da_1, notif_da_0};


generate for (nj=0; nj<160; nj=nj+1)
begin : notif_da_blk
  always @(notif_da[nj])     
begin : blk_notif_di_wem_0
  if(LS_old === 1'b0 && SE_INA_buf === 1'b0 && DFTMASK_old === 1'b1)
  begin
    flag_dA_viol[nj] = 1'bX;
  end
end
end
endgenerate

always @(notif_tda_0)     
begin
  notif_da_0 = ~notif_da_0; 
  notif_da_4 = ~notif_da_4; 
  notif_da_8 = ~notif_da_8; 
  notif_da_12 = ~notif_da_12; 
  notif_da_16 = ~notif_da_16; 
  notif_da_20 = ~notif_da_20; 
  notif_da_24 = ~notif_da_24; 
  notif_da_28 = ~notif_da_28; 
  notif_da_32 = ~notif_da_32; 
  notif_da_36 = ~notif_da_36; 
  notif_da_40 = ~notif_da_40; 
  notif_da_44 = ~notif_da_44; 
  notif_da_48 = ~notif_da_48; 
  notif_da_52 = ~notif_da_52; 
  notif_da_56 = ~notif_da_56; 
  notif_da_60 = ~notif_da_60; 
  notif_da_64 = ~notif_da_64; 
  notif_da_68 = ~notif_da_68; 
  notif_da_72 = ~notif_da_72; 
  notif_da_76 = ~notif_da_76; 
  notif_da_80 = ~notif_da_80; 
  notif_da_84 = ~notif_da_84; 
  notif_da_88 = ~notif_da_88; 
  notif_da_92 = ~notif_da_92; 
  notif_da_96 = ~notif_da_96; 
  notif_da_100 = ~notif_da_100; 
  notif_da_104 = ~notif_da_104; 
  notif_da_108 = ~notif_da_108; 
  notif_da_112 = ~notif_da_112; 
  notif_da_116 = ~notif_da_116; 
  notif_da_120 = ~notif_da_120; 
  notif_da_124 = ~notif_da_124; 
  notif_da_128 = ~notif_da_128; 
  notif_da_132 = ~notif_da_132; 
  notif_da_136 = ~notif_da_136; 
  notif_da_140 = ~notif_da_140; 
  notif_da_144 = ~notif_da_144; 
  notif_da_148 = ~notif_da_148; 
  notif_da_152 = ~notif_da_152; 
  notif_da_156 = ~notif_da_156; 
end
always @(notif_tda_1)     
begin
  notif_da_1 = ~notif_da_1; 
  notif_da_5 = ~notif_da_5; 
  notif_da_9 = ~notif_da_9; 
  notif_da_13 = ~notif_da_13; 
  notif_da_17 = ~notif_da_17; 
  notif_da_21 = ~notif_da_21; 
  notif_da_25 = ~notif_da_25; 
  notif_da_29 = ~notif_da_29; 
  notif_da_33 = ~notif_da_33; 
  notif_da_37 = ~notif_da_37; 
  notif_da_41 = ~notif_da_41; 
  notif_da_45 = ~notif_da_45; 
  notif_da_49 = ~notif_da_49; 
  notif_da_53 = ~notif_da_53; 
  notif_da_57 = ~notif_da_57; 
  notif_da_61 = ~notif_da_61; 
  notif_da_65 = ~notif_da_65; 
  notif_da_69 = ~notif_da_69; 
  notif_da_73 = ~notif_da_73; 
  notif_da_77 = ~notif_da_77; 
  notif_da_81 = ~notif_da_81; 
  notif_da_85 = ~notif_da_85; 
  notif_da_89 = ~notif_da_89; 
  notif_da_93 = ~notif_da_93; 
  notif_da_97 = ~notif_da_97; 
  notif_da_101 = ~notif_da_101; 
  notif_da_105 = ~notif_da_105; 
  notif_da_109 = ~notif_da_109; 
  notif_da_113 = ~notif_da_113; 
  notif_da_117 = ~notif_da_117; 
  notif_da_121 = ~notif_da_121; 
  notif_da_125 = ~notif_da_125; 
  notif_da_129 = ~notif_da_129; 
  notif_da_133 = ~notif_da_133; 
  notif_da_137 = ~notif_da_137; 
  notif_da_141 = ~notif_da_141; 
  notif_da_145 = ~notif_da_145; 
  notif_da_149 = ~notif_da_149; 
  notif_da_153 = ~notif_da_153; 
  notif_da_157 = ~notif_da_157; 
end
always @(notif_tda_2)     
begin
  notif_da_2 = ~notif_da_2; 
  notif_da_6 = ~notif_da_6; 
  notif_da_10 = ~notif_da_10; 
  notif_da_14 = ~notif_da_14; 
  notif_da_18 = ~notif_da_18; 
  notif_da_22 = ~notif_da_22; 
  notif_da_26 = ~notif_da_26; 
  notif_da_30 = ~notif_da_30; 
  notif_da_34 = ~notif_da_34; 
  notif_da_38 = ~notif_da_38; 
  notif_da_42 = ~notif_da_42; 
  notif_da_46 = ~notif_da_46; 
  notif_da_50 = ~notif_da_50; 
  notif_da_54 = ~notif_da_54; 
  notif_da_58 = ~notif_da_58; 
  notif_da_62 = ~notif_da_62; 
  notif_da_66 = ~notif_da_66; 
  notif_da_70 = ~notif_da_70; 
  notif_da_74 = ~notif_da_74; 
  notif_da_78 = ~notif_da_78; 
  notif_da_82 = ~notif_da_82; 
  notif_da_86 = ~notif_da_86; 
  notif_da_90 = ~notif_da_90; 
  notif_da_94 = ~notif_da_94; 
  notif_da_98 = ~notif_da_98; 
  notif_da_102 = ~notif_da_102; 
  notif_da_106 = ~notif_da_106; 
  notif_da_110 = ~notif_da_110; 
  notif_da_114 = ~notif_da_114; 
  notif_da_118 = ~notif_da_118; 
  notif_da_122 = ~notif_da_122; 
  notif_da_126 = ~notif_da_126; 
  notif_da_130 = ~notif_da_130; 
  notif_da_134 = ~notif_da_134; 
  notif_da_138 = ~notif_da_138; 
  notif_da_142 = ~notif_da_142; 
  notif_da_146 = ~notif_da_146; 
  notif_da_150 = ~notif_da_150; 
  notif_da_154 = ~notif_da_154; 
  notif_da_158 = ~notif_da_158; 
end
always @(notif_tda_3)     
begin
  notif_da_3 = ~notif_da_3; 
  notif_da_7 = ~notif_da_7; 
  notif_da_11 = ~notif_da_11; 
  notif_da_15 = ~notif_da_15; 
  notif_da_19 = ~notif_da_19; 
  notif_da_23 = ~notif_da_23; 
  notif_da_27 = ~notif_da_27; 
  notif_da_31 = ~notif_da_31; 
  notif_da_35 = ~notif_da_35; 
  notif_da_39 = ~notif_da_39; 
  notif_da_43 = ~notif_da_43; 
  notif_da_47 = ~notif_da_47; 
  notif_da_51 = ~notif_da_51; 
  notif_da_55 = ~notif_da_55; 
  notif_da_59 = ~notif_da_59; 
  notif_da_63 = ~notif_da_63; 
  notif_da_67 = ~notif_da_67; 
  notif_da_71 = ~notif_da_71; 
  notif_da_75 = ~notif_da_75; 
  notif_da_79 = ~notif_da_79; 
  notif_da_83 = ~notif_da_83; 
  notif_da_87 = ~notif_da_87; 
  notif_da_91 = ~notif_da_91; 
  notif_da_95 = ~notif_da_95; 
  notif_da_99 = ~notif_da_99; 
  notif_da_103 = ~notif_da_103; 
  notif_da_107 = ~notif_da_107; 
  notif_da_111 = ~notif_da_111; 
  notif_da_115 = ~notif_da_115; 
  notif_da_119 = ~notif_da_119; 
  notif_da_123 = ~notif_da_123; 
  notif_da_127 = ~notif_da_127; 
  notif_da_131 = ~notif_da_131; 
  notif_da_135 = ~notif_da_135; 
  notif_da_139 = ~notif_da_139; 
  notif_da_143 = ~notif_da_143; 
  notif_da_147 = ~notif_da_147; 
  notif_da_151 = ~notif_da_151; 
  notif_da_155 = ~notif_da_155; 
  notif_da_159 = ~notif_da_159; 
end


always @(notif_se_ina)     
begin : blk_notif_se_in_0
  if(LS_old === 1'b0)
  begin
    flag_dA = 1'bX;
    flag_si_dA = 1'bX;
    flag_si_cntrA = 1'bX;
    flag_weA = 1'bX;
    flag_addrA = 1'bX;
    flag_dB = 1'bX;
    flag_si_dB = 1'bX;
    flag_si_cntrB = 1'bX;
    flag_weB = 1'bX;
    flag_addrB = 1'bX;
  end
  flag_qA = 1'bX;
  flag_si_qA = 1'bX;
  flag_stickyA = 1'bX;
  flag_captA = 1'bX;
  flag_cdA = 1'bX;
  flag_pipemeA = 1'bX;
  flag_meA = 1'bX;
  flag_qB = 1'bX;
  flag_si_qB = 1'bX;
  flag_stickyB = 1'bX;
  flag_captB = 1'bX;
  flag_cdB = 1'bX;
  flag_pipemeB = 1'bX;
  flag_meB = 1'bX;
end

always @(notif_si_cntra)     
begin : blk_notif_si_cntr_0
  if(LS_old === 1'b0 && SE_INA_buf === 1'b1)
  begin
    flag_si_cntrA = 1'bX;
  end
end

always @(notif_si_da)     
begin : blk_notif_si_d_0
  if(LS_old === 1'b0 && SE_INA_buf === 1'b1)
  begin
    flag_si_dA = 1'bX;
  end
end


always @(notif_wea)
begin : blk_notif_we_me_0
  if((LS_old === 1'b0 && SE_INA_buf === 1'b0 && DFTMASK_old === 1'b1))
  begin
    flag_weA = 1'bX;
  end
end


always @(notif_mea)     
begin : blk_notif_me_0
  if(SE_INA_buf === 1'b0)
  begin
    flag_meA = 1'bX;
  end
end

always @(notif_pipemea)     
begin : blk_notif_pipeme_0
  if(SE_INA_buf === 1'b0)
  begin
    flag_pipemeA = 1'bX;
  end
  if(DFTCLKEN_buf === 1'b0 )
  begin
    flag_qA = 1'bX;
    flag_si_qA = 1'bX;
  end
end

assign notif_cda = {notif_cda_3, notif_cda_2, notif_cda_1, notif_cda_0};

generate for (nj=0; nj<4; nj=nj+1)
begin : notif_cda_blk
  always @(notif_cda[nj])     
  begin
    if(SE_INA_buf === 1'b0)
    begin
      flag_cdA_viol[nj] = 1'bX;
    end
  end
end
endgenerate
always @(notif_capta)     
begin : blk_notif_capt_0
  if(SE_INA_buf === 1'b0)
  begin
    flag_captA = 1'bX;
  end
end

always @(notif_stickya)     
begin : blk_notif_sticky_0
  if(SE_INA_buf === 1'b0)
  begin
    flag_stickyA = 1'bX;
  end
end

always @(notif_se_qa)     
begin : blk_notif_se_q_0
    flag_qA = 1'bX;
    flag_si_qA = 1'bX;
end

always @(notif_si_qa)     
begin : blk_notif_si_q_0
  if(SE_QA_buf === 1'b1)
  begin
    flag_si_qA = 1'bX;
  end
end

always @(notif_clka or notif_tclkea)
begin
  if (LS_old === 1'b0)
  begin
    flag_dA = 1'bX;
    flag_si_dA = 1'bX;
    flag_si_cntrA = 1'bX;
    flag_weA = 1'bX;
    flag_addrA = 1'bX;
  end
  flag_qA = 1'bX;
  flag_si_qA = 1'bX;
  flag_stickyA = 1'bX;
  flag_captA = 1'bX;
  flag_cdA = 1'bX;
  flag_pipemeA = 1'bX;
  flag_meA = 1'bX;
end

always @(notif_bistea)
begin
  if (LS_old === 1'b0)
  begin
    flag_dA = 1'bX;
    flag_si_dA = 1'bX;
    flag_si_cntrA = 1'bX;
    flag_weA = 1'bX;
    flag_addrA = 1'bX;
  end
  flag_qA = 1'bX;
  flag_si_qA = 1'bX;
  flag_pipemeA = 1'bX;
  flag_meA = 1'bX;
end

`endif // endif of VIRAGE_FAST_VERILOG
always @(posedge mclkB)
begin
  if ( SE_INB_buf === 1'b1 && ((SE_QB_buf === 1'b0 && DFTMASK_buf === 1'b0 && DFTCLKEN_buf === 1'b1) || (DFTCLKEN_buf === 1'b0)))
  begin
      flag_qB = 1'bX;
      flag_si_qB = 1'bX;
  end
end
always @(posedge CLKB_mem) 
begin
  if (DFTMASK_old === 1'b0 && SE_INB_buf !== 0)
  begin
  #0;
    uut.flagb_adr_ok = `False;
    uut.checkSanityOnBport;
    uut.corrupt_all_loc(`True);
    uut.QB = 160'bx;
    uut.QB_local_tmp = 160'bx;
    if (uut.TEST1B_old === 1'b1)
     @(negedge CLKB_mem);
    uut.flagb_read_ok = `False;
    ->uut.ev_read_out_b_port;
  end
end

always @(posedge ls_clk_memB)
begin
  if(SE_INB_buf === 1'bx)
  begin
    uut.report_unknown("SE_INB","","");
  end
  if(SI_CNTRB_buf === 1'bx && SE_INB_buf === 1'b1)
  begin
    uut.report_unknown("SI_CNTRB","","");
  end
  if(SI_DB_buf === 1'bx && SE_INB_buf === 1'b1)
  begin
    uut.report_unknown("SI_DB","","");
  end
end

always @(posedge ls_mclkB)
begin
  if(^CDB_buf === 1'bx && SE_INB_buf === 1'b0)
  begin
    uut.report_unknown("CDB","","");
  end
  if(CAPTB_buf === 1'bx && SE_INB_buf === 1'b0)
  begin
    uut.report_unknown("CAPTB","","");
  end
  if(STICKYB_buf === 1'bx && SE_INB_buf === 1'b0)
  begin
    uut.report_unknown("STICKYB","","");
  end
  if(PIPEMEB_mout === 1'bx && DFTCLKEN_buf === 1'b0 && SE_INB_buf === 1'b0)
  begin
    uut.report_unknown("PIPEMEB","BISTEB","TPIPEMEB");
  end
  if(SE_INB_buf === 1'bx)
  begin
    uut.report_unknown("SE_INB","","");
  end
end

always @(posedge ls_clk_pipB)
begin
  if(SE_QB_buf === 1'bx)
  begin
    uut.report_unknown("SE_QB","","");
  end
  if(SI_QB_buf === 1'bx && SE_QB_buf === 1'b1)
  begin
    uut.report_unknown("SI_QB","","");
  end
end


`ifdef VIRAGE_FAST_VERILOG
`else
assign notif_adrb = {notif_adrb_10, notif_adrb_9, notif_adrb_8, notif_adrb_7, notif_adrb_6, notif_adrb_5, notif_adrb_4, notif_adrb_3, notif_adrb_2, notif_adrb_1, notif_adrb_0};
generate for (nj=0; nj<11; nj=nj+1) 
begin :notif_adrb_blk
  always @(notif_adrb[nj])     
  begin
  if(LS_old === 1'b0 && SE_INB_buf === 1'b0 && DFTMASK_old === 1'b1)
  begin
    flag_addrB_viol[nj] = 1'bX;
  end
  end
end 
endgenerate
always @(notif_dftclken_b)
begin : blk_notif_dftclken_b
  if(LS_old === 1'b0)
  begin
    flag_dB = 1'bX;
    flag_si_dB = 1'bX;
    flag_si_cntrB = 1'bX;
    flag_weB = 1'bX;
    flag_addrB = 1'bX;
  end
  flag_qB = 1'bX;
  flag_si_qB = 1'bX;
end


assign notif_db = {notif_db_159, notif_db_158, notif_db_157, notif_db_156, notif_db_155, notif_db_154, notif_db_153, notif_db_152, notif_db_151, notif_db_150, notif_db_149, notif_db_148, notif_db_147, notif_db_146, notif_db_145, notif_db_144, notif_db_143, notif_db_142, notif_db_141, notif_db_140, notif_db_139, notif_db_138, notif_db_137, notif_db_136, notif_db_135, notif_db_134, notif_db_133, notif_db_132, notif_db_131, notif_db_130, notif_db_129, notif_db_128, notif_db_127, notif_db_126, notif_db_125, notif_db_124, notif_db_123, notif_db_122, notif_db_121, notif_db_120, notif_db_119, notif_db_118, notif_db_117, notif_db_116, notif_db_115, notif_db_114, notif_db_113, notif_db_112, notif_db_111, notif_db_110, notif_db_109, notif_db_108, notif_db_107, notif_db_106, notif_db_105, notif_db_104, notif_db_103, notif_db_102, notif_db_101, notif_db_100, notif_db_99, notif_db_98, notif_db_97, notif_db_96, notif_db_95, notif_db_94, notif_db_93, notif_db_92, notif_db_91, notif_db_90, notif_db_89, notif_db_88, 
notif_db_87, notif_db_86, notif_db_85, notif_db_84, notif_db_83, notif_db_82, notif_db_81, notif_db_80, notif_db_79, notif_db_78, notif_db_77, notif_db_76, notif_db_75, notif_db_74, notif_db_73, notif_db_72, notif_db_71, notif_db_70, notif_db_69, notif_db_68, notif_db_67, notif_db_66, notif_db_65, notif_db_64, notif_db_63, notif_db_62, notif_db_61, notif_db_60, notif_db_59, notif_db_58, notif_db_57, notif_db_56, notif_db_55, notif_db_54, notif_db_53, notif_db_52, notif_db_51, notif_db_50, notif_db_49, notif_db_48, notif_db_47, notif_db_46, notif_db_45, notif_db_44, notif_db_43, notif_db_42, notif_db_41, notif_db_40, notif_db_39, notif_db_38, notif_db_37, notif_db_36, notif_db_35, notif_db_34, notif_db_33, notif_db_32, notif_db_31, notif_db_30, notif_db_29, notif_db_28, notif_db_27, notif_db_26, notif_db_25, notif_db_24, notif_db_23, notif_db_22, notif_db_21, notif_db_20, notif_db_19, notif_db_18, notif_db_17, notif_db_16, notif_db_15, notif_db_14, notif_db_13, notif_db_12, notif_db_11, notif_db_10, 
notif_db_9, notif_db_8, notif_db_7, notif_db_6, notif_db_5, notif_db_4, notif_db_3, notif_db_2, notif_db_1, notif_db_0};


generate for (nj=0; nj<160; nj=nj+1)
begin : notif_db_blk
  always @(notif_db[nj])     
begin : blk_notif_di_wem_1
  if(LS_old === 1'b0 && SE_INB_buf === 1'b0 && DFTMASK_old === 1'b1)
  begin
    flag_dB_viol[nj] = 1'bX;
  end
end
end
endgenerate

always @(notif_tdb_0)     
begin
  notif_db_0 = ~notif_db_0; 
  notif_db_4 = ~notif_db_4; 
  notif_db_8 = ~notif_db_8; 
  notif_db_12 = ~notif_db_12; 
  notif_db_16 = ~notif_db_16; 
  notif_db_20 = ~notif_db_20; 
  notif_db_24 = ~notif_db_24; 
  notif_db_28 = ~notif_db_28; 
  notif_db_32 = ~notif_db_32; 
  notif_db_36 = ~notif_db_36; 
  notif_db_40 = ~notif_db_40; 
  notif_db_44 = ~notif_db_44; 
  notif_db_48 = ~notif_db_48; 
  notif_db_52 = ~notif_db_52; 
  notif_db_56 = ~notif_db_56; 
  notif_db_60 = ~notif_db_60; 
  notif_db_64 = ~notif_db_64; 
  notif_db_68 = ~notif_db_68; 
  notif_db_72 = ~notif_db_72; 
  notif_db_76 = ~notif_db_76; 
  notif_db_80 = ~notif_db_80; 
  notif_db_84 = ~notif_db_84; 
  notif_db_88 = ~notif_db_88; 
  notif_db_92 = ~notif_db_92; 
  notif_db_96 = ~notif_db_96; 
  notif_db_100 = ~notif_db_100; 
  notif_db_104 = ~notif_db_104; 
  notif_db_108 = ~notif_db_108; 
  notif_db_112 = ~notif_db_112; 
  notif_db_116 = ~notif_db_116; 
  notif_db_120 = ~notif_db_120; 
  notif_db_124 = ~notif_db_124; 
  notif_db_128 = ~notif_db_128; 
  notif_db_132 = ~notif_db_132; 
  notif_db_136 = ~notif_db_136; 
  notif_db_140 = ~notif_db_140; 
  notif_db_144 = ~notif_db_144; 
  notif_db_148 = ~notif_db_148; 
  notif_db_152 = ~notif_db_152; 
  notif_db_156 = ~notif_db_156; 
end
always @(notif_tdb_1)     
begin
  notif_db_1 = ~notif_db_1; 
  notif_db_5 = ~notif_db_5; 
  notif_db_9 = ~notif_db_9; 
  notif_db_13 = ~notif_db_13; 
  notif_db_17 = ~notif_db_17; 
  notif_db_21 = ~notif_db_21; 
  notif_db_25 = ~notif_db_25; 
  notif_db_29 = ~notif_db_29; 
  notif_db_33 = ~notif_db_33; 
  notif_db_37 = ~notif_db_37; 
  notif_db_41 = ~notif_db_41; 
  notif_db_45 = ~notif_db_45; 
  notif_db_49 = ~notif_db_49; 
  notif_db_53 = ~notif_db_53; 
  notif_db_57 = ~notif_db_57; 
  notif_db_61 = ~notif_db_61; 
  notif_db_65 = ~notif_db_65; 
  notif_db_69 = ~notif_db_69; 
  notif_db_73 = ~notif_db_73; 
  notif_db_77 = ~notif_db_77; 
  notif_db_81 = ~notif_db_81; 
  notif_db_85 = ~notif_db_85; 
  notif_db_89 = ~notif_db_89; 
  notif_db_93 = ~notif_db_93; 
  notif_db_97 = ~notif_db_97; 
  notif_db_101 = ~notif_db_101; 
  notif_db_105 = ~notif_db_105; 
  notif_db_109 = ~notif_db_109; 
  notif_db_113 = ~notif_db_113; 
  notif_db_117 = ~notif_db_117; 
  notif_db_121 = ~notif_db_121; 
  notif_db_125 = ~notif_db_125; 
  notif_db_129 = ~notif_db_129; 
  notif_db_133 = ~notif_db_133; 
  notif_db_137 = ~notif_db_137; 
  notif_db_141 = ~notif_db_141; 
  notif_db_145 = ~notif_db_145; 
  notif_db_149 = ~notif_db_149; 
  notif_db_153 = ~notif_db_153; 
  notif_db_157 = ~notif_db_157; 
end
always @(notif_tdb_2)     
begin
  notif_db_2 = ~notif_db_2; 
  notif_db_6 = ~notif_db_6; 
  notif_db_10 = ~notif_db_10; 
  notif_db_14 = ~notif_db_14; 
  notif_db_18 = ~notif_db_18; 
  notif_db_22 = ~notif_db_22; 
  notif_db_26 = ~notif_db_26; 
  notif_db_30 = ~notif_db_30; 
  notif_db_34 = ~notif_db_34; 
  notif_db_38 = ~notif_db_38; 
  notif_db_42 = ~notif_db_42; 
  notif_db_46 = ~notif_db_46; 
  notif_db_50 = ~notif_db_50; 
  notif_db_54 = ~notif_db_54; 
  notif_db_58 = ~notif_db_58; 
  notif_db_62 = ~notif_db_62; 
  notif_db_66 = ~notif_db_66; 
  notif_db_70 = ~notif_db_70; 
  notif_db_74 = ~notif_db_74; 
  notif_db_78 = ~notif_db_78; 
  notif_db_82 = ~notif_db_82; 
  notif_db_86 = ~notif_db_86; 
  notif_db_90 = ~notif_db_90; 
  notif_db_94 = ~notif_db_94; 
  notif_db_98 = ~notif_db_98; 
  notif_db_102 = ~notif_db_102; 
  notif_db_106 = ~notif_db_106; 
  notif_db_110 = ~notif_db_110; 
  notif_db_114 = ~notif_db_114; 
  notif_db_118 = ~notif_db_118; 
  notif_db_122 = ~notif_db_122; 
  notif_db_126 = ~notif_db_126; 
  notif_db_130 = ~notif_db_130; 
  notif_db_134 = ~notif_db_134; 
  notif_db_138 = ~notif_db_138; 
  notif_db_142 = ~notif_db_142; 
  notif_db_146 = ~notif_db_146; 
  notif_db_150 = ~notif_db_150; 
  notif_db_154 = ~notif_db_154; 
  notif_db_158 = ~notif_db_158; 
end
always @(notif_tdb_3)     
begin
  notif_db_3 = ~notif_db_3; 
  notif_db_7 = ~notif_db_7; 
  notif_db_11 = ~notif_db_11; 
  notif_db_15 = ~notif_db_15; 
  notif_db_19 = ~notif_db_19; 
  notif_db_23 = ~notif_db_23; 
  notif_db_27 = ~notif_db_27; 
  notif_db_31 = ~notif_db_31; 
  notif_db_35 = ~notif_db_35; 
  notif_db_39 = ~notif_db_39; 
  notif_db_43 = ~notif_db_43; 
  notif_db_47 = ~notif_db_47; 
  notif_db_51 = ~notif_db_51; 
  notif_db_55 = ~notif_db_55; 
  notif_db_59 = ~notif_db_59; 
  notif_db_63 = ~notif_db_63; 
  notif_db_67 = ~notif_db_67; 
  notif_db_71 = ~notif_db_71; 
  notif_db_75 = ~notif_db_75; 
  notif_db_79 = ~notif_db_79; 
  notif_db_83 = ~notif_db_83; 
  notif_db_87 = ~notif_db_87; 
  notif_db_91 = ~notif_db_91; 
  notif_db_95 = ~notif_db_95; 
  notif_db_99 = ~notif_db_99; 
  notif_db_103 = ~notif_db_103; 
  notif_db_107 = ~notif_db_107; 
  notif_db_111 = ~notif_db_111; 
  notif_db_115 = ~notif_db_115; 
  notif_db_119 = ~notif_db_119; 
  notif_db_123 = ~notif_db_123; 
  notif_db_127 = ~notif_db_127; 
  notif_db_131 = ~notif_db_131; 
  notif_db_135 = ~notif_db_135; 
  notif_db_139 = ~notif_db_139; 
  notif_db_143 = ~notif_db_143; 
  notif_db_147 = ~notif_db_147; 
  notif_db_151 = ~notif_db_151; 
  notif_db_155 = ~notif_db_155; 
  notif_db_159 = ~notif_db_159; 
end


always @(notif_se_inb)     
begin : blk_notif_se_in_1
  if(LS_old === 1'b0)
  begin
    flag_dA = 1'bX;
    flag_si_dA = 1'bX;
    flag_si_cntrA = 1'bX;
    flag_weA = 1'bX;
    flag_addrA = 1'bX;
    flag_dB = 1'bX;
    flag_si_dB = 1'bX;
    flag_si_cntrB = 1'bX;
    flag_weB = 1'bX;
    flag_addrB = 1'bX;
  end
  flag_qA = 1'bX;
  flag_si_qA = 1'bX;
  flag_stickyA = 1'bX;
  flag_captA = 1'bX;
  flag_cdA = 1'bX;
  flag_pipemeA = 1'bX;
  flag_meA = 1'bX;
  flag_qB = 1'bX;
  flag_si_qB = 1'bX;
  flag_stickyB = 1'bX;
  flag_captB = 1'bX;
  flag_cdB = 1'bX;
  flag_pipemeB = 1'bX;
  flag_meB = 1'bX;
end

always @(notif_si_cntrb)     
begin : blk_notif_si_cntr_1
  if(LS_old === 1'b0 && SE_INB_buf === 1'b1)
  begin
    flag_si_cntrB = 1'bX;
  end
end

always @(notif_si_db)     
begin : blk_notif_si_d_1
  if(LS_old === 1'b0 && SE_INB_buf === 1'b1)
  begin
    flag_si_dB = 1'bX;
  end
end


always @(notif_web)
begin : blk_notif_we_me_1
  if((LS_old === 1'b0 && SE_INB_buf === 1'b0 && DFTMASK_old === 1'b1))
  begin
    flag_weB = 1'bX;
  end
end


always @(notif_meb)     
begin : blk_notif_me_1
  if(SE_INB_buf === 1'b0)
  begin
    flag_meB = 1'bX;
  end
end

always @(notif_pipemeb)     
begin : blk_notif_pipeme_1
  if(SE_INB_buf === 1'b0)
  begin
    flag_pipemeB = 1'bX;
  end
  if(DFTCLKEN_buf === 1'b0 )
  begin
    flag_qB = 1'bX;
    flag_si_qB = 1'bX;
  end
end

assign notif_cdb = {notif_cdb_3, notif_cdb_2, notif_cdb_1, notif_cdb_0};

generate for (nj=0; nj<4; nj=nj+1)
begin : notif_cdb_blk
  always @(notif_cdb[nj])     
  begin
    if(SE_INB_buf === 1'b0)
    begin
      flag_cdB_viol[nj] = 1'bX;
    end
  end
end
endgenerate
always @(notif_captb)     
begin : blk_notif_capt_1
  if(SE_INB_buf === 1'b0)
  begin
    flag_captB = 1'bX;
  end
end

always @(notif_stickyb)     
begin : blk_notif_sticky_1
  if(SE_INB_buf === 1'b0)
  begin
    flag_stickyB = 1'bX;
  end
end

always @(notif_se_qb)     
begin : blk_notif_se_q_1
    flag_qB = 1'bX;
    flag_si_qB = 1'bX;
end

always @(notif_si_qb)     
begin : blk_notif_si_q_1
  if(SE_QB_buf === 1'b1)
  begin
    flag_si_qB = 1'bX;
  end
end

always @(notif_clkb or notif_tclkeb)
begin
  if (LS_old === 1'b0)
  begin
    flag_dB = 1'bX;
    flag_si_dB = 1'bX;
    flag_si_cntrB = 1'bX;
    flag_weB = 1'bX;
    flag_addrB = 1'bX;
  end
  flag_qB = 1'bX;
  flag_si_qB = 1'bX;
  flag_stickyB = 1'bX;
  flag_captB = 1'bX;
  flag_cdB = 1'bX;
  flag_pipemeB = 1'bX;
  flag_meB = 1'bX;
end

always @(notif_bisteb)
begin
  if (LS_old === 1'b0)
  begin
    flag_dB = 1'bX;
    flag_si_dB = 1'bX;
    flag_si_cntrB = 1'bX;
    flag_weB = 1'bX;
    flag_addrB = 1'bX;
  end
  flag_qB = 1'bX;
  flag_si_qB = 1'bX;
  flag_pipemeB = 1'bX;
  flag_meB = 1'bX;
end

`endif // endif of VIRAGE_FAST_VERILOG
reg del_mclkA, del_mclkB;
always @(mclkA)
begin
  if (mclkA === 1'b1)
  begin
    del_mclkA = mclkA && MEA_pre;
    if (TEST1A_buf === 1'b0)
      #3.256 del_mclkA = 1'b0;
  end
  else
  begin
    del_mclkA = mclkA;
  end
end
always @(negedge TEST1A_buf)
begin
  if (mclkA === 1'b1 && TEST1A_buf === 1'b0)
    del_mclkA = 1'b0;
end
always @(mclkB)
begin
  if (mclkB === 1'b1)
  begin
    del_mclkB = mclkB && MEB_pre;
    if (TEST1B_buf === 1'b0)
      #3.256 del_mclkB = 1'b0;
  end
  else
  begin
    del_mclkB = mclkB;
  end
end
always @(negedge TEST1B_buf)
begin
  if (mclkB === 1'b1 && TEST1B_buf === 1'b0)
    del_mclkB = 1'b0;
end
assign LS_old = (del_mclkA === 1'b0 && del_mclkB === 1'b0) ? LS_buf : LS_old;
assign DFTMASK_old = (del_mclkA === 1'b0 && del_mclkB === 1'b0) ? DFTMASK_buf : DFTMASK_old;
assign DFTCLKEN_old = (del_mclkA === 1'b0 && del_mclkB === 1'b0) ? DFTCLKEN_buf : DFTCLKEN_old;
assign CLKA_mem = mclkA && !DFTMASK_latchedA;
assign CLKB_mem = mclkB && !DFTMASK_latchedB;

endmodule
`endcelldefine 
`ifdef verifault 
`disable_portfaults 
`nosuppress_faults 
`endif 


`ifdef VIRAGE_FAST_VERILOG
module generic_behav_SRAMDP_1920x160 (  QA, QB, ADRA, DA, WEA, MEA, CLKA, TCLKA, BISTEA, TEST1A, RMEA, RMA, TCLKEA, DFTMASK, LS, ADRB, DB, WEB, MEB, CLKB, TCLKB, BISTEB, TEST1B, RMEB, RMB, TCLKEB,sim_check_A, sim_check_B );
`else
module generic_behav_SRAMDP_1920x160 (  QA, QB, ADRA, DA, WEA, MEA, CLKA, TCLKA, BISTEA, TEST1A, RMEA, RMA, TCLKEA, DFTMASK, LS, ADRB, DB, WEB, MEB, CLKB, TCLKB, BISTEB, TEST1B, RMEB, RMB, TCLKEB, EVENT_TCQ_A, EVENT_TCQ_B,notif_adra, notif_da, notif_wea, notif_mea, notif_clka, notif_clka_CLKB_rise_rise_rec, notif_clka_TCLKB_rise_rise_rec, notif_bistea, notif_test1a, notif_rmea, notif_rma, notif_tclkea, notif_dftmask, notif_dftmask_b, notif_ls, notif_ls_b, notif_adrb, notif_db, notif_web, notif_meb, notif_clkb, notif_clkb_CLKA_rise_rise_rec, notif_clkb_TCLKA_rise_rise_rec, notif_bisteb, notif_test1b, notif_rmeb, notif_rmb, notif_tclkeb );
`endif // endif of VIRAGE_FAST_VERILOG

parameter MES_CNTRL = "ON";
parameter MemFault_Inj = 0;

parameter words = 1920, bits = 160, addrbits = 11, O_delay=0.0, timingmode = 1, rmbits=3;

output [bits-1:0] QA;
output [bits-1:0] QB;
input [addrbits-1:0] ADRA;
input [bits-1:0] DA;
input WEA;
input MEA;
input CLKA;
input TCLKA;
input BISTEA;
input TEST1A;
input RMEA;
input [rmbits-1:0] RMA;
input TCLKEA;
input DFTMASK;
input LS;
input [addrbits-1:0] ADRB;
input [bits-1:0] DB;
input WEB;
input MEB;
input CLKB;
input TCLKB;
input BISTEB;
input TEST1B;
input RMEB;
input [rmbits-1:0] RMB;
input TCLKEB;

`ifdef VIRAGE_FAST_VERILOG
input sim_check_A, sim_check_B;
`else
input EVENT_TCQ_A;
input EVENT_TCQ_B;
input [10:0] notif_adra;
input [159:0] notif_da;
input [10:0] notif_adrb;
input [159:0] notif_db;
input notif_wea, notif_mea, notif_clka, notif_clka_CLKB_rise_rise_rec, notif_clka_TCLKB_rise_rise_rec, notif_bistea, notif_test1a, notif_rmea, notif_rma, notif_tclkea, notif_dftmask, notif_dftmask_b, notif_ls, notif_ls_b, notif_web, notif_meb, notif_clkb, notif_clkb_CLKA_rise_rise_rec, notif_clkb_TCLKA_rise_rise_rec, notif_bisteb, notif_test1b, notif_rmeb, notif_rmb, notif_tclkeb;

`endif // endif of VIRAGE_FAST_VERILOG

parameter DataX = { bits { 1'bx } };
parameter DataZ = { bits { 1'bz } };


reg  [bits-1:0]  QA;
reg  [bits-1:0]  QB;
reg [addrbits-1:0] ADRAlatched;

reg [addrbits-1:0] ADRA_old;

reg [bits-1:0] DAlatched;

reg [bits-1:0] DA_old;

reg WEAlatched;
reg WEA_old;
reg MEAlatched;
reg MEA_old;
reg TEST1Alatched;
reg TCLKEAlatched;
reg LSlatched;
reg TEST1A_old;
reg [addrbits-1:0] ADRBlatched;

reg [addrbits-1:0] ADRB_old;

reg [bits-1:0] DBlatched;

reg [bits-1:0] DB_old;

reg WEBlatched;
reg WEB_old;
reg MEBlatched;
reg MEB_old;
reg TEST1Blatched;
reg TCLKEBlatched;
reg TEST1B_old;
//reg  [bits-1:0] X_a_corrupt;
reg disp_LS_msg;
reg
  flaga_read_ok,
  flaga_we_ok,
  flaga_d_ok,
  flaga_rm_ok,
  flaga_adr_ok,
  flaga_range_ok;
reg     flaga_clk_valid;
reg     flaga_viol;
event   ev_read_out_a_port;
event   ev_RST_out_a_port;
reg  MEA_chk;
real CLKA_TIME;
real CLKA_T;
wire   [159:0]  QA_temp;
reg    [159:0]  QA_local_tmp;
reg    [159:0]  QA_local_inj;
reg
  flagb_read_ok,
  flagb_we_ok,
  flagb_d_ok,
  flagb_rm_ok,
  flagb_adr_ok,
  flagb_range_ok;
reg     flagb_clk_valid;
reg     flagb_viol;
event   ev_read_out_b_port;
event   ev_RST_out_b_port;
reg  MEB_chk;
real CLKB_TIME;
real CLKB_T;
wire   [159:0]  QB_temp;
reg    [159:0]  QB_local_tmp;
reg    [159:0]  QB_local_inj;
`ifdef VIRAGE_FAST_VERILOG
`else
real tcqa_time;

always @(negedge EVENT_TCQ_A)
begin : blk_negtcqevent_0
  tcqa_time = $realtime;
end // end of always block blk_negtcqevent_0
`endif // endif of VIRAGE_FAST_VERILOG
reg mes_all_valid;
integer i;
reg  [bits-1:0] mem_core_array [0:words -1];
reg [159:0] mem_core_array_read [0:1919];
reg [bits - 1:0] mem_core_rowA;
reg  [bits-1:0] mem_fault_array_XOR [0:words -1];
reg  [bits-1:0] mem_fault_array_sa0 [0:words -1];
reg  [bits-1:0] mem_fault_array_sa1 [0:words -1];
reg faultinj_en;
initial
begin
  faultinj_en = 1'b0;
`ifdef MEMFAULTINJ
  faultinj_en = 1'b1;
`else
  if (MemFault_Inj == 1)
    faultinj_en = 1'b1;
`endif
  for (i=0; i< words ; i=i+1)
  begin
    if (faultinj_en == 1)
      mem_fault_array_XOR[i]=0;
    else
    begin
      mem_fault_array_sa0[i]={bits{1'b1}};
      mem_fault_array_sa1[i]=0;
    end
  end
  if (faultinj_en == 1)
  begin
    if ($test$plusargs("asap_error"))
    mem_fault_array_XOR[1] = 1'b1 << (bits - 1);
  end 
end

`ifdef VIRAGE_FAST_VERILOG
`else
real tcqb_time;

always @(negedge EVENT_TCQ_B)
begin : blk_negtcqevent_1
  tcqb_time = $realtime;
end // end of always block blk_negtcqevent_1
`endif // endif of VIRAGE_FAST_VERILOG


// Checks whether address input is Valid; 1-bit return value
function is_adr_Valid;  
input [addrbits-1:0] addr_to_check;
reg     ret_value;
begin
  ret_value = `True;
  if ((^addr_to_check) === 1'bx)
  begin
    ret_value = `False;
  end // if addr_to_check is X
  is_adr_Valid = ret_value;
end
endfunction

// -------------------------------------------------------------------
// Common tasks
// -------------------------------------------------------------------

// Task to report unknown messages
task report_unknown;
input [8*8:1] signal;
input [8*8:1] bsignal;
input [8*8:1] tsignal;
reg bist_reg;
begin
  if ( bsignal !== "" )
  begin
    if ( bsignal == "BISTEA" )
      bist_reg = BISTEA;
    else if ( bsignal == "TCLKEA" )
      bist_reg = TCLKEA;
    else if ( bsignal == "TCLKEB" )
      bist_reg = TCLKEB;
    else
      bist_reg = BISTEB;

    if( (MES_CNTRL=="ON" || MES_CNTRL=="ERR") && $realtime != 0 && mes_all_valid)
    begin
      if ( bist_reg === 1'b0 )
        $display("<<VIRL_MEM_ERR: %0s unknown>> at time=%t; instance=%m (RAMS1H)",signal,$realtime);
      else if ( bist_reg === 1'b1 )
        $display("<<VIRL_MEM_ERR: %0s unknown>> at time=%t; instance=%m (RAMS1H)",tsignal,$realtime);
    end
  end
  else
    if( (MES_CNTRL=="ON" || MES_CNTRL=="ERR") && $realtime != 0 && mes_all_valid )
    begin
      $display("<<VIRL_MEM_ERR:%0s unknown>> at time=%t; instance=%m (RAMS1H)",signal,$realtime);
    end
end
endtask


// Corrupt Current Location
task corrupt_cur_loc;
input[10:0] Adr_to_corrupt;
integer cnt;
begin
  if (is_adr_Valid (Adr_to_corrupt))
  begin
    mem_core_array[Adr_to_corrupt] = 160'bx;
  end // if of is_adr_Valid (Adr_to_corrupt)
  else
  begin
      corrupt_all_loc(`True);
  end // else of if is_adr_Valid (Adr_to_corrupt)
end
endtask

// Corrupt Entire memory; Do not corrupt entire memory if address is out of range
// during Write; For all other cases, if flag_range_ok is true, corrupt entire memory
task corrupt_all_loc;
input flag_range_ok;
integer row_index;
begin
  if( flag_range_ok == `True)
  begin
    for( row_index = 0; row_index < words ; row_index = row_index + 1)
    begin
      mem_core_array[row_index] = 160'bx;
    end // end of for row_index loop
  end // if of flag_range_ok is true
end
endtask



        

// Perform Sanity Check on Port A, Corrupt memory if required

task checkSanityOnAport;
begin

  #0;                // let CLOCK and NOTIFIER stuff execute first
  case ( {flaga_adr_ok, flaga_we_ok, flaga_d_ok} ) // only 1 and 0
    3'b111   : ;                                                // everything ok!!!
    3'b101,
    3'b100   : corrupt_cur_loc(ADRAlatched);          // WE is unstable
    3'b110   : if (WEAlatched !== 1'b0)
                 corrupt_cur_loc(ADRAlatched);         // Data is unstable
    3'b000,
    3'b001   : corrupt_all_loc(flaga_range_ok);            // ADR and WE unstable
    3'b010,
    3'b011   : corrupt_all_loc(flaga_range_ok);    // ADR unstable, WE stable
  endcase
 end
endtask // end of task checkSanityOnAport

// PORT A FUNCTIONALITY (Handle violation behavior)


initial
begin
  mes_all_valid = 1'b0;
  flaga_adr_ok  = `True;
  flaga_range_ok = `True;
  flaga_we_ok   = `True;
  flaga_d_ok    = `True;
  flaga_read_ok = `True;
  flaga_rm_ok = `True;
  flaga_viol = `False;
  flaga_clk_valid = `True;
   disp_LS_msg = 1'b1;
end // end of initial block

// Perform Sanity Check on Port B, Corrupt memory if required

task checkSanityOnBport;
begin

  #0;                // let CLOCK and NOTIFIER stuff execute first
  case ( {flagb_adr_ok, flagb_we_ok, flagb_d_ok} ) // only 1 and 0
    3'b111   : ;                                                // everything ok!!!
    3'b101,
    3'b100   : corrupt_cur_loc(ADRBlatched);          // WE is unstable
    3'b110   : if (WEBlatched !== 1'b0)
                 corrupt_cur_loc(ADRBlatched);         // Data is unstable
    3'b000,
    3'b001   : corrupt_all_loc(flagb_range_ok);            // ADR and WE unstable
    3'b010,
    3'b011   : corrupt_all_loc(flagb_range_ok);    // ADR unstable, WE stable
  endcase
 end
endtask // end of task checkSanityOnBport

// PORT B FUNCTIONALITY (Handle violation behavior)


initial
begin
  mes_all_valid = 1'b0;
  flagb_adr_ok  = `True;
  flagb_range_ok = `True;
  flagb_we_ok   = `True;
  flagb_d_ok    = `True;
  flagb_read_ok = `True;
  flagb_rm_ok = `True;
  flagb_viol = `False;
  flagb_clk_valid = `True;
end // end of initial block

// For Zerohold of ADRA pin
always @( negedge CLKA or ADRA )
begin : blk_addrhold_0
  if ( CLKA == 1'b0 )
  begin
    ADRA_old <= ADRA;
  end // if of CLKA = 0
end // end of always block blk_addrhold_0
// For Zerohold of DA pin
always @( negedge CLKA or DA )
begin : blk_dihold_0
  if ( CLKA == 1'b0 )
  begin
    DA_old <= DA;
  end // if of CLKA = 0
end // end of always block blk_dihold_0
// For Zerohold of WEA pin
always @( negedge CLKA or WEA )
begin : blk_wehold_0
  if ( CLKA == 1'b0 )
  begin
    WEA_old <= WEA;
  end // if of CLKA = 0
end // end of always block blk_wehold_0
// For Zerohold of MEA pin
always @( negedge CLKA or MEA or LS or DFTMASK )
begin : blk_mehold_0
  if ( CLKA == 1'b0 )
  begin
    if ((DFTMASK === 1'b1) || (LS === 1'b1 && MEA !== 1'bx))
      MEA_old <= 1'b0;
    else
      MEA_old <= MEA;
  end // if of CLKA = 0
end // end of always block blk_mehold_0
// For Zerohold of Test1 pin
always @( negedge CLKA or TEST1A )
begin : blk_test1hold_0
  if ( CLKA == 1'b0 )
  begin
    TEST1A_old <= TEST1A;
  end // if of CLKA = 0
end // end of always block blk_test1hold_0


reg LSA_old;
always @( negedge CLKA or LS )
begin : blk_lshold_0
  if (CLKA == 1'b0)
  begin
    LSA_old <= LS;
  end
end // end of always block blk_lshold_0
// For Zerohold of ADRB pin
always @( negedge CLKB or ADRB )
begin : blk_addrhold_1
  if ( CLKB == 1'b0 )
  begin
    ADRB_old <= ADRB;
  end // if of CLKB = 0
end // end of always block blk_addrhold_1
// For Zerohold of DB pin
always @( negedge CLKB or DB )
begin : blk_dihold_1
  if ( CLKB == 1'b0 )
  begin
    DB_old <= DB;
  end // if of CLKB = 0
end // end of always block blk_dihold_1
// For Zerohold of WEB pin
always @( negedge CLKB or WEB )
begin : blk_wehold_1
  if ( CLKB == 1'b0 )
  begin
    WEB_old <= WEB;
  end // if of CLKB = 0
end // end of always block blk_wehold_1
// For Zerohold of MEB pin
always @( negedge CLKB or MEB or LS or DFTMASK )
begin : blk_mehold_1
  if ( CLKB == 1'b0 )
  begin
    if ((DFTMASK === 1'b1) || (LS === 1'b1 && MEB !== 1'bx))
      MEB_old <= 1'b0;
    else
      MEB_old <= MEB;
  end // if of CLKB = 0
end // end of always block blk_mehold_1
// For Zerohold of Test1 pin
always @( negedge CLKB or TEST1B )
begin : blk_test1hold_1
  if ( CLKB == 1'b0 )
  begin
    TEST1B_old <= TEST1B;
  end // if of CLKB = 0
end // end of always block blk_test1hold_1


reg LSB_old;
always @( negedge CLKB or LS )
begin : blk_lshold_1
  if (CLKB == 1'b0)
  begin
    LSB_old <= LS;
  end
end // end of always block blk_lshold_1

`ifdef VIRAGE_FAST_VERILOG
`else
// PORT A WE violation
always @(notif_wea)           
begin : blk_notif_we_0
if (DFTMASK === 1'b0)
begin
    if ( WEA_old === 1'b0)
    begin
      flaga_viol = `True;
    end // if of WEA_old = 0
    flaga_we_ok = `False;
    checkSanityOnAport;
    if (^(ADRA_old) === 1'bx)
    begin
      corrupt_all_loc(`True);
    end 
    flaga_read_ok = `False;
    -> ev_read_out_a_port;
    QA_local_tmp = 160'bx;
  end // if of DFTMASK
end // end of always block blk_notif_we_0

// PORT A CLKA violation
always @(notif_clka)
begin : blk_notif_clk_0
if (DFTMASK === 1'b0)
begin
  flaga_clk_valid = `False;
  MEB_chk = MEB_old;
  if ( EVENT_TCQ_B == 1'b1 && MEB_chk === 1'b1 )
  begin
    disable blk_readout_1.OUTPUT_b;
    flagb_read_ok = `False;
    -> ev_read_out_b_port;
  end 
  flaga_adr_ok = `False;
  flaga_we_ok  = `False;
     corrupt_all_loc(`True);
  flaga_read_ok = `False;     // irrespective of WE
  -> ev_read_out_a_port;
  end // if of dftmask = 0
end // end of always block blk_notif_clk_0

// PORT A ME violation
always @(notif_mea)           
begin : blk_notif_me_0
if (DFTMASK === 1'b0)
begin
  if (((WEAlatched === 1'b1)) && (EVENT_TCQ_B == 1'b1 || (tcqb_time == $realtime)))
  begin
    disable blk_readout_1.OUTPUT_b;
    flagb_read_ok = `False;
    -> ev_read_out_b_port;
  end // if of write
    flaga_viol = `True;
    flaga_read_ok = `False;                           
    -> ev_read_out_a_port;
    flaga_adr_ok = `False;
    corrupt_all_loc(`True);
end // if of DFTMASK 
end // end of always block blk_notif_me_0

// PORT A ADR violation
always @(notif_adra)     
begin : blk_notif_addr_0
if (DFTMASK === 1'b0)
begin
   MEB_chk = MEB_old;
   if (MEB_chk === 1'b1 && ((WEAlatched === 1'b1)) && (EVENT_TCQ_B == 1'b1 || (tcqb_time == $realtime)))
    begin
      disable blk_readout_1.OUTPUT_b;
      flagb_read_ok = `False;
      -> ev_read_out_b_port;
    end // if of write
      flaga_viol = `True;
      flaga_read_ok = `False;                         
      -> ev_read_out_a_port;
      flaga_adr_ok = `False;
      corrupt_all_loc(`True);
end // if of DFTMASK 
end // end of always block blk_notif_addr_0

// PORT A D violation
always @(notif_da)     
begin : blk_notif_di_0
if (DFTMASK === 1'b0)
begin
    flaga_viol = `True;
    flaga_read_ok = `False;
    -> ev_read_out_a_port;
    flaga_d_ok = `False;
    checkSanityOnAport;
end // if of DFTMASK 
end // end of always block blk_notif_di_0
// PORT A BISTEA violation
always @(notif_bistea or notif_tclkea)  
begin : blk_notif_biste_0 
if (DFTMASK === 1'b0)
begin
    flaga_read_ok = `False;
    -> ev_read_out_a_port;
    flaga_adr_ok  = `False;
    checkSanityOnAport;
end // if of DFTMASK 
end // end of always block blk_notif_biste_0

always @(notif_dftmask)
begin : blk_notif_dftmask_0
    corrupt_all_loc(`True);
    #0.001;
    flaga_read_ok = `False;
    -> ev_read_out_a_port;
end


//PORT A TEST1A violation
always @(notif_test1a)   
begin : blk_notif_test1_0
//  MEA_chk = MEA_old;
  if ( WEAlatched === 1'b0 )
  begin
    flaga_viol = `True;
    flaga_read_ok = `False;
    -> ev_read_out_a_port;
  end
  else if ( WEAlatched === 1'b1 )
  begin
    flaga_d_ok  = `False;
    checkSanityOnAport;
  end
end // end of always block blk_notif_test1_0

always @(notif_ls)
begin
  corrupt_all_loc(`True);
  flaga_read_ok = `False;
  -> ev_read_out_a_port;
end

//PORT A RMA violation
always @(notif_rma)       
begin : blk_notif_rm_0
    flaga_viol = `True;
    flaga_read_ok = `False;
    -> ev_read_out_a_port;
    flaga_d_ok  = `False;
    checkSanityOnAport;
end // end of always block blk_notif_rm_0

//PORT A RME violation
always @(notif_rmea)  
begin : blk_notif_rmen_0
    flaga_viol = `True;
    flaga_read_ok = `False;
    -> ev_read_out_a_port;
    flaga_d_ok  = `False;
    checkSanityOnAport;
end // end of always block blk_notif_rmen_0
`endif // endif of VIRAGE_FAST_VERILOG

// Simultaneous Clock Handling
`ifdef VIRAGE_FAST_VERILOG
always @(sim_check_A)
begin : blk_simultclock_0
`else
always @(notif_clka_CLKB_rise_rise_rec or notif_clka_TCLKB_rise_rise_rec)
begin : blk_simultclock_0
`endif // endif of VIRAGE_FAST_VERILOG
      if ( WEAlatched !== 1'b0 && WEB_old  !== 1'b0 )
      begin
        flaga_d_ok = `False;
        flagb_d_ok = `False;
        mem_core_array[ADRAlatched] = (((DAlatched ^ DB_old) & 160'bx) ^ DAlatched);
      end // if write enable is not disabled for both ports
      else if ( WEAlatched !== 1'b0)
      begin
        #0;
        flagb_viol = `True;
        flagb_read_ok = `False;
       if ( TEST1Blatched === 1'b0)
        -> ev_read_out_b_port;
      end // else if of WEAlatched != 0
      else 
      begin
        flaga_read_ok = `False;
       if ( TEST1Alatched === 1'b0)
        -> ev_read_out_a_port;
      end // else if of WEB_old  != 0
end // end of always block blk_simultclock_0


// reset for next cycle

always @(negedge CLKA)
begin : blk_intnegclock_0
  if ( CLKA !== 1'bx )
  begin
    #0.001;
    flaga_range_ok  = `True;
    flaga_read_ok = `True;
    flaga_rm_ok = `True;
    flaga_clk_valid = `True;
    flaga_adr_ok  = `True;
    flaga_we_ok   = `True;
    flaga_d_ok    = `True;
    flaga_viol    = `False;
  end // if of CLKA != X
  else
  begin
    flaga_clk_valid = `False;
    QA_local_tmp = 160'bx;
    corrupt_all_loc(`True);
    report_unknown("CLKA","TCLKEA","TCLKA");
  end // else of if CLKA != X
end // end of always block blk_intnegclock_0

// PORT A FUNCTIONALITY 


always @(posedge CLKA)
begin : blk_intposclock_0
  CLKA_T = $realtime;
  MEAlatched = MEA_old;
  WEAlatched = WEA_old;
  TEST1Alatched = TEST1A_old;
  ADRAlatched = ADRA_old;
  DAlatched = DA_old;
  if (DFTMASK === 1'b1 || (LSA_old === 1'b1 && MEAlatched !== 1'bx))
  begin
    MEAlatched = 1'b0;
  end
  if (LSA_old === 1'bX && MEAlatched !== 1'b0)
  begin
    report_unknown("LS","","");
    corrupt_all_loc(`True);
    QA_local_tmp = 160'bx;
  end
  else
  begin
    if (^(ADRAlatched) === 1'bx && MEAlatched !== 1'b0)
    begin
      report_unknown("ADRA","BISTEA","TADRA");
      if ( WEAlatched === 1'b1 )
      begin
        flaga_viol = `True;
      end // if of WEAlatched = 1
      else
      begin
        flaga_read_ok = `False;
      end
      `ifdef virage_ignore_read_addx
      if ((WEAlatched === 1'b1))
      begin
        flaga_adr_ok = `False;
        corrupt_all_loc(flaga_range_ok);
      end // if of write
      `else
        flaga_adr_ok = `False;
        corrupt_all_loc(flaga_range_ok);
      `endif // endif of virage_ignore_read_addx is true
      -> ev_RST_out_a_port;
    end // if of (^ADRAlatched) is 1'bx and MEAlatched != 0
    else if((ADRAlatched > 11'b11101111111) && (MEAlatched === 1'b1) && (WEAlatched === 1'b1) )
    begin
      if( (MES_CNTRL=="ON" || MES_CNTRL=="WARN")&& $realtime != 0 && mes_all_valid)
      begin
        $display("\n%m<<VIRL_MEM_WARNING:address is out of range>>(time %0t)\n RANGE: 0 to 1919\n", $time);
      end
      flaga_range_ok = `False;
    end // if of ADRAlatched out of range with MEAlatched = 1
    if (!flaga_clk_valid) 
    begin
      QA_local_tmp = 160'bx;
    end // if of flaga_clk_valid is NOT true
    else if ( CLKA === 1'bx )
    begin
      QA_local_tmp = 160'bx;
      corrupt_all_loc(flaga_range_ok);
      report_unknown("CLKA","TCLKEA","TCLKA");
    end // if of CLKA = X
    else if ( DFTMASK === 1'bx )
    begin
      uut.report_unknown("DFTMASK","","");
    end // if of DFTMASK = X
    else
    begin
      -> ev_RST_out_a_port;
    end // else of if CLKA = X
  end // else of if power pin unknown 
end // end of always block blk_intposclock_0
// PORT A READ-OUT

always @(ev_read_out_a_port)
begin : blk_readout_0
  #0;                // let CLOCK and NOTIFIER module execute first
  if (RMEA === 1'b1)
  begin
    if (RMA >= 3'b100)
    begin
      if( (MES_CNTRL =="ON" || MES_CNTRL =="WARN") && $realtime != 0 && mes_all_valid)
      begin
      $display("<<VIRL_MEM_WARNING:RMA = %b is not recommended value>> at time=%t; instance=%m (RAMS1H)",RMA,$realtime);
      end
    end
  end
  if (^RMA === 1'bx)
  begin
    flaga_rm_ok = `False;
  end // if of RMA is not valid
  if (flaga_adr_ok && flaga_read_ok && flaga_rm_ok)
  begin : OUTPUT_a
    if (WEAlatched === 1'b0)
    begin
      if (ADRAlatched <= 11'b11101111111)
      begin
          
          if (faultinj_en == 1)
          begin
            QA_local_tmp = mem_core_array[ADRAlatched]^mem_fault_array_XOR[ADRAlatched];
          end
          else
          begin
            QA_local_inj = mem_core_array[ADRAlatched] & mem_fault_array_sa0[ADRAlatched];
            QA_local_inj = QA_local_inj | mem_fault_array_sa1[ADRAlatched];
            QA_local_tmp = QA_local_inj;
          end
      end // if of ADRAlatched <= 11'b11101111111
    end // if of WEAlatched = 0
  end //if of flaga_adr_ok is true and flaga_read_ok is true and flaga_rm_ok is true
  else
  begin
    if (flaga_viol)
    begin
      if ((WEAlatched === 1'b0))
      begin
        QA_local_tmp = 160'bx;
      end  // if of read
    end // if of flaga_viol is true
    else
    begin
      QA_local_tmp = 160'bx;
    end // else of if flaga_viol is true
  end // else of if flaga_adr_ok is true and flaga_read_ok is true and flaga_rm_ok is true
  flaga_read_ok = `True;
end // end of always block blk_readout_0

// Handle Read/Write
always @(ev_RST_out_a_port)
begin : blk_readwrite_0
    if (MEAlatched !== 1'b0 && !flaga_viol)
    begin
      if (WEAlatched === 1'bx)
      begin
        flaga_we_ok = `False;
        flaga_read_ok = `False;
        report_unknown("WEA","BISTEA","TWEA");
      end // if of WEAlatched = X
      if ((^DAlatched === 1'bx))
      begin
        if (DAlatched === 160'bx)
        begin
          flaga_d_ok  = `False;
        end
        if (WEAlatched !== 1'b0)
        begin
          report_unknown("DA","BISTEA","TDA");
        end
      end
          if (TEST1Alatched === 1'bx)
          begin
            report_unknown("TEST1A","","");
            if ( WEAlatched == 1'b1 )
            begin
              corrupt_cur_loc(ADRAlatched);                             
            end // if of WEAlatched = 1
            else
            begin
              QA_local_tmp = 160'bx;
            end // else of if WEAlatched = 1
          end // if TEST1Alatched = X
          else
          begin
                if (^RMA === 1'bx)
                begin
                  if ( RMEA !== 1'bx )
                    report_unknown("RMA","","");
                  else
                    report_unknown("RMEA","","");
                  if ( WEAlatched == 1'b1 )
                  begin
                    corrupt_cur_loc(ADRAlatched);
                  end // if of WEAlatched = 1
                  else
                  begin
                    QA_local_tmp = 160'bx;
                  end // else of if WEAlatched = 1
                end // if of RMA = X
                else
                begin
                  if (MEAlatched !== 1'b1)
                  begin
                    flaga_we_ok = `False;       // don't know if cycle is On or Off
                  end // if of MEAlatched != 1 

                  if(ADRAlatched > 11'b11101111111) 
                  begin
                    if( (MES_CNTRL=="ON" || MES_CNTRL=="WARN") && $realtime != 0 && mes_all_valid)
                    begin
                      $display("\n%m<<VIRL_MEM_WARNING:address is out of range>>(time %0t)\n RANGE:0 to 1919\n", $time);
                    end
                    flaga_range_ok = `False;
                    if (WEAlatched === 1'b0)
                    begin
                      flaga_read_ok = `False;
                    end // if of flaga_read_ok
                  end // if of ADRAlatched out of range with MEAlatched = 1
                  if ( MEAlatched === 1'bx )
                  begin
                    report_unknown("MEA","BISTEA","TMEA");
                    `ifdef virage_ignore_read_addx
                    if (WEAlatched == 1'b1)
                    begin
                      corrupt_all_loc(flaga_range_ok);
                    end // if of WEAlatched = 1 
                    else
                    begin
                      QA_local_tmp = 160'bx;
                    end // else of if WEAlatched = 1
                    `else
                    if (WEAlatched == 1'b1)
                    begin
                      corrupt_all_loc(flaga_range_ok);
                    end // if of WEAlatched = 1
                    else
                    begin
                      QA_local_tmp = 160'bx;
                      corrupt_all_loc(flaga_range_ok);
                    end // else of if WEAlatched = 1
                    `endif
                  end // if of MEAlatched = X
                  else
                  begin
                      if (flaga_range_ok && flaga_we_ok && flaga_adr_ok && flaga_d_ok && (WEAlatched == 1'b1))
                      begin
                        
                        mem_core_array[ADRAlatched] = DAlatched;
                          if (!mes_all_valid)
                          begin
                            mes_all_valid = 1'b1;
                          end // if of mes_all_valid = 0
                      end // if of write
                      else
                      begin
                        checkSanityOnAport;
                      end // else of if write
                  if (TEST1Alatched === 1'b1)
                  begin
                     if (WEAlatched === 1'b0)
                     begin
                       flaga_read_ok = `False;
                       -> ev_read_out_a_port;
                       @(negedge CLKA);
                     end
                     if (DFTMASK === 1'b0)
                     -> ev_read_out_a_port;
                  end // if of TEST1Alatched = 1
                  else 
                  begin
                    -> ev_read_out_a_port;
                  end // else of if TEST1Alatched = 1
                  end // else of if MEAlatched = X
                end // else of if RMA = X
          end // else of if TEST1Alatched = X
    end // if of MEAlatched != 0 & flaga_viol = 0
end // end of always block blk_readwrite_0



assign QA_temp = QA_local_tmp;

// Final Output Update 

always @( QA_temp )
begin : blk_output_0
     QA <= QA_temp;
end // end of always block blk_output_0



// Display the warning when TEST1A is 1.
always @ (TEST1A)
begin : blk_test1_0
  if (CLKA === 1'b1 && MEAlatched === 1'b1)
  begin
    QA_local_tmp = 160'bx; 
    flaga_read_ok = `False;
  end
  if ( TEST1A == 1'b1 && (LS === 1'b0))
  begin
    if( (MES_CNTRL =="ON" || MES_CNTRL =="WARN") && $realtime != 0 && mes_all_valid)
    begin
      $display("\n%m <<VIRL_MEM_WARNING: Tcc value in the RAM model is for TEST1A=1'b0,but input value is TEST1A=1'b1>>(time %0t)\n\n", $time);
    end
  end // if TEST1A = 1 
end // end of always block blk_test1_0


`ifdef VIRAGE_FAST_VERILOG
`else
// PORT B WE violation
always @(notif_web)           
begin : blk_notif_we_1
if (DFTMASK === 1'b0)
begin
    if ( WEB_old === 1'b0)
    begin
      flagb_viol = `True;
    end // if of WEB_old = 0
    flagb_we_ok = `False;
    checkSanityOnBport;
    if (^(ADRB_old) === 1'bx)
    begin
      corrupt_all_loc(`True);
    end 
    flagb_read_ok = `False;
    -> ev_read_out_b_port;
    QB_local_tmp = 160'bx;
  end // if of DFTMASK
end // end of always block blk_notif_we_1

// PORT B CLKB violation
always @(notif_clkb)
begin : blk_notif_clk_1
if (DFTMASK === 1'b0)
begin
  flagb_clk_valid = `False;
  MEA_chk = MEA_old;
  if ( EVENT_TCQ_A == 1'b1 && MEA_chk === 1'b1 )
  begin
    disable blk_readout_0.OUTPUT_a;
    flaga_read_ok = `False;
    -> ev_read_out_a_port;
  end 
  flagb_adr_ok = `False;
  flagb_we_ok  = `False;
     corrupt_all_loc(`True);
  flagb_read_ok = `False;     // irrespective of WE
  -> ev_read_out_b_port;
  end // if of dftmask = 0
end // end of always block blk_notif_clk_1

// PORT B ME violation
always @(notif_meb)           
begin : blk_notif_me_1
if (DFTMASK === 1'b0)
begin
  if (((WEBlatched === 1'b1)) && (EVENT_TCQ_A == 1'b1 || (tcqa_time == $realtime)))
  begin
    disable blk_readout_0.OUTPUT_a;
    flaga_read_ok = `False;
    -> ev_read_out_a_port;
  end // if of write
    flagb_viol = `True;
    flagb_read_ok = `False;                           
    -> ev_read_out_b_port;
    flagb_adr_ok = `False;
    corrupt_all_loc(`True);
end // if of DFTMASK 
end // end of always block blk_notif_me_1

// PORT B ADR violation
always @(notif_adrb)     
begin : blk_notif_addr_1
if (DFTMASK === 1'b0)
begin
   MEA_chk = MEA_old;
   if (MEA_chk === 1'b1 && ((WEBlatched === 1'b1)) && (EVENT_TCQ_A == 1'b1 || (tcqa_time == $realtime)))
    begin
      disable blk_readout_0.OUTPUT_a;
      flaga_read_ok = `False;
      -> ev_read_out_a_port;
    end // if of write
      flagb_viol = `True;
      flagb_read_ok = `False;                         
      -> ev_read_out_b_port;
      flagb_adr_ok = `False;
      corrupt_all_loc(`True);
end // if of DFTMASK 
end // end of always block blk_notif_addr_1

// PORT B D violation
always @(notif_db)     
begin : blk_notif_di_1
if (DFTMASK === 1'b0)
begin
    flagb_viol = `True;
    flagb_read_ok = `False;
    -> ev_read_out_b_port;
    flagb_d_ok = `False;
    checkSanityOnBport;
end // if of DFTMASK 
end // end of always block blk_notif_di_1
// PORT B BISTEB violation
always @(notif_bisteb or notif_tclkeb) 
begin : blk_notif_biste_1
if (DFTMASK === 1'b0)
begin
    flagb_read_ok = `False;
    -> ev_read_out_b_port;
    flagb_adr_ok  = `False;
    checkSanityOnBport;
end // if of DFTMASK 
end // end of always block blk_notif_biste_1

always @(notif_dftmask_b)
begin : blk_notif_dftmask_1
    corrupt_all_loc(`True);
    #0.001;
    flagb_read_ok = `False;
    -> ev_read_out_b_port;
end


//PORT B TEST1B violation
always @(notif_test1b)   
begin : blk_notif_test1_1
//  MEB_chk = MEB_old;
  if ( WEBlatched === 1'b0 )
  begin
    flagb_viol = `True;
    flagb_read_ok = `False;
    -> ev_read_out_b_port;
  end
  else if ( WEBlatched === 1'b1 )
  begin
    flagb_d_ok  = `False;
    checkSanityOnBport;
  end
end // end of always block blk_notif_test1_1

always @(notif_ls_b)
begin
  corrupt_all_loc(`True);
  flagb_read_ok = `False;
  -> ev_read_out_b_port;
end

//PORT B RMB violation
always @(notif_rmb)       
begin : blk_notif_rm_1
    flagb_viol = `True;
    flagb_read_ok = `False;
    -> ev_read_out_b_port;
    flagb_d_ok  = `False;
    checkSanityOnBport;
end // end of always block blk_notif_rm_1

//PORT B RME violation
always @(notif_rmeb)  
begin : blk_notif_rmen_1
    flagb_viol = `True;
    flagb_read_ok = `False;
    -> ev_read_out_b_port;
    flagb_d_ok  = `False;
    checkSanityOnBport;
end // end of always block blk_notif_rmen_1
`endif // endif of VIRAGE_FAST_VERILOG

// Simultaneous Clock Handling
`ifdef VIRAGE_FAST_VERILOG
always @(sim_check_B)
begin : blk_simultclock_1
`else
always @(notif_clkb_CLKA_rise_rise_rec or notif_clkb_TCLKA_rise_rise_rec)
begin : blk_simultclock_1
`endif // endif of VIRAGE_FAST_VERILOG
      if ( WEBlatched !== 1'b0 && WEA_old  !== 1'b0 )
      begin
        flaga_d_ok = `False;
        flagb_d_ok = `False;
        mem_core_array[ADRBlatched] = (((DBlatched ^ DA_old) & 160'bx) ^ DBlatched);
      end // if write enable is not disabled for both ports
      else if ( WEBlatched !== 1'b0)
      begin
        #0;
        flaga_viol = `True;
        flaga_read_ok = `False;
       if ( TEST1Alatched === 1'b0)
        -> ev_read_out_a_port;
      end // else if of WEBlatched != 0
      else 
      begin
        flagb_read_ok = `False;
       if ( TEST1Blatched === 1'b0)
        -> ev_read_out_b_port;
      end // else if of WEA_old  != 0
end // end of always block blk_simultclock_1


// reset for next cycle

always @(negedge CLKB)
begin : blk_intnegclock_1
  if ( CLKB !== 1'bx )
  begin
    #0.001;
    flagb_range_ok  = `True;
    flagb_read_ok = `True;
    flagb_rm_ok = `True;
    flagb_clk_valid = `True;
    flagb_adr_ok  = `True;
    flagb_we_ok   = `True;
    flagb_d_ok    = `True;
    flagb_viol    = `False;
  end // if of CLKB != X
  else
  begin
    flagb_clk_valid = `False;
    QB_local_tmp = 160'bx;
    corrupt_all_loc(`True);
    report_unknown("CLKB","TCLKEB","TCLKB");
  end // else of if CLKB != X
end // end of always block blk_intnegclock_1

// PORT B FUNCTIONALITY 


always @(posedge CLKB)
begin : blk_intposclock_1
  CLKB_T = $realtime;
  MEBlatched = MEB_old;
  WEBlatched = WEB_old;
  TEST1Blatched = TEST1B_old;
  ADRBlatched = ADRB_old;
  DBlatched = DB_old;
  if (DFTMASK === 1'b1 || (LSB_old === 1'b1 && MEBlatched !== 1'bx))
  begin
    MEBlatched = 1'b0;
  end
  if (LSB_old === 1'bX && MEBlatched !== 1'b0)
  begin
    report_unknown("LS","","");
    corrupt_all_loc(`True);
    QB_local_tmp = 160'bx;
  end
  else
  begin
    if (^(ADRBlatched) === 1'bx && MEBlatched !== 1'b0)
    begin
      report_unknown("ADRB","BISTEB","TADRB");
      if ( WEBlatched === 1'b1 )
      begin
        flagb_viol = `True;
      end // if of WEBlatched = 1
      else
      begin
        flagb_read_ok = `False;
      end
      `ifdef virage_ignore_read_addx
      if ((WEBlatched === 1'b1))
      begin
        flagb_adr_ok = `False;
        corrupt_all_loc(flagb_range_ok);
      end // if of write
      `else
        flagb_adr_ok = `False;
        corrupt_all_loc(flagb_range_ok);
      `endif // endif of virage_ignore_read_addx is true
      -> ev_RST_out_b_port;
    end // if of (^ADRBlatched) is 1'bx and MEBlatched != 0
    else if((ADRBlatched > 11'b11101111111) && (MEBlatched === 1'b1) && (WEBlatched === 1'b1) )
    begin
      if( (MES_CNTRL=="ON" || MES_CNTRL=="WARN")&& $realtime != 0 && mes_all_valid)
      begin
        $display("\n%m<<VIRL_MEM_WARNING:address is out of range>>(time %0t)\n RANGE: 0 to 1919\n", $time);
      end
      flagb_range_ok = `False;
    end // if of ADRBlatched out of range with MEBlatched = 1
    if (!flagb_clk_valid) 
    begin
      QB_local_tmp = 160'bx;
    end // if of flagb_clk_valid is NOT true
    else if ( CLKB === 1'bx )
    begin
      QB_local_tmp = 160'bx;
      corrupt_all_loc(flagb_range_ok);
      report_unknown("CLKB","TCLKEB","TCLKB");
    end // if of CLKB = X
    else if ( DFTMASK === 1'bx )
    begin
      uut.report_unknown("DFTMASK","","");
    end // if of DFTMASK = X
    else
    begin
      -> ev_RST_out_b_port;
    end // else of if CLKB = X
  end // else of if power pin unknown 
end // end of always block blk_intposclock_1
// PORT B READ-OUT

always @(ev_read_out_b_port)
begin : blk_readout_1
  #0;                // let CLOCK and NOTIFIER module execute first
  if (RMEB === 1'b1)
  begin
    if (RMB >= 3'b100)
    begin
      if( (MES_CNTRL =="ON" || MES_CNTRL =="WARN") && $realtime != 0 && mes_all_valid)
      begin
      $display("<<VIRL_MEM_WARNING:RMB = %b is not recommended value>> at time=%t; instance=%m (RAMS1H)",RMB,$realtime);
      end
    end
  end
  if (^RMB === 1'bx)
  begin
    flagb_rm_ok = `False;
  end // if of RMB is not valid
  if (flagb_adr_ok && flagb_read_ok && flagb_rm_ok)
  begin : OUTPUT_b
    if (WEBlatched === 1'b0)
    begin
      if (ADRBlatched <= 11'b11101111111)
      begin
          
          if (faultinj_en == 1)
          begin
            QB_local_tmp = mem_core_array[ADRBlatched]^mem_fault_array_XOR[ADRBlatched];
          end
          else
          begin
            QB_local_inj = mem_core_array[ADRBlatched] & mem_fault_array_sa0[ADRBlatched];
            QB_local_inj = QB_local_inj | mem_fault_array_sa1[ADRBlatched];
            QB_local_tmp = QB_local_inj;
          end
      end // if of ADRBlatched <= 11'b11101111111
    end // if of WEBlatched = 0
  end //if of flagb_adr_ok is true and flagb_read_ok is true and flagb_rm_ok is true
  else
  begin
    if (flagb_viol)
    begin
      if ((WEBlatched === 1'b0))
      begin
        QB_local_tmp = 160'bx;
      end  // if of read
    end // if of flagb_viol is true
    else
    begin
      QB_local_tmp = 160'bx;
    end // else of if flagb_viol is true
  end // else of if flagb_adr_ok is true and flagb_read_ok is true and flagb_rm_ok is true
  flagb_read_ok = `True;
end // end of always block blk_readout_1

// Handle Read/Write
always @(ev_RST_out_b_port)
begin : blk_readwrite_1
    if (MEBlatched !== 1'b0 && !flagb_viol)
    begin
      if (WEBlatched === 1'bx)
      begin
        flagb_we_ok = `False;
        flagb_read_ok = `False;
        report_unknown("WEB","BISTEB","TWEB");
      end // if of WEBlatched = X
      if ((^DBlatched === 1'bx))
      begin
        if (DBlatched === 160'bx)
        begin
          flagb_d_ok  = `False;
        end
        if (WEBlatched !== 1'b0)
        begin
          report_unknown("DB","BISTEB","TDB");
        end
      end
          if (TEST1Blatched === 1'bx)
          begin
            report_unknown("TEST1B","","");
            if ( WEBlatched == 1'b1 )
            begin
              corrupt_cur_loc(ADRBlatched);                             
            end // if of WEBlatched = 1
            else
            begin
              QB_local_tmp = 160'bx;
            end // else of if WEBlatched = 1
          end // if TEST1Blatched = X
          else
          begin
                if (^RMB === 1'bx)
                begin
                  if ( RMEB !== 1'bx )
                    report_unknown("RMB","","");
                  else
                    report_unknown("RMEB","","");
                  if ( WEBlatched == 1'b1 )
                  begin
                    corrupt_cur_loc(ADRBlatched);
                  end // if of WEBlatched = 1
                  else
                  begin
                    QB_local_tmp = 160'bx;
                  end // else of if WEBlatched = 1
                end // if of RMB = X
                else
                begin
                  if (MEBlatched !== 1'b1)
                  begin
                    flagb_we_ok = `False;       // don't know if cycle is On or Off
                  end // if of MEBlatched != 1 

                  if(ADRBlatched > 11'b11101111111) 
                  begin
                    if( (MES_CNTRL=="ON" || MES_CNTRL=="WARN") && $realtime != 0 && mes_all_valid)
                    begin
                      $display("\n%m<<VIRL_MEM_WARNING:address is out of range>>(time %0t)\n RANGE:0 to 1919\n", $time);
                    end
                    flagb_range_ok = `False;
                    if (WEBlatched === 1'b0)
                    begin
                      flagb_read_ok = `False;
                    end // if of flagb_read_ok
                  end // if of ADRBlatched out of range with MEBlatched = 1
                  if ( MEBlatched === 1'bx )
                  begin
                    report_unknown("MEB","BISTEB","TMEB");
                    `ifdef virage_ignore_read_addx
                    if (WEBlatched == 1'b1)
                    begin
                      corrupt_all_loc(flagb_range_ok);
                    end // if of WEBlatched = 1 
                    else
                    begin
                      QB_local_tmp = 160'bx;
                    end // else of if WEBlatched = 1
                    `else
                    if (WEBlatched == 1'b1)
                    begin
                      corrupt_all_loc(flagb_range_ok);
                    end // if of WEBlatched = 1
                    else
                    begin
                      QB_local_tmp = 160'bx;
                      corrupt_all_loc(flagb_range_ok);
                    end // else of if WEBlatched = 1
                    `endif
                  end // if of MEBlatched = X
                  else
                  begin
                      if (flagb_range_ok && flagb_we_ok && flagb_adr_ok && flagb_d_ok && (WEBlatched == 1'b1))
                      begin
                        
                        mem_core_array[ADRBlatched] = DBlatched;
                          if (!mes_all_valid)
                          begin
                            mes_all_valid = 1'b1;
                          end // if of mes_all_valid = 0
                      end // if of write
                      else
                      begin
                        checkSanityOnBport;
                      end // else of if write
                  if (TEST1Blatched === 1'b1)
                  begin
                     if (WEBlatched === 1'b0)
                     begin
                       flagb_read_ok = `False;
                       -> ev_read_out_b_port;
                       @(negedge CLKB);
                     end
                     if (DFTMASK === 1'b0)
                     -> ev_read_out_b_port;
                  end // if of TEST1Blatched = 1
                  else 
                  begin
                    -> ev_read_out_b_port;
                  end // else of if TEST1Blatched = 1
                  end // else of if MEBlatched = X
                end // else of if RMB = X
          end // else of if TEST1Blatched = X
    end // if of MEBlatched != 0 & flagb_viol = 0
end // end of always block blk_readwrite_1



assign QB_temp = QB_local_tmp;

// Final Output Update 

always @( QB_temp )
begin : blk_output_1
     QB <= QB_temp;
end // end of always block blk_output_1



// Display the warning when TEST1B is 1.
always @ (TEST1B)
begin : blk_test1_1
  if (CLKB === 1'b1 && MEBlatched === 1'b1)
  begin
    QB_local_tmp = 160'bx; 
    flagb_read_ok = `False;
  end
  if ( TEST1B == 1'b1 && (LS === 1'b0))
  begin
    if( (MES_CNTRL =="ON" || MES_CNTRL =="WARN") && $realtime != 0 && mes_all_valid)
    begin
      $display("\n%m <<VIRL_MEM_WARNING: Tcc value in the RAM model is for TEST1B=1'b0,but input value is TEST1B=1'b1>>(time %0t)\n\n", $time);
    end
  end // if TEST1B = 1 
end // end of always block blk_test1_1


endmodule
